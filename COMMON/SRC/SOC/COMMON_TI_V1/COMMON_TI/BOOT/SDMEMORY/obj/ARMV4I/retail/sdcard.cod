; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\COMMON_TI\BOOT\SDMEMORY\sdcard.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "


  00000			 AREA	 |.data|, DATA
	 COMMON	|Disk|, 0x38

	 COMMON	|fileio_ops|, 0x14

	 COMMON	|Request|, 0x60

	 COMMON	|pFile|, 0x4

	 COMMON	|File|, 0x224

	 COMMON	|MMCcmd|, 0x6c


  00000			 AREA	 |.bss|, NOINIT
|bFileIoInit| %	0x4
|bAlternateCommandMode| % 0x4
|?CurrentSpeed@?1??MMCSetTranSpeed@@9@9| % 0x4		; `MMCSetTranSpeed'::`2'::CurrentSpeed

  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
|CommandToResponse| DCB 0x0
	DCB	0x3
	DCB	0x2
	DCB	0x1
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x1
	DCB	0x3
	DCB	0x2
	DCB	0x2
	DCB	0x1
	DCB	0x1
	DCB	0x1
	DCB	0x0
	DCB	0x0
	DCB	0x1
	DCB	0x1
	DCB	0x1
	DCB	0x0
	DCB	0x1
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x1
	DCB	0x1
	DCB	0x1
	DCB	0x1
	DCB	0x1
	DCB	0x1
	DCB	0x1
	DCB	0x0
	DCB	0x1
	DCB	0x1
	DCB	0x1
	DCB	0x1
	DCB	0x1
	DCB	0x1
	DCB	0x1
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x1
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x1
	DCB	0x1
	%	3
|CommandToTransferClass| DCB 0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x2
	DCB	0x2
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x1
	DCB	0x1
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	%	3
|AlternateCommandToResponse| DCB 0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x1
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x1
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x1
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x1
	DCB	0x1
	DCB	0x0
	DCB	0x1
	DCB	0x1
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x1
	DCB	0x0
	DCB	0x0
	DCB	0x3
	DCB	0x1
	DCB	0x1
	DCB	0x1
	DCB	0x1
	DCB	0x1
	DCB	0x1
	DCB	0x1
	DCB	0x0
	DCB	0x0
	DCB	0x1
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	%	3
|AlternateCommandToTransferClass| DCB 0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x2
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	IMPORT	|SdhcControllerIstThread|
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\boot\sdmemory\sdcard.c

  00000			 AREA	 |.pdata|, PDATA
|$T45161| DCD	|$LN9@WaitForCom|
	DCD	0x40000801
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |WaitForCommandResult| PROC

; 84   : {

  00000		 |$LN9@WaitForCom|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M45158|
  00004	e1a04000	 mov         r4, r0
  00008		 |$LL2@WaitForCom|

; 85   :     SD_API_STATUS ResultCode = SD_API_STATUS_PENDING;
; 86   : 
; 87   :     while (ResultCode == SD_API_STATUS_PENDING)
; 88   :     {
; 89   :         ResultCode = SdhcControllerIstThread(pRequest);

  00008	e1a00004	 mov         r0, r4
  0000c	eb000000	 bl          SdhcControllerIstThread
  00010	e3500001	 cmp         r0, #1
  00014	0afffffb	 beq         |$LL2@WaitForCom|

; 90   :     }
; 91   : 
; 92   :     return ResultCode;
; 93   : }

  00018	e8bd4010	 ldmia       sp!, {r4, lr}
  0001c	e12fff1e	 bx          lr
  00020		 |$M45159|

			 ENDP  ; |WaitForCommandResult|

	EXPORT	|INTF_MMCSendCommand|
	IMPORT	|SdhcBusRequestHandler|

  00000			 AREA	 |.pdata|, PDATA
|$T45213| DCD	|$LN51@INTF_MMCSe|
	DCD	0x40006001
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |INTF_MMCSendCommand| PROC

; 114  : {

  00000		 |$LN51@INTF_MMCSe|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M45210|
  00004	e1a05000	 mov         r5, r0

; 115  :     // ignore init flag, init clocks are requested by card insert...
; 116  :     UNREFERENCED_PARAMETER(init);
; 117  : 
; 118  :     Request.CommandCode = pMMC_command->command;

  00008	e59f416c	 ldr         r4, [pc, #0x16C]
  0000c	e5d51004	 ldrb        r1, [r5, #4]

; 119  :     Request.CommandArgument = pMMC_command->argument;
; 120  :     Request.BlockSize = pMMC_command->block_len;
; 121  :     Request.NumBlocks = pMMC_command->num_blocks;
; 122  :     Request.HCParam = 0;
; 123  : 
; 124  :     if (bAlternateCommandMode)

  00010	e59f2160	 ldr         r2, [pc, #0x160]
  00014	e3a00000	 mov         r0, #0
  00018	e5c41014	 strb        r1, [r4, #0x14]
  0001c	e5953008	 ldr         r3, [r5, #8]
  00020	e5922000	 ldr         r2, [r2]
  00024	e5843018	 str         r3, [r4, #0x18]
  00028	e5953010	 ldr         r3, [r5, #0x10]
  0002c	e3520000	 cmp         r2, #0
  00030	e5843040	 str         r3, [r4, #0x40]
  00034	e595300c	 ldr         r3, [r5, #0xC]
  00038	e584303c	 str         r3, [r4, #0x3C]
  0003c	e5840044	 str         r0, [r4, #0x44]
  00040	0a000018	 beq         |$LN7@INTF_MMCSe|

; 125  :     {
; 126  :         Request.CommandResponse.ResponseType = CONVERT_RESPONSE_TYPE(AlternateCommandToResponse[Request.CommandCode]);

  00044	e59fe128	 ldr         lr, [pc, #0x128]
  00048	e28e3078	 add         r3, lr, #0x78
  0004c	e7d13003	 ldrb        r3, [r1, +r3]
  00050	e3530000	 cmp         r3, #0
  00054	0a000008	 beq         |$LN10@INTF_MMCSe|
  00058	e3530001	 cmp         r3, #1
  0005c	03a02001	 moveq       r2, #1
  00060	0a000006	 beq         |$LN43@INTF_MMCSe|
  00064	e3530002	 cmp         r3, #2
  00068	03a02003	 moveq       r2, #3
  0006c	0a000003	 beq         |$LN43@INTF_MMCSe|
  00070	e3530003	 cmp         r3, #3
  00074	03a02004	 moveq       r2, #4
  00078	0a000000	 beq         |$LN43@INTF_MMCSe|
  0007c		 |$LN10@INTF_MMCSe|
  0007c	e3a02000	 mov         r2, #0
  00080		 |$LN43@INTF_MMCSe|

; 127  :         Request.TransferClass = CONVERT_TC(AlternateCommandToTransferClass[Request.CommandCode]);

  00080	e28e30b4	 add         r3, lr, #0xB4
  00084		 |$LN48@INTF_MMCSe|
  00084	e7d13003	 ldrb        r3, [r1, +r3]
  00088	e584201c	 str         r2, [r4, #0x1C]
  0008c	e3530000	 cmp         r3, #0
  00090	03a03002	 moveq       r3, #2
  00094	0a000017	 beq         |$LN44@INTF_MMCSe|
  00098	e3530002	 cmp         r3, #2
  0009c	1a000014	 bne         |$LN30@INTF_MMCSe|
  000a0	e3a03000	 mov         r3, #0
  000a4	ea000013	 b           |$LN44@INTF_MMCSe|
  000a8		 |$LN7@INTF_MMCSe|

; 128  :     }
; 129  :     else
; 130  :     {
; 131  :         Request.CommandResponse.ResponseType = CONVERT_RESPONSE_TYPE(CommandToResponse[Request.CommandCode]);

  000a8	e59f00c4	 ldr         r0, [pc, #0xC4]
  000ac	e7d13000	 ldrb        r3, [r1, +r0]
  000b0	e3530000	 cmp         r3, #0
  000b4	0a00000b	 beq         |$LN22@INTF_MMCSe|
  000b8	e3530001	 cmp         r3, #1
  000bc	03a02001	 moveq       r2, #1

; 132  :         Request.TransferClass = CONVERT_TC(CommandToTransferClass[Request.CommandCode]);

  000c0	0280303c	 addeq       r3, r0, #0x3C
  000c4	0affffee	 beq         |$LN48@INTF_MMCSe|
  000c8	e3530002	 cmp         r3, #2
  000cc	03a02003	 moveq       r2, #3
  000d0	0280303c	 addeq       r3, r0, #0x3C
  000d4	0affffea	 beq         |$LN48@INTF_MMCSe|
  000d8	e3530003	 cmp         r3, #3
  000dc	03a02004	 moveq       r2, #4
  000e0	0280303c	 addeq       r3, r0, #0x3C
  000e4	0affffe6	 beq         |$LN48@INTF_MMCSe|
  000e8		 |$LN22@INTF_MMCSe|

; 128  :     }
; 129  :     else
; 130  :     {
; 131  :         Request.CommandResponse.ResponseType = CONVERT_RESPONSE_TYPE(CommandToResponse[Request.CommandCode]);

  000e8	e3a02000	 mov         r2, #0

; 132  :         Request.TransferClass = CONVERT_TC(CommandToTransferClass[Request.CommandCode]);

  000ec	e280303c	 add         r3, r0, #0x3C
  000f0	eaffffe3	 b           |$LN48@INTF_MMCSe|
  000f4		 |$LN30@INTF_MMCSe|
  000f4	e3a03001	 mov         r3, #1
  000f8		 |$LN44@INTF_MMCSe|
  000f8	e5843010	 str         r3, [r4, #0x10]

; 133  :     }
; 134  : 
; 135  :     // check for commands with R1b response
; 136  :     if (Request.CommandResponse.ResponseType == ResponseR1)

  000fc	e3520001	 cmp         r2, #1
  00100	1a000009	 bne         |$LN4@INTF_MMCSe|

; 137  :         if (Request.CommandCode == 12 || Request.CommandCode == 28 || Request.CommandCode == 29 || Request.CommandCode == 38)

  00104	e351000c	 cmp         r1, #0xC
  00108	0a000005	 beq         |$LN3@INTF_MMCSe|
  0010c	e351001c	 cmp         r1, #0x1C
  00110	0a000003	 beq         |$LN3@INTF_MMCSe|
  00114	e351001d	 cmp         r1, #0x1D
  00118	0a000001	 beq         |$LN3@INTF_MMCSe|
  0011c	e3510026	 cmp         r1, #0x26
  00120	1a000001	 bne         |$LN4@INTF_MMCSe|
  00124		 |$LN3@INTF_MMCSe|

; 138  :             Request.CommandResponse.ResponseType = ResponseR1b;

  00124	e3a03002	 mov         r3, #2
  00128	e584301c	 str         r3, [r4, #0x1C]
  0012c		 |$LN4@INTF_MMCSe|

; 139  :     
; 140  :     Request.pBlockBuffer = pMMC_command->pBuffer;

  0012c	e5953034	 ldr         r3, [r5, #0x34]

; 141  : 
; 142  :     // send command
; 143  :     if (!SD_API_SUCCESS(SdhcBusRequestHandler(&Request)))

  00130	e1a00004	 mov         r0, r4
  00134	e5843048	 str         r3, [r4, #0x48]
  00138	eb000000	 bl          SdhcBusRequestHandler
  0013c	e3500000	 cmp         r0, #0
  00140	5a000002	 bpl         |$LL35@INTF_MMCSe|
  00144		 |$LN47@INTF_MMCSe|

; 144  :         return 1;

  00144	e3a00001	 mov         r0, #1

; 151  : }

  00148	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  0014c	e12fff1e	 bx          lr

; 145  : 
; 146  :     // wait for command done, check result code
; 147  :     if (!SD_API_SUCCESS(WaitForCommandResult(&Request)))

  00150		 |$LL35@INTF_MMCSe|
  00150	e1a00004	 mov         r0, r4
  00154	eb000000	 bl          SdhcControllerIstThread
  00158	e3500001	 cmp         r0, #1
  0015c	0afffffb	 beq         |$LL35@INTF_MMCSe|
  00160	e3500000	 cmp         r0, #0

; 148  :         return 1;

  00164	4afffff6	 bmi         |$LN47@INTF_MMCSe|

; 149  : 
; 150  :     return 0;

  00168	e3a00000	 mov         r0, #0

; 151  : }

  0016c	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00170	e12fff1e	 bx          lr
  00174		 |$LN52@INTF_MMCSe|
  00174		 |$LN53@INTF_MMCSe|
  00174	00000000	 DCD         |CommandToResponse|
  00178		 |$LN54@INTF_MMCSe|
  00178	00000000	 DCD         |bAlternateCommandMode|
  0017c		 |$LN55@INTF_MMCSe|
  0017c	00000000	 DCD         |Request|
  00180		 |$M45211|

			 ENDP  ; |INTF_MMCSendCommand|

	EXPORT	|INTF_MMCReadResponse|
	IMPORT	|memset|

  00000			 AREA	 |.pdata|, PDATA
|$T45246| DCD	|$LN56@INTF_MMCRe|
	DCD	0x4001a602
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |INTF_MMCReadResponse| PROC

; 154  : {

  00000		 |$LN56@INTF_MMCRe|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd00c	 sub         sp, sp, #0xC
  00008		 |$M45243|
  00008	e1a0b000	 mov         r11, r0
  0000c	e58db000	 str         r11, [sp]

; 155  :     int i;
; 156  : 
; 157  :     // change response byte order from SDHC to match format expected by MMC/bootloader driver
; 158  :     //  response[0] = Request.CommandResponse.ResponseBuffer[MSB]
; 159  :     //  response[1] = Request.CommandResponse.ResponseBuffer[MSB-1]
; 160  :     //  response[2] = Request.CommandResponse.ResponseBuffer[MSB-2]
; 161  :     //  response[1] = Request.CommandResponse.ResponseBuffer[MSB-3]
; 162  :     //  etc. 
; 163  : 
; 164  :     memset(pMMC_command->response, 0, 17);

  00010	e3a02011	 mov         r2, #0x11
  00014	e3a01000	 mov         r1, #0
  00018	e28b0020	 add         r0, r11, #0x20
  0001c	eb000000	 bl          memset

; 165  : 
; 166  :     if (NoResponse != Request.CommandResponse.ResponseType) 

  00020	e59f6660	 ldr         r6, [pc, #0x660]
  00024	e596301c	 ldr         r3, [r6, #0x1C]
  00028	e3530000	 cmp         r3, #0
  0002c	0a000011	 beq         |$LN27@INTF_MMCRe|

; 167  :     {
; 168  :         if (ResponseR2 == Request.CommandResponse.ResponseType)

  00030	e3530003	 cmp         r3, #3

; 169  :         {
; 170  :             // 17 byte response
; 171  :             for (i = 0; i < 17; i++)

  00034	e3a01000	 mov         r1, #0
  00038	1a000007	 bne         |$LN34@INTF_MMCRe|
  0003c	e2860030	 add         r0, r6, #0x30
  00040		 |$LL33@INTF_MMCRe|

; 172  :             {
; 173  :                 pMMC_command->response[i] = Request.CommandResponse.ResponseBuffer[16 - i];

  00040	e4502001	 ldrb        r2, [r0], #-1
  00044	e081300b	 add         r3, r1, r11
  00048	e2811001	 add         r1, r1, #1
  0004c	e3510011	 cmp         r1, #0x11
  00050	e5c32020	 strb        r2, [r3, #0x20]
  00054	bafffff9	 blt         |$LL33@INTF_MMCRe|

; 174  :             }
; 175  :         }
; 176  :         else

  00058	ea000006	 b           |$LN27@INTF_MMCRe|
  0005c		 |$LN34@INTF_MMCRe|

; 177  :         {
; 178  :             // 6 byte response
; 179  :             for (i = 0; i < 6; i++)

  0005c	e2860025	 add         r0, r6, #0x25
  00060		 |$LL29@INTF_MMCRe|

; 180  :             {
; 181  :                 pMMC_command->response[i] = Request.CommandResponse.ResponseBuffer[5 - i];

  00060	e4502001	 ldrb        r2, [r0], #-1
  00064	e081300b	 add         r3, r1, r11
  00068	e2811001	 add         r1, r1, #1
  0006c	e3510006	 cmp         r1, #6
  00070	e5c32020	 strb        r2, [r3, #0x20]
  00074	bafffff9	 blt         |$LL29@INTF_MMCRe|
  00078		 |$LN27@INTF_MMCRe|

; 182  :             }
; 183  :         }
; 184  :     }
; 185  : 
; 186  :     // for some commands parse the response
; 187  :     if (pMMC_command->command == SEND_CSD)

  00078	e3a02c0f	 mov         r2, #0xF, 24
  0007c	e5db3004	 ldrb        r3, [r11, #4]
  00080	e38240ff	 orr         r4, r2, #0xFF
  00084	e3e02c0f	 mvn         r2, #0xF, 24
  00088	e22270ff	 eor         r7, r2, #0xFF
  0008c	e58d7008	 str         r7, [sp, #8]
  00090	e3a08000	 mov         r8, #0
  00094	e58d4004	 str         r4, [sp, #4]
  00098	e3530009	 cmp         r3, #9
  0009c	1a000105	 bne         |$LN21@INTF_MMCRe|

; 188  :     {
; 189  :         if (pMMC_command->card_type == CARDTYPE_SD || pMMC_command->card_type == CARDTYPE_SDHC)

  000a0	e59b9000	 ldr         r9, [r11]
  000a4	e3590002	 cmp         r9, #2
  000a8	0a000078	 beq         |$LN24@INTF_MMCRe|
  000ac	e3590003	 cmp         r9, #3
  000b0	0a000076	 beq         |$LN24@INTF_MMCRe|

; 236  :         }
; 237  :         else
; 238  :         {
; 239  :             pMMC_command->csd.mmc_csd.csd_struct = (pMMC_command->response[1] >> 6) & 0x3;
; 240  :             pMMC_command->csd.mmc_csd.spec_vers = (pMMC_command->response[1] >> 2) & 0xF;
; 241  :             pMMC_command->csd.mmc_csd.tacc = pMMC_command->response[2];
; 242  :             pMMC_command->csd.mmc_csd.nsac = pMMC_command->response[3];
; 243  :             pMMC_command->csd.mmc_csd.tr_speed = pMMC_command->response[4];
; 244  :             pMMC_command->csd.mmc_csd.ccc = (pMMC_command->response[5] << 4) | ((pMMC_command->response[6] >> 4) & 0xF);
; 245  :             pMMC_command->csd.mmc_csd.rd_bl_len = pMMC_command->response[6] & 0xF;
; 246  :             pMMC_command->csd.mmc_csd.c_size = ((pMMC_command->response[7] & 0x3)<<10) | (pMMC_command->response[8]<<2) | ((pMMC_command->response[9]>>6)  & 0x3);
; 247  :             pMMC_command->csd.mmc_csd.rd_bl_part = (pMMC_command->response[7] >> 7) & 0x1;
; 248  :             pMMC_command->csd.mmc_csd.wr_bl_msalign = (pMMC_command->response[7] >> 6) & 0x1;
; 249  :             pMMC_command->csd.mmc_csd.dsr_imp = (pMMC_command->response[7] >> 5) & 0x1;
; 250  :             pMMC_command->csd.mmc_csd.vdd_r_min = (pMMC_command->response[9] >> 3) & 0x7;
; 251  :             pMMC_command->csd.mmc_csd.vdd_r_max = pMMC_command->response[9] & 0x7;
; 252  :             pMMC_command->csd.mmc_csd.vdd_w_min = (pMMC_command->response[10] >> 5) & 0x7;
; 253  :             pMMC_command->csd.mmc_csd.vdd_w_max = (pMMC_command->response[10] >> 2) & 0x7;
; 254  :             pMMC_command->csd.mmc_csd.c_size_mult = (pMMC_command->response[10] & 0x3) << 1 | ((pMMC_command->response[11] >> 7) & 0x1);

  000b4	e5db502b	 ldrb        r5, [r11, #0x2B]

; 255  :             pMMC_command->csd.mmc_csd.sector_size = (pMMC_command->response[11] >> 2) & 0x1F;
; 256  :             pMMC_command->csd.mmc_csd.erase_grp_size = ((pMMC_command->response[11] & 0x3) << 3) | ((pMMC_command->response[12] >> 5) & 0x7);

  000b8	e5db002c	 ldrb        r0, [r11, #0x2C]
  000bc	e3e01b3f	 mvn         r1, #0x3F, 22

; 257  :             pMMC_command->csd.mmc_csd.wp_grp_size = pMMC_command->response[12] & 0x1F;
; 258  :             pMMC_command->csd.mmc_csd.wp_grp_en = (pMMC_command->response[13] >> 7) & 0x1;

  000c0	e2052003	 and         r2, r5, #3
  000c4	e200301f	 and         r3, r0, #0x1F
  000c8	e221101f	 eor         r1, r1, #0x1F
  000cc	e1822103	 orr         r2, r2, r3, lsl #2
  000d0	e0003001	 and         r3, r0, r1
  000d4	e5db402a	 ldrb        r4, [r11, #0x2A]
  000d8	e1832402	 orr         r2, r3, r2, lsl #8
  000dc	e5db6027	 ldrb        r6, [r11, #0x27]
  000e0	e5db1028	 ldrb        r1, [r11, #0x28]
  000e4	e205307c	 and         r3, r5, #0x7C
  000e8	e1832102	 orr         r2, r3, r2, lsl #2
  000ec	e2043003	 and         r3, r4, #3
  000f0	e5db8029	 ldrb        r8, [r11, #0x29]
  000f4	e1822003	 orr         r2, r2, r3
  000f8	e3a0033f	 mov         r0, #0x3F, 6
  000fc	e181e406	 orr         lr, r1, r6, lsl #8
  00100	e204301c	 and         r3, r4, #0x1C
  00104	e2061020	 and         r1, r6, #0x20
  00108	e3800d0e	 orr         r0, r0, #0xE, 26
  0010c	e1834302	 orr         r4, r3, r2, lsl #6
  00110	e181140e	 orr         r1, r1, lr, lsl #8
  00114	e0053000	 and         r3, r5, r0
  00118	e3c8e014	 bic         lr, r8, #0x14
  0011c	e2065040	 and         r5, r6, #0x40
  00120	e186628e	 orr         r6, r6, lr, lsl #5
  00124	e59de000	 ldr         lr, [sp]
  00128	e5db7026	 ldrb        r7, [r11, #0x26]
  0012c	e1834104	 orr         r4, r3, r4, lsl #2
  00130	e5de3029	 ldrb        r3, [lr, #0x29]
  00134	e59bb058	 ldr         r11, [r11, #0x58]
  00138	e207200f	 and         r2, r7, #0xF
  0013c	e2033007	 and         r3, r3, #7
  00140	e1827101	 orr         r7, r2, r1, lsl #2
  00144	e59e105c	 ldr         r1, [lr, #0x5C]
  00148	e59d9000	 ldr         r9, [sp]
  0014c	e183e104	 orr         lr, r3, r4, lsl #2
  00150	e59d3000	 ldr         r3, [sp]
  00154	e20b0701	 and         r0, r11, #1, 14
  00158	e3e0b101	 mvn         r11, #1, 2
  0015c	e599a050	 ldr         r10, [r9, #0x50]
  00160	e001100b	 and         r1, r1, r11
  00164	e5d3b021	 ldrb        r11, [r3, #0x21]
  00168	e1855087	 orr         r5, r5, r7, lsl #1
  0016c	e59d7000	 ldr         r7, [sp]
  00170	e3a034ff	 mov         r3, #0xFF, 8
  00174	e1806486	 orr         r6, r0, r6, lsl #9
  00178	e38308f5	 orr         r0, r3, #0xF5, 16
  0017c	e5d7302a	 ldrb        r3, [r7, #0x2A]
  00180	e18a432b	 orr         r4, r10, r11, lsr #6
  00184	e1a0800a	 mov         r8, r10
  00188	e5d7a02d	 ldrb        r10, [r7, #0x2D]
  0018c	e3a02103	 mov         r2, #3, 2
  00190	e38220e0	 orr         r2, r2, #0xE0
  00194	e0033002	 and         r3, r3, r2
  00198	e1812b8a	 orr         r2, r1, r10, lsl #23
  0019c	e183110e	 orr         r1, r3, lr, lsl #2
  001a0	e5d99025	 ldrb        r9, [r9, #0x25]
  001a4	e2023103	 and         r3, r2, #3, 2
  001a8	e0060000	 and         r0, r6, r0
  001ac	e1836081	 orr         r6, r3, r1, lsl #1
  001b0	e3c8e003	 bic         lr, r8, #3
  001b4	e1a03007	 mov         r3, r7
  001b8	e024400b	 eor         r4, r4, r11
  001bc	e5d37022	 ldrb        r7, [r3, #0x22]
  001c0	e5d38023	 ldrb        r8, [r3, #0x23]
  001c4	e18ee32b	 orr         lr, lr, r11, lsr #6
  001c8	e1a0b003	 mov         r11, r3
  001cc	e1895385	 orr         r5, r9, r5, lsl #7
  001d0	e5d39024	 ldrb        r9, [r3, #0x24]
  001d4	e5db3026	 ldrb        r3, [r11, #0x26]
  001d8	e204103c	 and         r1, r4, #0x3C
  001dc	e1800205	 orr         r0, r0, r5, lsl #4
  001e0	e1a02803	 mov         r2, r3, lsl #16
  001e4	e5db3029	 ldrb        r3, [r11, #0x29]
  001e8	e02e1001	 eor         r1, lr, r1
  001ec	e1802a22	 orr         r2, r0, r2, lsr #20
  001f0	e1a03d03	 mov         r3, r3, lsl #26
  001f4	e1863ea3	 orr         r3, r6, r3, lsr #29

; 259  :             pMMC_command->csd.mmc_csd.default_ecc = (pMMC_command->response[13] >> 5) & 0x3;
; 260  :             pMMC_command->csd.mmc_csd.r2w_factor = (pMMC_command->response[13] >> 2) & 0x7;
; 261  :             pMMC_command->csd.mmc_csd.wr_blk_len = ((pMMC_command->response[13] & 0x3) << 2) | ((pMMC_command->response[14] >> 6) & 0x3);
; 262  :             pMMC_command->csd.mmc_csd.wr_blk_part = (pMMC_command->response[14] >> 5) & 0x1;
; 263  :             pMMC_command->csd.mmc_csd.file_fmt_grp = (pMMC_command->response[15] >> 7) & 0x1;

  001f8	e5db502f	 ldrb        r5, [r11, #0x2F]
  001fc	e58b305c	 str         r3, [r11, #0x5C]
  00200	e58b2058	 str         r2, [r11, #0x58]

; 264  :             pMMC_command->csd.mmc_csd.copy = (pMMC_command->response[15] >> 6) & 0x1;
; 265  :             pMMC_command->csd.mmc_csd.perm_wr_prot = (pMMC_command->response[15] >> 5) & 0x1;
; 266  :             pMMC_command->csd.mmc_csd.tmp_wr_prot = (pMMC_command->response[15] >> 4) & 0x1;
; 267  :             pMMC_command->csd.mmc_csd.file_fmt = (pMMC_command->response[15] >> 2) & 0x3;
; 268  :             pMMC_command->csd.mmc_csd.ecc = pMMC_command->response[15] & 0x3;

  00204	e2052003	 and         r2, r5, #3
  00208	e205300c	 and         r3, r5, #0xC
  0020c	e1832202	 orr         r2, r3, r2, lsl #4
  00210	e2053010	 and         r3, r5, #0x10
  00214	e1832182	 orr         r2, r3, r2, lsl #3
  00218	e2053020	 and         r3, r5, #0x20
  0021c	e58b1050	 str         r1, [r11, #0x50]
  00220	e1833102	 orr         r3, r3, r2, lsl #2
  00224	e5db602e	 ldrb        r6, [r11, #0x2E]
  00228	e20a1003	 and         r1, r10, #3
  0022c	e1832001	 orr         r2, r3, r1
  00230	e2053040	 and         r3, r5, #0x40
  00234	e59f4458	 ldr         r4, [pc, #0x458]
  00238	e59be060	 ldr         lr, [r11, #0x60]
  0023c	e1831102	 orr         r1, r3, r2, lsl #2
  00240	e2063020	 and         r3, r6, #0x20
  00244	e1a0222a	 mov         r2, r10, lsr #4
  00248	e1830081	 orr         r0, r3, r1, lsl #1
  0024c	e0063004	 and         r3, r6, r4
  00250	e3ce1b01	 bic         r1, lr, #1, 22
  00254	e2022006	 and         r2, r2, #6
  00258	e3a0e000	 mov         lr, #0
  0025c	e1822003	 orr         r2, r2, r3
  00260	e24e3bff	 sub         r3, lr, #0xFF, 22
  00264	e1a00200	 mov         r0, r0, lsl #4
  00268	e1811185	 orr         r1, r1, r5, lsl #3
  0026c	e0013003	 and         r3, r1, r3
  00270	e18020a2	 orr         r2, r0, r2, lsr #1
  00274	e1822003	 orr         r2, r2, r3
  00278	e20a301c	 and         r3, r10, #0x1C
  0027c	e1823003	 orr         r3, r2, r3
  00280	e5cb7054	 strb        r7, [r11, #0x54]
  00284	e5cb8055	 strb        r8, [r11, #0x55]
  00288	e5cb9056	 strb        r9, [r11, #0x56]

; 269  :             pMMC_command->csd.mmc_csd.crc = 0;
; 270  :             pMMC_command->crc = 0;

  0028c	ea000081	 b           |$LN50@INTF_MMCRe|
  00290		 |$LN24@INTF_MMCRe|

; 190  :         {
; 191  :             pMMC_command->csd.sd_csd.sdcsd_struct = (pMMC_command->response[1] >> 6) & 0x3;
; 192  :             pMMC_command->csd.sd_csd.sdtacc = pMMC_command->response[2];
; 193  :             pMMC_command->csd.sd_csd.sdnsac = pMMC_command->response[3];
; 194  :             pMMC_command->csd.sd_csd.sdtr_speed = pMMC_command->response[4];
; 195  :             pMMC_command->csd.sd_csd.sdccc = (pMMC_command->response[5] << 4) | ((pMMC_command->response[6] >> 4) & 0xF);

  00290	e5db4026	 ldrb        r4, [r11, #0x26]

; 196  :             pMMC_command->csd.sd_csd.sdrd_bl_len = pMMC_command->response[6] & 0xF;
; 197  :             pMMC_command->csd.sd_csd.sdrd_bl_part = (pMMC_command->response[7] >> 7) & 0x1;

  00294	e5dba027	 ldrb        r10, [r11, #0x27]

; 198  :             pMMC_command->csd.sd_csd.sdwr_bl_msalign = (pMMC_command->response[7] >> 6) & 0x1;
; 199  :             pMMC_command->csd.sd_csd.sddsr_imp = (pMMC_command->response[7] >> 5) & 0x1;

  00298	e3e01c05	 mvn         r1, #5, 24
  0029c	e204200f	 and         r2, r4, #0xF
  002a0	e20a3020	 and         r3, r10, #0x20
  002a4	e1822103	 orr         r2, r2, r3, lsl #2
  002a8	e20a3040	 and         r3, r10, #0x40
  002ac	e5db0025	 ldrb        r0, [r11, #0x25]
  002b0	e221107f	 eor         r1, r1, #0x7F
  002b4	e183e082	 orr         lr, r3, r2, lsl #1
  002b8	e00a3001	 and         r3, r10, r1
  002bc	e183110e	 orr         r1, r3, lr, lsl #2
  002c0	e59d3004	 ldr         r3, [sp, #4]
  002c4	e1a00200	 mov         r0, r0, lsl #4
  002c8	e59b8058	 ldr         r8, [r11, #0x58]
  002cc	e59b7050	 ldr         r7, [r11, #0x50]
  002d0	e1802224	 orr         r2, r0, r4, lsr #4
  002d4	e3a004ff	 mov         r0, #0xFF, 8
  002d8	e0023003	 and         r3, r2, r3
  002dc	e5db6021	 ldrb        r6, [r11, #0x21]
  002e0	e380073d	 orr         r0, r0, #0x3D, 14
  002e4	e1831481	 orr         r1, r3, r1, lsl #9
  002e8	e5dbe022	 ldrb        lr, [r11, #0x22]
  002ec	e5db4023	 ldrb        r4, [r11, #0x23]
  002f0	e5db5024	 ldrb        r5, [r11, #0x24]
  002f4	e0083000	 and         r3, r8, r0
  002f8	e3c72003	 bic         r2, r7, #3
  002fc	e1817003	 orr         r7, r1, r3
  00300	e1823326	 orr         r3, r2, r6, lsr #6
  00304	e58b3050	 str         r3, [r11, #0x50]
  00308	e58b7058	 str         r7, [r11, #0x58]
  0030c	e5cbe054	 strb        lr, [r11, #0x54]
  00310	e5cb4055	 strb        r4, [r11, #0x55]
  00314	e5cb5056	 strb        r5, [r11, #0x56]

; 200  :             if (pMMC_command->card_type == CARDTYPE_SDHC)

  00318	e3590003	 cmp         r9, #3
  0031c	1a00000c	 bne         |$LN23@INTF_MMCRe|

; 201  :             {
; 202  :                 pMMC_command->csd.sd_csd.sdhcc_size = ((pMMC_command->response[8] & 0x3f) << 16) |
; 203  :                     (pMMC_command->response[9] << 8) | (pMMC_command->response[10]);

  00320	e5db3028	 ldrb        r3, [r11, #0x28]
  00324	e5db2029	 ldrb        r2, [r11, #0x29]
  00328	e5db002a	 ldrb        r0, [r11, #0x2A]

; 204  : 
; 205  :                 pMMC_command->csd.sd_csd.sdvdd_r_min = 0;
; 206  :                 pMMC_command->csd.sd_csd.sdvdd_r_max = 0;
; 207  :                 pMMC_command->csd.sd_csd.sdvdd_w_min = 0;
; 208  :                 pMMC_command->csd.sd_csd.sdvdd_w_max = 0;
; 209  :                 pMMC_command->csd.sd_csd.sdc_size_mult = 0;

  0032c	e59b105c	 ldr         r1, [r11, #0x5C]
  00330	e203303f	 and         r3, r3, #0x3F
  00334	e3e0ec7f	 mvn         lr, #0x7F, 24
  00338	e1823403	 orr         r3, r2, r3, lsl #8
  0033c	e22e20ff	 eor         r2, lr, #0xFF
  00340	e0012002	 and         r2, r1, r2
  00344	e1803403	 orr         r3, r0, r3, lsl #8
  00348	e58b205c	 str         r2, [r11, #0x5C]
  0034c	e58b3068	 str         r3, [r11, #0x68]

; 210  :             }
; 211  :             else

  00350	ea00001d	 b           |$LN22@INTF_MMCRe|
  00354		 |$LN23@INTF_MMCRe|

; 212  :             {
; 213  :                 pMMC_command->csd.sd_csd.sdc_size = ((pMMC_command->response[7] & 0x3)<<10) |
; 214  :                     (pMMC_command->response[8]<<2) | ((pMMC_command->response[9]>>6)  & 0x3);
; 215  :                 pMMC_command->csd.sd_csd.sdvdd_r_min = (pMMC_command->response[9] >> 3) & 0x7;
; 216  :                 pMMC_command->csd.sd_csd.sdvdd_r_max = pMMC_command->response[9] & 0x7;
; 217  :                 pMMC_command->csd.sd_csd.sdvdd_w_min = (pMMC_command->response[9] >> 5) & 0x7;
; 218  :                 pMMC_command->csd.sd_csd.sdvdd_w_max = (pMMC_command->response[10] >> 2) & 0x7;

  00354	e5db302a	 ldrb        r3, [r11, #0x2A]
  00358	e5db5029	 ldrb        r5, [r11, #0x29]

; 219  :                 pMMC_command->csd.sd_csd.sdc_size_mult = (pMMC_command->response[10] & 0x3) << 1 |
; 220  :                     ((pMMC_command->response[11] >> 7) & 0x1);

  0035c	e59b005c	 ldr         r0, [r11, #0x5C]
  00360	e2032003	 and         r2, r3, #3
  00364	e203301c	 and         r3, r3, #0x1C
  00368	e5dbe02b	 ldrb        lr, [r11, #0x2B]
  0036c	e1832302	 orr         r2, r3, r2, lsl #6
  00370	e3e01c3f	 mvn         r1, #0x3F, 24
  00374	e2053007	 and         r3, r5, #7
  00378	e221101f	 eor         r1, r1, #0x1F
  0037c	e1832202	 orr         r2, r3, r2, lsl #4
  00380	e3c00a07	 bic         r0, r0, #7, 20
  00384	e0053001	 and         r3, r5, r1
  00388	e180028e	 orr         r0, r0, lr, lsl #5
  0038c	e183e102	 orr         lr, r3, r2, lsl #2
  00390	e59d3008	 ldr         r3, [sp, #8]
  00394	e5db4028	 ldrb        r4, [r11, #0x28]
  00398	e3e064ff	 mvn         r6, #0xFF, 8
  0039c	e0003003	 and         r3, r0, r3
  003a0	e184440a	 orr         r4, r4, r10, lsl #8
  003a4	e3c5203f	 bic         r2, r5, #0x3F
  003a8	e183008e	 orr         r0, r3, lr, lsl #1
  003ac	e226160f	 eor         r1, r6, #0xF, 12
  003b0	e182e404	 orr         lr, r2, r4, lsl #8
  003b4	e0072001	 and         r2, r7, r1
  003b8	e1a03d05	 mov         r3, r5, lsl #26
  003bc	e182270e	 orr         r2, r2, lr, lsl #14
  003c0	e1803ea3	 orr         r3, r0, r3, lsr #29
  003c4	e58b2058	 str         r2, [r11, #0x58]
  003c8	e58b305c	 str         r3, [r11, #0x5C]
  003cc		 |$LN22@INTF_MMCRe|

; 221  :             }
; 222  :             pMMC_command->csd.sd_csd.sderase_bk_en = (pMMC_command->response[11] >> 6) & 0x1;
; 223  :             pMMC_command->csd.sd_csd.sdsector_size = ((pMMC_command->response[11] << 1) & 0x7E) | ((pMMC_command->response[12] >> 7) & 0x1);
; 224  :             pMMC_command->csd.sd_csd.sderase_grp_size = pMMC_command->response[12] & 0x7F;
; 225  :             pMMC_command->csd.sd_csd.sdwp_grp_en = (pMMC_command->response[13] >> 7) & 0x1;
; 226  :             pMMC_command->csd.sd_csd.sdr2w_factor = (pMMC_command->response[13] >> 2) & 0x7;
; 227  :             pMMC_command->csd.sd_csd.sdwr_blk_len = ((pMMC_command->response[13] & 0x3) << 2) | ((pMMC_command->response[14] >> 6) & 0x3);
; 228  :             pMMC_command->csd.sd_csd.sdwr_blk_part = (pMMC_command->response[14] >> 5) & 0x1;
; 229  :             pMMC_command->csd.sd_csd.sdfile_fmt_grp = (pMMC_command->response[15] >> 7) & 0x1;

  003cc	e5db502f	 ldrb        r5, [r11, #0x2F]
  003d0	e5dbe02b	 ldrb        lr, [r11, #0x2B]

; 230  :             pMMC_command->csd.sd_csd.sdcopy = (pMMC_command->response[15] >> 6) & 0x1;
; 231  :             pMMC_command->csd.sd_csd.sdperm_wr_prot = (pMMC_command->response[15] >> 5) & 0x1;
; 232  :             pMMC_command->csd.sd_csd.sdtmp_wr_prot = (pMMC_command->response[15] >> 4) & 0x1;
; 233  :             pMMC_command->csd.sd_csd.sdfile_fmt = (pMMC_command->response[15] >> 2) & 0x3;

  003d4	e3e01c1f	 mvn         r1, #0x1F, 24
  003d8	e205200c	 and         r2, r5, #0xC
  003dc	e2053010	 and         r3, r5, #0x10
  003e0	e1832182	 orr         r2, r3, r2, lsl #3
  003e4	e2053020	 and         r3, r5, #0x20
  003e8	e1832102	 orr         r2, r3, r2, lsl #2
  003ec	e2053040	 and         r3, r5, #0x40
  003f0	e5db602d	 ldrb        r6, [r11, #0x2D]
  003f4	e5db802e	 ldrb        r8, [r11, #0x2E]
  003f8	e5db402c	 ldrb        r4, [r11, #0x2C]
  003fc	e221107f	 eor         r1, r1, #0x7F
  00400	e1832102	 orr         r2, r3, r2, lsl #2
  00404	e0053001	 and         r3, r5, r1
  00408	e1832102	 orr         r2, r3, r2, lsl #2
  0040c	e20ee03f	 and         lr, lr, #0x3F
  00410	e2083020	 and         r3, r8, #0x20
  00414	e2060003	 and         r0, r6, #3
  00418	e3c6707f	 bic         r7, r6, #0x7F
  0041c	e204507f	 and         r5, r4, #0x7F
  00420	e184640e	 orr         r6, r4, lr, lsl #8
  00424	e1834202	 orr         r4, r3, r2, lsl #4
  00428	e59d3000	 ldr         r3, [sp]
  0042c	e59fb25c	 ldr         r11, [pc, #0x25C]
  00430	e3e099ff	 mvn         r9, #0xFF, 18
  00434	e1a01280	 mov         r1, r0, lsl #5
  00438	e593a05c	 ldr         r10, [r3, #0x5C]
  0043c	e229e07f	 eor         lr, r9, #0x7F
  00440	e5939060	 ldr         r9, [r3, #0x60]
  00444	e18101a8	 orr         r0, r1, r8, lsr #3
  00448	e000300b	 and         r3, r0, r11
  0044c	e59db000	 ldr         r11, [sp]
  00450	e1830104	 orr         r0, r3, r4, lsl #2
  00454	e1871005	 orr         r1, r7, r5
  00458	e5db302b	 ldrb        r3, [r11, #0x2B]
  0045c	e006200e	 and         r2, r6, lr
  00460	e182e701	 orr         lr, r2, r1, lsl #14
  00464	e2032040	 and         r2, r3, #0x40
  00468	e5db302d	 ldrb        r3, [r11, #0x2D]
  0046c	e59f8218	 ldr         r8, [pc, #0x218]
  00470	e3e05a7e	 mvn         r5, #0x7E, 20
  00474	e1a03d83	 mov         r3, r3, lsl #27
  00478	e18ee002	 orr         lr, lr, r2
  0047c	e22510ff	 eor         r1, r5, #0xFF
  00480	e00a2008	 and         r2, r10, r8
  00484	e1800ea3	 orr         r0, r0, r3, lsr #29
  00488	e0093001	 and         r3, r9, r1
  0048c	e182248e	 orr         r2, r2, lr, lsl #9
  00490	e1803003	 orr         r3, r0, r3
  00494	e58b205c	 str         r2, [r11, #0x5C]
  00498		 |$LN50@INTF_MMCRe|

; 234  :             pMMC_command->csd.sd_csd.sdcrc = 0;  //no computed crc provided

  00498	e3a08000	 mov         r8, #0
  0049c	e59d7008	 ldr         r7, [sp, #8]
  004a0	e59d4004	 ldr         r4, [sp, #4]
  004a4	e59f61dc	 ldr         r6, [pc, #0x1DC]
  004a8	e58b3060	 str         r3, [r11, #0x60]
  004ac	e5db3004	 ldrb        r3, [r11, #4]

; 235  :             pMMC_command->crc = 0;

  004b0	e5cb8031	 strb        r8, [r11, #0x31]
  004b4	e5cb8064	 strb        r8, [r11, #0x64]
  004b8		 |$LN21@INTF_MMCRe|

; 271  :         }
; 272  :     }
; 273  :     
; 274  :     if (pMMC_command->command == SEND_CID)

  004b8	e353000a	 cmp         r3, #0xA
  004bc	1a00003f	 bne         |$LN14@INTF_MMCRe|

; 275  :     {
; 276  :         if (pMMC_command->card_type == CARDTYPE_SD || pMMC_command->card_type == CARDTYPE_SDHC)

  004c0	e59b3000	 ldr         r3, [r11]
  004c4	e3530002	 cmp         r3, #2
  004c8	0a00001b	 beq         |$LN18@INTF_MMCRe|
  004cc	e3530003	 cmp         r3, #3
  004d0	0a000019	 beq         |$LN18@INTF_MMCRe|

; 292  :         }
; 293  :         else
; 294  :         {
; 295  :             pMMC_command->cid.mmc_cid.mid = pMMC_command->response[1];
; 296  :             pMMC_command->cid.mmc_cid.oid = (pMMC_command->response[2] << 8) |
; 297  :                 pMMC_command->response[3];

  004d4	e5db2022	 ldrb        r2, [r11, #0x22]
  004d8	e5db3023	 ldrb        r3, [r11, #0x23]
  004dc	e5db1021	 ldrb        r1, [r11, #0x21]

; 298  :             for (i=0; i<6; i++)
; 299  :                 pMMC_command->cid.mmc_cid.pnm[i] = pMMC_command->response[4+i];

  004e0	e28b003c	 add         r0, r11, #0x3C
  004e4	e1833402	 orr         r3, r3, r2, lsl #8
  004e8	e5cb1038	 strb        r1, [r11, #0x38]
  004ec	e1cb33ba	 strh        r3, [r11, #0x3A]
  004f0	e28b2024	 add         r2, r11, #0x24
  004f4	e2801006	 add         r1, r0, #6
  004f8		 |$LN46@INTF_MMCRe|
  004f8	e4d23001	 ldrb        r3, [r2], #1
  004fc	e4c03001	 strb        r3, [r0], #1
  00500	e1500001	 cmp         r0, r1
  00504	1afffffb	 bne         |$LN46@INTF_MMCRe|

; 300  :             pMMC_command->cid.mmc_cid.prv = pMMC_command->response[10];
; 301  :             pMMC_command->cid.mmc_cid.psn = (pMMC_command->response[11]<<24) |
; 302  :                 (pMMC_command->response[12]<<16) | (pMMC_command->response[13]<<8) |
; 303  :                  pMMC_command->response[14];

  00508	e5db102b	 ldrb        r1, [r11, #0x2B]
  0050c	e5db302c	 ldrb        r3, [r11, #0x2C]
  00510	e5db202d	 ldrb        r2, [r11, #0x2D]
  00514	e5db002e	 ldrb        r0, [r11, #0x2E]
  00518	e1833401	 orr         r3, r3, r1, lsl #8

; 304  :             pMMC_command->cid.mmc_cid.mdt = pMMC_command->response[15];

  0051c	e5db102f	 ldrb        r1, [r11, #0x2F]
  00520	e1823403	 orr         r3, r2, r3, lsl #8
  00524	e5db202a	 ldrb        r2, [r11, #0x2A]
  00528	e1803403	 orr         r3, r0, r3, lsl #8
  0052c	e5cb104c	 strb        r1, [r11, #0x4C]
  00530	e5cb2044	 strb        r2, [r11, #0x44]

; 305  :             // pMMC_command->cid.mmc_cid.crc = pMMC_command->response[16];
; 306  :             pMMC_command->cid.mmc_cid.crc = 0;

  00534	e5cb804d	 strb        r8, [r11, #0x4D]

; 307  :             pMMC_command->crc = 0;

  00538	ea00001e	 b           |$LN51@INTF_MMCRe|
  0053c		 |$LN18@INTF_MMCRe|

; 277  :         {
; 278  :             pMMC_command->cid.sd_cid.sdmid = pMMC_command->response[1];
; 279  :             pMMC_command->cid.sd_cid.sdoid = (pMMC_command->response[2] << 8) |
; 280  :                 pMMC_command->response[3];

  0053c	e5db2022	 ldrb        r2, [r11, #0x22]
  00540	e5db3023	 ldrb        r3, [r11, #0x23]
  00544	e5db1021	 ldrb        r1, [r11, #0x21]

; 281  :             for (i=0;i<5; i++)
; 282  :                 pMMC_command->cid.sd_cid.sdpnm[i] = pMMC_command->response[4+i];

  00548	e28b003c	 add         r0, r11, #0x3C
  0054c	e1833402	 orr         r3, r3, r2, lsl #8
  00550	e5cb1038	 strb        r1, [r11, #0x38]
  00554	e1cb33ba	 strh        r3, [r11, #0x3A]
  00558	e28b2024	 add         r2, r11, #0x24
  0055c	e2801005	 add         r1, r0, #5
  00560		 |$LN48@INTF_MMCRe|
  00560	e4d23001	 ldrb        r3, [r2], #1
  00564	e4c03001	 strb        r3, [r0], #1
  00568	e1500001	 cmp         r0, r1
  0056c	1afffffb	 bne         |$LN48@INTF_MMCRe|

; 283  :             pMMC_command->cid.sd_cid.sdprv = pMMC_command->response[9];
; 284  :             pMMC_command->cid.sd_cid.sdpsn = (pMMC_command->response[10]<<24) |
; 285  :                 (pMMC_command->response[11]<<16) | (pMMC_command->response[12]<<8) |
; 286  :                  pMMC_command->response[13];

  00570	e5dbe02a	 ldrb        lr, [r11, #0x2A]
  00574	e5db302b	 ldrb        r3, [r11, #0x2B]

; 287  :             pMMC_command->cid.sd_cid.sdmdt = ((pMMC_command->response[14] & 0xF) << 8) |
; 288  :                 pMMC_command->response[15];

  00578	e5db102e	 ldrb        r1, [r11, #0x2E]
  0057c	e5db202f	 ldrb        r2, [r11, #0x2F]
  00580	e5db002c	 ldrb        r0, [r11, #0x2C]
  00584	e183340e	 orr         r3, r3, lr, lsl #8
  00588	e59b5048	 ldr         r5, [r11, #0x48]
  0058c	e5dbe02d	 ldrb        lr, [r11, #0x2D]
  00590	e1822401	 orr         r2, r2, r1, lsl #8
  00594	e1801403	 orr         r1, r0, r3, lsl #8
  00598	e0020004	 and         r0, r2, r4
  0059c	e5db4029	 ldrb        r4, [r11, #0x29]
  005a0	e0053007	 and         r3, r5, r7
  005a4	e18e2401	 orr         r2, lr, r1, lsl #8
  005a8	e5cb4042	 strb        r4, [r11, #0x42]
  005ac	e1833000	 orr         r3, r3, r0
  005b0	e58b2044	 str         r2, [r11, #0x44]

; 289  :             // pMMC_command->cid.sd_cid.sdcrc = pMMC_command->response[16];
; 290  :             pMMC_command->cid.sd_cid.sdcrc = 0;

  005b4	e5cb804c	 strb        r8, [r11, #0x4C]
  005b8		 |$LN51@INTF_MMCRe|

; 291  :             pMMC_command->crc = 0;

  005b8	e5cb8031	 strb        r8, [r11, #0x31]
  005bc	e58b3048	 str         r3, [r11, #0x48]
  005c0		 |$LN14@INTF_MMCRe|

; 308  :         }
; 309  :     }
; 310  :         
; 311  :     // format status register if needed
; 312  :     if ((pMMC_command->card_type == CARDTYPE_SD || pMMC_command->card_type == CARDTYPE_SDHC) && pMMC_command->command == SEND_RELATIVE_ADDRESS)

  005c0	e59b3000	 ldr         r3, [r11]
  005c4	e3530002	 cmp         r3, #2
  005c8	0a000001	 beq         |$LN9@INTF_MMCRe|
  005cc	e3530003	 cmp         r3, #3
  005d0	1a000007	 bne         |$LN10@INTF_MMCRe|
  005d4		 |$LN9@INTF_MMCRe|
  005d4	e5db3004	 ldrb        r3, [r11, #4]
  005d8	e3530003	 cmp         r3, #3

; 313  :     {
; 314  :         pMMC_command->relative_address = (pMMC_command->response[1] << 8) |
; 315  :                                          (pMMC_command->response[2]);

  005dc	05db2021	 ldreqb      r2, [r11, #0x21]
  005e0	05db3022	 ldreqb      r3, [r11, #0x22]

; 316  :         pMMC_command->status = 0;

  005e4	058b8014	 streq       r8, [r11, #0x14]

; 317  :         pMMC_command->ocr = 0;

  005e8	01833402	 orreq       r3, r3, r2, lsl #8
  005ec	058b301c	 streq       r3, [r11, #0x1C]
  005f0	0a000018	 beq         |$LN52@INTF_MMCRe|
  005f4		 |$LN10@INTF_MMCRe|

; 165  : 
; 166  :     if (NoResponse != Request.CommandResponse.ResponseType) 

  005f4	e596301c	 ldr         r3, [r6, #0x1C]

; 318  :     }
; 319  :     else if (Request.CommandResponse.ResponseType == ResponseR1 || Request.CommandResponse.ResponseType == ResponseR1b)

  005f8	e3530001	 cmp         r3, #1
  005fc	0a00000d	 beq         |$LN6@INTF_MMCRe|
  00600	e3530002	 cmp         r3, #2
  00604	0a00000b	 beq         |$LN6@INTF_MMCRe|

; 326  : 
; 327  :         /*
; 328  :         // This test fails for command 18 which reports 16...
; 329  :         if (pMMC_command->command != (pMMC_command->response[0] & 0x3f))
; 330  :         {
; 331  :             OALMSG(OAL_ERROR, (TEXT("MMC: command in response %d != command %d\r\n"), pMMC_command->response[0], pMMC_command->command));
; 332  :         }
; 333  :         */
; 334  :     }
; 335  :     else if (Request.CommandResponse.ResponseType == ResponseR3)

  00608	e3530004	 cmp         r3, #4

; 336  :     {
; 337  :         pMMC_command->status = 0;
; 338  :         pMMC_command->ocr = (pMMC_command->response[4]) |
; 339  :                             (pMMC_command->response[3] << 8) |
; 340  :                             (pMMC_command->response[2] << 16) |
; 341  :                             (pMMC_command->response[1] << 24);

  0060c	e58b8014	 str         r8, [r11, #0x14]
  00610	1a000010	 bne         |$LN52@INTF_MMCRe|
  00614	e5db0021	 ldrb        r0, [r11, #0x21]
  00618	e5db3022	 ldrb        r3, [r11, #0x22]
  0061c	e5db2023	 ldrb        r2, [r11, #0x23]
  00620	e5db1024	 ldrb        r1, [r11, #0x24]
  00624	e1833400	 orr         r3, r3, r0, lsl #8
  00628	e1823403	 orr         r3, r2, r3, lsl #8
  0062c	e1813403	 orr         r3, r1, r3, lsl #8
  00630	e58b3018	 str         r3, [r11, #0x18]

; 342  :     }
; 343  :     else

  00634	ea000008	 b           |$LN3@INTF_MMCRe|
  00638		 |$LN6@INTF_MMCRe|

; 320  :     {
; 321  :         pMMC_command->status = (pMMC_command->response[4]) |
; 322  :                                (pMMC_command->response[3] << 8) |
; 323  :                                (pMMC_command->response[2] << 16) |
; 324  :                                (pMMC_command->response[1] << 24);

  00638	e5db0021	 ldrb        r0, [r11, #0x21]
  0063c	e5db3022	 ldrb        r3, [r11, #0x22]
  00640	e5db2023	 ldrb        r2, [r11, #0x23]
  00644	e5db1024	 ldrb        r1, [r11, #0x24]
  00648	e1833400	 orr         r3, r3, r0, lsl #8
  0064c	e1823403	 orr         r3, r2, r3, lsl #8
  00650	e1813403	 orr         r3, r1, r3, lsl #8
  00654	e58b3014	 str         r3, [r11, #0x14]
  00658		 |$LN52@INTF_MMCRe|

; 325  :         pMMC_command->ocr = 0;

  00658	e58b8018	 str         r8, [r11, #0x18]
  0065c		 |$LN3@INTF_MMCRe|

; 344  :     {
; 345  :         pMMC_command->status = 0;
; 346  :         pMMC_command->ocr = 0;
; 347  :     }
; 348  : 
; 349  :     // check for alternate command mode entry
; 350  :     if (Request.CommandCode == APP_CMD)

  0065c	e5d63014	 ldrb        r3, [r6, #0x14]

; 351  :         bAlternateCommandMode = TRUE;
; 352  :     else
; 353  :         bAlternateCommandMode = FALSE;
; 354  : 
; 355  :     return 0;

  00660	e3a00000	 mov         r0, #0
  00664	e3530037	 cmp         r3, #0x37
  00668	e59f3014	 ldr         r3, [pc, #0x14]
  0066c	03a02001	 moveq       r2, #1
  00670	13a02000	 movne       r2, #0
  00674	e5832000	 str         r2, [r3]

; 356  : }

  00678	e28dd00c	 add         sp, sp, #0xC
  0067c	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  00680	e12fff1e	 bx          lr
  00684		 |$LN57@INTF_MMCRe|
  00684		 |$LN58@INTF_MMCRe|
  00684	00000000	 DCD         |bAlternateCommandMode|
  00688		 |$LN59@INTF_MMCRe|
  00688	00000000	 DCD         |Request|
  0068c		 |$LN60@INTF_MMCRe|
  0068c	80007fff	 DCD         0x80007fff
  00690		 |$LN61@INTF_MMCRe|
  00690	1ff81f78	 DCD         0x1ff81f78
  00694		 |$LN62@INTF_MMCRe|
  00694	fff803c1	 DCD         0xfff803c1
  00698		 |$M45244|

			 ENDP  ; |INTF_MMCReadResponse|

	EXPORT	|MMCSetTranSpeed|
	EXPORT	|??_C@_1FK@KLGDBING@?$AAS?$AAD?$AAC?$AAA?$AAR?$AAD?$AA?3?$AA?5?$AAr?$AAe?$AAq?$AAe?$AAs?$AAt?$AAe?$AAd?$AA?5?$AAs?$AAp?$AAe?$AAe?$AAd?$AA?5?$AA?$CF?$AAd?$AA?0?$AA?5?$AAa?$AAc?$AAt?$AAu?$AAa@| [ DATA ] ; `string'
	IMPORT	|NKDbgPrintfW|
	IMPORT	|SdhcSetClockRate|

  00000			 AREA	 |.pdata|, PDATA
|$T45263| DCD	|$LN6@MMCSetTran|
	DCD	0x40001502

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FK@KLGDBING@?$AAS?$AAD?$AAC?$AAA?$AAR?$AAD?$AA?3?$AA?5?$AAr?$AAe?$AAq?$AAe?$AAs?$AAt?$AAe?$AAd?$AA?5?$AAs?$AAp?$AAe?$AAe?$AAd?$AA?5?$AA?$CF?$AAd?$AA?0?$AA?5?$AAa?$AAc?$AAt?$AAu?$AAa@| DCB "S"
	DCB	0x0, "D", 0x0, "C", 0x0, "A", 0x0, "R", 0x0, "D", 0x0, ":"
	DCB	0x0, " ", 0x0, "r", 0x0, "e", 0x0, "q", 0x0, "e", 0x0, "s"
	DCB	0x0, "t", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "s", 0x0, "p"
	DCB	0x0, "e", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "%", 0x0, "d"
	DCB	0x0, ",", 0x0, " ", 0x0, "a", 0x0, "c", 0x0, "t", 0x0, "u"
	DCB	0x0, "a", 0x0, "l", 0x0, " ", 0x0, "s", 0x0, "p", 0x0, "e"
	DCB	0x0, "e", 0x0, "d", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |MMCSetTranSpeed| PROC

; 365  : {

  00000		 |$LN6@MMCSetTran|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004	e24dd004	 sub         sp, sp, #4
  00008		 |$M45260|
  00008	e1a04000	 mov         r4, r0

; 366  :     static DWORD CurrentSpeed = 0;
; 367  :     DWORD ActualSpeed = speed;
; 368  : 
; 369  :     if (CurrentSpeed != speed)

  0000c	e59f503c	 ldr         r5, [pc, #0x3C]
  00010	e58d4000	 str         r4, [sp]
  00014	e5953000	 ldr         r3, [r5]
  00018	e1530004	 cmp         r3, r4
  0001c	0a000007	 beq         |$LN1@MMCSetTran|

; 370  : 	{
; 371  :         SdhcSetClockRate(&ActualSpeed);

  00020	e28d0000	 add         r0, sp, #0
  00024	eb000000	 bl          SdhcSetClockRate

; 372  : 	    OALMSG(1, (TEXT("SDCARD: reqested speed %d, actual speed %d\r\n"), speed, ActualSpeed));

  00028	e59d2000	 ldr         r2, [sp]
  0002c	e59f0018	 ldr         r0, [pc, #0x18]
  00030	e1a01004	 mov         r1, r4
  00034	eb000000	 bl          NKDbgPrintfW

; 373  :         CurrentSpeed = speed;

  00038	e59d0000	 ldr         r0, [sp]
  0003c	e5854000	 str         r4, [r5]
  00040		 |$LN1@MMCSetTran|

; 374  :     }		
; 375  :     return ActualSpeed;
; 376  : }

  00040	e28dd004	 add         sp, sp, #4
  00044	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00048	e12fff1e	 bx          lr
  0004c		 |$LN7@MMCSetTran|
  0004c		 |$LN8@MMCSetTran|
  0004c	00000000	 DCD         |??_C@_1FK@KLGDBING@?$AAS?$AAD?$AAC?$AAA?$AAR?$AAD?$AA?3?$AA?5?$AAr?$AAe?$AAq?$AAe?$AAs?$AAt?$AAe?$AAd?$AA?5?$AAs?$AAp?$AAe?$AAe?$AAd?$AA?5?$AA?$CF?$AAd?$AA?0?$AA?5?$AAa?$AAc?$AAt?$AAu?$AAa@|
  00050		 |$LN9@MMCSetTran|
  00050	00000000	 DCD         |?CurrentSpeed@?1??MMCSetTranSpeed@@9@9|
  00054		 |$M45261|

			 ENDP  ; |MMCSetTranSpeed|

	EXPORT	|UTIL_csd_get_sectorsize|

  00000			 AREA	 |.pdata|, PDATA
|$T45276| DCD	|$LN7@UTIL_csd_g|
	DCD	0x40000700
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |UTIL_csd_get_sectorsize| PROC

; 400  : {

  00000		 |$LN7@UTIL_csd_g|
  00000		 |$M45273|

; 401  :     if (pMMCcmd->card_type == CARDTYPE_MMC)

  00000	e5903000	 ldr         r3, [r0]

; 402  :         return 1 << pMMCcmd->csd.mmc_csd.rd_bl_len;

  00004	e5903058	 ldr         r3, [r0, #0x58]
  00008	e3a02001	 mov         r2, #1
  0000c	e1a03803	 mov         r3, r3, lsl #16
  00010	e1a03e23	 mov         r3, r3, lsr #28
  00014	e1a00312	 mov         r0, r2, lsl r3

; 403  :     else
; 404  :         return 1 << pMMCcmd->csd.sd_csd.sdrd_bl_len;
; 405  : }

  00018	e12fff1e	 bx          lr
  0001c		 |$M45274|

			 ENDP  ; |UTIL_csd_get_sectorsize|

	EXPORT	|UTIL_csd_get_devicesize|

  00000			 AREA	 |.pdata|, PDATA
|$T45324| DCD	|$LN44@UTIL_csd_g@2|
	DCD	0x40004100
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |UTIL_csd_get_devicesize| PROC

; 409  : {

  00000		 |$LN44@UTIL_csd_g@2|
  00000		 |$M45321|

; 410  :     if (pMMCcmd->card_type == CARDTYPE_MMC)

  00000	e5903000	 ldr         r3, [r0]
  00004	e3530001	 cmp         r3, #1
  00008	1a000014	 bne         |$LN16@UTIL_csd_g@2|

; 411  :     {
; 412  :         if (UTIL_csd_get_sectorsize(pMMCcmd) == 512)

  0000c	e5902058	 ldr         r2, [r0, #0x58]
  00010	e3a01001	 mov         r1, #1
  00014	e1a03802	 mov         r3, r2, lsl #16
  00018	e1a03e23	 mov         r3, r3, lsr #28
  0001c	e1a03311	 mov         r3, r1, lsl r3
  00020	e3530c02	 cmp         r3, #2, 24
  00024	1a000009	 bne         |$LN15@UTIL_csd_g@2|
  00028		 |$LN40@UTIL_csd_g@2|

; 413  :             return (pMMCcmd->csd.mmc_csd.c_size  + 1) * (1 << (pMMCcmd->csd.mmc_csd.c_size_mult  + 2));

  00028	e590305c	 ldr         r3, [r0, #0x5C]
  0002c	e3a00001	 mov         r0, #1
  00030	e1a01a22	 mov         r1, r2, lsr #20
  00034	e1a03883	 mov         r3, r3, lsl #17
  00038	e1a03ea3	 mov         r3, r3, lsr #29
  0003c	e2833002	 add         r3, r3, #2
  00040	e1a02310	 mov         r2, r0, lsl r3
  00044	e2813001	 add         r3, r1, #1
  00048	e0000392	 mul         r0, r2, r3

; 437  : }

  0004c	e12fff1e	 bx          lr
  00050		 |$LN15@UTIL_csd_g@2|

; 414  :         else if (UTIL_csd_get_sectorsize(pMMCcmd) == 1024)

  00050	e3530b01	 cmp         r3, #1, 22
  00054	0a00000c	 beq         |$LN41@UTIL_csd_g@2|
  00058		 |$LN2@UTIL_csd_g@2|

; 434  :     }
; 435  :     else
; 436  :         return 0;

  00058	e3a00000	 mov         r0, #0

; 437  : }

  0005c	e12fff1e	 bx          lr
  00060		 |$LN16@UTIL_csd_g@2|

; 415  :             return 2 * (pMMCcmd->csd.mmc_csd.c_size  + 1) * (1 << (pMMCcmd->csd.mmc_csd.c_size_mult  + 2));
; 416  :         else
; 417  :             return 0;
; 418  :     }
; 419  :     else if (pMMCcmd->card_type == CARDTYPE_SD)

  00060	e3530002	 cmp         r3, #2
  00064	1a000020	 bne         |$LN10@UTIL_csd_g@2|

; 420  :     {
; 421  :         if (UTIL_csd_get_sectorsize(pMMCcmd) == 512)

  00068	e5902058	 ldr         r2, [r0, #0x58]
  0006c	e3a01001	 mov         r1, #1
  00070	e1a03802	 mov         r3, r2, lsl #16
  00074	e1a03e23	 mov         r3, r3, lsr #28
  00078	e1a03311	 mov         r3, r1, lsl r3
  0007c	e3530c02	 cmp         r3, #2, 24

; 422  :             return (pMMCcmd->csd.sd_csd.sdc_size + 1) * (1 << (pMMCcmd->csd.sd_csd.sdc_size_mult + 2));

  00080	0affffe8	 beq         |$LN40@UTIL_csd_g@2|

; 423  :         else if (UTIL_csd_get_sectorsize(pMMCcmd) == 1024)

  00084	e3530b01	 cmp         r3, #1, 22
  00088	1a00000a	 bne         |$LN7@UTIL_csd_g@2|
  0008c		 |$LN41@UTIL_csd_g@2|

; 424  :             return 2 * (pMMCcmd->csd.sd_csd.sdc_size + 1) * (1 << (pMMCcmd->csd.sd_csd.sdc_size_mult + 2));

  0008c	e590305c	 ldr         r3, [r0, #0x5C]
  00090	e3a00001	 mov         r0, #1
  00094	e1a01a22	 mov         r1, r2, lsr #20
  00098	e1a03883	 mov         r3, r3, lsl #17
  0009c	e1a03ea3	 mov         r3, r3, lsr #29
  000a0	e2833002	 add         r3, r3, #2
  000a4	e1a02310	 mov         r2, r0, lsl r3
  000a8	e2813001	 add         r3, r1, #1
  000ac	e0030392	 mul         r3, r2, r3
  000b0	e1a00083	 mov         r0, r3, lsl #1

; 437  : }

  000b4	e12fff1e	 bx          lr
  000b8		 |$LN7@UTIL_csd_g@2|

; 425  :         else if (UTIL_csd_get_sectorsize(pMMCcmd) == 2048)

  000b8	e3530b02	 cmp         r3, #2, 22
  000bc	1affffe5	 bne         |$LN2@UTIL_csd_g@2|

; 426  :             return 4 * (pMMCcmd->csd.sd_csd.sdc_size + 1) * (1 << (pMMCcmd->csd.sd_csd.sdc_size_mult + 2));

  000c0	e590305c	 ldr         r3, [r0, #0x5C]
  000c4	e3a00001	 mov         r0, #1
  000c8	e1a01a22	 mov         r1, r2, lsr #20
  000cc	e1a03883	 mov         r3, r3, lsl #17
  000d0	e1a03ea3	 mov         r3, r3, lsr #29
  000d4	e2833002	 add         r3, r3, #2
  000d8	e1a02310	 mov         r2, r0, lsl r3
  000dc	e2813001	 add         r3, r1, #1
  000e0	e0030392	 mul         r3, r2, r3
  000e4	e1a00103	 mov         r0, r3, lsl #2

; 437  : }

  000e8	e12fff1e	 bx          lr
  000ec		 |$LN10@UTIL_csd_g@2|

; 427  :         else
; 428  :             return 0;
; 429  :     }
; 430  :     else if (pMMCcmd->card_type == CARDTYPE_SDHC)

  000ec	e3530003	 cmp         r3, #3
  000f0	1affffd8	 bne         |$LN2@UTIL_csd_g@2|

; 431  :     {
; 432  :         // for SDHC, c_size is in 512K units, we want it in 512 byte sectors
; 433  :         return (pMMCcmd->csd.sd_csd.sdhcc_size + 1) * 1024;

  000f4	e5903068	 ldr         r3, [r0, #0x68]
  000f8	e2833001	 add         r3, r3, #1
  000fc	e1a00503	 mov         r0, r3, lsl #10

; 437  : }

  00100	e12fff1e	 bx          lr
  00104		 |$M45322|

			 ENDP  ; |UTIL_csd_get_devicesize|

	EXPORT	|UTIL_csd_get_tran_speed|

  00000			 AREA	 |.pdata|, PDATA
|$T45359| DCD	|$LN52@UTIL_csd_g@3|
	DCD	0x40004700
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |UTIL_csd_get_tran_speed| PROC

; 440  : {

  00000		 |$LN52@UTIL_csd_g@3|
  00000		 |$M45356|

; 441  :     unsigned int temp, mant, exp;
; 442  : 
; 443  :     temp = (unsigned int)(pMMCcmd->card_type == CARDTYPE_MMC) ? pMMCcmd->csd.mmc_csd.tr_speed : pMMCcmd->csd.sd_csd.sdtr_speed;

  00000	e5d01056	 ldrb        r1, [r0, #0x56]
  00004	e5903000	 ldr         r3, [r0]

; 444  : 
; 445  :     /* get exponent factor */
; 446  :     switch(temp & 0x7)

  00008	e2113007	 ands        r3, r1, #7
  0000c	0a00000d	 beq         |$LN23@UTIL_csd_g@3|
  00010	e3530001	 cmp         r3, #1
  00014	0a000008	 beq         |$LN22@UTIL_csd_g@3|
  00018	e3530002	 cmp         r3, #2
  0001c	0a000004	 beq         |$LN21@UTIL_csd_g@3|
  00020	e3530003	 cmp         r3, #3

; 460  :         default:
; 461  :             exp = 0;

  00024	13a02000	 movne       r2, #0
  00028	1a000008	 bne         |$LN24@UTIL_csd_g@3|

; 457  :         case 3:
; 458  :             exp = 100000000;    // 100MHz

  0002c	e59f20e4	 ldr         r2, [pc, #0xE4]

; 459  :             break;

  00030	ea000006	 b           |$LN24@UTIL_csd_g@3|
  00034		 |$LN21@UTIL_csd_g@3|

; 454  :         case 2:
; 455  :             exp = 10000000;     // 10MHz

  00034	e59f20d8	 ldr         r2, [pc, #0xD8]

; 456  :             break;

  00038	ea000004	 b           |$LN24@UTIL_csd_g@3|
  0003c		 |$LN22@UTIL_csd_g@3|
  0003c	e3a0393d	 mov         r3, #0x3D, 18
  00040	e3832d09	 orr         r2, r3, #9, 26
  00044	ea000001	 b           |$LN24@UTIL_csd_g@3|
  00048		 |$LN23@UTIL_csd_g@3|

; 447  :     {
; 448  :         case 0:
; 449  :             exp = 100000;       // 100khz
; 450  :             break;
; 451  :         case 1:
; 452  :             exp = 1000000;      // 1MHz
; 453  :             break;

  00048	e3a03b61	 mov         r3, #0x61, 22
  0004c	e3832e2a	 orr         r2, r3, #0x2A, 28
  00050		 |$LN24@UTIL_csd_g@3|

; 462  :     }
; 463  : 
; 464  :     /* get mantissa factor (10x so we can use integer math) */
; 465  :     switch((temp >> 3) & 0xf)

  00050	e1a03c81	 mov         r3, r1, lsl #25
  00054	e1a03e23	 mov         r3, r3, lsr #28
  00058	e2431001	 sub         r1, r3, #1
  0005c	e351000e	 cmp         r1, #0xE
  00060	8a000024	 bhi         |$LN1@UTIL_csd_g@3|
  00064	e28f3004	 add         r3, pc, #4
  00068	e7d33001	 ldrb        r3, [r3, +r1]
  0006c	e08ff003	 add         pc, pc, r3
  00070		 |$LN34@UTIL_csd_g@3|
  00070		 |$LN33@UTIL_csd_g@3|
  00070		 |$LN35@UTIL_csd_g@3|
  00070	0ced		 DCB         0xc
  00071		 |$LN36@UTIL_csd_g@3|
  00071	14ed		 DCB         0x14
  00072		 |$LN37@UTIL_csd_g@3|
  00072	1ced		 DCB         0x1c
  00073		 |$LN38@UTIL_csd_g@3|
  00073	24ed		 DCB         0x24
  00074		 |$LN39@UTIL_csd_g@3|
  00074	2ced		 DCB         0x2c
  00075		 |$LN40@UTIL_csd_g@3|
  00075	34ed		 DCB         0x34
  00076		 |$LN41@UTIL_csd_g@3|
  00076	3ced		 DCB         0x3c
  00077		 |$LN42@UTIL_csd_g@3|
  00077	44ed		 DCB         0x44
  00078		 |$LN43@UTIL_csd_g@3|
  00078	4ced		 DCB         0x4c
  00079		 |$LN44@UTIL_csd_g@3|
  00079	54ed		 DCB         0x54
  0007a		 |$LN45@UTIL_csd_g@3|
  0007a	5ced		 DCB         0x5c
  0007b		 |$LN46@UTIL_csd_g@3|
  0007b	64ed		 DCB         0x64
  0007c		 |$LN47@UTIL_csd_g@3|
  0007c	6ced		 DCB         0x6c
  0007d		 |$LN48@UTIL_csd_g@3|
  0007d	74ed		 DCB         0x74
  0007e		 |$LN49@UTIL_csd_g@3|
  0007e	7ced		 DCB         0x7c
  0007f		 |$LN57@UTIL_csd_g@3|

; 517  : }

  0007f	7ced		 DCB         0x7c
  00080		 |$LN16@UTIL_csd_g@3|

; 466  :     {
; 467  :             case 1:
; 468  :                 mant = 10;      // 1.0

  00080	e3a0100a	 mov         r1, #0xA

; 469  :                 break;

  00084	ea00001c	 b           |$LN17@UTIL_csd_g@3|
  00088		 |$LN15@UTIL_csd_g@3|

; 470  :             case 2:
; 471  :                 mant = 12;      // 1.2

  00088	e3a0100c	 mov         r1, #0xC

; 472  :                 break;

  0008c	ea00001a	 b           |$LN17@UTIL_csd_g@3|
  00090		 |$LN14@UTIL_csd_g@3|

; 473  :             case 3:
; 474  :                 mant = 13;      // 1.3

  00090	e3a0100d	 mov         r1, #0xD

; 475  :                 break;

  00094	ea000018	 b           |$LN17@UTIL_csd_g@3|
  00098		 |$LN13@UTIL_csd_g@3|

; 476  :             case 4:
; 477  :                 mant = 15;      // 1.5

  00098	e3a0100f	 mov         r1, #0xF

; 478  :                 break;

  0009c	ea000016	 b           |$LN17@UTIL_csd_g@3|
  000a0		 |$LN12@UTIL_csd_g@3|

; 479  :             case 5:
; 480  :                 mant = 20;      // 2.0

  000a0	e3a01014	 mov         r1, #0x14

; 481  :                 break;

  000a4	ea000014	 b           |$LN17@UTIL_csd_g@3|
  000a8		 |$LN11@UTIL_csd_g@3|

; 482  :             case 6:
; 483  :                 mant = 25;      // 2.5

  000a8	e3a01019	 mov         r1, #0x19

; 484  :                 break;

  000ac	ea000012	 b           |$LN17@UTIL_csd_g@3|
  000b0		 |$LN10@UTIL_csd_g@3|

; 485  :             case 7:
; 486  :                 mant = 30;      // 3.0

  000b0	e3a0101e	 mov         r1, #0x1E

; 487  :                 break;

  000b4	ea000010	 b           |$LN17@UTIL_csd_g@3|
  000b8		 |$LN9@UTIL_csd_g@3|

; 488  :             case 8:
; 489  :                 mant = 35;      // 3.5

  000b8	e3a01023	 mov         r1, #0x23

; 490  :                 break;

  000bc	ea00000e	 b           |$LN17@UTIL_csd_g@3|
  000c0		 |$LN8@UTIL_csd_g@3|

; 491  :             case 9:
; 492  :                 mant = 40;      // 4.0

  000c0	e3a01028	 mov         r1, #0x28

; 493  :                 break;

  000c4	ea00000c	 b           |$LN17@UTIL_csd_g@3|
  000c8		 |$LN7@UTIL_csd_g@3|

; 494  :             case 0xa:
; 495  :                 mant = 45;      // 4.5

  000c8	e3a0102d	 mov         r1, #0x2D

; 496  :                 break;

  000cc	ea00000a	 b           |$LN17@UTIL_csd_g@3|
  000d0		 |$LN6@UTIL_csd_g@3|

; 497  :             case 0xb:
; 498  :                 mant = 50;      // 5.0

  000d0	e3a01032	 mov         r1, #0x32

; 499  :                 break;

  000d4	ea000008	 b           |$LN17@UTIL_csd_g@3|
  000d8		 |$LN5@UTIL_csd_g@3|

; 500  :             case 0xc:
; 501  :                 mant = 55;      // 5.5

  000d8	e3a01037	 mov         r1, #0x37

; 502  :                 break;

  000dc	ea000006	 b           |$LN17@UTIL_csd_g@3|
  000e0		 |$LN4@UTIL_csd_g@3|

; 503  :             case 0xd:
; 504  :                 mant = 60;      // 6.0

  000e0	e3a0103c	 mov         r1, #0x3C

; 505  :                 break;

  000e4	ea000004	 b           |$LN17@UTIL_csd_g@3|
  000e8		 |$LN3@UTIL_csd_g@3|

; 506  :             case 0xe:
; 507  :                 mant = 70;      // 7.0

  000e8	e3a01046	 mov         r1, #0x46

; 508  :                 break;

  000ec	ea000002	 b           |$LN17@UTIL_csd_g@3|
  000f0		 |$LN2@UTIL_csd_g@3|

; 509  :             case 0xf:
; 510  :                 mant = 80;      // 8.0

  000f0	e3a01050	 mov         r1, #0x50

; 511  :                 break;

  000f4	ea000000	 b           |$LN17@UTIL_csd_g@3|
  000f8		 |$LN1@UTIL_csd_g@3|

; 512  :             default:
; 513  :                 mant = 0;

  000f8	e3a01000	 mov         r1, #0
  000fc		 |$LN17@UTIL_csd_g@3|

; 514  :     }
; 515  : 
; 516  :     return (exp * mant)/10;

  000fc	e59f300c	 ldr         r3, [pc, #0xC]
  00100	e0020291	 mul         r2, r1, r2
  00104	e0813392	 umull       r3, r1, r2, r3
  00108	e1a001a1	 mov         r0, r1, lsr #3

; 517  : }

  0010c	e12fff1e	 bx          lr
  00110		 |$LN53@UTIL_csd_g@3|
  00110		 |$LN54@UTIL_csd_g@3|
  00110	cccccccd	 DCD         0xcccccccd
  00114		 |$LN55@UTIL_csd_g@3|
  00114	00989680	 DCD         0x989680
  00118		 |$LN56@UTIL_csd_g@3|
  00118	05f5e100	 DCD         0x5f5e100
  0011c		 |$M45357|

			 ENDP  ; |UTIL_csd_get_tran_speed|

	EXPORT	|MMCSetMMCState|

  00000			 AREA	 |.pdata|, PDATA
|$T45373| DCD	|$LN5@MMCSetMMCS|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |MMCSetMMCState| PROC

; 520  : {

  00000		 |$LN5@MMCSetMMCS|
  00000		 |$M45370|

; 521  :     pDisk->d_MMCState = state;

  00000	e580100c	 str         r1, [r0, #0xC]

; 522  : }

  00004	e12fff1e	 bx          lr
  00008		 |$M45371|

			 ENDP  ; |MMCSetMMCState|

	EXPORT	|MMCCommandResponse|
	EXPORT	|??_C@_1GE@IHFMNDC@?$AAM?$AAM?$AAC?$AA?3?$AA?3?$AAM?$AAM?$AAC?$AAC?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AAR?$AAe?$AAs?$AAp?$AAo?$AAn?$AAs?$AAe?$AA?3?$AA?5?$AAC?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd@| [ DATA ] ; `string'
	EXPORT	|??_C@_1IM@IDDFJJFI@?$AAM?$AAM?$AAC?$AA?3?$AA?3?$AAM?$AAM?$AAC?$AAC?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AAR?$AAe?$AAs?$AAp?$AAo?$AAn?$AAs?$AAe?$AA?3?$AA?5?$AAC?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HM@GLHKNEKG@?$AAM?$AAM?$AAC?$AA?3?$AA?3?$AAM?$AAM?$AAC?$AAC?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AAR?$AAe?$AAs?$AAp?$AAo?$AAn?$AAs?$AAe?$AA?3?$AA?5?$AAM?$AAM?$AAC?$AAS?$AAe?$AAn?$AAd@| [ DATA ] ; `string'
	IMPORT	|dpCurSettings|

  00000			 AREA	 |.pdata|, PDATA
|$T45390| DCD	|$LN13@MMCCommand|
	DCD	0x40002b01

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GE@IHFMNDC@?$AAM?$AAM?$AAC?$AA?3?$AA?3?$AAM?$AAM?$AAC?$AAC?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AAR?$AAe?$AAs?$AAp?$AAo?$AAn?$AAs?$AAe?$AA?3?$AA?5?$AAC?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd@| DCB "M"
	DCB	0x0, "M", 0x0, "C", 0x0, ":", 0x0, ":", 0x0, "M", 0x0, "M"
	DCB	0x0, "C", 0x0, "C", 0x0, "o", 0x0, "m", 0x0, "m", 0x0, "a"
	DCB	0x0, "n", 0x0, "d", 0x0, "R", 0x0, "e", 0x0, "s", 0x0, "p"
	DCB	0x0, "o", 0x0, "n", 0x0, "s", 0x0, "e", 0x0, ":", 0x0, " "
	DCB	0x0, "C", 0x0, "o", 0x0, "m", 0x0, "m", 0x0, "a", 0x0, "n"
	DCB	0x0, "d", 0x0, " ", 0x0, "R", 0x0, "e", 0x0, "s", 0x0, "p"
	DCB	0x0, "o", 0x0, "n", 0x0, "s", 0x0, "e", 0x0, " ", 0x0, "E"
	DCB	0x0, "r", 0x0, "r", 0x0, "o", 0x0, "r", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1IM@IDDFJJFI@?$AAM?$AAM?$AAC?$AA?3?$AA?3?$AAM?$AAM?$AAC?$AAC?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AAR?$AAe?$AAs?$AAp?$AAo?$AAn?$AAs?$AAe?$AA?3?$AA?5?$AAC?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd@| DCB "M"
	DCB	0x0, "M", 0x0, "C", 0x0, ":", 0x0, ":", 0x0, "M", 0x0, "M"
	DCB	0x0, "C", 0x0, "C", 0x0, "o", 0x0, "m", 0x0, "m", 0x0, "a"
	DCB	0x0, "n", 0x0, "d", 0x0, "R", 0x0, "e", 0x0, "s", 0x0, "p"
	DCB	0x0, "o", 0x0, "n", 0x0, "s", 0x0, "e", 0x0, ":", 0x0, " "
	DCB	0x0, "C", 0x0, "o", 0x0, "m", 0x0, "m", 0x0, "a", 0x0, "n"
	DCB	0x0, "d", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "%", 0x0, "d"
	DCB	0x0, ":", 0x0, " ", 0x0, "R", 0x0, "e", 0x0, "s", 0x0, "p"
	DCB	0x0, "o", 0x0, "n", 0x0, "s", 0x0, "e", 0x0, " ", 0x0, "S"
	DCB	0x0, "t", 0x0, "a", 0x0, "t", 0x0, "u", 0x0, "s", 0x0, " "
	DCB	0x0, "E", 0x0, "r", 0x0, "r", 0x0, "o", 0x0, "r", 0x0, " "
	DCB	0x0, "=", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HM@GLHKNEKG@?$AAM?$AAM?$AAC?$AA?3?$AA?3?$AAM?$AAM?$AAC?$AAC?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AAR?$AAe?$AAs?$AAp?$AAo?$AAn?$AAs?$AAe?$AA?3?$AA?5?$AAM?$AAM?$AAC?$AAS?$AAe?$AAn?$AAd@| DCB "M"
	DCB	0x0, "M", 0x0, "C", 0x0, ":", 0x0, ":", 0x0, "M", 0x0, "M"
	DCB	0x0, "C", 0x0, "C", 0x0, "o", 0x0, "m", 0x0, "m", 0x0, "a"
	DCB	0x0, "n", 0x0, "d", 0x0, "R", 0x0, "e", 0x0, "s", 0x0, "p"
	DCB	0x0, "o", 0x0, "n", 0x0, "s", 0x0, "e", 0x0, ":", 0x0, " "
	DCB	0x0, "M", 0x0, "M", 0x0, "C", 0x0, "S", 0x0, "e", 0x0, "n"
	DCB	0x0, "d", 0x0, "C", 0x0, "o", 0x0, "m", 0x0, "m", 0x0, "a"
	DCB	0x0, "n", 0x0, "d", 0x0, " ", 0x0, "e", 0x0, "r", 0x0, "r"
	DCB	0x0, "o", 0x0, "r", 0x0, ",", 0x0, " ", 0x0, "c", 0x0, "o"
	DCB	0x0, "m", 0x0, "m", 0x0, "a", 0x0, "n", 0x0, "d", 0x0, " "
	DCB	0x0, "=", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |MMCCommandResponse| PROC

; 1131 : {

  00000		 |$LN13@MMCCommand|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M45387|
  00004	e1a05000	 mov         r5, r0

; 1132 :     if ( INTF_MMCSendCommand(pMMCcmd, init) )

  00008	eb000000	 bl          INTF_MMCSendCommand
  0000c	e3500000	 cmp         r0, #0
  00010	0a000009	 beq         |$LN2@MMCCommand|

; 1133 :     {
; 1134 :         OALMSG(OAL_ERROR, (TEXT("MMC::MMCCommandResponse: MMCSendCommand error, command = %d\r\n"), pMMCcmd->command));

  00014	e59f4084	 ldr         r4, [pc, #0x84]
  00018	e5943440	 ldr         r3, [r4, #0x440]
  0001c	e3130001	 tst         r3, #1
  00020	15d51004	 ldrneb      r1, [r5, #4]
  00024	159f007c	 ldrne       r0, [pc, #0x7C]
  00028	1b000000	 blne        NKDbgPrintfW

; 1135 :         bAlternateCommandMode = FALSE;

  0002c	e59f3070	 ldr         r3, [pc, #0x70]
  00030	e3a02000	 mov         r2, #0
  00034	e5832000	 str         r2, [r3]

; 1136 :         goto CommandResponseError;

  00038	ea00000c	 b           |$CommandResponseError$44755|
  0003c		 |$LN2@MMCCommand|

; 1137 :     }
; 1138 : 
; 1139 :     INTF_MMCReadResponse(pMMCcmd);

  0003c	e1a00005	 mov         r0, r5
  00040	eb000000	 bl          INTF_MMCReadResponse

; 1140 : 
; 1141 :     // check response for errors
; 1142 :     if ( MMC_STATUS_CMD_ERROR(pMMCcmd->status) )

  00044	e5952014	 ldr         r2, [r5, #0x14]
  00048	e3a03a12	 mov         r3, #0x12, 20
  0004c	e24337ca	 sub         r3, r3, #0xCA, 14
  00050	e1120003	 tst         r2, r3
  00054	0a00000c	 beq         |$LN1@MMCCommand|

; 1143 :     {
; 1144 :         OALMSG(OAL_ERROR,(TEXT("MMC::MMCCommandResponse: Command = %d: Response Status Error = 0x%x\r\n"), pMMCcmd->command, pMMCcmd->status));

  00058	e59f4040	 ldr         r4, [pc, #0x40]
  0005c	e5943440	 ldr         r3, [r4, #0x440]
  00060	e3130001	 tst         r3, #1
  00064	15d51004	 ldrneb      r1, [r5, #4]
  00068	159f002c	 ldrne       r0, [pc, #0x2C]
  0006c	1b000000	 blne        NKDbgPrintfW
  00070		 |$CommandResponseError$44755|
  00070	e5943440	 ldr         r3, [r4, #0x440]

; 1149 : 
; 1150 : CommandResponseError:
; 1151 : 
; 1152 :     OALMSG(OAL_ERROR, (TEXT("MMC::MMCCommandResponse: Command Response Error\r\n")));

  00074	e3130001	 tst         r3, #1
  00078	159f0018	 ldrne       r0, [pc, #0x18]
  0007c	1b000000	 blne        NKDbgPrintfW

; 1153 :     return 1;

  00080	e3a00001	 mov         r0, #1

; 1154 : }

  00084	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00088	e12fff1e	 bx          lr
  0008c		 |$LN1@MMCCommand|

; 1145 :         goto CommandResponseError;
; 1146 :     }
; 1147 : 
; 1148 :     return 0;

  0008c	e3a00000	 mov         r0, #0

; 1154 : }

  00090	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00094	e12fff1e	 bx          lr
  00098		 |$LN14@MMCCommand|
  00098		 |$LN15@MMCCommand|
  00098	00000000	 DCD         |??_C@_1GE@IHFMNDC@?$AAM?$AAM?$AAC?$AA?3?$AA?3?$AAM?$AAM?$AAC?$AAC?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AAR?$AAe?$AAs?$AAp?$AAo?$AAn?$AAs?$AAe?$AA?3?$AA?5?$AAC?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd@|
  0009c		 |$LN16@MMCCommand|
  0009c	00000000	 DCD         |??_C@_1IM@IDDFJJFI@?$AAM?$AAM?$AAC?$AA?3?$AA?3?$AAM?$AAM?$AAC?$AAC?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AAR?$AAe?$AAs?$AAp?$AAo?$AAn?$AAs?$AAe?$AA?3?$AA?5?$AAC?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd@|
  000a0		 |$LN17@MMCCommand|
  000a0	00000000	 DCD         |dpCurSettings|
  000a4		 |$LN18@MMCCommand|
  000a4	00000000	 DCD         |bAlternateCommandMode|
  000a8		 |$LN19@MMCCommand|
  000a8	00000000	 DCD         |??_C@_1HM@GLHKNEKG@?$AAM?$AAM?$AAC?$AA?3?$AA?3?$AAM?$AAM?$AAC?$AAC?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AAR?$AAe?$AAs?$AAp?$AAo?$AAn?$AAs?$AAe?$AA?3?$AA?5?$AAM?$AAM?$AAC?$AAS?$AAe?$AAn?$AAd@|
  000ac		 |$M45388|

			 ENDP  ; |MMCCommandResponse|

	EXPORT	|MMCInitDisk|
	IMPORT	|SdhcInitialize|

  00000			 AREA	 |.pdata|, PDATA
|$T45406| DCD	|$LN6@MMCInitDis|
	DCD	0x40001201
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |MMCInitDisk| PROC

; 1224 : {

  00000		 |$LN6@MMCInitDis|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M45403|
  00004	e1a04000	 mov         r4, r0

; 1225 : 
; 1226 :     OALMSGX(OAL_INFO, (TEXT("MMCInitDisk\r\n")));
; 1227 : 
; 1228 :     // default is for all IDE devices to support 16 bit data transfers (older drives don't support 8 bit transfers)
; 1229 : 
; 1230 :     if (SdhcInitialize() == FALSE)

  00008	eb000000	 bl          SdhcInitialize
  0000c	e3500000	 cmp         r0, #0

; 1231 :         return FALSE;

  00010	03a00000	 moveq       r0, #0

; 1249 : 
; 1250 : }   // Initdisk

  00014	08bd4010	 ldmeqia     sp!, {r4, lr}
  00018	012fff1e	 bxeq        lr

; 1232 : 
; 1233 :     pDisk->d_DiskInfo.di_total_sectors = 0;
; 1234 :     pDisk->d_DiskInfo.di_bytes_per_sect = 512;

  0001c	e3a03c02	 mov         r3, #2, 24
  00020	e3a02000	 mov         r2, #0
  00024	e584301c	 str         r3, [r4, #0x1C]
  00028	e5842018	 str         r2, [r4, #0x18]

; 1235 :     pDisk->d_DiskInfo.di_cylinders = 0;

  0002c	e5842020	 str         r2, [r4, #0x20]

; 1236 :     pDisk->d_DiskInfo.di_heads = 0;

  00030	e5842024	 str         r2, [r4, #0x24]

; 1237 :     pDisk->d_DiskInfo.di_sectors = 0;

  00034	e5842028	 str         r2, [r4, #0x28]

; 1238 :     pDisk->d_Supports4Bit = FALSE;

  00038	e5842034	 str         r2, [r4, #0x34]

; 1239 :     
; 1240 :     //pDisk->d_DiskInfo.di_flags = DISK_INFO_FLAG_CHS_UNCERTAIN |   DISK_INFO_FLAG_MBR;
; 1241 : 
; 1242 :     // move to removable thread
; 1243 :     //if (MMCIssueIdentify(pDisk) == FALSE)
; 1244 :     //{
; 1245 :     //  return 2;
; 1246 :     //}
; 1247 : 
; 1248 :     return TRUE;

  0003c	e3a00001	 mov         r0, #1

; 1249 : 
; 1250 : }   // Initdisk

  00040	e8bd4010	 ldmia       sp!, {r4, lr}
  00044	e12fff1e	 bx          lr
  00048		 |$M45404|

			 ENDP  ; |MMCInitDisk|

	EXPORT	|SDCardIdentify|

  00000			 AREA	 |.pdata|, PDATA
|$T45415| DCD	|$LN5@SDCardIden|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |SDCardIdentify| PROC

; 1305 : {

  00000		 |$LN5@SDCardIden|
  00000		 |$M45412|

; 1306 :     UNREFERENCED_PARAMETER(pSector);
; 1307 :     UNREFERENCED_PARAMETER(pDisk);
; 1308 :     OALMSGX(OAL_INFO, (L"SDCardIdentify: Identify device ...\r\n"));
; 1309 :     
; 1310 :     return DL_SUCCESS;

  00000	e3a00000	 mov         r0, #0

; 1311 : }

  00004	e12fff1e	 bx          lr
  00008		 |$M45413|

			 ENDP  ; |SDCardIdentify|

	EXPORT	|BLSDCardReadData|
	IMPORT	|FileIoRead|

  00000			 AREA	 |.pdata|, PDATA
|$T45426| DCD	|$LN7@BLSDCardRe|
	DCD	0x40000f01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |BLSDCardReadData| PROC

; 1431 : {

  00000		 |$LN7@BLSDCardRe|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M45423|
  00004	e1a02001	 mov         r2, r1
  00008	e1a03000	 mov         r3, r0

; 1432 :     // called to read data from MMC/SD card as stream data, not as block data
; 1433 : 
; 1434 :     OALMSGX(OAL_FUNC, (L"BLSDCardReadData: address 0x%x, %d bytes\r\n", pData, size));
; 1435 : 
; 1436 :     //g_eboot.readSize = size;
; 1437 :     //g_eboot.pReadBuffer = pData;
; 1438 : 
; 1439 :     if (FileIoRead(&fileio_ops, pFile, (PVOID)pData, size) != FILEIO_STATUS_OK)

  0000c	e59f1024	 ldr         r1, [pc, #0x24]
  00010	e59f001c	 ldr         r0, [pc, #0x1C]
  00014	e5911000	 ldr         r1, [r1]
  00018	eb000000	 bl          FileIoRead
  0001c	e3500000	 cmp         r0, #0

; 1440 :         return FALSE;

  00020	13a00000	 movne       r0, #0

; 1443 : }

  00024	149de004	 ldrne       lr, [sp], #4

; 1441 :     else
; 1442 :         return TRUE;

  00028	03a00001	 moveq       r0, #1

; 1443 : }

  0002c	049de004	 ldreq       lr, [sp], #4
  00030	e12fff1e	 bx          lr
  00034		 |$LN8@BLSDCardRe|
  00034		 |$LN9@BLSDCardRe|
  00034	00000000	 DCD         |fileio_ops|
  00038		 |$LN10@BLSDCardRe|
  00038	00000000	 DCD         |pFile|
  0003c		 |$M45424|

			 ENDP  ; |BLSDCardReadData|

	EXPORT	|MMCSetBlockLen|

  00000			 AREA	 |.pdata|, PDATA
|$T45439| DCD	|$LN6@MMCSetBloc|
	DCD	0x40001701
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |MMCSetBlockLen| PROC

; 379  : {

  00000		 |$LN6@MMCSetBloc|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M45436|
  00004	e1a0e000	 mov         lr, r0

; 380  :     MMCcmd.card_type = pDisk->d_CardType;

  00008	e59f2048	 ldr         r2, [pc, #0x48]
  0000c	e59e3010	 ldr         r3, [lr, #0x10]

; 381  :     MMCcmd.command = SET_BLOCKLEN;

  00010	e3a01010	 mov         r1, #0x10

; 382  :     MMCcmd.num_blocks = 1;

  00014	e3a00001	 mov         r0, #1
  00018	e5823000	 str         r3, [r2]
  0001c	e5c21004	 strb        r1, [r2, #4]
  00020	e582000c	 str         r0, [r2, #0xC]

; 383  :     MMCcmd.block_len = pDisk->d_DiskInfo.di_bytes_per_sect;

  00024	e59e301c	 ldr         r3, [lr, #0x1C]

; 384  :     MMCcmd.argument = pDisk->d_DiskInfo.di_bytes_per_sect;
; 385  : 
; 386  :     OALMSGX(OAL_FUNC, (TEXT("SET_BLOCKLEN\r\n")));
; 387  :     if (MMCCommandResponse(&MMCcmd, 0))

  00028	e3a01000	 mov         r1, #0
  0002c	e1a00002	 mov         r0, r2
  00030	e5823010	 str         r3, [r2, #0x10]
  00034	e59e301c	 ldr         r3, [lr, #0x1C]
  00038	e5823008	 str         r3, [r2, #8]
  0003c	eb000000	 bl          MMCCommandResponse
  00040	e3500000	 cmp         r0, #0

; 388  :     {
; 389  :         OALMSGX(OAL_FUNC, (TEXT("MMCCommandResponse SET_BLOCKLEN error!\r\n")));
; 390  :         return 1;

  00044	13a00001	 movne       r0, #1

; 393  : }

  00048	149de004	 ldrne       lr, [sp], #4

; 391  :     }
; 392  :     return 0;

  0004c	03a00000	 moveq       r0, #0

; 393  : }

  00050	049de004	 ldreq       lr, [sp], #4
  00054	e12fff1e	 bx          lr
  00058		 |$LN7@MMCSetBloc|
  00058		 |$LN8@MMCSetBloc|
  00058	00000000	 DCD         |MMCcmd|
  0005c		 |$M45437|

			 ENDP  ; |MMCSetBlockLen|

	EXPORT	|MMCWaitForReady|
	EXPORT	|??_C@_1FE@BCNJBLJK@?$AAS?$AAD?$AAM?$AAe?$AAm?$AA?3?$AA?5?$AAc?$AAa?$AAr?$AAd?$AA?5?$AAr?$AAd?$AAy?$AA?5?$AAb?$AAT?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AA?0?$AA?5?$AAs?$AAt?$AAa?$AAt?$AAu?$AAs@| [ DATA ] ; `string'
	IMPORT	|OALStall|
	IMPORT	|OALGetTickCount|

  00000			 AREA	 |.pdata|, PDATA
|$T45460| DCD	|$LN19@MMCWaitFor|
	DCD	0x40003f01

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FE@BCNJBLJK@?$AAS?$AAD?$AAM?$AAe?$AAm?$AA?3?$AA?5?$AAc?$AAa?$AAr?$AAd?$AA?5?$AAr?$AAd?$AAy?$AA?5?$AAb?$AAT?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AA?0?$AA?5?$AAs?$AAt?$AAa?$AAt?$AAu?$AAs@| DCB "S"
	DCB	0x0, "D", 0x0, "M", 0x0, "e", 0x0, "m", 0x0, ":", 0x0, " "
	DCB	0x0, "c", 0x0, "a", 0x0, "r", 0x0, "d", 0x0, " ", 0x0, "r"
	DCB	0x0, "d", 0x0, "y", 0x0, " ", 0x0, "b", 0x0, "T", 0x0, "i"
	DCB	0x0, "m", 0x0, "e", 0x0, "o", 0x0, "u", 0x0, "t", 0x0, ","
	DCB	0x0, " ", 0x0, "s", 0x0, "t", 0x0, "a", 0x0, "t", 0x0, "u"
	DCB	0x0, "s", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "X", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |MMCWaitForReady| PROC

; 525  : {

  00000		 |$LN19@MMCWaitFor|
  00000	e92d41f0	 stmdb       sp!, {r4 - r8, lr}
  00004		 |$M45457|

; 526  :     UINT32 StartTime;
; 527  :     int card_state;
; 528  :     int bTimeout;
; 529  : 
; 530  :     MMCcmd.card_type = pDisk->d_CardType;

  00004	e59f40ec	 ldr         r4, [pc, #0xEC]
  00008	e5903010	 ldr         r3, [r0, #0x10]

; 531  :     MMCcmd.command = SEND_STATUS;

  0000c	e3a0200d	 mov         r2, #0xD

; 532  :     MMCcmd.argument = (pDisk->d_RelAddress)<<16;
; 533  :     MMCcmd.num_blocks = 1;

  00010	e3a0e001	 mov         lr, #1
  00014	e5843000	 str         r3, [r4]
  00018	e5c42004	 strb        r2, [r4, #4]
  0001c	e5903014	 ldr         r3, [r0, #0x14]

; 534  :     MMCcmd.block_len = 512;

  00020	e3a02c02	 mov         r2, #2, 24

; 535  : 
; 536  :     OALMSGX(OAL_FUNC, (TEXT("SEND_STATUS\r\n")));
; 537  :     if (MMCCommandResponse(&MMCcmd, 0)) 

  00024	e3a01000	 mov         r1, #0
  00028	e1a03803	 mov         r3, r3, lsl #16
  0002c	e5843008	 str         r3, [r4, #8]
  00030	e584e00c	 str         lr, [r4, #0xC]
  00034	e1a00004	 mov         r0, r4
  00038	e5842010	 str         r2, [r4, #0x10]
  0003c	eb000000	 bl          MMCCommandResponse
  00040	e3500000	 cmp         r0, #0

; 538  :         return 1;

  00044	1a000026	 bne         |$LN11@MMCWaitFor|

; 539  : 
; 540  :     StartTime = OALGetTickCount();

  00048	eb000000	 bl          OALGetTickCount

; 541  :     card_state = MMC_STATUS_STATE(MMCcmd.status);

  0004c	e5941014	 ldr         r1, [r4, #0x14]
  00050	e1a07000	 mov         r7, r0

; 542  :     bTimeout = FALSE;

  00054	e3a06000	 mov         r6, #0
  00058	e1a03981	 mov         r3, r1, lsl #19
  0005c	e1a05e23	 mov         r5, r3, lsr #28
  00060	e3a08c27	 mov         r8, #0x27, 24
  00064		 |$LL7@MMCWaitFor|

; 543  : 
; 544  :     // make sure the card is ready to accept data and we are in the proper
; 545  :     // state.  If an error occured on the last transaction, the card might still
; 546  :     // be in the prg state, etc.
; 547  :         
; 548  :     while ( (!(MMC_STATUS_READY(MMCcmd.status))) ||
; 549  :            ( (card_state != MMC_STATUS_STATE_STBY) && (card_state != MMC_STATUS_STATE_TRAN) )   
; 550  :          )

  00064	e3110c01	 tst         r1, #1, 24
  00068	0a000003	 beq         |$LN5@MMCWaitFor|
  0006c	e3550003	 cmp         r5, #3
  00070	0a000013	 beq         |$LN6@MMCWaitFor|
  00074	e3550004	 cmp         r5, #4
  00078	0a000011	 beq         |$LN6@MMCWaitFor|
  0007c		 |$LN5@MMCWaitFor|

; 551  :     {
; 552  :         if (bTimeout)

  0007c	e3560000	 cmp         r6, #0
  00080	1a000012	 bne         |$LN15@MMCWaitFor|

; 556  :         }
; 557  : 
; 558  :         if ( (card_state != MMC_STATUS_STATE_STBY) && (card_state != MMC_STATUS_STATE_TRAN) )
; 559  :         {
; 560  :             OALMSGX(OAL_FUNC, (TEXT("SDMem: wait for card state = %i\r\n"), card_state));
; 561  :             OALMSGX(OAL_FUNC, (TEXT("SDMem: MMCcmd.status = 0x%X\r\n"), MMCcmd.status));
; 562  :         }
; 563  :         
; 564  :         OALMSGX(OAL_FUNC, (TEXT("SEND_STATUS\r\n")));
; 565  :         if (MMCCommandResponse(&MMCcmd, 0)) 

  00084	e3a01000	 mov         r1, #0
  00088	e1a00004	 mov         r0, r4
  0008c	eb000000	 bl          MMCCommandResponse
  00090	e3500000	 cmp         r0, #0
  00094	1a000012	 bne         |$LN11@MMCWaitFor|

; 566  :             return 1;
; 567  : 
; 568  :         card_state = MMC_STATUS_STATE(MMCcmd.status);

  00098	e5943014	 ldr         r3, [r4, #0x14]
  0009c	e1a03983	 mov         r3, r3, lsl #19
  000a0	e1a05e23	 mov         r5, r3, lsr #28

; 569  : 
; 570  :         if (OALGetTickCount() - StartTime > 1000)

  000a4	eb000000	 bl          OALGetTickCount
  000a8	e0403007	 sub         r3, r0, r7
  000ac	e3530ffa	 cmp         r3, #0xFA, 30

; 571  :             bTimeout = TRUE;
; 572  : 
; 573  :         OALStall(10 * 1000);

  000b0	e3880010	 orr         r0, r8, #0x10
  000b4	83a06001	 movhi       r6, #1
  000b8	eb000000	 bl          OALStall

; 574  :     }

  000bc	e5941014	 ldr         r1, [r4, #0x14]
  000c0	eaffffe7	 b           |$LL7@MMCWaitFor|
  000c4		 |$LN6@MMCWaitFor|

; 575  :     
; 576  :     return 0;

  000c4	e3a00000	 mov         r0, #0

; 577  : }

  000c8	e8bd41f0	 ldmia       sp!, {r4 - r8, lr}
  000cc	e12fff1e	 bx          lr
  000d0		 |$LN15@MMCWaitFor|

; 553  :         {
; 554  :             OALMSG(OAL_ERROR, (TEXT("SDMem: card rdy bTimeout, status = 0x%X\r\n"), MMCcmd.status));

  000d0	e59f301c	 ldr         r3, [pc, #0x1C]
  000d4	e5933440	 ldr         r3, [r3, #0x440]
  000d8	e3130001	 tst         r3, #1
  000dc	159f000c	 ldrne       r0, [pc, #0xC]
  000e0	1b000000	 blne        NKDbgPrintfW
  000e4		 |$LN11@MMCWaitFor|

; 555  :             return 1;

  000e4	e3a00001	 mov         r0, #1

; 577  : }

  000e8	e8bd41f0	 ldmia       sp!, {r4 - r8, lr}
  000ec	e12fff1e	 bx          lr
  000f0		 |$LN20@MMCWaitFor|
  000f0		 |$LN21@MMCWaitFor|
  000f0	00000000	 DCD         |??_C@_1FE@BCNJBLJK@?$AAS?$AAD?$AAM?$AAe?$AAm?$AA?3?$AA?5?$AAc?$AAa?$AAr?$AAd?$AA?5?$AAr?$AAd?$AAy?$AA?5?$AAb?$AAT?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AA?0?$AA?5?$AAs?$AAt?$AAa?$AAt?$AAu?$AAs@|
  000f4		 |$LN22@MMCWaitFor|
  000f4	00000000	 DCD         |dpCurSettings|
  000f8		 |$LN23@MMCWaitFor|
  000f8	00000000	 DCD         |MMCcmd|
  000fc		 |$M45458|

			 ENDP  ; |MMCWaitForReady|

	EXPORT	|MMCReadMultiSectors|
	EXPORT	|??_C@_1DG@LHNGMEJK@?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAm?$AAu?$AAl?$AAt?$AAi?$AA?5?$AAs?$AAe?$AAc?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAe?$AAr?$AAr?$AAo?$AAr?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1IM@NDHBECDO@?$AAM?$AAM?$AAC?$AAR?$AAe?$AAa?$AAd?$AAM?$AAu?$AAl?$AAt?$AAi?$AAS?$AAe?$AAc?$AAt?$AAo?$AAr?$AAs?$AA?3?$AA?5?$AAM?$AAM?$AAC?$AAC?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AAR@| [ DATA ] ; `string'
	EXPORT	|??_C@_1JA@ILPGFCNI@?$AAM?$AAM?$AAC?$AAR?$AAe?$AAa?$AAd?$AAM?$AAu?$AAl?$AAt?$AAi?$AAS?$AAe?$AAc?$AAt?$AAo?$AAr?$AAs?$AA?3?$AA?5?$AAM?$AAM?$AAC?$AAC?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AAR@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FK@HAPCNFMM@?$AAM?$AAM?$AAC?$AAR?$AAe?$AAa?$AAd?$AAM?$AAu?$AAl?$AAt?$AAi?$AAS?$AAe?$AAc?$AAt?$AAo?$AAr?$AAs?$AA?3?$AA?5?$AAM?$AAM?$AAC?$AAW?$AAa?$AAi?$AAt?$AAF?$AAo?$AAr?$AAR@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T45488| DCD	|$LN23@MMCReadMul|
	DCD	0x40005701

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DG@LHNGMEJK@?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAm?$AAu?$AAl?$AAt?$AAi?$AA?5?$AAs?$AAe?$AAc?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAe?$AAr?$AAr?$AAo?$AAr?$AA?$AN?$AA?6?$AA?$AA@| DCB "r"
	DCB	0x0, "e", 0x0, "a", 0x0, "d", 0x0, " ", 0x0, "m", 0x0, "u"
	DCB	0x0, "l", 0x0, "t", 0x0, "i", 0x0, " ", 0x0, "s", 0x0, "e"
	DCB	0x0, "c", 0x0, "t", 0x0, "o", 0x0, "r", 0x0, "s", 0x0, " "
	DCB	0x0, "e", 0x0, "r", 0x0, "r", 0x0, "o", 0x0, "r", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1IM@NDHBECDO@?$AAM?$AAM?$AAC?$AAR?$AAe?$AAa?$AAd?$AAM?$AAu?$AAl?$AAt?$AAi?$AAS?$AAe?$AAc?$AAt?$AAo?$AAr?$AAs?$AA?3?$AA?5?$AAM?$AAM?$AAC?$AAC?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AAR@| DCB "M"
	DCB	0x0, "M", 0x0, "C", 0x0, "R", 0x0, "e", 0x0, "a", 0x0, "d"
	DCB	0x0, "M", 0x0, "u", 0x0, "l", 0x0, "t", 0x0, "i", 0x0, "S"
	DCB	0x0, "e", 0x0, "c", 0x0, "t", 0x0, "o", 0x0, "r", 0x0, "s"
	DCB	0x0, ":", 0x0, " ", 0x0, "M", 0x0, "M", 0x0, "C", 0x0, "C"
	DCB	0x0, "o", 0x0, "m", 0x0, "m", 0x0, "a", 0x0, "n", 0x0, "d"
	DCB	0x0, "R", 0x0, "e", 0x0, "s", 0x0, "p", 0x0, "o", 0x0, "n"
	DCB	0x0, "s", 0x0, "e", 0x0, " ", 0x0, "e", 0x0, "r", 0x0, "r"
	DCB	0x0, "o", 0x0, "r", 0x0, " ", 0x0, "o", 0x0, "n", 0x0, " "
	DCB	0x0, "S", 0x0, "T", 0x0, "O", 0x0, "P", 0x0, "_", 0x0, "T"
	DCB	0x0, "R", 0x0, "A", 0x0, "N", 0x0, "S", 0x0, "M", 0x0, "I"
	DCB	0x0, "S", 0x0, "S", 0x0, "I", 0x0, "O", 0x0, "N", 0x0, "!"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1JA@ILPGFCNI@?$AAM?$AAM?$AAC?$AAR?$AAe?$AAa?$AAd?$AAM?$AAu?$AAl?$AAt?$AAi?$AAS?$AAe?$AAc?$AAt?$AAo?$AAr?$AAs?$AA?3?$AA?5?$AAM?$AAM?$AAC?$AAC?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AAR@| DCB "M"
	DCB	0x0, "M", 0x0, "C", 0x0, "R", 0x0, "e", 0x0, "a", 0x0, "d"
	DCB	0x0, "M", 0x0, "u", 0x0, "l", 0x0, "t", 0x0, "i", 0x0, "S"
	DCB	0x0, "e", 0x0, "c", 0x0, "t", 0x0, "o", 0x0, "r", 0x0, "s"
	DCB	0x0, ":", 0x0, " ", 0x0, "M", 0x0, "M", 0x0, "C", 0x0, "C"
	DCB	0x0, "o", 0x0, "m", 0x0, "m", 0x0, "a", 0x0, "n", 0x0, "d"
	DCB	0x0, "R", 0x0, "e", 0x0, "s", 0x0, "p", 0x0, "o", 0x0, "n"
	DCB	0x0, "s", 0x0, "e", 0x0, " ", 0x0, "e", 0x0, "r", 0x0, "r"
	DCB	0x0, "o", 0x0, "r", 0x0, " ", 0x0, "o", 0x0, "n", 0x0, " "
	DCB	0x0, "R", 0x0, "E", 0x0, "A", 0x0, "D", 0x0, "_", 0x0, "M"
	DCB	0x0, "U", 0x0, "L", 0x0, "T", 0x0, "I", 0x0, "P", 0x0, "L"
	DCB	0x0, "E", 0x0, "_", 0x0, "B", 0x0, "L", 0x0, "O", 0x0, "C"
	DCB	0x0, "K", 0x0, "!", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FK@HAPCNFMM@?$AAM?$AAM?$AAC?$AAR?$AAe?$AAa?$AAd?$AAM?$AAu?$AAl?$AAt?$AAi?$AAS?$AAe?$AAc?$AAt?$AAo?$AAr?$AAs?$AA?3?$AA?5?$AAM?$AAM?$AAC?$AAW?$AAa?$AAi?$AAt?$AAF?$AAo?$AAr?$AAR@| DCB "M"
	DCB	0x0, "M", 0x0, "C", 0x0, "R", 0x0, "e", 0x0, "a", 0x0, "d"
	DCB	0x0, "M", 0x0, "u", 0x0, "l", 0x0, "t", 0x0, "i", 0x0, "S"
	DCB	0x0, "e", 0x0, "c", 0x0, "t", 0x0, "o", 0x0, "r", 0x0, "s"
	DCB	0x0, ":", 0x0, " ", 0x0, "M", 0x0, "M", 0x0, "C", 0x0, "W"
	DCB	0x0, "a", 0x0, "i", 0x0, "t", 0x0, "F", 0x0, "o", 0x0, "r"
	DCB	0x0, "R", 0x0, "e", 0x0, "a", 0x0, "d", 0x0, "y", 0x0, " "
	DCB	0x0, "e", 0x0, "r", 0x0, "r", 0x0, "o", 0x0, "r", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |MMCReadMultiSectors| PROC

; 581  : {

  00000		 |$LN23@MMCReadMul|
  00000	e92d43f0	 stmdb       sp!, {r4 - r9, lr}
  00004		 |$M45485|
  00004	e1a08003	 mov         r8, r3
  00008	e1a09002	 mov         r9, r2
  0000c	e1a07001	 mov         r7, r1
  00010	e1a06000	 mov         r6, r0

; 582  :     DWORD Status;
; 583  : 
; 584  :     // Make sure we don't access beyond end of disk
; 585  :     if ((LogicalSector + numSectors) >= pDisk->d_DiskInfo.di_total_sectors)

  00014	e5964018	 ldr         r4, [r6, #0x18]
  00018	e088e007	 add         lr, r8, r7
  0001c	e59f5134	 ldr         r5, [pc, #0x134]
  00020	e15e0004	 cmp         lr, r4

; 586  :     {
; 587  :         Status = ERROR_INVALID_PARAMETER;

  00024	23a04057	 movcs       r4, #0x57
  00028	2a00003b	 bcs         |$LN19@MMCReadMul|

; 590  :     }
; 591  :     
; 592  :     if (pDisk->d_DiskCardState != STATE_OPENED && pDisk->d_DiskCardState != STATE_CLOSED)

  0002c	e5963008	 ldr         r3, [r6, #8]
  00030	e3530003	 cmp         r3, #3
  00034	13530002	 cmpne       r3, #2

; 593  :     {
; 594  :         Status = MMCREAD_FAILURE;

  00038	13a04001	 movne       r4, #1
  0003c	1a000036	 bne         |$LN19@MMCReadMul|

; 595  :         OALMSGX(OAL_FUNC, (TEXT("MMCReadMultiSectorsExit: incorrect disk state\r\n")));
; 596  :         goto MMCReadMultiSectorsExit;
; 597  :     }
; 598  : 
; 599  :     if (MMCWaitForReady(pDisk))

  00040	e1a00006	 mov         r0, r6
  00044	eb000000	 bl          MMCWaitForReady
  00048	e3500000	 cmp         r0, #0
  0004c	0a000005	 beq         |$LN6@MMCReadMul|
  00050	e5953440	 ldr         r3, [r5, #0x440]

; 600  :     {
; 601  :         Status = MMCREAD_FAILURE;

  00054	e3a04001	 mov         r4, #1

; 602  :         OALMSG(OAL_ERROR, (TEXT("MMCReadMultiSectors: MMCWaitForReady error\r\n")));

  00058	e3130001	 tst         r3, #1
  0005c	0a00002e	 beq         |$LN19@MMCReadMul|
  00060	e59f00ec	 ldr         r0, [pc, #0xEC]

; 603  :         goto MMCReadMultiSectorsExit;

  00064	ea00002b	 b           |$LN20@MMCReadMul|
  00068		 |$LN6@MMCReadMul|

; 604  :     }
; 605  : 
; 606  :     // build command
; 607  :     MMCcmd.command = READ_MULTIPLE_BLOCK;

  00068	e59f40e0	 ldr         r4, [pc, #0xE0]
  0006c	e3a03012	 mov         r3, #0x12

; 608  :     MMCcmd.num_blocks = numSectors;
; 609  :     MMCcmd.block_len = pDisk->d_DiskInfo.di_bytes_per_sect;
; 610  :     MMCcmd.pBuffer = pBuffer;
; 611  :     
; 612  :     // starting address
; 613  :     if (MMCcmd.card_type == CARDTYPE_SDHC)
; 614  :         MMCcmd.argument = LogicalSector;
; 615  :     else
; 616  :         MMCcmd.argument = LogicalSector * pDisk->d_DiskInfo.di_bytes_per_sect;
; 617  : 
; 618  :     OALMSGX(OAL_FUNC, (TEXT("READ_MULTIPLE_BLOCK\r\n")));
; 619  :     if (MMCCommandResponse(&MMCcmd, 0))

  00070	e3a01000	 mov         r1, #0
  00074	e5c43004	 strb        r3, [r4, #4]
  00078	e584800c	 str         r8, [r4, #0xC]
  0007c	e596301c	 ldr         r3, [r6, #0x1C]
  00080	e1a00004	 mov         r0, r4
  00084	e5843010	 str         r3, [r4, #0x10]
  00088	e5849034	 str         r9, [r4, #0x34]
  0008c	e5943000	 ldr         r3, [r4]
  00090	e3530003	 cmp         r3, #3
  00094	05847008	 streq       r7, [r4, #8]
  00098	1596301c	 ldrne       r3, [r6, #0x1C]
  0009c	10020793	 mulne       r2, r3, r7
  000a0	15842008	 strne       r2, [r4, #8]
  000a4	eb000000	 bl          MMCCommandResponse
  000a8	e3500000	 cmp         r0, #0
  000ac	0a000005	 beq         |$LN3@MMCReadMul|
  000b0	e5953440	 ldr         r3, [r5, #0x440]

; 620  :     {
; 621  :         Status = MMCREAD_FAILURE;

  000b4	e3a04001	 mov         r4, #1

; 622  :         OALMSG(OAL_ERROR, (TEXT("MMCReadMultiSectors: MMCCommandResponse error on READ_MULTIPLE_BLOCK!\r\n")));

  000b8	e3130001	 tst         r3, #1
  000bc	0a000016	 beq         |$LN19@MMCReadMul|
  000c0	e59f0084	 ldr         r0, [pc, #0x84]

; 623  :         goto MMCReadMultiSectorsExit;

  000c4	ea000013	 b           |$LN20@MMCReadMul|
  000c8		 |$LN3@MMCReadMul|

; 624  :     }
; 625  : 
; 626  :     // send STOP_TRANSMISSION
; 627  :     MMCcmd.command = STOP_TRANSMISSION;

  000c8	e3a0300c	 mov         r3, #0xC
  000cc	e5c43004	 strb        r3, [r4, #4]

; 628  :     MMCcmd.argument = 0;

  000d0	e3a03000	 mov         r3, #0
  000d4	e5843008	 str         r3, [r4, #8]

; 629  :     MMCcmd.num_blocks = 0;

  000d8	e3a03000	 mov         r3, #0
  000dc	e584300c	 str         r3, [r4, #0xC]

; 630  :     MMCcmd.block_len = 0;

  000e0	e3a03000	 mov         r3, #0
  000e4	e5843010	 str         r3, [r4, #0x10]

; 631  :     MMCcmd.pBuffer = 0;

  000e8	e3a03000	 mov         r3, #0

; 632  :     if (MMCCommandResponse(&MMCcmd, 0))

  000ec	e3a01000	 mov         r1, #0
  000f0	e1a00004	 mov         r0, r4
  000f4	e5843034	 str         r3, [r4, #0x34]
  000f8	eb000000	 bl          MMCCommandResponse
  000fc	e3500000	 cmp         r0, #0
  00100	0a00000b	 beq         |$LN2@MMCReadMul|
  00104	e5953440	 ldr         r3, [r5, #0x440]

; 633  :     {
; 634  :         Status = MMCREAD_FAILURE;

  00108	e3a04001	 mov         r4, #1

; 635  :         OALMSG(OAL_ERROR, (TEXT("MMCReadMultiSectors: MMCCommandResponse error on STOP_TRANSMISSION!\r\n")));

  0010c	e3130001	 tst         r3, #1
  00110	0a000001	 beq         |$LN19@MMCReadMul|
  00114	e59f002c	 ldr         r0, [pc, #0x2C]
  00118		 |$LN20@MMCReadMul|
  00118	eb000000	 bl          NKDbgPrintfW
  0011c		 |$LN19@MMCReadMul|

; 588  :         OALMSGX(OAL_FUNC, (TEXT("MMCReadMultiSectorsExit: ERROR_INVALID_PARAMETER\r\n")));
; 589  :         goto MMCReadMultiSectorsExit;

  0011c	e5953440	 ldr         r3, [r5, #0x440]

; 640  : 
; 641  : MMCReadMultiSectorsExit:
; 642  :     
; 643  :     if (Status != MMCREAD_SUCCESS)
; 644  :     {
; 645  :         OALMSG(OAL_ERROR, (TEXT("read multi sectors error\r\n")));

  00120	e3130001	 tst         r3, #1
  00124	0a000003	 beq         |$LN17@MMCReadMul|
  00128	e59f0014	 ldr         r0, [pc, #0x14]
  0012c	eb000000	 bl          NKDbgPrintfW
  00130	ea000000	 b           |$LN17@MMCReadMul|
  00134		 |$LN2@MMCReadMul|

; 636  :         goto MMCReadMultiSectorsExit;
; 637  :     }
; 638  : 
; 639  :     Status = MMCREAD_SUCCESS;

  00134	e3a04000	 mov         r4, #0
  00138		 |$MMCReadMultiSectorsExit$44623|

; 640  : 
; 641  : MMCReadMultiSectorsExit:
; 642  :     
; 643  :     if (Status != MMCREAD_SUCCESS)
; 644  :     {
; 645  :         OALMSG(OAL_ERROR, (TEXT("read multi sectors error\r\n")));

  00138		 |$LN17@MMCReadMul|

; 646  : 
; 647  :         //MMCcmd.command = SELECT_DESELECT_CARD;
; 648  :         // zero deselects all cards
; 649  :         //MMCcmd.argument = 0;
; 650  :         //OALMSGX(OAL_FUNC, (TEXT("SELECT_DESELECT_CARD\r\n")));
; 651  :         //MMCCommandResponse(&MMCcmd, 0);
; 652  :     }
; 653  : 
; 654  :     return Status;
; 655  : }

  00138	e1a00004	 mov         r0, r4
  0013c	e8bd43f0	 ldmia       sp!, {r4 - r9, lr}
  00140	e12fff1e	 bx          lr
  00144		 |$LN24@MMCReadMul|
  00144		 |$LN25@MMCReadMul|
  00144	00000000	 DCD         |??_C@_1DG@LHNGMEJK@?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAm?$AAu?$AAl?$AAt?$AAi?$AA?5?$AAs?$AAe?$AAc?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAe?$AAr?$AAr?$AAo?$AAr?$AA?$AN?$AA?6?$AA?$AA@|
  00148		 |$LN26@MMCReadMul|
  00148	00000000	 DCD         |??_C@_1IM@NDHBECDO@?$AAM?$AAM?$AAC?$AAR?$AAe?$AAa?$AAd?$AAM?$AAu?$AAl?$AAt?$AAi?$AAS?$AAe?$AAc?$AAt?$AAo?$AAr?$AAs?$AA?3?$AA?5?$AAM?$AAM?$AAC?$AAC?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AAR@|
  0014c		 |$LN27@MMCReadMul|
  0014c	00000000	 DCD         |??_C@_1JA@ILPGFCNI@?$AAM?$AAM?$AAC?$AAR?$AAe?$AAa?$AAd?$AAM?$AAu?$AAl?$AAt?$AAi?$AAS?$AAe?$AAc?$AAt?$AAo?$AAr?$AAs?$AA?3?$AA?5?$AAM?$AAM?$AAC?$AAC?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AAR@|
  00150		 |$LN28@MMCReadMul|
  00150	00000000	 DCD         |MMCcmd|
  00154		 |$LN29@MMCReadMul|
  00154	00000000	 DCD         |??_C@_1FK@HAPCNFMM@?$AAM?$AAM?$AAC?$AAR?$AAe?$AAa?$AAd?$AAM?$AAu?$AAl?$AAt?$AAi?$AAS?$AAe?$AAc?$AAt?$AAo?$AAr?$AAs?$AA?3?$AA?5?$AAM?$AAM?$AAC?$AAW?$AAa?$AAi?$AAt?$AAF?$AAo?$AAr?$AAR@|
  00158		 |$LN30@MMCReadMul|
  00158	00000000	 DCD         |dpCurSettings|
  0015c		 |$M45486|

			 ENDP  ; |MMCReadMultiSectors|

	EXPORT	|MMCRead|
	EXPORT	|??_C@_1BK@GAKJANPH@?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAe?$AAr?$AAr?$AAo?$AAr?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HE@HOGFNIBK@?$AAM?$AAM?$AAC?$AAR?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAM?$AAM?$AAC?$AAC?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AAR?$AAe?$AAs?$AAp?$AAo?$AAn?$AAs?$AAe?$AA?5?$AAe?$AAr?$AAr?$AAo@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T45514| DCD	|$LN18@MMCRead|
	DCD	0x40003901

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BK@GAKJANPH@?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAe?$AAr?$AAr?$AAo?$AAr?$AA?$AN?$AA?6?$AA?$AA@| DCB "r"
	DCB	0x0, "e", 0x0, "a", 0x0, "d", 0x0, " ", 0x0, "e", 0x0, "r"
	DCB	0x0, "r", 0x0, "o", 0x0, "r", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HE@HOGFNIBK@?$AAM?$AAM?$AAC?$AAR?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAM?$AAM?$AAC?$AAC?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AAR?$AAe?$AAs?$AAp?$AAo?$AAn?$AAs?$AAe?$AA?5?$AAe?$AAr?$AAr?$AAo@| DCB "M"
	DCB	0x0, "M", 0x0, "C", 0x0, "R", 0x0, "e", 0x0, "a", 0x0, "d"
	DCB	0x0, ":", 0x0, " ", 0x0, "M", 0x0, "M", 0x0, "C", 0x0, "C"
	DCB	0x0, "o", 0x0, "m", 0x0, "m", 0x0, "a", 0x0, "n", 0x0, "d"
	DCB	0x0, "R", 0x0, "e", 0x0, "s", 0x0, "p", 0x0, "o", 0x0, "n"
	DCB	0x0, "s", 0x0, "e", 0x0, " ", 0x0, "e", 0x0, "r", 0x0, "r"
	DCB	0x0, "o", 0x0, "r", 0x0, " ", 0x0, "o", 0x0, "n", 0x0, " "
	DCB	0x0, "R", 0x0, "E", 0x0, "A", 0x0, "D", 0x0, "_", 0x0, "S"
	DCB	0x0, "I", 0x0, "N", 0x0, "G", 0x0, "L", 0x0, "E", 0x0, "_"
	DCB	0x0, "B", 0x0, "L", 0x0, "O", 0x0, "C", 0x0, "K", 0x0, "!"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |MMCRead| PROC

; 659  : {

  00000		 |$LN18@MMCRead|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004		 |$M45511|
  00004	e1a07002	 mov         r7, r2
  00008	e1a05001	 mov         r5, r1
  0000c	e1a04000	 mov         r4, r0

; 660  :     DWORD Status;
; 661  : 
; 662  :     // Make sure we don't access beyond end of disk
; 663  :     if (LogicalSector >= pDisk->d_DiskInfo.di_total_sectors)

  00010	e5943018	 ldr         r3, [r4, #0x18]
  00014	e59f60c4	 ldr         r6, [pc, #0xC4]
  00018	e1550003	 cmp         r5, r3

; 664  :     {
; 665  :         Status = ERROR_INVALID_PARAMETER;

  0001c	23a04057	 movcs       r4, #0x57
  00020	2a000021	 bcs         |$LN14@MMCRead|

; 666  :         OALMSGX(OAL_FUNC, (TEXT("DoDiskIO: ERROR_INVALID_PARAMETER\r\n")));
; 667  :         goto MMCReadExit;
; 668  :     }
; 669  :     
; 670  :     if (pDisk->d_DiskCardState != STATE_OPENED && pDisk->d_DiskCardState != STATE_CLOSED)

  00024	e5943008	 ldr         r3, [r4, #8]
  00028	e3530003	 cmp         r3, #3
  0002c	0a000003	 beq         |$LN6@MMCRead|
  00030	e3530002	 cmp         r3, #2
  00034	0a000001	 beq         |$LN6@MMCRead|
  00038		 |$LN15@MMCRead|

; 671  :     {
; 672  :         Status = MMCREAD_FAILURE;

  00038	e3a04001	 mov         r4, #1

; 673  :         OALMSGX(OAL_FUNC, (TEXT("DoDiskIO: incorrect disk state\r\n")));
; 674  :         goto MMCReadExit;

  0003c	ea00001a	 b           |$LN14@MMCRead|
  00040		 |$LN6@MMCRead|

; 675  :     }
; 676  : 
; 677  :     if (MMCWaitForReady(pDisk))

  00040	e1a00004	 mov         r0, r4
  00044	eb000000	 bl          MMCWaitForReady
  00048	e3500000	 cmp         r0, #0

; 678  :     {
; 679  :         Status = MMCREAD_FAILURE;
; 680  :         goto MMCReadExit;

  0004c	1afffff9	 bne         |$LN15@MMCRead|

; 681  :     }
; 682  : 
; 683  :     // build command
; 684  :     MMCcmd.command = READ_SINGLE_BLOCK;

  00050	e59f0084	 ldr         r0, [pc, #0x84]
  00054	e3a03011	 mov         r3, #0x11

; 685  :     MMCcmd.num_blocks = 1;

  00058	e3a02001	 mov         r2, #1
  0005c	e5c03004	 strb        r3, [r0, #4]
  00060	e580200c	 str         r2, [r0, #0xC]

; 686  :     MMCcmd.block_len = pDisk->d_DiskInfo.di_bytes_per_sect;

  00064	e594301c	 ldr         r3, [r4, #0x1C]

; 687  :     MMCcmd.pBuffer = pSectorBuffer;
; 688  :     
; 689  :     // starting address
; 690  :     if (MMCcmd.card_type == CARDTYPE_SDHC)
; 691  :         MMCcmd.argument = LogicalSector;
; 692  :     else
; 693  :         MMCcmd.argument = LogicalSector * pDisk->d_DiskInfo.di_bytes_per_sect;
; 694  : 
; 695  :     OALMSGX(OAL_FUNC, (TEXT("READ_SINGLE_BLOCK\r\n")));
; 696  :     if (MMCCommandResponse(&MMCcmd, 0))

  00068	e3a01000	 mov         r1, #0
  0006c	e5803010	 str         r3, [r0, #0x10]
  00070	e5807034	 str         r7, [r0, #0x34]
  00074	e5903000	 ldr         r3, [r0]
  00078	e3530003	 cmp         r3, #3
  0007c	05805008	 streq       r5, [r0, #8]
  00080	1594301c	 ldrne       r3, [r4, #0x1C]
  00084	10020593	 mulne       r2, r3, r5
  00088	15802008	 strne       r2, [r0, #8]
  0008c	eb000000	 bl          MMCCommandResponse
  00090	e3500000	 cmp         r0, #0
  00094	0a00000a	 beq         |$LN2@MMCRead|
  00098	e5963440	 ldr         r3, [r6, #0x440]

; 697  :     {
; 698  :         Status = MMCREAD_FAILURE;

  0009c	e3a04001	 mov         r4, #1

; 699  :         OALMSG(OAL_ERROR, (TEXT("MMCRead: MMCCommandResponse error on READ_SINGLE_BLOCK!\r\n")));

  000a0	e3130001	 tst         r3, #1
  000a4	159f002c	 ldrne       r0, [pc, #0x2C]
  000a8	1b000000	 blne        NKDbgPrintfW
  000ac		 |$LN14@MMCRead|
  000ac	e5963440	 ldr         r3, [r6, #0x440]

; 704  : 
; 705  : MMCReadExit:
; 706  :     
; 707  :     if (Status != MMCREAD_SUCCESS)
; 708  :     {
; 709  :         OALMSG(OAL_ERROR, (TEXT("read error\r\n")));

  000b0	e3130001	 tst         r3, #1
  000b4	0a000003	 beq         |$LN12@MMCRead|
  000b8	e59f0014	 ldr         r0, [pc, #0x14]
  000bc	eb000000	 bl          NKDbgPrintfW
  000c0	ea000000	 b           |$LN12@MMCRead|
  000c4		 |$LN2@MMCRead|

; 700  :         goto MMCReadExit;
; 701  :     }
; 702  : 
; 703  :     Status = MMCREAD_SUCCESS;

  000c4	e3a04000	 mov         r4, #0
  000c8		 |$MMCReadExit$44649|

; 704  : 
; 705  : MMCReadExit:
; 706  :     
; 707  :     if (Status != MMCREAD_SUCCESS)
; 708  :     {
; 709  :         OALMSG(OAL_ERROR, (TEXT("read error\r\n")));

  000c8		 |$LN12@MMCRead|

; 710  : 
; 711  :         //MMCcmd.command = SELECT_DESELECT_CARD;
; 712  :         // zero deselects all cards
; 713  :         //MMCcmd.argument = 0;
; 714  :         //OALMSGX(OAL_FUNC, (TEXT("SELECT_DESELECT_CARD\r\n")));
; 715  :         //MMCCommandResponse(&MMCcmd, 0);
; 716  :     }
; 717  : 
; 718  :     return Status;
; 719  : }

  000c8	e1a00004	 mov         r0, r4
  000cc	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  000d0	e12fff1e	 bx          lr
  000d4		 |$LN19@MMCRead|
  000d4		 |$LN20@MMCRead|
  000d4	00000000	 DCD         |??_C@_1BK@GAKJANPH@?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAe?$AAr?$AAr?$AAo?$AAr?$AA?$AN?$AA?6?$AA?$AA@|
  000d8		 |$LN21@MMCRead|
  000d8	00000000	 DCD         |??_C@_1HE@HOGFNIBK@?$AAM?$AAM?$AAC?$AAR?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAM?$AAM?$AAC?$AAC?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AAR?$AAe?$AAs?$AAp?$AAo?$AAn?$AAs?$AAe?$AA?5?$AAe?$AAr?$AAr?$AAo@|
  000dc		 |$LN22@MMCRead|
  000dc	00000000	 DCD         |MMCcmd|
  000e0		 |$LN23@MMCRead|
  000e0	00000000	 DCD         |dpCurSettings|
  000e4		 |$M45512|

			 ENDP  ; |MMCRead|

	EXPORT	|__$ArrayPad$| [ DATA ]
	EXPORT	|MMCSelectCard|
	EXPORT	|??_C@_1KA@GCFNELEL@?$AAM?$AAM?$AAC?$AAS?$AAe?$AAl?$AAe?$AAc?$AAt?$AAC?$AAa?$AAr?$AAd?$AA?3?$AA?5?$AAt?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AA?5?$AAw?$AAa?$AAi?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAf@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GK@CDAMFDEK@?$AAM?$AAM?$AAC?$AA?3?$AA?5?$AAu?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAs?$AAe?$AAt?$AA?5?$AAw?$AAi?$AAd?$AAe?$AA?5?$AAb?$AAu?$AAs?$AA?5?$AAm?$AAo?$AAd?$AAe@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CC@BECOMKMK@?$AAA?$AAP?$AAP?$AA_?$AAC?$AAM?$AAD?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EK@FDKGIIKM@?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAM?$AAM?$AAC?$AAS?$AAe?$AAt?$AAB?$AAl?$AAo?$AAc?$AAk?$AAL?$AAe?$AAn?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GE@FEOFGONO@?$AAM?$AAM?$AAC?$AAS?$AAe?$AAl?$AAe?$AAc?$AAt?$AAC?$AAa?$AAr?$AAd?$AA?3?$AA?5?$AAp?$AAo?$AAl?$AAl?$AA?5?$AAs?$AAt?$AAa?$AAt?$AAu?$AAs?$AA?5?$AAe?$AAr?$AAr?$AAo?$AAr@| [ DATA ] ; `string'
	IMPORT	|SdhcSetInterface|
	IMPORT	|__GSHandlerCheck|
	IMPORT	|__security_cookie|
	IMPORT	|__security_check_cookie|

  00000			 AREA	 |.pdata|, PDATA
|$T45557| DCD	|$LN41@MMCSelectC|
	DCD	0xc000a102

  00000			 AREA	 |.xdata|, DATA
|$T45553| DCD	0xffffffd8

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1KA@GCFNELEL@?$AAM?$AAM?$AAC?$AAS?$AAe?$AAl?$AAe?$AAc?$AAt?$AAC?$AAa?$AAr?$AAd?$AA?3?$AA?5?$AAt?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AA?5?$AAw?$AAa?$AAi?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAf@| DCB "M"
	DCB	0x0, "M", 0x0, "C", 0x0, "S", 0x0, "e", 0x0, "l", 0x0, "e"
	DCB	0x0, "c", 0x0, "t", 0x0, "C", 0x0, "a", 0x0, "r", 0x0, "d"
	DCB	0x0, ":", 0x0, " ", 0x0, "t", 0x0, "i", 0x0, "m", 0x0, "e"
	DCB	0x0, "o", 0x0, "u", 0x0, "t", 0x0, " ", 0x0, "w", 0x0, "a"
	DCB	0x0, "i", 0x0, "t", 0x0, "i", 0x0, "n", 0x0, "g", 0x0, " "
	DCB	0x0, "f", 0x0, "o", 0x0, "r", 0x0, " ", 0x0, "c", 0x0, "a"
	DCB	0x0, "r", 0x0, "d", 0x0, " ", 0x0, "t", 0x0, "o", 0x0, " "
	DCB	0x0, "g", 0x0, "e", 0x0, "t", 0x0, " ", 0x0, "i", 0x0, "n"
	DCB	0x0, "t", 0x0, "o", 0x0, " ", 0x0, "t", 0x0, "r", 0x0, "a"
	DCB	0x0, "n", 0x0, " ", 0x0, "s", 0x0, "t", 0x0, "a", 0x0, "t"
	DCB	0x0, "e", 0x0, ",", 0x0, " ", 0x0, "s", 0x0, "t", 0x0, "a"
	DCB	0x0, "t", 0x0, "u", 0x0, "s", 0x0, " ", 0x0, "=", 0x0, " "
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "X", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GK@CDAMFDEK@?$AAM?$AAM?$AAC?$AA?3?$AA?5?$AAu?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAs?$AAe?$AAt?$AA?5?$AAw?$AAi?$AAd?$AAe?$AA?5?$AAb?$AAu?$AAs?$AA?5?$AAm?$AAo?$AAd?$AAe@| DCB "M"
	DCB	0x0, "M", 0x0, "C", 0x0, ":", 0x0, " ", 0x0, "u", 0x0, "n"
	DCB	0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e", 0x0, " ", 0x0, "t"
	DCB	0x0, "o", 0x0, " ", 0x0, "s", 0x0, "e", 0x0, "t", 0x0, " "
	DCB	0x0, "w", 0x0, "i", 0x0, "d", 0x0, "e", 0x0, " ", 0x0, "b"
	DCB	0x0, "u", 0x0, "s", 0x0, " ", 0x0, "m", 0x0, "o", 0x0, "d"
	DCB	0x0, "e", 0x0, " ", 0x0, "f", 0x0, "o", 0x0, "r", 0x0, " "
	DCB	0x0, "S", 0x0, "D", 0x0, "/", 0x0, "S", 0x0, "D", 0x0, "H"
	DCB	0x0, "C", 0x0, " ", 0x0, "c", 0x0, "a", 0x0, "r", 0x0, "d"
	DCB	0x0, ".", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CC@BECOMKMK@?$AAA?$AAP?$AAP?$AA_?$AAC?$AAM?$AAD?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "A"
	DCB	0x0, "P", 0x0, "P", 0x0, "_", 0x0, "C", 0x0, "M", 0x0, "D"
	DCB	0x0, " ", 0x0, "f", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e"
	DCB	0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EK@FDKGIIKM@?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAM?$AAM?$AAC?$AAS?$AAe?$AAt?$AAB?$AAl?$AAo?$AAc?$AAk?$AAL?$AAe?$AAn?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe@| DCB "S"
	DCB	0x0, "D", 0x0, "C", 0x0, "a", 0x0, "r", 0x0, "d", 0x0, "I"
	DCB	0x0, "n", 0x0, "i", 0x0, "t", 0x0, ":", 0x0, " ", 0x0, "M"
	DCB	0x0, "M", 0x0, "C", 0x0, "S", 0x0, "e", 0x0, "t", 0x0, "B"
	DCB	0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k", 0x0, "L", 0x0, "e"
	DCB	0x0, "n", 0x0, " ", 0x0, "f", 0x0, "a", 0x0, "i", 0x0, "l"
	DCB	0x0, "e", 0x0, "d", 0x0, "!", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GE@FEOFGONO@?$AAM?$AAM?$AAC?$AAS?$AAe?$AAl?$AAe?$AAc?$AAt?$AAC?$AAa?$AAr?$AAd?$AA?3?$AA?5?$AAp?$AAo?$AAl?$AAl?$AA?5?$AAs?$AAt?$AAa?$AAt?$AAu?$AAs?$AA?5?$AAe?$AAr?$AAr?$AAo?$AAr@| DCB "M"
	DCB	0x0, "M", 0x0, "C", 0x0, "S", 0x0, "e", 0x0, "l", 0x0, "e"
	DCB	0x0, "c", 0x0, "t", 0x0, "C", 0x0, "a", 0x0, "r", 0x0, "d"
	DCB	0x0, ":", 0x0, " ", 0x0, "p", 0x0, "o", 0x0, "l", 0x0, "l"
	DCB	0x0, " ", 0x0, "s", 0x0, "t", 0x0, "a", 0x0, "t", 0x0, "u"
	DCB	0x0, "s", 0x0, " ", 0x0, "e", 0x0, "r", 0x0, "r", 0x0, "o"
	DCB	0x0, "r", 0x0, ",", 0x0, " ", 0x0, "s", 0x0, "t", 0x0, "a"
	DCB	0x0, "t", 0x0, "u", 0x0, "s", 0x0, " ", 0x0, "=", 0x0, " "
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "X", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000	00000000	 DCD         |__GSHandlerCheck|
  00004	00000000	 DCD         |$T45553|

  00008		 |MMCSelectCard| PROC

; 722  : {

  00008		 |$LN41@MMCSelectC|
  00008	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  0000c	e24dd00c	 sub         sp, sp, #0xC
  00010		 |$M45554|
  00010	e1a05000	 mov         r5, r0
  00014	e59f326c	 ldr         r3, [pc, #0x26C]
  00018	e5933000	 ldr         r3, [r3]
  0001c	e58d3008	 str         r3, [sp, #8]

; 723  :     UINT32 StartTime;
; 724  :     int bTimeout;
; 725  : 
; 726  :     StartTime = OALGetTickCount();

  00020	eb000000	 bl          OALGetTickCount

; 727  :     MMCcmd.card_type = pDisk->d_CardType;

  00024	e59f4258	 ldr         r4, [pc, #0x258]
  00028	e5953010	 ldr         r3, [r5, #0x10]
  0002c	e1a08000	 mov         r8, r0

; 728  :     
; 729  :     bTimeout = FALSE;

  00030	e3a06000	 mov         r6, #0
  00034	e5843000	 str         r3, [r4]
  00038	e3a03311	 mov         r3, #0x11, 6
  0003c	e383797a	 orr         r7, r3, #0x7A, 18
  00040	e3a0900d	 mov         r9, #0xD
  00044	e3a0a001	 mov         r10, #1
  00048	e3a0bc02	 mov         r11, #2, 24
  0004c		 |$LL17@MMCSelectC|

; 730  :     for(;;)
; 731  :     {
; 732  : 
; 733  :         if (OALGetTickCount() - StartTime > 1000)

  0004c	eb000000	 bl          OALGetTickCount
  00050	e0403008	 sub         r3, r0, r8
  00054	e3530ffa	 cmp         r3, #0xFA, 30

; 734  :             bTimeout = TRUE;
; 735  : 
; 736  :         MMCcmd.command = SEND_STATUS;

  00058	e5c49004	 strb        r9, [r4, #4]

; 737  :         MMCcmd.argument = (pDisk->d_RelAddress)<<16;

  0005c	e5953014	 ldr         r3, [r5, #0x14]

; 738  :         MMCcmd.num_blocks = 1;
; 739  :         MMCcmd.block_len = 512;
; 740  :         OALMSGX(OAL_FUNC, (TEXT("SEND_STATUS\r\n")));
; 741  :         if (MMCCommandResponse(&MMCcmd, 0)) 

  00060	e3a01000	 mov         r1, #0
  00064	e1a00004	 mov         r0, r4
  00068	e1a03803	 mov         r3, r3, lsl #16
  0006c	e5843008	 str         r3, [r4, #8]
  00070	e584a00c	 str         r10, [r4, #0xC]
  00074	e584b010	 str         r11, [r4, #0x10]
  00078	83a06001	 movhi       r6, #1
  0007c	eb000000	 bl          MMCCommandResponse
  00080	e3500000	 cmp         r0, #0
  00084	1a000072	 bne         |$select_card_error$44670|

; 742  :             goto select_card_error;
; 743  : 
; 744  :         if (MMC_STATUS_POLL_ERROR(MMCcmd.status))

  00088	e5941014	 ldr         r1, [r4, #0x14]
  0008c	e1110007	 tst         r1, r7
  00090	1a000069	 bne         |$LN33@MMCSelectC|

; 747  :             goto select_card_error;
; 748  :         }
; 749  : 
; 750  :         if ( MMC_STATUS_STATE(MMCcmd.status) == MMC_STATUS_STATE_TRAN )

  00094	e2013c1e	 and         r3, r1, #0x1E, 24
  00098	e3530b02	 cmp         r3, #2, 22
  0009c	0a000012	 beq         |$LN34@MMCSelectC|

; 751  :             break;
; 752  : 
; 753  :         OALMSGX(OAL_FUNC, (TEXT("MMCSelectCard: not in tran state, status = 0x%X\r\n"), MMCcmd.status));
; 754  : 
; 755  :         // try to get card into transfer state  
; 756  :         // this should only have to happen once per card insertion
; 757  :         MMCcmd.command = SELECT_DESELECT_CARD;

  000a0	e3a03007	 mov         r3, #7
  000a4	e5c43004	 strb        r3, [r4, #4]

; 758  :         MMCcmd.argument = (pDisk->d_RelAddress) << 16;

  000a8	e5953014	 ldr         r3, [r5, #0x14]

; 759  : 
; 760  :         OALMSGX(OAL_FUNC, (TEXT("SELECT_DESELECT_CARD\r\n")));
; 761  :         if ( MMCCommandResponse(&MMCcmd, 0) )

  000ac	e3a01000	 mov         r1, #0
  000b0	e1a00004	 mov         r0, r4
  000b4	e1a03803	 mov         r3, r3, lsl #16
  000b8	e5843008	 str         r3, [r4, #8]
  000bc	eb000000	 bl          MMCCommandResponse
  000c0	e3500000	 cmp         r0, #0
  000c4	1a000062	 bne         |$select_card_error$44670|

; 762  :             goto select_card_error;
; 763  : 
; 764  :         // check for bTimeout
; 765  :         if (bTimeout)

  000c8	e3560000	 cmp         r6, #0
  000cc	0affffde	 beq         |$LL17@MMCSelectC|

; 766  :         {
; 767  :             OALMSG(OAL_ERROR, (TEXT("MMCSelectCard: timeout waiting for card to get into tran state, status = 0x%X\r\n"), MMCcmd.status));

  000d0	e59f3198	 ldr         r3, [pc, #0x198]
  000d4	e5933440	 ldr         r3, [r3, #0x440]
  000d8	e3130001	 tst         r3, #1
  000dc	0a00005c	 beq         |$select_card_error$44670|
  000e0	e5941014	 ldr         r1, [r4, #0x14]
  000e4	e59f0194	 ldr         r0, [pc, #0x194]
  000e8	ea000058	 b           |$LN37@MMCSelectC|
  000ec		 |$LN34@MMCSelectC|

; 768  :             goto select_card_error;
; 769  :         }
; 770  :     }
; 771  : 
; 772  :     if (MMCSetBlockLen(pDisk))

  000ec	e1a00005	 mov         r0, r5
  000f0	eb000000	 bl          MMCSetBlockLen
  000f4	e3500000	 cmp         r0, #0
  000f8	0a000006	 beq         |$LN9@MMCSelectC|

; 773  : 	{
; 774  :         OALMSG(OAL_ERROR, (L"SDCardInit: MMCSetBlockLen failed!\r\n"));

  000fc	e59f316c	 ldr         r3, [pc, #0x16C]
  00100	e5933440	 ldr         r3, [r3, #0x440]
  00104	e3130001	 tst         r3, #1
  00108	0a000051	 beq         |$select_card_error$44670|
  0010c	e59f0168	 ldr         r0, [pc, #0x168]
  00110	eb000000	 bl          NKDbgPrintfW

; 775  :         goto select_card_error;

  00114	ea00004e	 b           |$select_card_error$44670|
  00118		 |$LN9@MMCSelectC|

; 776  : 	}
; 777  : 
; 778  : #if ENABLE_4_BIT_MODE
; 779  : 
; 780  :     if (pDisk->d_CardType == CARDTYPE_SD || pDisk->d_CardType == CARDTYPE_SDHC)

  00118	e5953010	 ldr         r3, [r5, #0x10]
  0011c	e3530002	 cmp         r3, #2
  00120	0a000001	 beq         |$LN7@MMCSelectC|
  00124	e3530003	 cmp         r3, #3
  00128	1a00001d	 bne         |$Detect4BitCardDone$44686|
  0012c		 |$LN7@MMCSelectC|

; 781  :     {
; 782  :         BYTE scr[8];
; 783  : 
; 784  :         MMCcmd.command = APP_CMD;

  0012c	e3a03037	 mov         r3, #0x37
  00130	e5c43004	 strb        r3, [r4, #4]

; 785  :         MMCcmd.argument = (pDisk->d_RelAddress) << 16;

  00134	e5953014	 ldr         r3, [r5, #0x14]

; 786  :         OALMSGX(OAL_FUNC, (TEXT("APP_CMD\r\n")));
; 787  :         if (MMCCommandResponse(&MMCcmd, 0) )

  00138	e3a01000	 mov         r1, #0
  0013c	e1a00004	 mov         r0, r4
  00140	e1a03803	 mov         r3, r3, lsl #16
  00144	e5843008	 str         r3, [r4, #8]
  00148	eb000000	 bl          MMCCommandResponse
  0014c	e3500000	 cmp         r0, #0
  00150	1a000013	 bne         |$Detect4BitCardDone$44686|

; 788  :         {
; 789  :             //OALMSG(OAL_ERROR, (TEXT("APP_CMD failed\r\n")));
; 790  :             goto Detect4BitCardDone;
; 791  :         }
; 792  : 
; 793  :         // SEND_SCR - send configuration register
; 794  :         MMCcmd.command = SEND_SCR;

  00154	e3a03033	 mov         r3, #0x33
  00158	e5c43004	 strb        r3, [r4, #4]

; 795  :         MMCcmd.argument = 0;

  0015c	e3a03000	 mov         r3, #0
  00160	e5843008	 str         r3, [r4, #8]

; 796  :         MMCcmd.num_blocks = 1;

  00164	e3a03001	 mov         r3, #1
  00168	e584300c	 str         r3, [r4, #0xC]

; 797  :         MMCcmd.block_len = 8;

  0016c	e3a03008	 mov         r3, #8
  00170	e5843010	 str         r3, [r4, #0x10]

; 798  :         MMCcmd.pBuffer = scr;

  00174	e28d3000	 add         r3, sp, #0

; 799  :         if (MMCCommandResponse(&MMCcmd, 0) )

  00178	e3a01000	 mov         r1, #0
  0017c	e1a00004	 mov         r0, r4
  00180	e5843034	 str         r3, [r4, #0x34]
  00184	eb000000	 bl          MMCCommandResponse
  00188	e3500000	 cmp         r0, #0
  0018c	1a000004	 bne         |$Detect4BitCardDone$44686|

; 800  :         {
; 801  :             //OALMSG(OAL_ERROR, (TEXT("SEND_SCR failed\r\n")));
; 802  :             goto Detect4BitCardDone;
; 803  :         }
; 804  : 
; 805  :         // most significant byte arrives first at scr[0]
; 806  : 		// scr[1] has bits 55:48, bit 50 is set for 4 bit capable card
; 807  :         pDisk->d_Supports4Bit = scr[1] & 0x04 ? TRUE : FALSE;

  00190	e5dd3001	 ldrb        r3, [sp, #1]
  00194	e3130004	 tst         r3, #4
  00198	13a03001	 movne       r3, #1
  0019c	03a03000	 moveq       r3, #0
  001a0	e5853034	 str         r3, [r5, #0x34]
  001a4		 |$Detect4BitCardDone$44686|

; 808  :     }
; 809  : 
; 810  : Detect4BitCardDone:
; 811  : 
; 812  :     if (pDisk->d_Supports4Bit)

  001a4	e5953034	 ldr         r3, [r5, #0x34]
  001a8	e3530000	 cmp         r3, #0
  001ac	0a00001e	 beq         |$LN1@MMCSelectC|

; 813  :     {
; 814  :         OALMSGX(OAL_FUNC, (TEXT("SDCARD: 4 bit mode\r\n")));
; 815  : 
; 816  :         MMCcmd.command = APP_CMD;

  001b0	e3a03037	 mov         r3, #0x37
  001b4	e5c43004	 strb        r3, [r4, #4]

; 817  :         MMCcmd.argument = (pDisk->d_RelAddress) << 16;

  001b8	e5953014	 ldr         r3, [r5, #0x14]

; 818  :         OALMSGX(OAL_FUNC, (TEXT("APP_CMD\r\n")));
; 819  :         if (MMCCommandResponse(&MMCcmd, 0) )

  001bc	e3a01000	 mov         r1, #0
  001c0	e1a00004	 mov         r0, r4
  001c4	e1a03803	 mov         r3, r3, lsl #16
  001c8	e5843008	 str         r3, [r4, #8]
  001cc	eb000000	 bl          MMCCommandResponse
  001d0	e3500000	 cmp         r0, #0
  001d4	0a000002	 beq         |$LN3@MMCSelectC|

; 820  :         {
; 821  :             OALMSG(1, (TEXT("APP_CMD failed\r\n")));

  001d8	e59f0098	 ldr         r0, [pc, #0x98]
  001dc	eb000000	 bl          NKDbgPrintfW
  001e0	ea00001b	 b           |$select_card_error$44670|
  001e4		 |$LN3@MMCSelectC|

; 822  :             goto select_card_error;
; 823  :         }
; 824  : 
; 825  :         MMCcmd.command = SET_BUS_WIDTH;

  001e4	e3a03006	 mov         r3, #6
  001e8	e5c43004	 strb        r3, [r4, #4]

; 826  :         MMCcmd.argument = 0x2;

  001ec	e3a03002	 mov         r3, #2

; 827  :         OALMSGX(OAL_FUNC, (TEXT("SET_BUS_WIDTH\r\n")));
; 828  :         if (MMCCommandResponse(&MMCcmd, 0))

  001f0	e3a01000	 mov         r1, #0
  001f4	e1a00004	 mov         r0, r4
  001f8	e5843008	 str         r3, [r4, #8]
  001fc	eb000000	 bl          MMCCommandResponse
  00200	e3500000	 cmp         r0, #0
  00204	0a000006	 beq         |$LN2@MMCSelectC|

; 829  :         {
; 830  :             OALMSG(OAL_WARN, (TEXT("MMC: unable to set wide bus mode for SD/SDHC card.\r\n")));

  00208	e59f3060	 ldr         r3, [pc, #0x60]
  0020c	e5933440	 ldr         r3, [r3, #0x440]
  00210	e3130002	 tst         r3, #2
  00214	0a000004	 beq         |$LN1@MMCSelectC|
  00218	e59f0054	 ldr         r0, [pc, #0x54]
  0021c	eb000000	 bl          NKDbgPrintfW

; 831  :             //goto select_card_error;
; 832  :         }
; 833  :         else

  00220	ea000001	 b           |$LN1@MMCSelectC|
  00224		 |$LN2@MMCSelectC|

; 834  :         {
; 835  :             OALMSGX(OAL_INFO, (TEXT("Using 4 bit mode\r\n")));
; 836  :             SdhcSetInterface(SD_INTERFACE_SD_4BIT);

  00224	e3a00001	 mov         r0, #1
  00228	eb000000	 bl          SdhcSetInterface
  0022c		 |$LN1@MMCSelectC|

; 837  :         }
; 838  :     }
; 839  : #endif
; 840  : 
; 841  :     return 0;

  0022c	e59d0008	 ldr         r0, [sp, #8]
  00230	eb000000	 bl          __security_check_cookie
  00234	e3a00000	 mov         r0, #0
  00238	ea000008	 b           |$LN18@MMCSelectC|
  0023c		 |$LN33@MMCSelectC|

; 745  :         {
; 746  :             OALMSG(OAL_ERROR, (TEXT("MMCSelectCard: poll status error, status = 0x%X\r\n"), MMCcmd.status));

  0023c	e59f302c	 ldr         r3, [pc, #0x2C]
  00240	e5933440	 ldr         r3, [r3, #0x440]
  00244	e3130001	 tst         r3, #1
  00248	0a000001	 beq         |$select_card_error$44670|
  0024c	e59f0018	 ldr         r0, [pc, #0x18]
  00250		 |$LN37@MMCSelectC|
  00250	eb000000	 bl          NKDbgPrintfW

; 766  :         {
; 767  :             OALMSG(OAL_ERROR, (TEXT("MMCSelectCard: timeout waiting for card to get into tran state, status = 0x%X\r\n"), MMCcmd.status));

  00254		 |$select_card_error$44670|

; 842  :         
; 843  : select_card_error:
; 844  :     return 1;

  00254	e59d0008	 ldr         r0, [sp, #8]
  00258	eb000000	 bl          __security_check_cookie
  0025c	e3a00001	 mov         r0, #1
  00260		 |$LN18@MMCSelectC|

; 845  : }

  00260	e28dd00c	 add         sp, sp, #0xC
  00264	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  00268	e12fff1e	 bx          lr
  0026c		 |$LN42@MMCSelectC|
  0026c		 |$LN43@MMCSelectC|
  0026c	00000000	 DCD         |??_C@_1GE@FEOFGONO@?$AAM?$AAM?$AAC?$AAS?$AAe?$AAl?$AAe?$AAc?$AAt?$AAC?$AAa?$AAr?$AAd?$AA?3?$AA?5?$AAp?$AAo?$AAl?$AAl?$AA?5?$AAs?$AAt?$AAa?$AAt?$AAu?$AAs?$AA?5?$AAe?$AAr?$AAr?$AAo?$AAr@|
  00270		 |$LN44@MMCSelectC|
  00270	00000000	 DCD         |dpCurSettings|
  00274		 |$LN45@MMCSelectC|
  00274	00000000	 DCD         |??_C@_1GK@CDAMFDEK@?$AAM?$AAM?$AAC?$AA?3?$AA?5?$AAu?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAs?$AAe?$AAt?$AA?5?$AAw?$AAi?$AAd?$AAe?$AA?5?$AAb?$AAu?$AAs?$AA?5?$AAm?$AAo?$AAd?$AAe@|
  00278		 |$LN46@MMCSelectC|
  00278	00000000	 DCD         |??_C@_1CC@BECOMKMK@?$AAA?$AAP?$AAP?$AA_?$AAC?$AAM?$AAD?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  0027c		 |$LN47@MMCSelectC|
  0027c	00000000	 DCD         |??_C@_1EK@FDKGIIKM@?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAM?$AAM?$AAC?$AAS?$AAe?$AAt?$AAB?$AAl?$AAo?$AAc?$AAk?$AAL?$AAe?$AAn?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe@|
  00280		 |$LN48@MMCSelectC|
  00280	00000000	 DCD         |??_C@_1KA@GCFNELEL@?$AAM?$AAM?$AAC?$AAS?$AAe?$AAl?$AAe?$AAc?$AAt?$AAC?$AAa?$AAr?$AAd?$AA?3?$AA?5?$AAt?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AA?5?$AAw?$AAa?$AAi?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAf@|
  00284		 |$LN49@MMCSelectC|
  00284	00000000	 DCD         |MMCcmd|
  00288		 |$LN50@MMCSelectC|
  00288	00000000	 DCD         |__security_cookie|
  0028c		 |$M45555|

			 ENDP  ; |MMCSelectCard|

	EXPORT	|MMCIssueIdentify|
	EXPORT	|??_C@_1JO@JCBKFGLI@?$AAM?$AAM?$AAC?$AAI?$AAs?$AAs?$AAu?$AAe?$AAI?$AAd?$AAe?$AAn?$AAt?$AAi?$AAf?$AAy?$AA?3?$AA?5?$AAb?$AAu?$AAs?$AAy?$AA?5?$AAb?$AAi?$AAt?$AA?5?$AAn?$AAe?$AAv?$AAe?$AAr@| [ DATA ] ; `string'
	EXPORT	|??_C@_1KE@BIOPJCPI@?$AAM?$AAM?$AAC?$AAI?$AAs?$AAs?$AAu?$AAe?$AAI?$AAd?$AAe?$AAn?$AAt?$AAi?$AAf?$AAy?$AA?3?$AA?5?$AAb?$AAu?$AAs?$AAy?$AA?5?$AAb?$AAi?$AAt?$AA?5?$AAn?$AAe?$AAv?$AAe?$AAr@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FK@HAIGBMKL@?$AAM?$AAM?$AAC?$AAI?$AAs?$AAs?$AAu?$AAe?$AAI?$AAd?$AAe?$AAn?$AAt?$AAi?$AAf?$AAy?$AA?3?$AA?5?$AAM?$AAM?$AAC?$AAC?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AAR?$AAe?$AAs?$AAp@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T45616| DCD	|$LN66@MMCIssueId|
	DCD	0x40010601

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1JO@JCBKFGLI@?$AAM?$AAM?$AAC?$AAI?$AAs?$AAs?$AAu?$AAe?$AAI?$AAd?$AAe?$AAn?$AAt?$AAi?$AAf?$AAy?$AA?3?$AA?5?$AAb?$AAu?$AAs?$AAy?$AA?5?$AAb?$AAi?$AAt?$AA?5?$AAn?$AAe?$AAv?$AAe?$AAr@| DCB "M"
	DCB	0x0, "M", 0x0, "C", 0x0, "I", 0x0, "s", 0x0, "s", 0x0, "u"
	DCB	0x0, "e", 0x0, "I", 0x0, "d", 0x0, "e", 0x0, "n", 0x0, "t"
	DCB	0x0, "i", 0x0, "f", 0x0, "y", 0x0, ":", 0x0, " ", 0x0, "b"
	DCB	0x0, "u", 0x0, "s", 0x0, "y", 0x0, " ", 0x0, "b", 0x0, "i"
	DCB	0x0, "t", 0x0, " ", 0x0, "n", 0x0, "e", 0x0, "v", 0x0, "e"
	DCB	0x0, "r", 0x0, " ", 0x0, "d", 0x0, "e", 0x0, "a", 0x0, "c"
	DCB	0x0, "t", 0x0, "i", 0x0, "v", 0x0, "a", 0x0, "t", 0x0, "e"
	DCB	0x0, "d", 0x0, " ", 0x0, "-", 0x0, "-", 0x0, " ", 0x0, "p"
	DCB	0x0, "r", 0x0, "o", 0x0, "b", 0x0, "a", 0x0, "b", 0x0, "l"
	DCB	0x0, "y", 0x0, " ", 0x0, "n", 0x0, "o", 0x0, " ", 0x0, "c"
	DCB	0x0, "a", 0x0, "r", 0x0, "d", 0x0, ",", 0x0, " ", 0x0, "o"
	DCB	0x0, "c", 0x0, "r", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "X", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1KE@BIOPJCPI@?$AAM?$AAM?$AAC?$AAI?$AAs?$AAs?$AAu?$AAe?$AAI?$AAd?$AAe?$AAn?$AAt?$AAi?$AAf?$AAy?$AA?3?$AA?5?$AAb?$AAu?$AAs?$AAy?$AA?5?$AAb?$AAi?$AAt?$AA?5?$AAn?$AAe?$AAv?$AAe?$AAr@| DCB "M"
	DCB	0x0, "M", 0x0, "C", 0x0, "I", 0x0, "s", 0x0, "s", 0x0, "u"
	DCB	0x0, "e", 0x0, "I", 0x0, "d", 0x0, "e", 0x0, "n", 0x0, "t"
	DCB	0x0, "i", 0x0, "f", 0x0, "y", 0x0, ":", 0x0, " ", 0x0, "b"
	DCB	0x0, "u", 0x0, "s", 0x0, "y", 0x0, " ", 0x0, "b", 0x0, "i"
	DCB	0x0, "t", 0x0, " ", 0x0, "n", 0x0, "e", 0x0, "v", 0x0, "e"
	DCB	0x0, "r", 0x0, " ", 0x0, "d", 0x0, "e", 0x0, "a", 0x0, "c"
	DCB	0x0, "t", 0x0, "i", 0x0, "v", 0x0, "a", 0x0, "t", 0x0, "e"
	DCB	0x0, "d", 0x0, " ", 0x0, "-", 0x0, "-", 0x0, " ", 0x0, "n"
	DCB	0x0, "o", 0x0, " ", 0x0, "s", 0x0, "d", 0x0, " ", 0x0, "c"
	DCB	0x0, "a", 0x0, "r", 0x0, "d", 0x0, " ", 0x0, "d", 0x0, "e"
	DCB	0x0, "t", 0x0, "e", 0x0, "c", 0x0, "t", 0x0, "e", 0x0, "d"
	DCB	0x0, ",", 0x0, " ", 0x0, "o", 0x0, "c", 0x0, "r", 0x0, " "
	DCB	0x0, "=", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "X"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FK@HAIGBMKL@?$AAM?$AAM?$AAC?$AAI?$AAs?$AAs?$AAu?$AAe?$AAI?$AAd?$AAe?$AAn?$AAt?$AAi?$AAf?$AAy?$AA?3?$AA?5?$AAM?$AAM?$AAC?$AAC?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AAR?$AAe?$AAs?$AAp@| DCB "M"
	DCB	0x0, "M", 0x0, "C", 0x0, "I", 0x0, "s", 0x0, "s", 0x0, "u"
	DCB	0x0, "e", 0x0, "I", 0x0, "d", 0x0, "e", 0x0, "n", 0x0, "t"
	DCB	0x0, "i", 0x0, "f", 0x0, "y", 0x0, ":", 0x0, " ", 0x0, "M"
	DCB	0x0, "M", 0x0, "C", 0x0, "C", 0x0, "o", 0x0, "m", 0x0, "m"
	DCB	0x0, "a", 0x0, "n", 0x0, "d", 0x0, "R", 0x0, "e", 0x0, "s"
	DCB	0x0, "p", 0x0, "o", 0x0, "n", 0x0, "s", 0x0, "e", 0x0, " "
	DCB	0x0, "E", 0x0, "r", 0x0, "r", 0x0, "o", 0x0, "r", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |MMCIssueIdentify| PROC

; 848  : {

  00000		 |$LN66@MMCIssueId|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004		 |$M45613|
  00004	e1a05000	 mov         r5, r0
  00008	e3a0393d	 mov         r3, #0x3D, 18

; 849  :     BOOL bCommandFailed;
; 850  :     UINT32 StartTime;
; 851  :     int bTimeout;
; 852  :     BOOL bCardSupportsSD2 = FALSE;
; 853  :     
; 854  :     OALMSGX(OAL_FUNC, (TEXT("MMCIssueIdentify: MMCIssueIdentify \r\n")));
; 855  : 
; 856  :     MMCSetTranSpeed(1000000);  // set clock to reasonable rate

  0000c	e3830d09	 orr         r0, r3, #9, 26
  00010	e3a06000	 mov         r6, #0
  00014	eb000000	 bl          MMCSetTranSpeed

; 857  : 
; 858  :     // CMD1: SEND_OP_COND - send operating conditions
; 859  :     // result is wire or of all cards
; 860  :     MMCcmd.command = GO_IDLE_STATE;

  00018	e59f43f4	 ldr         r4, [pc, #0x3F4]
  0001c	e3a03000	 mov         r3, #0

; 861  :     MMCcmd.argument = 0;

  00020	e3a02000	 mov         r2, #0
  00024	e5c43004	 strb        r3, [r4, #4]

; 862  :     MMCcmd.num_blocks = 1;

  00028	e3a03001	 mov         r3, #1
  0002c	e5842008	 str         r2, [r4, #8]
  00030	e584300c	 str         r3, [r4, #0xC]

; 863  :     MMCcmd.block_len = 512;

  00034	e3a03c02	 mov         r3, #2, 24
  00038	e5843010	 str         r3, [r4, #0x10]

; 864  :     MMCcmd.card_type = CARDTYPE_MMC;

  0003c	e3a03001	 mov         r3, #1

; 865  :     
; 866  :     OALMSGX(OAL_FUNC, (TEXT("GO_IDLE_STATE\r\n")));
; 867  :     if ( MMCCommandResponse(&MMCcmd, 1) )

  00040	e3a01001	 mov         r1, #1
  00044	e1a00004	 mov         r0, r4
  00048	e5843000	 str         r3, [r4]
  0004c	eb000000	 bl          MMCCommandResponse
  00050	e3500000	 cmp         r0, #0
  00054	0a000007	 beq         |$LN32@MMCIssueId|

; 868  :     {
; 869  :         OALMSG(OAL_ERROR, (TEXT("MMCIssueIdentify: MMCCommandResponse Error\r\n")));

  00058	e59f33ac	 ldr         r3, [pc, #0x3AC]
  0005c	e5933440	 ldr         r3, [r3, #0x440]
  00060	e3130001	 tst         r3, #1
  00064	159f03a4	 ldrne       r0, [pc, #0x3A4]
  00068	1b000000	 blne        NKDbgPrintfW
  0006c		 |$command_error$44707|

; 1123 : 
; 1124 : command_error:
; 1125 :     OALMSGX(OAL_INFO, (TEXT("MMC: identification error\r\n")));
; 1126 :     return FALSE;

  0006c	e3a00000	 mov         r0, #0

; 1127 : }

  00070	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  00074	e12fff1e	 bx          lr
  00078		 |$LN32@MMCIssueId|

; 870  :         goto command_error;
; 871  :     }
; 872  : 
; 873  :     OALStall(1 * 1000);

  00078	e3a00ffa	 mov         r0, #0xFA, 30
  0007c	eb000000	 bl          OALStall

; 874  : 
; 875  :     OALMSGX(OAL_FUNC, (TEXT("GO_IDLE_STATE\r\n")));
; 876  :     MMCCommandResponse(&MMCcmd, 0);

  00080	e3a01000	 mov         r1, #0
  00084	e1a00004	 mov         r0, r4
  00088	eb000000	 bl          MMCCommandResponse

; 877  : 
; 878  :     MMCcmd.ocr = 0;

  0008c	e3a03000	 mov         r3, #0
  00090	e5843018	 str         r3, [r4, #0x18]

; 879  :     MMCcmd.card_type = CARDTYPE_SD;     // must be set during detection of SD card

  00094	e3a03002	 mov         r3, #2

; 880  : 
; 881  :     OALStall(1 * 1000);

  00098	e3a00ffa	 mov         r0, #0xFA, 30
  0009c	e5843000	 str         r3, [r4]
  000a0	eb000000	 bl          OALStall

; 882  : 
; 883  :     StartTime = OALGetTickCount();

  000a4	eb000000	 bl          OALGetTickCount
  000a8	e3a03c01	 mov         r3, #1, 24

; 884  :     bTimeout = FALSE;
; 885  : 
; 886  :     // SD 2.0 spec requires CMD8 before ACMD41
; 887  :     MMCcmd.command = SD_SEND_IF_COND;

  000ac	e3a02008	 mov         r2, #8

; 888  : 
; 889  :     // specify VSH = 2.7-3.6V (bit 8), check pattern = 0xaa (bits 7:0)
; 890  :     MMCcmd.argument = 0x000001aa;

  000b0	e38330aa	 orr         r3, r3, #0xAA
  000b4	e1a0a000	 mov         r10, r0
  000b8	e5c42004	 strb        r2, [r4, #4]

; 891  : 
; 892  :     OALMSGX(OAL_FUNC, (TEXT("SD_SEND_IF_COND\r\n")));
; 893  :     if ( MMCCommandResponse(&MMCcmd, 0) )

  000bc	e3a01000	 mov         r1, #0
  000c0	e1a00004	 mov         r0, r4
  000c4	e5843008	 str         r3, [r4, #8]
  000c8	e3a07000	 mov         r7, #0
  000cc	eb000000	 bl          MMCCommandResponse
  000d0	e3500000	 cmp         r0, #0
  000d4	0a000007	 beq         |$LN31@MMCIssueId|

; 894  :     {
; 895  :         // CMD8 failed, not SD 2.00 card
; 896  :         MMCcmd.command = GO_IDLE_STATE;

  000d8	e3a03000	 mov         r3, #0
  000dc	e5c43004	 strb        r3, [r4, #4]

; 897  :         MMCcmd.argument = 0;

  000e0	e3a03000	 mov         r3, #0

; 898  :         OALMSGX(OAL_FUNC, (TEXT("GO_IDLE_STATE\r\n")));
; 899  :         MMCCommandResponse(&MMCcmd, 0);

  000e4	e3a01000	 mov         r1, #0
  000e8	e1a00004	 mov         r0, r4
  000ec	e5843008	 str         r3, [r4, #8]
  000f0	eb000000	 bl          MMCCommandResponse

; 900  :     }
; 901  :     else

  000f4	ea000000	 b           |$LN59@MMCIssueId|
  000f8		 |$LN31@MMCIssueId|

; 902  :     {
; 903  :         // Need to verify voltage support and check pattern
; 904  :         bCardSupportsSD2 = TRUE;

  000f8	e3a06001	 mov         r6, #1
  000fc		 |$LN59@MMCIssueId|
  000fc	e3a03101	 mov         r3, #1, 2
  00100	e59f9304	 ldr         r9, [pc, #0x304]
  00104	e3838602	 orr         r8, r3, #2, 12
  00108		 |$LN62@MMCIssueId|
  00108	e3a0b037	 mov         r11, #0x37

; 905  :     }
; 906  :     
; 907  :     // SD spec says timeout for ACMD41 should be 1 second
; 908  :     for(;;)
; 909  :     {
; 910  :         if (OALGetTickCount() - StartTime > 1000)

  0010c	eb000000	 bl          OALGetTickCount
  00110	e040300a	 sub         r3, r0, r10
  00114	e3530ffa	 cmp         r3, #0xFA, 30

; 911  :             bTimeout = TRUE;
; 912  : 
; 913  :         MMCcmd.command = APP_CMD;

  00118	e5c4b004	 strb        r11, [r4, #4]

; 914  :         MMCcmd.argument = (pDisk->d_RelAddress) << 16;

  0011c	e5953014	 ldr         r3, [r5, #0x14]

; 915  : 
; 916  :         OALMSGX(OAL_FUNC, (TEXT("APP_CMD\r\n")));
; 917  :         if ( MMCCommandResponse(&MMCcmd, 0) )

  00120	e3a01000	 mov         r1, #0
  00124	e1a00004	 mov         r0, r4
  00128	e1a03803	 mov         r3, r3, lsl #16
  0012c	e5843008	 str         r3, [r4, #8]
  00130	83a07001	 movhi       r7, #1
  00134	eb000000	 bl          MMCCommandResponse
  00138	e3500000	 cmp         r0, #0
  0013c	e3a0b003	 mov         r11, #3
  00140	1a00001c	 bne         |$sd_det_error$44715|

; 918  :             goto sd_det_error;
; 919  : 
; 920  :         OALStall(1 * 1000);

  00144	e3a00ffa	 mov         r0, #0xFA, 30
  00148	eb000000	 bl          OALStall

; 921  : 
; 922  :         MMCcmd.command = SD_SEND_OP_CODE;

  0014c	e3a03029	 mov         r3, #0x29

; 923  :         if (bCardSupportsSD2)

  00150	e3560000	 cmp         r6, #0
  00154	e5c43004	 strb        r3, [r4, #4]

; 924  :         {
; 925  :             // specify 3.3V, HC
; 926  :             MMCcmd.argument = 0x40200000;
; 927  :         }
; 928  :         else
; 929  :         {
; 930  :             // specify 3.3V
; 931  :             MMCcmd.argument = 0x00200000;

  00158	03a03602	 moveq       r3, #2, 12
  0015c	15848008	 strne       r8, [r4, #8]

; 932  :         }
; 933  : 
; 934  :         OALMSGX(OAL_FUNC, (TEXT("SD_SEND_OP_CODE\r\n")));
; 935  :         if ( MMCCommandResponse(&MMCcmd, 0) )

  00160	e3a01000	 mov         r1, #0
  00164	e1a00004	 mov         r0, r4
  00168	05843008	 streq       r3, [r4, #8]
  0016c	eb000000	 bl          MMCCommandResponse
  00170	e3500000	 cmp         r0, #0
  00174	1a00000f	 bne         |$sd_det_error$44715|

; 936  :             goto sd_det_error;
; 937  : 
; 938  :         if ( (!(MMC_OCR_BUSY(MMCcmd.ocr))) || bTimeout)

  00178	e5942018	 ldr         r2, [r4, #0x18]
  0017c	e3120102	 tst         r2, #2, 2
  00180	1a000005	 bne         |$LN53@MMCIssueId|
  00184	e3570000	 cmp         r7, #0
  00188	1a000003	 bne         |$LN53@MMCIssueId|

; 939  :             break;
; 940  : 
; 941  :         OALStall(100 * 1000);

  0018c	e3a03b61	 mov         r3, #0x61, 22
  00190	e3830e2a	 orr         r0, r3, #0x2A, 28
  00194	eb000000	 bl          OALStall

; 942  :     }

  00198	eaffffda	 b           |$LN62@MMCIssueId|
  0019c		 |$LN53@MMCIssueId|

; 943  : 
; 944  :     // No card or not an sd one...
; 945  :     if ( MMC_OCR_BUSY(MMCcmd.ocr) )

  0019c	e3120102	 tst         r2, #2, 2
  001a0	1a000040	 bne         |$LN20@MMCIssueId|

; 946  :     {
; 947  :         OALMSG(OAL_ERROR, (TEXT("MMCIssueIdentify: busy bit never deactivated -- no sd card detected, ocr = 0x%X\r\n"), MMCcmd.ocr));

  001a4	e5993440	 ldr         r3, [r9, #0x440]
  001a8	e3130001	 tst         r3, #1
  001ac	159f0254	 ldrne       r0, [pc, #0x254]
  001b0	11a01002	 movne       r1, r2
  001b4	1b000000	 blne        NKDbgPrintfW
  001b8		 |$sd_det_error$44715|

; 960  :     }
; 961  :     
; 962  :     OALMSGX(OAL_INFO, (TEXT("MMCIssueIdentify: SD%s card detected\r\n"), MMCcmd.card_type == CARDTYPE_SDHC ? TEXT(" HC") : TEXT("")));
; 963  :     goto found_card;
; 964  :     
; 965  : sd_det_error:
; 966  :     MMCcmd.command = GO_IDLE_STATE;

  001b8	e3a03000	 mov         r3, #0
  001bc	e5c43004	 strb        r3, [r4, #4]

; 967  :     MMCcmd.argument = 0;

  001c0	e3a03000	 mov         r3, #0
  001c4	e5843008	 str         r3, [r4, #8]

; 968  :     MMCcmd.num_blocks = 1;

  001c8	e3a03001	 mov         r3, #1
  001cc	e584300c	 str         r3, [r4, #0xC]

; 969  :     MMCcmd.block_len = 512;

  001d0	e3a03c02	 mov         r3, #2, 24
  001d4	e5843010	 str         r3, [r4, #0x10]

; 970  :     MMCcmd.card_type = CARDTYPE_MMC;

  001d8	e3a03001	 mov         r3, #1

; 971  : 
; 972  :     OALMSGX(OAL_FUNC, (TEXT("GO_IDLE_STATE\r\n")));
; 973  :     if ( MMCCommandResponse(&MMCcmd, 1) )

  001dc	e3a01001	 mov         r1, #1
  001e0	e1a00004	 mov         r0, r4
  001e4	e5843000	 str         r3, [r4]
  001e8	eb000000	 bl          MMCCommandResponse
  001ec	e3500000	 cmp         r0, #0
  001f0	1affff9d	 bne         |$command_error$44707|

; 974  :         goto command_error;
; 975  : 
; 976  :     OALStall(1 * 1000);

  001f4	e3a00ffa	 mov         r0, #0xFA, 30
  001f8	eb000000	 bl          OALStall

; 977  : 
; 978  :     OALMSGX(OAL_FUNC, (TEXT("GO_IDLE_STATE\r\n")));
; 979  :     MMCCommandResponse(&MMCcmd, 0);

  001fc	e3a01000	 mov         r1, #0
  00200	e1a00004	 mov         r0, r4
  00204	eb000000	 bl          MMCCommandResponse

; 980  :     
; 981  :     StartTime = OALGetTickCount();

  00208	eb000000	 bl          OALGetTickCount

; 982  :     bTimeout = FALSE;
; 983  :     MMCcmd.ocr = 0;

  0020c	e3a03000	 mov         r3, #0
  00210	e5843018	 str         r3, [r4, #0x18]
  00214	e1a07000	 mov         r7, r0
  00218	e3a06000	 mov         r6, #0
  0021c	e3a08001	 mov         r8, #1
  00220	e3a0a602	 mov         r10, #2, 12
  00224		 |$LL16@MMCIssueId|

; 984  : 
; 985  :     for(;;)
; 986  :     {
; 987  :         if (OALGetTickCount() - StartTime > 1000)

  00224	eb000000	 bl          OALGetTickCount
  00228	e0403007	 sub         r3, r0, r7
  0022c	e3530ffa	 cmp         r3, #0xFA, 30

; 988  :             bTimeout = TRUE;
; 989  : 
; 990  :         MMCcmd.command = SEND_OP_COND;

  00230	e5c48004	 strb        r8, [r4, #4]

; 991  :         MMCcmd.argument = 0x00200000;
; 992  :         OALMSGX(OAL_FUNC, (TEXT("SEND_OP_COND\r\n")));
; 993  :         bCommandFailed = MMCCommandResponse(&MMCcmd, 0);

  00234	e3a01000	 mov         r1, #0
  00238	e1a00004	 mov         r0, r4
  0023c	83a06001	 movhi       r6, #1
  00240	e584a008	 str         r10, [r4, #8]
  00244	eb000000	 bl          MMCCommandResponse

; 994  : 
; 995  :         if (bTimeout || !(MMC_OCR_BUSY(MMCcmd.ocr)) || bCommandFailed)

  00248	e5943018	 ldr         r3, [r4, #0x18]
  0024c	e3560000	 cmp         r6, #0
  00250	1a000003	 bne         |$LN54@MMCIssueId|
  00254	e3130102	 tst         r3, #2, 2
  00258	1a000001	 bne         |$LN54@MMCIssueId|
  0025c	e3500000	 cmp         r0, #0
  00260	0affffef	 beq         |$LL16@MMCIssueId|
  00264		 |$LN54@MMCIssueId|

; 996  :             break;
; 997  :     }
; 998  : 
; 999  :     if ( !bCommandFailed && !(MMC_OCR_BUSY(MMCcmd.ocr)) )

  00264	e3500000	 cmp         r0, #0
  00268	1a000003	 bne         |$LN11@MMCIssueId|
  0026c	e3130102	 tst         r3, #2, 2

; 1000 :     {
; 1001 :         OALMSGX(OAL_INFO, (TEXT("MMCIssueIdentify: MMC card detected\r\n")));
; 1002 :         pDisk->d_CardType = CARDTYPE_MMC;

  00270	13a03001	 movne       r3, #1
  00274	15853010	 strne       r3, [r5, #0x10]

; 1003 :         pDisk->d_RelAddress = 1;

  00278	15853014	 strne       r3, [r5, #0x14]
  0027c		 |$LN11@MMCIssueId|

; 1004 :     }
; 1005 : 
; 1006 :     OALStall(1 * 1000);

  0027c	e3a00ffa	 mov         r0, #0xFA, 30
  00280	eb000000	 bl          OALStall

; 1007 : 
; 1008 :     if ( MMC_OCR_BUSY(MMCcmd.ocr) )

  00284	e5941018	 ldr         r1, [r4, #0x18]
  00288	e3110102	 tst         r1, #2, 2
  0028c	1a00000c	 bne         |$LN61@MMCIssueId|

; 1009 :     {
; 1010 :         OALMSG(OAL_ERROR, (TEXT("MMCIssueIdentify: busy bit never deactivated -- probably no card, ocr = 0x%X\r\n"), MMCcmd.ocr));

  00290	e5993440	 ldr         r3, [r9, #0x440]
  00294	e3130001	 tst         r3, #1
  00298	0affff73	 beq         |$command_error$44707|
  0029c	e59f0160	 ldr         r0, [pc, #0x160]
  002a0	eb000000	 bl          NKDbgPrintfW

; 1011 :         return FALSE;

  002a4	eaffff70	 b           |$command_error$44707|
  002a8		 |$LN20@MMCIssueId|

; 948  :         goto sd_det_error;
; 949  :     }
; 950  :     
; 951  :     // check for high capacity SD memory card, OCR bit 30 == 1: high capacity card
; 952  :     if (bCardSupportsSD2 && (MMCcmd.ocr & (1 << 30)))

  002a8	e3560000	 cmp         r6, #0
  002ac	0a000021	 beq         |$LN19@MMCIssueId|
  002b0	e3120101	 tst         r2, #1, 2
  002b4	0a00001f	 beq         |$LN19@MMCIssueId|

; 953  :     {
; 954  :         MMCcmd.card_type = CARDTYPE_SDHC;

  002b8	e3a03003	 mov         r3, #3
  002bc	e5843000	 str         r3, [r4]

; 955  :         pDisk->d_CardType = CARDTYPE_SDHC;

  002c0	e585b010	 str         r11, [r5, #0x10]
  002c4		 |$LN61@MMCIssueId|
  002c4	e3a06002	 mov         r6, #2
  002c8		 |$found_card$44726|

; 1012 :     }
; 1013 :     
; 1014 : found_card:
; 1015 :     
; 1016 :     MMCSetMMCState(pDisk, MMC_STATE_READY);
; 1017 : 
; 1018 :     // CMD2: ALL_SEND_CID - all cards send CID data
; 1019 :     MMCcmd.command = ALL_SEND_CID;

  002c8	e3a02001	 mov         r2, #1
  002cc	e3a03002	 mov         r3, #2
  002d0	e585200c	 str         r2, [r5, #0xC]
  002d4	e5c43004	 strb        r3, [r4, #4]

; 1020 :     MMCcmd.argument = 0;

  002d8	e3a03000	 mov         r3, #0

; 1021 : 
; 1022 :     OALMSGX(OAL_FUNC, (TEXT("ALL_SEND_CID\r\n")));
; 1023 :     if ( MMCCommandResponse(&MMCcmd, 0) )

  002dc	e3a01000	 mov         r1, #0
  002e0	e1a00004	 mov         r0, r4
  002e4	e5843008	 str         r3, [r4, #8]
  002e8	eb000000	 bl          MMCCommandResponse
  002ec	e3500000	 cmp         r0, #0
  002f0	1affff5d	 bne         |$command_error$44707|

; 1024 :         goto command_error;
; 1025 : 
; 1026 :     MMCSetMMCState(pDisk, MMC_STATE_IDENT);
; 1027 : 
; 1028 :     /*
; 1029 :      * CMD3: SET_RELATIVE_ADDR - set relative address
; 1030 :      * relative address should probably be interface number
; 1031 :      *
; 1032 :      * note: this command is SEND_RELATIVE_ADDRESS for SD cards
; 1033 :      */
; 1034 : 
; 1035 :     MMCcmd.card_type = pDisk->d_CardType;

  002f4	e5953010	 ldr         r3, [r5, #0x10]
  002f8	e585600c	 str         r6, [r5, #0xC]
  002fc	e5843000	 str         r3, [r4]

; 1036 : 
; 1037 :     if (pDisk->d_CardType == CARDTYPE_MMC)

  00300	e5953010	 ldr         r3, [r5, #0x10]
  00304	e3530001	 cmp         r3, #1
  00308	1a00000d	 bne         |$LN8@MMCIssueId|

; 1038 :     {
; 1039 :         MMCcmd.command = SET_RELATIVE_ADDR;

  0030c	e3a03003	 mov         r3, #3
  00310	e5c43004	 strb        r3, [r4, #4]

; 1040 :         MMCcmd.argument = (pDisk->d_RelAddress) << 16;

  00314	e5953014	 ldr         r3, [r5, #0x14]

; 1041 : 
; 1042 :         OALMSGX(OAL_FUNC, (TEXT("SET_RELATIVE_ADDR\r\n")));
; 1043 :         if ( MMCCommandResponse(&MMCcmd, 0) )

  00318	e3a01000	 mov         r1, #0
  0031c	e1a00004	 mov         r0, r4
  00320	e1a03803	 mov         r3, r3, lsl #16
  00324	e5843008	 str         r3, [r4, #8]
  00328	eb000000	 bl          MMCCommandResponse
  0032c	e3500000	 cmp         r0, #0
  00330	1affff4d	 bne         |$command_error$44707|

; 1044 :             goto command_error;
; 1045 : 
; 1046 :         MMCSetMMCState(pDisk, MMC_STATE_STBY);

  00334	ea000011	 b           |$LN63@MMCIssueId|
  00338		 |$LN19@MMCIssueId|

; 956  :     }
; 957  :     else
; 958  :     {
; 959  :         pDisk->d_CardType = CARDTYPE_SD;

  00338	e3a06002	 mov         r6, #2
  0033c	e5856010	 str         r6, [r5, #0x10]
  00340	eaffffe0	 b           |$found_card$44726|
  00344		 |$LN8@MMCIssueId|

; 1047 :     }
; 1048 :     else if (pDisk->d_CardType == CARDTYPE_SD || pDisk->d_CardType == CARDTYPE_SDHC)

  00344	e3530002	 cmp         r3, #2
  00348	0a000001	 beq         |$LN4@MMCIssueId|
  0034c	e3530003	 cmp         r3, #3
  00350	1a00000b	 bne         |$LN47@MMCIssueId|
  00354		 |$LN4@MMCIssueId|

; 1049 :     {
; 1050 :         MMCcmd.command = SEND_RELATIVE_ADDRESS;

  00354	e3a03003	 mov         r3, #3
  00358	e5c43004	 strb        r3, [r4, #4]

; 1051 :         MMCcmd.argument = 0;

  0035c	e3a03000	 mov         r3, #0

; 1052 : 
; 1053 :         OALMSGX(OAL_FUNC, (TEXT("SET_RELATIVE_ADDR\r\n")));
; 1054 :         if ( MMCCommandResponse(&MMCcmd, 0) )

  00360	e3a01000	 mov         r1, #0
  00364	e1a00004	 mov         r0, r4
  00368	e5843008	 str         r3, [r4, #8]
  0036c	eb000000	 bl          MMCCommandResponse
  00370	e3500000	 cmp         r0, #0
  00374	1affff3c	 bne         |$command_error$44707|

; 1055 :             goto command_error;
; 1056 : 
; 1057 :         pDisk->d_RelAddress = MMCcmd.relative_address;

  00378	e594301c	 ldr         r3, [r4, #0x1C]

; 1058 :         OALMSGX(OAL_INFO, (TEXT("SD card relative address is %d\r\n"), pDisk->d_RelAddress));
; 1059 : 
; 1060 :         MMCSetMMCState(pDisk, MMC_STATE_STBY);

  0037c	e5853014	 str         r3, [r5, #0x14]
  00380		 |$LN63@MMCIssueId|
  00380	e585b00c	 str         r11, [r5, #0xC]
  00384		 |$LN47@MMCIssueId|

; 1061 :     }
; 1062 : 
; 1063 :     /*
; 1064 :      * CMD10: SEND_CID - send card identification
; 1065 :      */
; 1066 :     MMCcmd.command = SEND_CID;

  00384	e3a0300a	 mov         r3, #0xA
  00388	e5c43004	 strb        r3, [r4, #4]

; 1067 :     MMCcmd.argument = (pDisk->d_RelAddress) << 16;

  0038c	e5953014	 ldr         r3, [r5, #0x14]

; 1068 : 
; 1069 :     OALMSGX(OAL_FUNC, (TEXT("SEND_CID\r\n")));
; 1070 :     if ( MMCCommandResponse(&MMCcmd, 0) )

  00390	e3a01000	 mov         r1, #0
  00394	e1a00004	 mov         r0, r4
  00398	e1a03803	 mov         r3, r3, lsl #16
  0039c	e5843008	 str         r3, [r4, #8]
  003a0	eb000000	 bl          MMCCommandResponse
  003a4	e3500000	 cmp         r0, #0
  003a8	1affff2f	 bne         |$command_error$44707|

; 1071 :         goto command_error;
; 1072 : 
; 1073 :     #if 0
; 1074 :     #ifdef DEBUG
; 1075 :         OALMSGX(OAL_INFO, (TEXT("MMCIssueIdentify: DUMP CID\r\n")));
; 1076 :         if (pDisk->d_CardType == CARDTYPE_SD || pDisk->d_CardType == CARDTYPE_SDHC)
; 1077 :         {
; 1078 :             char temp[10];
; 1079 :             //dump sd cid
; 1080 :             OALMSGX(OAL_INFO, (TEXT("SD: Mfr id: %d\r\n"), MMCcmd.cid.sd_cid.sdmid));
; 1081 :             UTIL_sd_cid_get_name(&MMCcmd, temp);
; 1082 :             OALMSGX(OAL_INFO, (TEXT("SD: Product name: %s\r\n"), temp));
; 1083 :             OALMSGX(OAL_INFO, (TEXT("SD: Serial number: 0x%X\r\n"), MMCcmd.cid.sd_cid.sdpsn));
; 1084 :         }
; 1085 :         else
; 1086 :         {
; 1087 :             char temp[10];
; 1088 :             // default to mmc
; 1089 :             OALMSGX(OAL_INFO, (TEXT("MMC: Mfr id: %d\r\n"), MMCcmd.cid.mmc_cid.mid));
; 1090 :             UTIL_mmc_cid_get_name(&MMCcmd, temp);
; 1091 :             OALMSGX(OAL_INFO, (TEXT("MMC: Product name: %s\r\n"), temp));
; 1092 :             OALMSGX(OAL_INFO, (TEXT("MMC: Serial number: 0x%X\r\n"), MMCcmd.cid.mmc_cid.psn));
; 1093 :         }
; 1094 :     #endif
; 1095 :     #endif
; 1096 :         
; 1097 :     /*
; 1098 :      * CMD9: SEND_CSD - send card specific data
; 1099 :      */
; 1100 :     MMCcmd.command = SEND_CSD;

  003ac	e3a03009	 mov         r3, #9
  003b0	e5c43004	 strb        r3, [r4, #4]

; 1101 :     MMCcmd.argument = (pDisk->d_RelAddress) << 16;

  003b4	e5953014	 ldr         r3, [r5, #0x14]

; 1102 : 
; 1103 :     OALMSGX(OAL_FUNC, (TEXT("SEND_CSD\r\n")));
; 1104 :     if ( MMCCommandResponse(&MMCcmd, 0) )

  003b8	e3a01000	 mov         r1, #0
  003bc	e1a00004	 mov         r0, r4
  003c0	e1a03803	 mov         r3, r3, lsl #16
  003c4	e5843008	 str         r3, [r4, #8]
  003c8	eb000000	 bl          MMCCommandResponse
  003cc	e3500000	 cmp         r0, #0
  003d0	1affff25	 bne         |$command_error$44707|

; 1105 :         goto command_error;
; 1106 : 
; 1107 :     OALMSGX(OAL_INFO, (TEXT("MMCIssueIdentify: CSD\r\n")));
; 1108 :     OALMSGX(OAL_INFO, (TEXT("reported block size = %d\r\n"), UTIL_csd_get_sectorsize(&MMCcmd)));
; 1109 :     OALMSGX(OAL_INFO, (TEXT("Card size is = %u 512 byte sectors\r\n"), UTIL_csd_get_devicesize(&MMCcmd)));
; 1110 :     OALMSGX(OAL_INFO, (TEXT("max clock freq = %d\r\n"), UTIL_csd_get_tran_speed(&MMCcmd)));
; 1111 : 
; 1112 :     // set up data in DiskInfo data structure
; 1113 :     //pDisk->d_DiskInfo.di_bytes_per_sect = UTIL_csd_get_sectorsize(&MMCcmd);
; 1114 :     // some SD (not SDHC) cards will report 1024 or 2048 byte sectors, this is only to 
; 1115 :     // allow >1GB capacity to be reported, bootloader FAT file system only supports 512 byte sectors.
; 1116 :     pDisk->d_DiskInfo.di_bytes_per_sect = 512;

  003d4	e3a03c02	 mov         r3, #2, 24

; 1117 :     pDisk->d_DiskInfo.di_total_sectors = UTIL_csd_get_devicesize(&MMCcmd);

  003d8	e1a00004	 mov         r0, r4
  003dc	e585301c	 str         r3, [r5, #0x1C]
  003e0	eb000000	 bl          UTIL_csd_get_devicesize
  003e4	e1a03000	 mov         r3, r0

; 1118 : 
; 1119 :     pDisk->MaxClkFreq = UTIL_csd_get_tran_speed(&MMCcmd);

  003e8	e1a00004	 mov         r0, r4
  003ec	e5853018	 str         r3, [r5, #0x18]
  003f0	eb000000	 bl          UTIL_csd_get_tran_speed
  003f4	e5850030	 str         r0, [r5, #0x30]

; 1120 : 
; 1121 :     OALMSGX(OAL_INFO, (TEXT("identification complete\r\n")));
; 1122 :     return TRUE;

  003f8	e3a00001	 mov         r0, #1

; 1127 : }

  003fc	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  00400	e12fff1e	 bx          lr
  00404		 |$LN67@MMCIssueId|
  00404		 |$LN68@MMCIssueId|
  00404	00000000	 DCD         |??_C@_1JO@JCBKFGLI@?$AAM?$AAM?$AAC?$AAI?$AAs?$AAs?$AAu?$AAe?$AAI?$AAd?$AAe?$AAn?$AAt?$AAi?$AAf?$AAy?$AA?3?$AA?5?$AAb?$AAu?$AAs?$AAy?$AA?5?$AAb?$AAi?$AAt?$AA?5?$AAn?$AAe?$AAv?$AAe?$AAr@|
  00408		 |$LN69@MMCIssueId|
  00408	00000000	 DCD         |??_C@_1KE@BIOPJCPI@?$AAM?$AAM?$AAC?$AAI?$AAs?$AAs?$AAu?$AAe?$AAI?$AAd?$AAe?$AAn?$AAt?$AAi?$AAf?$AAy?$AA?3?$AA?5?$AAb?$AAu?$AAs?$AAy?$AA?5?$AAb?$AAi?$AAt?$AA?5?$AAn?$AAe?$AAv?$AAe?$AAr@|
  0040c		 |$LN70@MMCIssueId|
  0040c	00000000	 DCD         |dpCurSettings|
  00410		 |$LN71@MMCIssueId|
  00410	00000000	 DCD         |??_C@_1FK@HAIGBMKL@?$AAM?$AAM?$AAC?$AAI?$AAs?$AAs?$AAu?$AAe?$AAI?$AAd?$AAe?$AAn?$AAt?$AAi?$AAf?$AAy?$AA?3?$AA?5?$AAM?$AAM?$AAC?$AAC?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AAR?$AAe?$AAs?$AAp@|
  00414		 |$LN72@MMCIssueId|
  00414	00000000	 DCD         |MMCcmd|
  00418		 |$M45614|

			 ENDP  ; |MMCIssueIdentify|

	EXPORT	|MMCCardDetect|
	IMPORT	|SdhcHandleInsertion|
	IMPORT	|SdhcCardDetect|

  00000			 AREA	 |.pdata|, PDATA
|$T45632| DCD	|$LN8@MMCCardDet|
	DCD	0x40001201
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |MMCCardDetect| PROC

; 1166 : {

  00000		 |$LN8@MMCCardDet|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M45629|
  00004	e1a04000	 mov         r4, r0

; 1167 : #if 1
; 1168 :     // check GPIO to detect card
; 1169 :         BOOL card_present;
; 1170 : 
; 1171 :         // check if card is preset in connector
; 1172 :         card_present = SdhcCardDetect();

  00008	eb000000	 bl          SdhcCardDetect
  0000c	e3500000	 cmp         r0, #0

; 1173 :         if (!card_present)
; 1174 :         {
; 1175 :             return FALSE;

  00010	03a00000	 moveq       r0, #0

; 1186 :         }
; 1187 : #else
; 1188 :     // send status command to detect card
; 1189 :         int result;
; 1190 : 
; 1191 :         if (pDisk->d_MMCState == MMC_STATE_IDLE)
; 1192 :         {
; 1193 :             result = MMCIssueIdentify(pDisk);
; 1194 :             if (result)
; 1195 :             {
; 1196 :                 SdhcHandleInsertion();
; 1197 :                 return result;
; 1198 :             }
; 1199 :         }
; 1200 :         else
; 1201 :         {
; 1202 :             MMCcmd.card_type = pDisk->d_CardType;
; 1203 :             MMCcmd.command = SEND_STATUS;
; 1204 :             MMCcmd.argument = (pDisk->d_RelAddress)<<16;
; 1205 :             MMCcmd.num_blocks = 1;
; 1206 :             MMCcmd.block_len = 512;
; 1207 :             result = (MMCCommandResponse(&MMCcmd, 0));
; 1208 :             if (result)
; 1209 :             {
; 1210 :                 MMCSetMMCState(pDisk, MMC_STATE_IDLE);
; 1211 :                 return FALSE;
; 1212 :             }
; 1213 :             else return TRUE;
; 1214 :         }
; 1215 :     return FALSE;
; 1216 : #endif
; 1217 : }

  00014	08bd4010	 ldmeqia     sp!, {r4, lr}
  00018	012fff1e	 bxeq        lr

; 1176 :         }
; 1177 :         else
; 1178 :         {
; 1179 :             if (pDisk->d_MMCState == MMC_STATE_IDLE)

  0001c	e594300c	 ldr         r3, [r4, #0xC]
  00020	e3530000	 cmp         r3, #0
  00024	1a000004	 bne         |$LN1@MMCCardDet|

; 1180 :             {
; 1181 :                 // card present so handle card entry actions
; 1182 :                 SdhcHandleInsertion();

  00028	eb000000	 bl          SdhcHandleInsertion

; 1183 :                 return MMCIssueIdentify(pDisk);

  0002c	e1a00004	 mov         r0, r4
  00030	eb000000	 bl          MMCIssueIdentify

; 1186 :         }
; 1187 : #else
; 1188 :     // send status command to detect card
; 1189 :         int result;
; 1190 : 
; 1191 :         if (pDisk->d_MMCState == MMC_STATE_IDLE)
; 1192 :         {
; 1193 :             result = MMCIssueIdentify(pDisk);
; 1194 :             if (result)
; 1195 :             {
; 1196 :                 SdhcHandleInsertion();
; 1197 :                 return result;
; 1198 :             }
; 1199 :         }
; 1200 :         else
; 1201 :         {
; 1202 :             MMCcmd.card_type = pDisk->d_CardType;
; 1203 :             MMCcmd.command = SEND_STATUS;
; 1204 :             MMCcmd.argument = (pDisk->d_RelAddress)<<16;
; 1205 :             MMCcmd.num_blocks = 1;
; 1206 :             MMCcmd.block_len = 512;
; 1207 :             result = (MMCCommandResponse(&MMCcmd, 0));
; 1208 :             if (result)
; 1209 :             {
; 1210 :                 MMCSetMMCState(pDisk, MMC_STATE_IDLE);
; 1211 :                 return FALSE;
; 1212 :             }
; 1213 :             else return TRUE;
; 1214 :         }
; 1215 :     return FALSE;
; 1216 : #endif
; 1217 : }

  00034	e8bd4010	 ldmia       sp!, {r4, lr}
  00038	e12fff1e	 bx          lr
  0003c		 |$LN1@MMCCardDet|

; 1184 :             }
; 1185 :             return TRUE;

  0003c	e3a00001	 mov         r0, #1

; 1186 :         }
; 1187 : #else
; 1188 :     // send status command to detect card
; 1189 :         int result;
; 1190 : 
; 1191 :         if (pDisk->d_MMCState == MMC_STATE_IDLE)
; 1192 :         {
; 1193 :             result = MMCIssueIdentify(pDisk);
; 1194 :             if (result)
; 1195 :             {
; 1196 :                 SdhcHandleInsertion();
; 1197 :                 return result;
; 1198 :             }
; 1199 :         }
; 1200 :         else
; 1201 :         {
; 1202 :             MMCcmd.card_type = pDisk->d_CardType;
; 1203 :             MMCcmd.command = SEND_STATUS;
; 1204 :             MMCcmd.argument = (pDisk->d_RelAddress)<<16;
; 1205 :             MMCcmd.num_blocks = 1;
; 1206 :             MMCcmd.block_len = 512;
; 1207 :             result = (MMCCommandResponse(&MMCcmd, 0));
; 1208 :             if (result)
; 1209 :             {
; 1210 :                 MMCSetMMCState(pDisk, MMC_STATE_IDLE);
; 1211 :                 return FALSE;
; 1212 :             }
; 1213 :             else return TRUE;
; 1214 :         }
; 1215 :     return FALSE;
; 1216 : #endif
; 1217 : }

  00040	e8bd4010	 ldmia       sp!, {r4, lr}
  00044	e12fff1e	 bx          lr
  00048		 |$M45630|

			 ENDP  ; |MMCCardDetect|

	EXPORT	|SDCardInit|
	EXPORT	|??_C@_1EI@DCCPDMOI@?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAM?$AAM?$AAC?$AAS?$AAe?$AAl?$AAe?$AAc?$AAt?$AAC?$AAa?$AAr?$AAd?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EM@FDPFBDGI@?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAM?$AAM?$AAC?$AAW?$AAa?$AAi?$AAt?$AAF?$AAo?$AAr?$AAR?$AAe?$AAa?$AAd?$AAy?$AA?5?$AAf?$AAa?$AAi?$AAl@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DM@BFOJJFFG@?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAN?$AAo?$AA?5?$AAm?$AAe?$AAd?$AAi?$AAa?$AA?5?$AAf?$AAo?$AAu?$AAn?$AAd?$AA?$CB?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EE@PJJAIGOH@?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAM?$AAM?$AAC?$AAI?$AAn?$AAi?$AAt?$AAD?$AAi?$AAs?$AAk?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?$CB?$AA?$AN@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T45651| DCD	|$LN18@SDCardInit|
	DCD	0x40003c01

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EI@DCCPDMOI@?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAM?$AAM?$AAC?$AAS?$AAe?$AAl?$AAe?$AAc?$AAt?$AAC?$AAa?$AAr?$AAd?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd@| DCB "S"
	DCB	0x0, "D", 0x0, "C", 0x0, "a", 0x0, "r", 0x0, "d", 0x0, "I"
	DCB	0x0, "n", 0x0, "i", 0x0, "t", 0x0, ":", 0x0, " ", 0x0, "M"
	DCB	0x0, "M", 0x0, "C", 0x0, "S", 0x0, "e", 0x0, "l", 0x0, "e"
	DCB	0x0, "c", 0x0, "t", 0x0, "C", 0x0, "a", 0x0, "r", 0x0, "d"
	DCB	0x0, " ", 0x0, "f", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e"
	DCB	0x0, "d", 0x0, "!", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EM@FDPFBDGI@?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAM?$AAM?$AAC?$AAW?$AAa?$AAi?$AAt?$AAF?$AAo?$AAr?$AAR?$AAe?$AAa?$AAd?$AAy?$AA?5?$AAf?$AAa?$AAi?$AAl@| DCB "S"
	DCB	0x0, "D", 0x0, "C", 0x0, "a", 0x0, "r", 0x0, "d", 0x0, "I"
	DCB	0x0, "n", 0x0, "i", 0x0, "t", 0x0, ":", 0x0, " ", 0x0, "M"
	DCB	0x0, "M", 0x0, "C", 0x0, "W", 0x0, "a", 0x0, "i", 0x0, "t"
	DCB	0x0, "F", 0x0, "o", 0x0, "r", 0x0, "R", 0x0, "e", 0x0, "a"
	DCB	0x0, "d", 0x0, "y", 0x0, " ", 0x0, "f", 0x0, "a", 0x0, "i"
	DCB	0x0, "l", 0x0, "e", 0x0, "d", 0x0, "!", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DM@BFOJJFFG@?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAN?$AAo?$AA?5?$AAm?$AAe?$AAd?$AAi?$AAa?$AA?5?$AAf?$AAo?$AAu?$AAn?$AAd?$AA?$CB?$AA?$AN?$AA?6?$AA?$AA@| DCB "S"
	DCB	0x0, "D", 0x0, "C", 0x0, "a", 0x0, "r", 0x0, "d", 0x0, "I"
	DCB	0x0, "n", 0x0, "i", 0x0, "t", 0x0, ":", 0x0, " ", 0x0, "N"
	DCB	0x0, "o", 0x0, " ", 0x0, "m", 0x0, "e", 0x0, "d", 0x0, "i"
	DCB	0x0, "a", 0x0, " ", 0x0, "f", 0x0, "o", 0x0, "u", 0x0, "n"
	DCB	0x0, "d", 0x0, "!", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EE@PJJAIGOH@?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAM?$AAM?$AAC?$AAI?$AAn?$AAi?$AAt?$AAD?$AAi?$AAs?$AAk?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?$CB?$AA?$AN@| DCB "S"
	DCB	0x0, "D", 0x0, "C", 0x0, "a", 0x0, "r", 0x0, "d", 0x0, "I"
	DCB	0x0, "n", 0x0, "i", 0x0, "t", 0x0, ":", 0x0, " ", 0x0, "M"
	DCB	0x0, "M", 0x0, "C", 0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t"
	DCB	0x0, "D", 0x0, "i", 0x0, "s", 0x0, "k", 0x0, " ", 0x0, "f"
	DCB	0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, "!"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |SDCardInit| PROC

; 1262 : {

  00000		 |$LN18@SDCardInit|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M45648|
  00004	e1a04000	 mov         r4, r0

; 1263 :     OALMSGX(OAL_INFO, (L"SDCardInit: Init device ...\r\n"));
; 1264 : 
; 1265 :     pDisk->d_MMCState = MMC_STATE_IDLE;         // current state of MMC card

  00008	e3a03000	 mov         r3, #0

; 1266 : 
; 1267 :     pDisk->d_DiskCardState = STATE_INITING;     // current state of drive 

  0000c	e3a02001	 mov         r2, #1
  00010	e584300c	 str         r3, [r4, #0xC]
  00014	e5842008	 str         r2, [r4, #8]

; 1268 :     
; 1269 :     if (MMCInitDisk(pDisk))

  00018	eb000000	 bl          MMCInitDisk
  0001c	e3500000	 cmp         r0, #0
  00020	0a000008	 beq         |$LN4@SDCardInit|

; 1270 :     {
; 1271 :         OALMSG(OAL_ERROR, (L"SDCardInit: MMCInitDisk failed!\r\n"));

  00024	e59f30b4	 ldr         r3, [pc, #0xB4]
  00028	e5933440	 ldr         r3, [r3, #0x440]
  0002c	e3130001	 tst         r3, #1
  00030	0a000001	 beq         |$LN7@SDCardInit|
  00034	e59f00b0	 ldr         r0, [pc, #0xB0]
  00038		 |$LN15@SDCardInit|
  00038	eb000000	 bl          NKDbgPrintfW
  0003c		 |$LN7@SDCardInit|

; 1272 :         return DL_MMC_ERROR;

  0003c	e3e00000	 mvn         r0, #0

; 1298 : }

  00040	e8bd4010	 ldmia       sp!, {r4, lr}
  00044	e12fff1e	 bx          lr
  00048		 |$LN4@SDCardInit|

; 1273 :     }
; 1274 : 
; 1275 :     if (MMCCardDetect(pDisk) == FALSE) {

  00048	e1a00004	 mov         r0, r4
  0004c	eb000000	 bl          MMCCardDetect
  00050	e3500000	 cmp         r0, #0
  00054	1a000005	 bne         |$LN3@SDCardInit|

; 1276 :         OALMSG(OAL_ERROR, (L"SDCardInit: No media found!\r\n"));

  00058	e59f3080	 ldr         r3, [pc, #0x80]
  0005c	e5933440	 ldr         r3, [r3, #0x440]
  00060	e3130001	 tst         r3, #1
  00064	0afffff4	 beq         |$LN7@SDCardInit|
  00068	e59f0078	 ldr         r0, [pc, #0x78]

; 1277 :         return DL_MMC_ERROR;

  0006c	eafffff1	 b           |$LN15@SDCardInit|
  00070		 |$LN3@SDCardInit|

; 1278 :     }
; 1279 : 
; 1280 :     pDisk->d_DiskCardState = STATE_OPENED;

  00070	e3a03003	 mov         r3, #3

; 1281 : 
; 1282 :     if (MMCWaitForReady(pDisk))

  00074	e1a00004	 mov         r0, r4
  00078	e5843008	 str         r3, [r4, #8]
  0007c	eb000000	 bl          MMCWaitForReady
  00080	e3500000	 cmp         r0, #0
  00084	0a000005	 beq         |$LN2@SDCardInit|

; 1283 :     {
; 1284 :         OALMSG(OAL_ERROR, (L"SDCardInit: MMCWaitForReady failed!\r\n"));

  00088	e59f3050	 ldr         r3, [pc, #0x50]
  0008c	e5933440	 ldr         r3, [r3, #0x440]
  00090	e3130001	 tst         r3, #1
  00094	0affffe8	 beq         |$LN7@SDCardInit|
  00098	e59f0044	 ldr         r0, [pc, #0x44]

; 1285 :         return DL_MMC_ERROR;

  0009c	eaffffe5	 b           |$LN15@SDCardInit|
  000a0		 |$LN2@SDCardInit|

; 1286 :     }
; 1287 :     
; 1288 :     if (MMCSelectCard(pDisk))

  000a0	e1a00004	 mov         r0, r4
  000a4	eb000000	 bl          MMCSelectCard
  000a8	e3500000	 cmp         r0, #0
  000ac	0a000005	 beq         |$LN1@SDCardInit|

; 1289 :     {
; 1290 :         OALMSG(OAL_ERROR, (L"SDCardInit: MMCSelectCard failed!\r\n"));

  000b0	e59f3028	 ldr         r3, [pc, #0x28]
  000b4	e5933440	 ldr         r3, [r3, #0x440]
  000b8	e3130001	 tst         r3, #1
  000bc	0affffde	 beq         |$LN7@SDCardInit|
  000c0	e59f0014	 ldr         r0, [pc, #0x14]

; 1291 :         return DL_MMC_ERROR;

  000c4	eaffffdb	 b           |$LN15@SDCardInit|
  000c8		 |$LN1@SDCardInit|

; 1292 :     }       
; 1293 : 
; 1294 :     MMCSetTranSpeed(pDisk->MaxClkFreq);

  000c8	e5940030	 ldr         r0, [r4, #0x30]
  000cc	eb000000	 bl          MMCSetTranSpeed

; 1295 :     //brian MMCSetTranSpeed(5000000);
; 1296 : 
; 1297 :     return DL_SUCCESS;  

  000d0	e3a00000	 mov         r0, #0

; 1298 : }

  000d4	e8bd4010	 ldmia       sp!, {r4, lr}
  000d8	e12fff1e	 bx          lr
  000dc		 |$LN19@SDCardInit|
  000dc		 |$LN20@SDCardInit|
  000dc	00000000	 DCD         |??_C@_1EI@DCCPDMOI@?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAM?$AAM?$AAC?$AAS?$AAe?$AAl?$AAe?$AAc?$AAt?$AAC?$AAa?$AAr?$AAd?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd@|
  000e0		 |$LN21@SDCardInit|
  000e0	00000000	 DCD         |dpCurSettings|
  000e4		 |$LN22@SDCardInit|
  000e4	00000000	 DCD         |??_C@_1EM@FDPFBDGI@?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAM?$AAM?$AAC?$AAW?$AAa?$AAi?$AAt?$AAF?$AAo?$AAr?$AAR?$AAe?$AAa?$AAd?$AAy?$AA?5?$AAf?$AAa?$AAi?$AAl@|
  000e8		 |$LN23@SDCardInit|
  000e8	00000000	 DCD         |??_C@_1DM@BFOJJFFG@?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAN?$AAo?$AA?5?$AAm?$AAe?$AAd?$AAi?$AAa?$AA?5?$AAf?$AAo?$AAu?$AAn?$AAd?$AA?$CB?$AA?$AN?$AA?6?$AA?$AA@|
  000ec		 |$LN24@SDCardInit|
  000ec	00000000	 DCD         |??_C@_1EE@PJJAIGOH@?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAM?$AAM?$AAC?$AAI?$AAn?$AAi?$AAt?$AAD?$AAi?$AAs?$AAk?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?$CB?$AA?$AN@|
  000f0		 |$M45649|

			 ENDP  ; |SDCardInit|

	EXPORT	|SDCardReadSector|
	EXPORT	|??_C@_1GI@CBFICDBE@?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAR?$AAe?$AAa?$AAd?$AAS?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?3?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAr?$AAe?$AAa?$AAd?$AAi?$AAn?$AAg?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HE@MOOOFOKP@?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAR?$AAe?$AAa?$AAd?$AAS?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?3?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAr?$AAe?$AAa?$AAd?$AAi?$AAn?$AAg?$AA?5@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T45676| DCD	|$LN18@SDCardRead|
	DCD	0x40002401

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GI@CBFICDBE@?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAR?$AAe?$AAa?$AAd?$AAS?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?3?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAr?$AAe?$AAa?$AAd?$AAi?$AAn?$AAg?$AA?5@| DCB "S"
	DCB	0x0, "D", 0x0, "C", 0x0, "a", 0x0, "r", 0x0, "d", 0x0, "R"
	DCB	0x0, "e", 0x0, "a", 0x0, "d", 0x0, "S", 0x0, "e", 0x0, "c"
	DCB	0x0, "t", 0x0, "o", 0x0, "r", 0x0, ":", 0x0, " ", 0x0, "E"
	DCB	0x0, "r", 0x0, "r", 0x0, "o", 0x0, "r", 0x0, " ", 0x0, "r"
	DCB	0x0, "e", 0x0, "a", 0x0, "d", 0x0, "i", 0x0, "n", 0x0, "g"
	DCB	0x0, " ", 0x0, "f", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "!"
	DCB	0x0, " ", 0x0, "(", 0x0, "s", 0x0, "e", 0x0, "c", 0x0, "t"
	DCB	0x0, "o", 0x0, "r", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ")"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HE@MOOOFOKP@?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAR?$AAe?$AAa?$AAd?$AAS?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?3?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAr?$AAe?$AAa?$AAd?$AAi?$AAn?$AAg?$AA?5@| DCB "S"
	DCB	0x0, "D", 0x0, "C", 0x0, "a", 0x0, "r", 0x0, "d", 0x0, "R"
	DCB	0x0, "e", 0x0, "a", 0x0, "d", 0x0, "S", 0x0, "e", 0x0, "c"
	DCB	0x0, "t", 0x0, "o", 0x0, "r", 0x0, ":", 0x0, " ", 0x0, "E"
	DCB	0x0, "r", 0x0, "r", 0x0, "o", 0x0, "r", 0x0, " ", 0x0, "r"
	DCB	0x0, "e", 0x0, "a", 0x0, "d", 0x0, "i", 0x0, "n", 0x0, "g"
	DCB	0x0, " ", 0x0, "f", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, ","
	DCB	0x0, " ", 0x0, "r", 0x0, "e", 0x0, "t", 0x0, "r", 0x0, "y"
	DCB	0x0, " ", 0x0, "(", 0x0, "s", 0x0, "e", 0x0, "c", 0x0, "t"
	DCB	0x0, "o", 0x0, "r", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ")"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |SDCardReadSector| PROC

; 1318 : {

  00000		 |$LN18@SDCardRead|
  00000	e92d41f0	 stmdb       sp!, {r4 - r8, lr}
  00004		 |$M45673|
  00004	e1a07002	 mov         r7, r2
  00008	e1a05001	 mov         r5, r1
  0000c	e1a08000	 mov         r8, r0

; 1319 :     int retry = 2;      //allow 3 attempts to read sector correctly

  00010	e59f6074	 ldr         r6, [pc, #0x74]
  00014	e3a04002	 mov         r4, #2
  00018		 |$LL7@SDCardRead|

; 1320 :     DWORD Status;
; 1321 :     
; 1322 :     OALMSGX(OAL_FUNC, (L"SDCardReadSector %d\r\n", LogicalSector));
; 1323 :     
; 1324 :     do {
; 1325 :         Status = MMCRead(pDisk, LogicalSector, pSector);

  00018	e1a02007	 mov         r2, r7
  0001c	e1a01005	 mov         r1, r5
  00020	e1a00008	 mov         r0, r8
  00024	eb000000	 bl          MMCRead
  00028	e3500000	 cmp         r0, #0

; 1326 :         if (Status != MMCREAD_SUCCESS)

  0002c	0a000011	 beq         |$LN1@SDCardRead|

; 1327 :         {
; 1328 :             if (retry > 0)

  00030	e3540000	 cmp         r4, #0
  00034	da000004	 ble         |$LN6@SDCardRead|

; 1329 :                 OALMSG(OAL_ERROR, (L"SDCardReadSector: Error reading file, retry (sector %d)\r\n", LogicalSector));

  00038	e5963440	 ldr         r3, [r6, #0x440]
  0003c	e3130001	 tst         r3, #1
  00040	159f0040	 ldrne       r0, [pc, #0x40]
  00044	11a01005	 movne       r1, r5
  00048	1b000000	 blne        NKDbgPrintfW
  0004c		 |$LN6@SDCardRead|

; 1330 :         }
; 1331 :     } while (Status != MMCREAD_SUCCESS && retry--);

  0004c	e3540000	 cmp         r4, #0
  00050	e2444001	 sub         r4, r4, #1
  00054	1affffef	 bne         |$LL7@SDCardRead|
  00058	e5963440	 ldr         r3, [r6, #0x440]

; 1332 :     
; 1333 :     if (Status != MMCREAD_SUCCESS)
; 1334 :     {
; 1335 :         OALMSG(OAL_ERROR, (L"SDCardReadSector: Error reading file! (sector %d)\r\n", LogicalSector));

  0005c	e3130001	 tst         r3, #1
  00060	159f001c	 ldrne       r0, [pc, #0x1C]
  00064	11a01005	 movne       r1, r5
  00068	1b000000	 blne        NKDbgPrintfW

; 1336 :         return DL_MMC_ERROR;

  0006c	e3e00000	 mvn         r0, #0

; 1340 : }

  00070	e8bd41f0	 ldmia       sp!, {r4 - r8, lr}
  00074	e12fff1e	 bx          lr
  00078		 |$LN1@SDCardRead|

; 1337 :     }
; 1338 : 
; 1339 :     return DL_SUCCESS;

  00078	e3a00000	 mov         r0, #0

; 1340 : }

  0007c	e8bd41f0	 ldmia       sp!, {r4 - r8, lr}
  00080	e12fff1e	 bx          lr
  00084		 |$LN19@SDCardRead|
  00084		 |$LN20@SDCardRead|
  00084	00000000	 DCD         |??_C@_1GI@CBFICDBE@?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAR?$AAe?$AAa?$AAd?$AAS?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?3?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAr?$AAe?$AAa?$AAd?$AAi?$AAn?$AAg?$AA?5@|
  00088		 |$LN21@SDCardRead|
  00088	00000000	 DCD         |??_C@_1HE@MOOOFOKP@?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAR?$AAe?$AAa?$AAd?$AAS?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?3?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAr?$AAe?$AAa?$AAd?$AAi?$AAn?$AAg?$AA?5@|
  0008c		 |$LN22@SDCardRead|
  0008c	00000000	 DCD         |dpCurSettings|
  00090		 |$M45674|

			 ENDP  ; |SDCardReadSector|

	EXPORT	|SDCardReadMultiSectors|
	EXPORT	|??_C@_1IM@HCIKFOHM@?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAR?$AAe?$AAa?$AAd?$AAM?$AAu?$AAl?$AAt?$AAi?$AAS?$AAe?$AAc?$AAt?$AAo?$AAr?$AAs?$AA?3?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAr?$AAe@| [ DATA ] ; `string'
	EXPORT	|??_C@_1IA@BMANGLND@?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAR?$AAe?$AAa?$AAd?$AAM?$AAu?$AAl?$AAt?$AAi?$AAS?$AAe?$AAc?$AAt?$AAo?$AAr?$AAs?$AA?3?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAr?$AAe@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T45700| DCD	|$LN18@SDCardRead@2|
	DCD	0x40002701

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1IM@HCIKFOHM@?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAR?$AAe?$AAa?$AAd?$AAM?$AAu?$AAl?$AAt?$AAi?$AAS?$AAe?$AAc?$AAt?$AAo?$AAr?$AAs?$AA?3?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAr?$AAe@| DCB "S"
	DCB	0x0, "D", 0x0, "C", 0x0, "a", 0x0, "r", 0x0, "d", 0x0, "R"
	DCB	0x0, "e", 0x0, "a", 0x0, "d", 0x0, "M", 0x0, "u", 0x0, "l"
	DCB	0x0, "t", 0x0, "i", 0x0, "S", 0x0, "e", 0x0, "c", 0x0, "t"
	DCB	0x0, "o", 0x0, "r", 0x0, "s", 0x0, ":", 0x0, " ", 0x0, "E"
	DCB	0x0, "r", 0x0, "r", 0x0, "o", 0x0, "r", 0x0, " ", 0x0, "r"
	DCB	0x0, "e", 0x0, "a", 0x0, "d", 0x0, "i", 0x0, "n", 0x0, "g"
	DCB	0x0, " ", 0x0, "f", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "!"
	DCB	0x0, " ", 0x0, "(", 0x0, "s", 0x0, "e", 0x0, "c", 0x0, "t"
	DCB	0x0, "o", 0x0, "r", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ","
	DCB	0x0, " ", 0x0, "n", 0x0, "u", 0x0, "m", 0x0, " ", 0x0, "s"
	DCB	0x0, "e", 0x0, "c", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ")"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1IA@BMANGLND@?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAR?$AAe?$AAa?$AAd?$AAM?$AAu?$AAl?$AAt?$AAi?$AAS?$AAe?$AAc?$AAt?$AAo?$AAr?$AAs?$AA?3?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAr?$AAe@| DCB "S"
	DCB	0x0, "D", 0x0, "C", 0x0, "a", 0x0, "r", 0x0, "d", 0x0, "R"
	DCB	0x0, "e", 0x0, "a", 0x0, "d", 0x0, "M", 0x0, "u", 0x0, "l"
	DCB	0x0, "t", 0x0, "i", 0x0, "S", 0x0, "e", 0x0, "c", 0x0, "t"
	DCB	0x0, "o", 0x0, "r", 0x0, "s", 0x0, ":", 0x0, " ", 0x0, "E"
	DCB	0x0, "r", 0x0, "r", 0x0, "o", 0x0, "r", 0x0, " ", 0x0, "r"
	DCB	0x0, "e", 0x0, "a", 0x0, "d", 0x0, "i", 0x0, "n", 0x0, "g"
	DCB	0x0, " ", 0x0, "f", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, ","
	DCB	0x0, " ", 0x0, "r", 0x0, "e", 0x0, "t", 0x0, "r", 0x0, "y"
	DCB	0x0, " ", 0x0, "(", 0x0, "s", 0x0, "e", 0x0, "c", 0x0, "t"
	DCB	0x0, "o", 0x0, "r", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ")"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |SDCardReadMultiSectors| PROC

; 1347 : {

  00000		 |$LN18@SDCardRead@2|
  00000	e92d43f0	 stmdb       sp!, {r4 - r9, lr}
  00004		 |$M45697|
  00004	e1a07003	 mov         r7, r3
  00008	e1a08002	 mov         r8, r2
  0000c	e1a05001	 mov         r5, r1
  00010	e1a09000	 mov         r9, r0

; 1348 :     int   retry = 0;      //allow 3 attempts to read sector correctly

  00014	e59f607c	 ldr         r6, [pc, #0x7C]
  00018	e3a04000	 mov         r4, #0
  0001c		 |$LL7@SDCardRead@2|

; 1349 :     DWORD Status;
; 1350 :     
; 1351 :     OALMSGX(OAL_FUNC, (L"SDCardReadMultiSectors %d, num sec %d\r\n", LogicalSector, numSectors));
; 1352 : 
; 1353 :     do {
; 1354 :         Status = MMCReadMultiSectors((DISK *)pDisk, LogicalSector, pBuffer, numSectors);

  0001c	e1a03007	 mov         r3, r7
  00020	e1a02008	 mov         r2, r8
  00024	e1a01005	 mov         r1, r5
  00028	e1a00009	 mov         r0, r9
  0002c	eb000000	 bl          MMCReadMultiSectors
  00030	e3500000	 cmp         r0, #0

; 1355 :         if (Status != MMCREAD_SUCCESS)

  00034	0a000012	 beq         |$LN1@SDCardRead@2|

; 1356 :         {
; 1357 :             if (retry > 0)

  00038	e3540000	 cmp         r4, #0
  0003c	da000004	 ble         |$LN6@SDCardRead@2|

; 1358 :                 OALMSG(OAL_ERROR, (L"SDCardReadMultiSectors: Error reading file, retry (sector %d)\r\n", LogicalSector));

  00040	e596e440	 ldr         lr, [r6, #0x440]
  00044	e31e0001	 tst         lr, #1
  00048	159f0044	 ldrne       r0, [pc, #0x44]
  0004c	11a01005	 movne       r1, r5
  00050	1b000000	 blne        NKDbgPrintfW
  00054		 |$LN6@SDCardRead@2|

; 1359 :         }
; 1360 :     } while (Status != MMCREAD_SUCCESS && retry--);

  00054	e3540000	 cmp         r4, #0
  00058	e2444001	 sub         r4, r4, #1
  0005c	1affffee	 bne         |$LL7@SDCardRead@2|
  00060	e5963440	 ldr         r3, [r6, #0x440]

; 1361 :     
; 1362 :     if (Status != MMCREAD_SUCCESS)
; 1363 :     {
; 1364 :         OALMSG(OAL_ERROR, (L"SDCardReadMultiSectors: Error reading file! (sector %d, num sec %d)\r\n", LogicalSector, numSectors));

  00064	e3130001	 tst         r3, #1
  00068	159f0020	 ldrne       r0, [pc, #0x20]
  0006c	11a02007	 movne       r2, r7
  00070	11a01005	 movne       r1, r5
  00074	1b000000	 blne        NKDbgPrintfW

; 1365 :         return DL_MMC_ERROR;

  00078	e3e00000	 mvn         r0, #0

; 1369 : }

  0007c	e8bd43f0	 ldmia       sp!, {r4 - r9, lr}
  00080	e12fff1e	 bx          lr
  00084		 |$LN1@SDCardRead@2|

; 1366 :     }
; 1367 : 
; 1368 :     return DL_SUCCESS;

  00084	e3a00000	 mov         r0, #0

; 1369 : }

  00088	e8bd43f0	 ldmia       sp!, {r4 - r9, lr}
  0008c	e12fff1e	 bx          lr
  00090		 |$LN19@SDCardRead@2|
  00090		 |$LN20@SDCardRead@2|
  00090	00000000	 DCD         |??_C@_1IM@HCIKFOHM@?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAR?$AAe?$AAa?$AAd?$AAM?$AAu?$AAl?$AAt?$AAi?$AAS?$AAe?$AAc?$AAt?$AAo?$AAr?$AAs?$AA?3?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAr?$AAe@|
  00094		 |$LN21@SDCardRead@2|
  00094	00000000	 DCD         |??_C@_1IA@BMANGLND@?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAR?$AAe?$AAa?$AAd?$AAM?$AAu?$AAl?$AAt?$AAi?$AAS?$AAe?$AAc?$AAt?$AAo?$AAr?$AAs?$AA?3?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAr?$AAe@|
  00098		 |$LN22@SDCardRead@2|
  00098	00000000	 DCD         |dpCurSettings|
  0009c		 |$M45698|

			 ENDP  ; |SDCardReadMultiSectors|

	EXPORT	|BLSDCardDownload|
	EXPORT	|??_C@_1EM@KMLGLOML@?$AAB?$AAL?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAD?$AAo?$AAw?$AAn?$AAl?$AAo?$AAa?$AAd?$AA?3?$AA?5?$AA?5?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAo?$AAp?$AAe?$AAn?$AA?5?$AAf@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FA@PHKOKPHG@?$AAB?$AAL?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAD?$AAo?$AAw?$AAn?$AAl?$AAo?$AAa?$AAd?$AA?3?$AA?5?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAi?$AAo?$AA?5?$AAi?$AAn?$AAi?$AAt?$AA?5?$AAf@| [ DATA ] ; `string'
	IMPORT	|FileIoOpen|
	IMPORT	|FileNameToDirEntry|
	IMPORT	|FileIoInit|

  00000			 AREA	 |.pdata|, PDATA
|$T45719| DCD	|$LN13@BLSDCardDo|
	DCD	0x40004101

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EM@KMLGLOML@?$AAB?$AAL?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAD?$AAo?$AAw?$AAn?$AAl?$AAo?$AAa?$AAd?$AA?3?$AA?5?$AA?5?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAo?$AAp?$AAe?$AAn?$AA?5?$AAf@| DCB "B"
	DCB	0x0, "L", 0x0, "S", 0x0, "D", 0x0, "C", 0x0, "a", 0x0, "r"
	DCB	0x0, "d", 0x0, "D", 0x0, "o", 0x0, "w", 0x0, "n", 0x0, "l"
	DCB	0x0, "o", 0x0, "a", 0x0, "d", 0x0, ":", 0x0, " ", 0x0, " "
	DCB	0x0, "c", 0x0, "a", 0x0, "n", 0x0, "n", 0x0, "o", 0x0, "t"
	DCB	0x0, " ", 0x0, "o", 0x0, "p", 0x0, "e", 0x0, "n", 0x0, " "
	DCB	0x0, "f", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FA@PHKOKPHG@?$AAB?$AAL?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAD?$AAo?$AAw?$AAn?$AAl?$AAo?$AAa?$AAd?$AA?3?$AA?5?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAi?$AAo?$AA?5?$AAi?$AAn?$AAi?$AAt?$AA?5?$AAf@| DCB "B"
	DCB	0x0, "L", 0x0, "S", 0x0, "D", 0x0, "C", 0x0, "a", 0x0, "r"
	DCB	0x0, "d", 0x0, "D", 0x0, "o", 0x0, "w", 0x0, "n", 0x0, "l"
	DCB	0x0, "o", 0x0, "a", 0x0, "d", 0x0, ":", 0x0, " ", 0x0, " "
	DCB	0x0, "f", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "i", 0x0, "o"
	DCB	0x0, " ", 0x0, "i", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, " "
	DCB	0x0, "f", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |BLSDCardDownload| PROC

; 1383 : {

  00000		 |$LN13@BLSDCardDo|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004		 |$M45716|
  00004	e1a07000	 mov         r7, r0

; 1384 :     // This function is called after MMC/SD image download is selected in menu or config
; 1385 :     pFile = &File;
; 1386 : 
; 1387 :     OALMSGX(OAL_INFO, (L"BLSDCardDownload: Filename %s\r\n", filename));
; 1388 : 
; 1389 : 	if (!bFileIoInit)

  00008	e59f50f0	 ldr         r5, [pc, #0xF0]
  0000c	e59f10e8	 ldr         r1, [pc, #0xE8]
  00010	e59f40e0	 ldr         r4, [pc, #0xE0]
  00014	e5953000	 ldr         r3, [r5]
  00018	e59f60d4	 ldr         r6, [pc, #0xD4]
  0001c	e5841000	 str         r1, [r4]
  00020	e3530000	 cmp         r3, #0
  00024	1a000019	 bne         |$LN3@BLSDCardDo|

; 1390 : 	{
; 1391 : 		// set up data structure used by file system driver
; 1392 : 		fileio_ops.init = &SDCardInit;

  00028	e59f30c0	 ldr         r3, [pc, #0xC0]

; 1393 : 		fileio_ops.identify = &SDCardIdentify;

  0002c	e59f20b8	 ldr         r2, [pc, #0xB8]

; 1394 : 		fileio_ops.read_sector = &SDCardReadSector;

  00030	e59f10b0	 ldr         r1, [pc, #0xB0]

; 1395 : 		fileio_ops.read_multi_sectors = &SDCardReadMultiSectors;

  00034	e59fe0a8	 ldr         lr, [pc, #0xA8]
  00038	e5863000	 str         r3, [r6]

; 1396 : 		fileio_ops.drive_info = (PVOID)&Disk;

  0003c	e59f309c	 ldr         r3, [pc, #0x9C]
  00040	e5862004	 str         r2, [r6, #4]
  00044	e5861008	 str         r1, [r6, #8]
  00048	e586e00c	 str         lr, [r6, #0xC]

; 1397 : 
; 1398 : 		// initialize file system driver
; 1399 : 		if (FileIoInit(&fileio_ops) != FILEIO_STATUS_OK)

  0004c	e1a00006	 mov         r0, r6
  00050	e5863010	 str         r3, [r6, #0x10]
  00054	eb000000	 bl          FileIoInit
  00058	e3500000	 cmp         r0, #0
  0005c	0a000008	 beq         |$LN2@BLSDCardDo|

; 1400 : 		{
; 1401 : 			OALMSG(OAL_ERROR, (L"BLSDCardDownload:  fileio init failed\r\n"));

  00060	e59f3070	 ldr         r3, [pc, #0x70]
  00064	e5933440	 ldr         r3, [r3, #0x440]
  00068	e3130001	 tst         r3, #1
  0006c	0a000001	 beq         |$LN6@BLSDCardDo|
  00070	e59f0064	 ldr         r0, [pc, #0x64]
  00074		 |$LN10@BLSDCardDo|
  00074	eb000000	 bl          NKDbgPrintfW
  00078		 |$LN6@BLSDCardDo|

; 1402 : 			return (UINT32) BL_ERROR;

  00078	e3e00000	 mvn         r0, #0

; 1421 : }

  0007c	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  00080	e12fff1e	 bx          lr
  00084		 |$LN2@BLSDCardDo|

; 1403 : 		}
; 1404 : 
; 1405 : 		bFileIoInit = TRUE;

  00084	e3a03001	 mov         r3, #1
  00088	e5941000	 ldr         r1, [r4]
  0008c	e5853000	 str         r3, [r5]
  00090		 |$LN3@BLSDCardDo|

; 1406 : 	}
; 1407 : 
; 1408 :     // fill in file name (8.3 format)
; 1409 :     FileNameToDirEntry(filename, pFile->name, pFile->extension);

  00090	e2812009	 add         r2, r1, #9
  00094	e1a00007	 mov         r0, r7
  00098	eb000000	 bl          FileNameToDirEntry

; 1410 : 
; 1411 :     // try to open file specified by pConfig->filename, return BL_ERROR on failure
; 1412 :     if (FileIoOpen(&fileio_ops, pFile) != FILEIO_STATUS_OK)

  0009c	e5941000	 ldr         r1, [r4]
  000a0	e1a00006	 mov         r0, r6
  000a4	eb000000	 bl          FileIoOpen
  000a8	e3500000	 cmp         r0, #0
  000ac	0a000005	 beq         |$LN1@BLSDCardDo|

; 1413 :     {
; 1414 :         OALMSG(OAL_ERROR, (L"BLSDCardDownload:  cannot open file\r\n"));

  000b0	e59f3020	 ldr         r3, [pc, #0x20]
  000b4	e5933440	 ldr         r3, [r3, #0x440]
  000b8	e3130001	 tst         r3, #1
  000bc	0affffed	 beq         |$LN6@BLSDCardDo|
  000c0	e59f000c	 ldr         r0, [pc, #0xC]

; 1415 :         return (UINT32) BL_ERROR;

  000c4	eaffffea	 b           |$LN10@BLSDCardDo|
  000c8		 |$LN1@BLSDCardDo|

; 1416 :     }
; 1417 : 
; 1418 :     // return BL_DOWNLOAD, BootloaderMain will then call OEMReadData
; 1419 :     // (which calls BLSDCardReadData) to get image data.
; 1420 :     return BL_DOWNLOAD;

  000c8	e3a00000	 mov         r0, #0

; 1421 : }

  000cc	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  000d0	e12fff1e	 bx          lr
  000d4		 |$LN14@BLSDCardDo|
  000d4		 |$LN15@BLSDCardDo|
  000d4	00000000	 DCD         |??_C@_1EM@KMLGLOML@?$AAB?$AAL?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAD?$AAo?$AAw?$AAn?$AAl?$AAo?$AAa?$AAd?$AA?3?$AA?5?$AA?5?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAo?$AAp?$AAe?$AAn?$AA?5?$AAf@|
  000d8		 |$LN16@BLSDCardDo|
  000d8	00000000	 DCD         |dpCurSettings|
  000dc		 |$LN17@BLSDCardDo|
  000dc	00000000	 DCD         |??_C@_1FA@PHKOKPHG@?$AAB?$AAL?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAD?$AAo?$AAw?$AAn?$AAl?$AAo?$AAa?$AAd?$AA?3?$AA?5?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAi?$AAo?$AA?5?$AAi?$AAn?$AAi?$AAt?$AA?5?$AAf@|
  000e0		 |$LN18@BLSDCardDo|
  000e0	00000000	 DCD         |Disk|
  000e4		 |$LN19@BLSDCardDo|
  000e4	00000000	 DCD         |SDCardReadMultiSectors|
  000e8		 |$LN20@BLSDCardDo|
  000e8	00000000	 DCD         |SDCardReadSector|
  000ec		 |$LN21@BLSDCardDo|
  000ec	00000000	 DCD         |SDCardIdentify|
  000f0		 |$LN22@BLSDCardDo|
  000f0	00000000	 DCD         |SDCardInit|
  000f4		 |$LN23@BLSDCardDo|
  000f4	00000000	 DCD         |fileio_ops|
  000f8		 |$LN24@BLSDCardDo|
  000f8	00000000	 DCD         |pFile|
  000fc		 |$LN25@BLSDCardDo|
  000fc	00000000	 DCD         |File|
  00100		 |$LN26@BLSDCardDo|
  00100	00000000	 DCD         |bFileIoInit|
  00104		 |$M45717|

			 ENDP  ; |BLSDCardDownload|

	EXPORT	|__$ArrayPad$| [ DATA ]
	EXPORT	|BLSDCardReadLogo|
	EXPORT	|??_C@_1EM@GBAEOFJC@?$AAB?$AAL?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAR?$AAe?$AAa?$AAd?$AAL?$AAo?$AAg?$AAo?$AA?3?$AA?5?$AA?5?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAf@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GG@GHEKKBGL@?$AAB?$AAL?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAR?$AAe?$AAa?$AAd?$AAL?$AAo?$AAg?$AAo?$AA?3?$AA?5?$AA?5?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAp@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FK@BIPBBPFB@?$AAB?$AAL?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAR?$AAe?$AAa?$AAd?$AAL?$AAo?$AAg?$AAo?$AA?3?$AA?5?$AA?5?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAf@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FI@KCFLKPBN@?$AAB?$AAL?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAR?$AAe?$AAa?$AAd?$AAL?$AAo?$AAg?$AAo?$AA?3?$AA?5?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GA@CPLCDHMI@?$AAB?$AAL?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAR?$AAe?$AAa?$AAd?$AAL?$AAo?$AAg?$AAo?$AA?3?$AA?5?$AA?5?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAf@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EI@GHBAGNOC@?$AAB?$AAL?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAR?$AAe?$AAa?$AAd?$AAL?$AAo?$AAg?$AAo?$AA?3?$AA?5?$AA?5?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAo?$AAp?$AAe?$AAn?$AA?5?$AA?$CF@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FA@JKDIHGIH@?$AAB?$AAL?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAR?$AAe?$AAa?$AAd?$AAL?$AAo?$AAg?$AAo?$AA?3?$AA?5?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAi?$AAo?$AA?5?$AAi?$AAn?$AAi?$AAt?$AA?5?$AAf@| [ DATA ] ; `string'
	IMPORT	|OALLocalFree|
	IMPORT	|OALLocalAlloc|

  00000			 AREA	 |.pdata|, PDATA
|$T45778| DCD	|$LN44@BLSDCardRe@2|
	DCD	0xc000b702

  00000			 AREA	 |.xdata|, DATA
|$T45774| DCD	0xffffffdc

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EM@GBAEOFJC@?$AAB?$AAL?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAR?$AAe?$AAa?$AAd?$AAL?$AAo?$AAg?$AAo?$AA?3?$AA?5?$AA?5?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAf@| DCB "B"
	DCB	0x0, "L", 0x0, "S", 0x0, "D", 0x0, "C", 0x0, "a", 0x0, "r"
	DCB	0x0, "d", 0x0, "R", 0x0, "e", 0x0, "a", 0x0, "d", 0x0, "L"
	DCB	0x0, "o", 0x0, "g", 0x0, "o", 0x0, ":", 0x0, " ", 0x0, " "
	DCB	0x0, "c", 0x0, "a", 0x0, "n", 0x0, "n", 0x0, "o", 0x0, "t"
	DCB	0x0, " ", 0x0, "r", 0x0, "e", 0x0, "a", 0x0, "d", 0x0, " "
	DCB	0x0, "f", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GG@GHEKKBGL@?$AAB?$AAL?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAR?$AAe?$AAa?$AAd?$AAL?$AAo?$AAg?$AAo?$AA?3?$AA?5?$AA?5?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAp@| DCB "B"
	DCB	0x0, "L", 0x0, "S", 0x0, "D", 0x0, "C", 0x0, "a", 0x0, "r"
	DCB	0x0, "d", 0x0, "R", 0x0, "e", 0x0, "a", 0x0, "d", 0x0, "L"
	DCB	0x0, "o", 0x0, "g", 0x0, "o", 0x0, ":", 0x0, " ", 0x0, " "
	DCB	0x0, "c", 0x0, "a", 0x0, "n", 0x0, "n", 0x0, "o", 0x0, "t"
	DCB	0x0, " ", 0x0, "r", 0x0, "e", 0x0, "a", 0x0, "d", 0x0, " "
	DCB	0x0, "p", 0x0, "i", 0x0, "x", 0x0, "e", 0x0, "l", 0x0, " "
	DCB	0x0, "d", 0x0, "a", 0x0, "t", 0x0, "a", 0x0, " ", 0x0, "o"
	DCB	0x0, "f", 0x0, "f", 0x0, "s", 0x0, "e", 0x0, "t", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FK@BIPBBPFB@?$AAB?$AAL?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAR?$AAe?$AAa?$AAd?$AAL?$AAo?$AAg?$AAo?$AA?3?$AA?5?$AA?5?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAf@| DCB "B"
	DCB	0x0, "L", 0x0, "S", 0x0, "D", 0x0, "C", 0x0, "a", 0x0, "r"
	DCB	0x0, "d", 0x0, "R", 0x0, "e", 0x0, "a", 0x0, "d", 0x0, "L"
	DCB	0x0, "o", 0x0, "g", 0x0, "o", 0x0, ":", 0x0, " ", 0x0, " "
	DCB	0x0, "c", 0x0, "a", 0x0, "n", 0x0, "n", 0x0, "o", 0x0, "t"
	DCB	0x0, " ", 0x0, "r", 0x0, "e", 0x0, "a", 0x0, "d", 0x0, " "
	DCB	0x0, "f", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, " ", 0x0, "h"
	DCB	0x0, "e", 0x0, "a", 0x0, "d", 0x0, "e", 0x0, "r", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FI@KCFLKPBN@?$AAB?$AAL?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAR?$AAe?$AAa?$AAd?$AAL?$AAo?$AAg?$AAo?$AA?3?$AA?5?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5@| DCB "B"
	DCB	0x0, "L", 0x0, "S", 0x0, "D", 0x0, "C", 0x0, "a", 0x0, "r"
	DCB	0x0, "d", 0x0, "R", 0x0, "e", 0x0, "a", 0x0, "d", 0x0, "L"
	DCB	0x0, "o", 0x0, "g", 0x0, "o", 0x0, ":", 0x0, " ", 0x0, " "
	DCB	0x0, "I", 0x0, "n", 0x0, "v", 0x0, "a", 0x0, "l", 0x0, "i"
	DCB	0x0, "d", 0x0, " ", 0x0, "f", 0x0, "i", 0x0, "l", 0x0, "e"
	DCB	0x0, " ", 0x0, "s", 0x0, "i", 0x0, "g", 0x0, "n", 0x0, "a"
	DCB	0x0, "t", 0x0, "u", 0x0, "r", 0x0, "e", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GA@CPLCDHMI@?$AAB?$AAL?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAR?$AAe?$AAa?$AAd?$AAL?$AAo?$AAg?$AAo?$AA?3?$AA?5?$AA?5?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAf@| DCB "B"
	DCB	0x0, "L", 0x0, "S", 0x0, "D", 0x0, "C", 0x0, "a", 0x0, "r"
	DCB	0x0, "d", 0x0, "R", 0x0, "e", 0x0, "a", 0x0, "d", 0x0, "L"
	DCB	0x0, "o", 0x0, "g", 0x0, "o", 0x0, ":", 0x0, " ", 0x0, " "
	DCB	0x0, "c", 0x0, "a", 0x0, "n", 0x0, "n", 0x0, "o", 0x0, "t"
	DCB	0x0, " ", 0x0, "r", 0x0, "e", 0x0, "a", 0x0, "d", 0x0, " "
	DCB	0x0, "f", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, " ", 0x0, "s"
	DCB	0x0, "i", 0x0, "g", 0x0, "n", 0x0, "a", 0x0, "t", 0x0, "u"
	DCB	0x0, "r", 0x0, "e", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EI@GHBAGNOC@?$AAB?$AAL?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAR?$AAe?$AAa?$AAd?$AAL?$AAo?$AAg?$AAo?$AA?3?$AA?5?$AA?5?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAo?$AAp?$AAe?$AAn?$AA?5?$AA?$CF@| DCB "B"
	DCB	0x0, "L", 0x0, "S", 0x0, "D", 0x0, "C", 0x0, "a", 0x0, "r"
	DCB	0x0, "d", 0x0, "R", 0x0, "e", 0x0, "a", 0x0, "d", 0x0, "L"
	DCB	0x0, "o", 0x0, "g", 0x0, "o", 0x0, ":", 0x0, " ", 0x0, " "
	DCB	0x0, "c", 0x0, "a", 0x0, "n", 0x0, "n", 0x0, "o", 0x0, "t"
	DCB	0x0, " ", 0x0, "o", 0x0, "p", 0x0, "e", 0x0, "n", 0x0, " "
	DCB	0x0, "%", 0x0, "s", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FA@JKDIHGIH@?$AAB?$AAL?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAR?$AAe?$AAa?$AAd?$AAL?$AAo?$AAg?$AAo?$AA?3?$AA?5?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAi?$AAo?$AA?5?$AAi?$AAn?$AAi?$AAt?$AA?5?$AAf@| DCB "B"
	DCB	0x0, "L", 0x0, "S", 0x0, "D", 0x0, "C", 0x0, "a", 0x0, "r"
	DCB	0x0, "d", 0x0, "R", 0x0, "e", 0x0, "a", 0x0, "d", 0x0, "L"
	DCB	0x0, "o", 0x0, "g", 0x0, "o", 0x0, ":", 0x0, " ", 0x0, " "
	DCB	0x0, "f", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "i", 0x0, "o"
	DCB	0x0, " ", 0x0, "i", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, " "
	DCB	0x0, "f", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000	00000000	 DCD         |__GSHandlerCheck|
  00004	00000000	 DCD         |$T45774|

  00008		 |BLSDCardReadLogo| PROC

; 1453 : {

  00008		 |$LN44@BLSDCardRe@2|
  00008	e92d47f0	 stmdb       sp!, {r4 - r10, lr}
  0000c	e24dde23	 sub         sp, sp, #0x23, 28
  00010		 |$M45775|
  00010	e1a09002	 mov         r9, r2
  00014	e1a0a001	 mov         r10, r1
  00018	e1a07000	 mov         r7, r0
  0001c	e59f32bc	 ldr         r3, [pc, #0x2BC]
  00020	e5933000	 ldr         r3, [r3]
  00024	e58d322c	 str         r3, [sp, #0x22C]

; 1454 : 	FILEHANDLE logoFile;
; 1455 : 	WORD	   wSignature = 0;
; 1456 : 	DWORD	   dwOffset = 0;
; 1457 : 	BYTE*	   pTmpBuf = NULL;
; 1458 : 	DWORD	   dwCursor = 0;
; 1459 : 	DWORD       i;
; 1460 : 	
; 1461 : 	if (!bFileIoInit)

  00028	e59f82ac	 ldr         r8, [pc, #0x2AC]
  0002c	e3a02000	 mov         r2, #0
  00030	e3a01000	 mov         r1, #0
  00034	e5983000	 ldr         r3, [r8]
  00038	e59f6298	 ldr         r6, [pc, #0x298]
  0003c	e1cd20b0	 strh        r2, [sp]
  00040	e3530000	 cmp         r3, #0
  00044	e58d1004	 str         r1, [sp, #4]
  00048	1a000015	 bne         |$LN15@BLSDCardRe@2|

; 1462 : 	{
; 1463 : 		// set up data structure used by file system driver
; 1464 : 		fileio_ops.init = &SDCardInit;

  0004c	e59f3280	 ldr         r3, [pc, #0x280]

; 1465 : 		fileio_ops.identify = &SDCardIdentify;

  00050	e59fe278	 ldr         lr, [pc, #0x278]

; 1466 : 		fileio_ops.read_sector = &SDCardReadSector;

  00054	e59f4270	 ldr         r4, [pc, #0x270]

; 1467 : 		fileio_ops.read_multi_sectors = &SDCardReadMultiSectors;

  00058	e59f5268	 ldr         r5, [pc, #0x268]
  0005c	e8864008	 stmia       r6, {r3, lr}

; 1468 : 		fileio_ops.drive_info = (PVOID)&Disk;
; 1469 : 
; 1470 : 		// initialize file system driver
; 1471 : 		if (FileIoInit(&fileio_ops) != FILEIO_STATUS_OK)

  00060	e1a00006	 mov         r0, r6
  00064	e59f3258	 ldr         r3, [pc, #0x258]
  00068	e286c008	 add         r12, r6, #8
  0006c	e88c0030	 stmia       r12, {r4, r5}
  00070	e5863010	 str         r3, [r6, #0x10]
  00074	eb000000	 bl          FileIoInit
  00078	e3500000	 cmp         r0, #0
  0007c	0a000006	 beq         |$LN14@BLSDCardRe@2|

; 1472 : 		{
; 1473 : 			OALMSG(OAL_ERROR, (L"BLSDCardReadLogo:  fileio init failed\r\n"));

  00080	e59f3220	 ldr         r3, [pc, #0x220]
  00084	e5933440	 ldr         r3, [r3, #0x440]
  00088	e3130001	 tst         r3, #1
  0008c	0a00007e	 beq         |$LN18@BLSDCardRe@2|
  00090	e59f0228	 ldr         r0, [pc, #0x228]
  00094	eb000000	 bl          NKDbgPrintfW

; 1474 : 			return FALSE;

  00098	ea00007b	 b           |$LN18@BLSDCardRe@2|
  0009c		 |$LN14@BLSDCardRe@2|

; 1475 : 		}
; 1476 : 
; 1477 : 		bFileIoInit = TRUE;

  0009c	e3a03001	 mov         r3, #1
  000a0	e5883000	 str         r3, [r8]
  000a4		 |$LN15@BLSDCardRe@2|

; 1478 : 	}
; 1479 : 
; 1480 :     // fill in file name (8.3 format)
; 1481 :     FileNameToDirEntry(filename, logoFile.name, logoFile.extension);

  000a4	e28d2011	 add         r2, sp, #0x11
  000a8	e28d1008	 add         r1, sp, #8
  000ac	e1a00007	 mov         r0, r7
  000b0	eb000000	 bl          FileNameToDirEntry

; 1482 : 	
; 1483 :     // try to open file specified by pConfig->filename, return BL_ERROR on failure
; 1484 :     if (FileIoOpen(&fileio_ops, &logoFile) != FILEIO_STATUS_OK)

  000b4	e28d1008	 add         r1, sp, #8
  000b8	e1a00006	 mov         r0, r6
  000bc	eb000000	 bl          FileIoOpen
  000c0	e3500000	 cmp         r0, #0
  000c4	0a000007	 beq         |$LN13@BLSDCardRe@2|

; 1485 :     {
; 1486 :         OALMSG(OAL_ERROR, (L"BLSDCardReadLogo:  cannot open %s\r\n", filename));

  000c8	e59f31d8	 ldr         r3, [pc, #0x1D8]
  000cc	e5933440	 ldr         r3, [r3, #0x440]
  000d0	e3130001	 tst         r3, #1
  000d4	0a00006c	 beq         |$LN18@BLSDCardRe@2|
  000d8	e59f01dc	 ldr         r0, [pc, #0x1DC]
  000dc	e1a01007	 mov         r1, r7
  000e0	eb000000	 bl          NKDbgPrintfW

; 1487 :         return FALSE;

  000e4	ea000068	 b           |$LN18@BLSDCardRe@2|
  000e8		 |$LN13@BLSDCardRe@2|

; 1488 :     }
; 1489 : 
; 1490 : 	// Read signature
; 1491 :     if (FileIoRead(&fileio_ops, &logoFile, (PVOID)&wSignature, sizeof(wSignature)) != FILEIO_STATUS_OK)

  000e8	e3a03002	 mov         r3, #2
  000ec	e28d2000	 add         r2, sp, #0
  000f0	e28d1008	 add         r1, sp, #8
  000f4	e1a00006	 mov         r0, r6
  000f8	eb000000	 bl          FileIoRead
  000fc	e3500000	 cmp         r0, #0
  00100	0a000006	 beq         |$LN12@BLSDCardRe@2|

; 1492 : 	{
; 1493 :         OALMSG(OAL_ERROR, (L"BLSDCardReadLogo:  cannot read file signature\r\n"));

  00104	e59f319c	 ldr         r3, [pc, #0x19C]
  00108	e5933440	 ldr         r3, [r3, #0x440]
  0010c	e3130001	 tst         r3, #1
  00110	0a00005d	 beq         |$LN18@BLSDCardRe@2|
  00114	e59f019c	 ldr         r0, [pc, #0x19C]
  00118	eb000000	 bl          NKDbgPrintfW
  0011c	ea00005a	 b           |$LN18@BLSDCardRe@2|
  00120		 |$LN12@BLSDCardRe@2|

; 1494 :         return FALSE;
; 1495 : 	}
; 1496 : 
; 1497 : 	dwCursor += sizeof(wSignature);
; 1498 :     if( wSignature != 0x4D42 )  

  00120	e1dd20b0	 ldrh        r2, [sp]
  00124	e3a03c4d	 mov         r3, #0x4D, 24
  00128	e3833042	 orr         r3, r3, #0x42
  0012c	e1520003	 cmp         r2, r3
  00130	0a000006	 beq         |$LN11@BLSDCardRe@2|

; 1499 :     {
; 1500 :         OALMSG(OAL_ERROR, (L"BLSDCardReadLogo:  Invalid file signature\r\n"));

  00134	e59f316c	 ldr         r3, [pc, #0x16C]
  00138	e5933440	 ldr         r3, [r3, #0x440]
  0013c	e3130001	 tst         r3, #1
  00140	0a000051	 beq         |$LN18@BLSDCardRe@2|
  00144	e59f0168	 ldr         r0, [pc, #0x168]
  00148	eb000000	 bl          NKDbgPrintfW
  0014c	ea00004e	 b           |$LN18@BLSDCardRe@2|
  00150		 |$LN11@BLSDCardRe@2|

; 1501 :         return FALSE;
; 1502 : 	}
; 1503 : 
; 1504 : 	// Read dummy data
; 1505 : 	pTmpBuf = (BYTE*)OALLocalAlloc(0, sizeof(DWORD));

  00150	e3a01004	 mov         r1, #4
  00154	e3a00000	 mov         r0, #0
  00158	eb000000	 bl          OALLocalAlloc
  0015c	e1a04000	 mov         r4, r0

; 1506 : 	for( i=0 ; i<2 ; i++ )

  00160	e3a05000	 mov         r5, #0
  00164		 |$LL10@BLSDCardRe@2|

; 1507 : 	{
; 1508 :     	if (FileIoRead(&fileio_ops, &logoFile, (PVOID)pTmpBuf, sizeof(DWORD)) != FILEIO_STATUS_OK)

  00164	e3a03004	 mov         r3, #4
  00168	e1a02004	 mov         r2, r4
  0016c	e28d1008	 add         r1, sp, #8
  00170	e1a00006	 mov         r0, r6
  00174	eb000000	 bl          FileIoRead
  00178	e3500000	 cmp         r0, #0
  0017c	1a00003a	 bne         |$LN36@BLSDCardRe@2|
  00180	e2855001	 add         r5, r5, #1
  00184	e3550002	 cmp         r5, #2
  00188	3afffff5	 bcc         |$LL10@BLSDCardRe@2|

; 1513 :         }
; 1514 : 	}
; 1515 : 	//OALLocalFree((HLOCAL)pTmpBuf);
; 1516 : 	dwCursor += 2*sizeof(DWORD);
; 1517 : 	// Read pixel data offset
; 1518 :     if (FileIoRead(&fileio_ops, &logoFile, (PVOID)&dwOffset, sizeof(dwOffset)) != FILEIO_STATUS_OK)

  0018c	e3a03004	 mov         r3, #4
  00190	e28d2004	 add         r2, sp, #4
  00194	e28d1008	 add         r1, sp, #8
  00198	e1a00006	 mov         r0, r6
  0019c	eb000000	 bl          FileIoRead
  001a0	e3500000	 cmp         r0, #0
  001a4	0a000006	 beq         |$LN6@BLSDCardRe@2|

; 1519 : 	{
; 1520 :         OALMSG(OAL_ERROR, (L"BLSDCardReadLogo:  cannot read pixel data offset\r\n"));

  001a8	e59f30f8	 ldr         r3, [pc, #0xF8]
  001ac	e5933440	 ldr         r3, [r3, #0x440]
  001b0	e3130001	 tst         r3, #1
  001b4	0a000034	 beq         |$LN18@BLSDCardRe@2|
  001b8	e59f00f0	 ldr         r0, [pc, #0xF0]
  001bc	eb000000	 bl          NKDbgPrintfW
  001c0	ea000031	 b           |$LN18@BLSDCardRe@2|
  001c4		 |$LN6@BLSDCardRe@2|

; 1521 :         return FALSE;
; 1522 : 	}
; 1523 : 
; 1524 : 	//dwCursor += sizeof(dwOffset);
; 1525 : 	dwOffset = dwOffset / sizeof(DWORD);

  001c4	e59d3004	 ldr         r3, [sp, #4]

; 1526 : 	// Read dummy data before pixel data offset
; 1527 : 	//pTmpBuf = (BYTE*)OALLocalAlloc(0, dwOffset - dwCursor);
; 1528 : 	for( i=0 ; i<dwOffset ; i++)

  001c8	e3a05000	 mov         r5, #0
  001cc	e1b03123	 movs        r3, r3, lsr #2
  001d0	e58d3004	 str         r3, [sp, #4]
  001d4	0a00000a	 beq         |$LN3@BLSDCardRe@2|
  001d8		 |$LL5@BLSDCardRe@2|

; 1529 : 	{
; 1530 :     	if (FileIoRead(&fileio_ops, &logoFile, (PVOID)pTmpBuf, sizeof(DWORD)) != FILEIO_STATUS_OK)

  001d8	e3a03004	 mov         r3, #4
  001dc	e1a02004	 mov         r2, r4
  001e0	e28d1008	 add         r1, sp, #8
  001e4	e1a00006	 mov         r0, r6
  001e8	eb000000	 bl          FileIoRead
  001ec	e3500000	 cmp         r0, #0
  001f0	1a000013	 bne         |$LN37@BLSDCardRe@2|
  001f4	e59d3004	 ldr         r3, [sp, #4]
  001f8	e2855001	 add         r5, r5, #1
  001fc	e1550003	 cmp         r5, r3
  00200	3afffff4	 bcc         |$LL5@BLSDCardRe@2|
  00204		 |$LN3@BLSDCardRe@2|

; 1535 :         }
; 1536 : 	}
; 1537 : 	OALLocalFree((HLOCAL)pTmpBuf);

  00204	e1a00004	 mov         r0, r4
  00208	eb000000	 bl          OALLocalFree

; 1538 : 
; 1539 : 	// Read pixel data
; 1540 :     if (FileIoRead(&fileio_ops, &logoFile, (PVOID)pData, size) != FILEIO_STATUS_OK)

  0020c	e1a03009	 mov         r3, r9
  00210	e1a0200a	 mov         r2, r10
  00214	e28d1008	 add         r1, sp, #8
  00218	e1a00006	 mov         r0, r6
  0021c	eb000000	 bl          FileIoRead
  00220	e3500000	 cmp         r0, #0
  00224	0a00000c	 beq         |$LN1@BLSDCardRe@2|

; 1541 : 	{
; 1542 :         OALMSG(OAL_ERROR, (L"BLSDCardReadLogo:  cannot read file header\r\n"));

  00228	e59f3078	 ldr         r3, [pc, #0x78]
  0022c	e5933440	 ldr         r3, [r3, #0x440]
  00230	e3130001	 tst         r3, #1
  00234	0a000014	 beq         |$LN18@BLSDCardRe@2|
  00238	e59f0064	 ldr         r0, [pc, #0x64]
  0023c	eb000000	 bl          NKDbgPrintfW
  00240	ea000011	 b           |$LN18@BLSDCardRe@2|
  00244		 |$LN37@BLSDCardRe@2|

; 1531 : 		{
; 1532 :         	OALMSG(OAL_ERROR, (L"BLSDCardReadLogo:  cannot read file\r\n"));

  00244	e59f305c	 ldr         r3, [pc, #0x5C]
  00248	e5933440	 ldr         r3, [r3, #0x440]
  0024c	e3130001	 tst         r3, #1
  00250	0a00000b	 beq         |$LN26@BLSDCardRe@2|
  00254	e59f0050	 ldr         r0, [pc, #0x50]

; 1533 : 			OALLocalFree((HLOCAL)pTmpBuf);
; 1534 :         	return FALSE;

  00258	ea000008	 b           |$LN40@BLSDCardRe@2|
  0025c		 |$LN1@BLSDCardRe@2|

; 1543 :         return FALSE;
; 1544 : 	}
; 1545 : 
; 1546 : 	return TRUE;

  0025c	e59d022c	 ldr         r0, [sp, #0x22C]
  00260	eb000000	 bl          __security_check_cookie
  00264	e3a00001	 mov         r0, #1
  00268	ea00000a	 b           |$LN16@BLSDCardRe@2|
  0026c		 |$LN36@BLSDCardRe@2|

; 1509 : 		{
; 1510 :         	OALMSG(OAL_ERROR, (L"BLSDCardReadLogo:  cannot read file header\r\n"));

  0026c	e59f3034	 ldr         r3, [pc, #0x34]
  00270	e5933440	 ldr         r3, [r3, #0x440]
  00274	e3130001	 tst         r3, #1
  00278	0a000001	 beq         |$LN26@BLSDCardRe@2|
  0027c	e59f0020	 ldr         r0, [pc, #0x20]
  00280		 |$LN40@BLSDCardRe@2|
  00280	eb000000	 bl          NKDbgPrintfW
  00284		 |$LN26@BLSDCardRe@2|

; 1511 : 			OALLocalFree((HLOCAL)pTmpBuf);

  00284	e1a00004	 mov         r0, r4
  00288	eb000000	 bl          OALLocalFree
  0028c		 |$LN18@BLSDCardRe@2|

; 1512 :         	return FALSE;

  0028c	e59d022c	 ldr         r0, [sp, #0x22C]
  00290	eb000000	 bl          __security_check_cookie
  00294	e3a00000	 mov         r0, #0

; 1543 :         return FALSE;
; 1544 : 	}
; 1545 : 
; 1546 : 	return TRUE;

  00298		 |$LN16@BLSDCardRe@2|

; 1547 : }

  00298	e28dde23	 add         sp, sp, #0x23, 28
  0029c	e8bd47f0	 ldmia       sp!, {r4 - r10, lr}
  002a0	e12fff1e	 bx          lr
  002a4		 |$LN45@BLSDCardRe@2|
  002a4		 |$LN46@BLSDCardRe@2|
  002a4	00000000	 DCD         |??_C@_1FK@BIPBBPFB@?$AAB?$AAL?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAR?$AAe?$AAa?$AAd?$AAL?$AAo?$AAg?$AAo?$AA?3?$AA?5?$AA?5?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAf@|
  002a8		 |$LN47@BLSDCardRe@2|
  002a8	00000000	 DCD         |dpCurSettings|
  002ac		 |$LN48@BLSDCardRe@2|
  002ac	00000000	 DCD         |??_C@_1EM@GBAEOFJC@?$AAB?$AAL?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAR?$AAe?$AAa?$AAd?$AAL?$AAo?$AAg?$AAo?$AA?3?$AA?5?$AA?5?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAf@|
  002b0		 |$LN49@BLSDCardRe@2|
  002b0	00000000	 DCD         |??_C@_1GG@GHEKKBGL@?$AAB?$AAL?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAR?$AAe?$AAa?$AAd?$AAL?$AAo?$AAg?$AAo?$AA?3?$AA?5?$AA?5?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAp@|
  002b4		 |$LN50@BLSDCardRe@2|
  002b4	00000000	 DCD         |??_C@_1FI@KCFLKPBN@?$AAB?$AAL?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAR?$AAe?$AAa?$AAd?$AAL?$AAo?$AAg?$AAo?$AA?3?$AA?5?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5@|
  002b8		 |$LN51@BLSDCardRe@2|
  002b8	00000000	 DCD         |??_C@_1GA@CPLCDHMI@?$AAB?$AAL?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAR?$AAe?$AAa?$AAd?$AAL?$AAo?$AAg?$AAo?$AA?3?$AA?5?$AA?5?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAf@|
  002bc		 |$LN52@BLSDCardRe@2|
  002bc	00000000	 DCD         |??_C@_1EI@GHBAGNOC@?$AAB?$AAL?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAR?$AAe?$AAa?$AAd?$AAL?$AAo?$AAg?$AAo?$AA?3?$AA?5?$AA?5?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAo?$AAp?$AAe?$AAn?$AA?5?$AA?$CF@|
  002c0		 |$LN53@BLSDCardRe@2|
  002c0	00000000	 DCD         |??_C@_1FA@JKDIHGIH@?$AAB?$AAL?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAR?$AAe?$AAa?$AAd?$AAL?$AAo?$AAg?$AAo?$AA?3?$AA?5?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAi?$AAo?$AA?5?$AAi?$AAn?$AAi?$AAt?$AA?5?$AAf@|
  002c4		 |$LN54@BLSDCardRe@2|
  002c4	00000000	 DCD         |Disk|
  002c8		 |$LN55@BLSDCardRe@2|
  002c8	00000000	 DCD         |SDCardReadMultiSectors|
  002cc		 |$LN56@BLSDCardRe@2|
  002cc	00000000	 DCD         |SDCardReadSector|
  002d0		 |$LN57@BLSDCardRe@2|
  002d0	00000000	 DCD         |SDCardIdentify|
  002d4		 |$LN58@BLSDCardRe@2|
  002d4	00000000	 DCD         |SDCardInit|
  002d8		 |$LN59@BLSDCardRe@2|
  002d8	00000000	 DCD         |fileio_ops|
  002dc		 |$LN60@BLSDCardRe@2|
  002dc	00000000	 DCD         |bFileIoInit|
  002e0		 |$LN61@BLSDCardRe@2|
  002e0	00000000	 DCD         |__security_cookie|
  002e4		 |$M45776|

			 ENDP  ; |BLSDCardReadLogo|

	EXPORT	|__$ArrayPad$| [ DATA ]
	EXPORT	|BLSDCardReadEbootData|
	EXPORT	|??_C@_1FG@ELLEIHPC@?$AAB?$AAL?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAR?$AAe?$AAa?$AAd?$AAC?$AAa?$AAl?$AAi?$AAb?$AAD?$AAa?$AAt?$AAa?$AA?3?$AA?5?$AA?5?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAr@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FC@EBNLLDFO@?$AAB?$AAL?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAR?$AAe?$AAa?$AAd?$AAC?$AAa?$AAl?$AAi?$AAb?$AAD?$AAa?$AAt?$AAa?$AA?3?$AA?5?$AA?5?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAo@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FK@NFDDPJKE@?$AAB?$AAL?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAR?$AAe?$AAa?$AAd?$AAC?$AAa?$AAl?$AAi?$AAb?$AAD?$AAa?$AAt?$AAa?$AA?3?$AA?5?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAi?$AAo?$AA?5?$AAi@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T45821| DCD	|$LN16@BLSDCardRe@3|
	DCD	0xc0005602

  00000			 AREA	 |.xdata|, DATA
|$T45817| DCD	0xffffffdc

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FG@ELLEIHPC@?$AAB?$AAL?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAR?$AAe?$AAa?$AAd?$AAC?$AAa?$AAl?$AAi?$AAb?$AAD?$AAa?$AAt?$AAa?$AA?3?$AA?5?$AA?5?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAr@| DCB "B"
	DCB	0x0, "L", 0x0, "S", 0x0, "D", 0x0, "C", 0x0, "a", 0x0, "r"
	DCB	0x0, "d", 0x0, "R", 0x0, "e", 0x0, "a", 0x0, "d", 0x0, "C"
	DCB	0x0, "a", 0x0, "l", 0x0, "i", 0x0, "b", 0x0, "D", 0x0, "a"
	DCB	0x0, "t", 0x0, "a", 0x0, ":", 0x0, " ", 0x0, " ", 0x0, "c"
	DCB	0x0, "a", 0x0, "n", 0x0, "n", 0x0, "o", 0x0, "t", 0x0, " "
	DCB	0x0, "r", 0x0, "e", 0x0, "a", 0x0, "d", 0x0, " ", 0x0, "f"
	DCB	0x0, "i", 0x0, "l", 0x0, "e", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FC@EBNLLDFO@?$AAB?$AAL?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAR?$AAe?$AAa?$AAd?$AAC?$AAa?$AAl?$AAi?$AAb?$AAD?$AAa?$AAt?$AAa?$AA?3?$AA?5?$AA?5?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAo@| DCB "B"
	DCB	0x0, "L", 0x0, "S", 0x0, "D", 0x0, "C", 0x0, "a", 0x0, "r"
	DCB	0x0, "d", 0x0, "R", 0x0, "e", 0x0, "a", 0x0, "d", 0x0, "C"
	DCB	0x0, "a", 0x0, "l", 0x0, "i", 0x0, "b", 0x0, "D", 0x0, "a"
	DCB	0x0, "t", 0x0, "a", 0x0, ":", 0x0, " ", 0x0, " ", 0x0, "c"
	DCB	0x0, "a", 0x0, "n", 0x0, "n", 0x0, "o", 0x0, "t", 0x0, " "
	DCB	0x0, "o", 0x0, "p", 0x0, "e", 0x0, "n", 0x0, " ", 0x0, "%"
	DCB	0x0, "s", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FK@NFDDPJKE@?$AAB?$AAL?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAR?$AAe?$AAa?$AAd?$AAC?$AAa?$AAl?$AAi?$AAb?$AAD?$AAa?$AAt?$AAa?$AA?3?$AA?5?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAi?$AAo?$AA?5?$AAi@| DCB "B"
	DCB	0x0, "L", 0x0, "S", 0x0, "D", 0x0, "C", 0x0, "a", 0x0, "r"
	DCB	0x0, "d", 0x0, "R", 0x0, "e", 0x0, "a", 0x0, "d", 0x0, "C"
	DCB	0x0, "a", 0x0, "l", 0x0, "i", 0x0, "b", 0x0, "D", 0x0, "a"
	DCB	0x0, "t", 0x0, "a", 0x0, ":", 0x0, " ", 0x0, " ", 0x0, "f"
	DCB	0x0, "i", 0x0, "l", 0x0, "e", 0x0, "i", 0x0, "o", 0x0, " "
	DCB	0x0, "i", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, " ", 0x0, "f"
	DCB	0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000	00000000	 DCD         |__GSHandlerCheck|
  00004	00000000	 DCD         |$T45817|

  00008		 |BLSDCardReadEbootData| PROC

; 1593 : {

  00008		 |$LN16@BLSDCardRe@3|
  00008	e92d47f0	 stmdb       sp!, {r4 - r10, lr}
  0000c	e24ddf8a	 sub         sp, sp, #0x8A, 30
  00010		 |$M45818|
  00010	e1a09002	 mov         r9, r2
  00014	e1a0a001	 mov         r10, r1
  00018	e1a07000	 mov         r7, r0
  0001c	e59f3138	 ldr         r3, [pc, #0x138]
  00020	e5933000	 ldr         r3, [r3]
  00024	e58d3224	 str         r3, [sp, #0x224]

; 1594 : 	FILEHANDLE EbootFile;
; 1595 : 	UNREFERENCED_PARAMETER(pData);
; 1596 : 	UNREFERENCED_PARAMETER(size);
; 1597 : 	
; 1598 : 	if (!bFileIoInit)

  00028	e59f8128	 ldr         r8, [pc, #0x128]
  0002c	e59f6120	 ldr         r6, [pc, #0x120]
  00030	e5983000	 ldr         r3, [r8]
  00034	e3530000	 cmp         r3, #0
  00038	1a000018	 bne         |$LN4@BLSDCardRe@3|

; 1599 : 	{
; 1600 : 		// set up data structure used by file system driver
; 1601 : 		fileio_ops.init         = &SDCardInit;

  0003c	e59f310c	 ldr         r3, [pc, #0x10C]

; 1602 : 		fileio_ops.identify     = &SDCardIdentify;

  00040	e59fe104	 ldr         lr, [pc, #0x104]

; 1603 : 		fileio_ops.read_sector  = &SDCardReadSector;

  00044	e59f40fc	 ldr         r4, [pc, #0xFC]

; 1604 : 		fileio_ops.read_multi_sectors = &SDCardReadMultiSectors;

  00048	e59f50f4	 ldr         r5, [pc, #0xF4]
  0004c	e8864008	 stmia       r6, {r3, lr}

; 1605 : 		fileio_ops.drive_info   = (PVOID)&Disk;
; 1606 : 
; 1607 : 		// initialize file system driver
; 1608 : 		if (FileIoInit(&fileio_ops) != FILEIO_STATUS_OK)

  00050	e1a00006	 mov         r0, r6
  00054	e59f30e4	 ldr         r3, [pc, #0xE4]
  00058	e286c008	 add         r12, r6, #8
  0005c	e88c0030	 stmia       r12, {r4, r5}
  00060	e5863010	 str         r3, [r6, #0x10]
  00064	eb000000	 bl          FileIoInit
  00068	e3500000	 cmp         r0, #0
  0006c	0a000009	 beq         |$LN3@BLSDCardRe@3|

; 1609 : 		{
; 1610 : 			OALMSG(OAL_ERROR, (L"BLSDCardReadCalibData:  fileio init failed\r\n"));

  00070	e59f30bc	 ldr         r3, [pc, #0xBC]
  00074	e5933440	 ldr         r3, [r3, #0x440]
  00078	e3130001	 tst         r3, #1
  0007c	0a000001	 beq         |$LN7@BLSDCardRe@3|
  00080	e59f00b4	 ldr         r0, [pc, #0xB4]
  00084		 |$LN13@BLSDCardRe@3|
  00084	eb000000	 bl          NKDbgPrintfW
  00088		 |$LN7@BLSDCardRe@3|

; 1611 : 			return FALSE;

  00088	e59d0224	 ldr         r0, [sp, #0x224]
  0008c	eb000000	 bl          __security_check_cookie
  00090	e3a00000	 mov         r0, #0
  00094	ea000022	 b           |$LN5@BLSDCardRe@3|
  00098		 |$LN3@BLSDCardRe@3|

; 1612 : 		}
; 1613 : 		bFileIoInit = TRUE;

  00098	e3a03001	 mov         r3, #1
  0009c	e5883000	 str         r3, [r8]
  000a0		 |$LN4@BLSDCardRe@3|

; 1614 : 	}
; 1615 : 
; 1616 :     // fill in file name (8.3 format)
; 1617 :     FileNameToDirEntry(filename, EbootFile.name, EbootFile.extension);

  000a0	e28d2009	 add         r2, sp, #9
  000a4	e28d1000	 add         r1, sp, #0
  000a8	e1a00007	 mov         r0, r7
  000ac	eb000000	 bl          FileNameToDirEntry

; 1618 : 	
; 1619 :     // try to open file specified by pConfig->filename, return BL_ERROR on failure
; 1620 :     if (FileIoOpen(&fileio_ops, &EbootFile) != FILEIO_STATUS_OK)

  000b0	e28d1000	 add         r1, sp, #0
  000b4	e1a00006	 mov         r0, r6
  000b8	eb000000	 bl          FileIoOpen
  000bc	e3500000	 cmp         r0, #0
  000c0	0a000007	 beq         |$LN2@BLSDCardRe@3|

; 1621 :     {
; 1622 :         OALMSG(OAL_ERROR, (L"BLSDCardReadCalibData:  cannot open %s\r\n", filename));

  000c4	e59f3068	 ldr         r3, [pc, #0x68]
  000c8	e5933440	 ldr         r3, [r3, #0x440]
  000cc	e3130001	 tst         r3, #1
  000d0	0affffec	 beq         |$LN7@BLSDCardRe@3|
  000d4	e59f005c	 ldr         r0, [pc, #0x5C]
  000d8	e1a01007	 mov         r1, r7
  000dc	eb000000	 bl          NKDbgPrintfW

; 1623 :         return FALSE;

  000e0	eaffffe8	 b           |$LN7@BLSDCardRe@3|
  000e4		 |$LN2@BLSDCardRe@3|

; 1624 :     }
; 1625 : 
; 1626 : 	// Read pixel data
; 1627 :     if (FileIoRead(&fileio_ops, &EbootFile, (PVOID)pData, size) != FILEIO_STATUS_OK)

  000e4	e1a03009	 mov         r3, r9
  000e8	e1a0200a	 mov         r2, r10
  000ec	e28d1000	 add         r1, sp, #0
  000f0	e1a00006	 mov         r0, r6
  000f4	eb000000	 bl          FileIoRead
  000f8	e3500000	 cmp         r0, #0
  000fc	0a000005	 beq         |$LN1@BLSDCardRe@3|

; 1628 : 	{
; 1629 :         OALMSG(OAL_ERROR, (L"BLSDCardReadCalibData:  cannot read file\r\n"));

  00100	e59f302c	 ldr         r3, [pc, #0x2C]
  00104	e5933440	 ldr         r3, [r3, #0x440]
  00108	e3130001	 tst         r3, #1
  0010c	0affffdd	 beq         |$LN7@BLSDCardRe@3|
  00110	e59f0018	 ldr         r0, [pc, #0x18]

; 1630 :         return FALSE;

  00114	eaffffda	 b           |$LN13@BLSDCardRe@3|
  00118		 |$LN1@BLSDCardRe@3|

; 1631 : 	}
; 1632 : 
; 1633 : 	return TRUE;

  00118	e59d0224	 ldr         r0, [sp, #0x224]
  0011c	eb000000	 bl          __security_check_cookie
  00120	e3a00001	 mov         r0, #1
  00124		 |$LN5@BLSDCardRe@3|

; 1634 : }

  00124	e28ddf8a	 add         sp, sp, #0x8A, 30
  00128	e8bd47f0	 ldmia       sp!, {r4 - r10, lr}
  0012c	e12fff1e	 bx          lr
  00130		 |$LN17@BLSDCardRe@3|
  00130		 |$LN18@BLSDCardRe@3|
  00130	00000000	 DCD         |??_C@_1FG@ELLEIHPC@?$AAB?$AAL?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAR?$AAe?$AAa?$AAd?$AAC?$AAa?$AAl?$AAi?$AAb?$AAD?$AAa?$AAt?$AAa?$AA?3?$AA?5?$AA?5?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAr@|
  00134		 |$LN19@BLSDCardRe@3|
  00134	00000000	 DCD         |dpCurSettings|
  00138		 |$LN20@BLSDCardRe@3|
  00138	00000000	 DCD         |??_C@_1FC@EBNLLDFO@?$AAB?$AAL?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAR?$AAe?$AAa?$AAd?$AAC?$AAa?$AAl?$AAi?$AAb?$AAD?$AAa?$AAt?$AAa?$AA?3?$AA?5?$AA?5?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAo@|
  0013c		 |$LN21@BLSDCardRe@3|
  0013c	00000000	 DCD         |??_C@_1FK@NFDDPJKE@?$AAB?$AAL?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAR?$AAe?$AAa?$AAd?$AAC?$AAa?$AAl?$AAi?$AAb?$AAD?$AAa?$AAt?$AAa?$AA?3?$AA?5?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAi?$AAo?$AA?5?$AAi@|
  00140		 |$LN22@BLSDCardRe@3|
  00140	00000000	 DCD         |Disk|
  00144		 |$LN23@BLSDCardRe@3|
  00144	00000000	 DCD         |SDCardReadMultiSectors|
  00148		 |$LN24@BLSDCardRe@3|
  00148	00000000	 DCD         |SDCardReadSector|
  0014c		 |$LN25@BLSDCardRe@3|
  0014c	00000000	 DCD         |SDCardIdentify|
  00150		 |$LN26@BLSDCardRe@3|
  00150	00000000	 DCD         |SDCardInit|
  00154		 |$LN27@BLSDCardRe@3|
  00154	00000000	 DCD         |fileio_ops|
  00158		 |$LN28@BLSDCardRe@3|
  00158	00000000	 DCD         |bFileIoInit|
  0015c		 |$LN29@BLSDCardRe@3|
  0015c	00000000	 DCD         |__security_cookie|
  00160		 |$M45819|

			 ENDP  ; |BLSDCardReadEbootData|

	EXPORT	|__$ArrayPad$| [ DATA ]
	EXPORT	|SDCardUpdatingFW|
	EXPORT	|??_C@_1BM@OOADGJG@?$AA?$CB?$AA?$CB?$AAR?$AAe?$AAa?$AAd?$AA?5?$AAd?$AAa?$AAt?$AAa?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1O@OLINODNP@?$AA?$CB?$AA?$CB?$AA?$DP?$AA?$DP?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FK@KFBIFCDO@?$AA?$CB?$AA?$CB?$AAR?$AAe?$AAa?$AAd?$AA?5?$AAd?$AAu?$AAm?$AAm?$AAy?$AA?5?$AAd?$AAa?$AAt?$AAa?$AA?5?$AAb?$AAe?$AAf?$AAo?$AAr?$AAe?$AA?5?$AAp?$AAi?$AAx?$AAe?$AAl?$AA?5?$AAd@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EM@MAMFLIKO@?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAU?$AAp?$AAd?$AAa?$AAt?$AAi?$AAn?$AAg?$AAF?$AAW?$AA?3?$AA?5?$AA?5?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAf@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CK@IOAMKNCJ@?$AA?$CB?$AA?$CB?$AAR?$AAe?$AAa?$AAd?$AA?5?$AAd?$AAa?$AAt?$AAa?$AA?5?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GM@BNMJNPKP@?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAU?$AAp?$AAd?$AAa?$AAt?$AAi?$AAn?$AAg?$AAF?$AAW?$AA?3?$AA?5?$AA?5?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAf@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CI@EJNAHAHP@?$AA?$CB?$AA?$CB?$AAR?$AAe?$AAa?$AAd?$AA?5?$AAd?$AAu?$AAm?$AAm?$AAy?$AA?5?$AAd?$AAa?$AAt?$AAa?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FK@CMIGGMDA@?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAU?$AAp?$AAd?$AAa?$AAt?$AAi?$AAn?$AAg?$AAF?$AAW?$AA?3?$AA?5?$AA?5?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAf@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BO@PMMEGDJE@?$AA?$CB?$AA?$CB?$AAF?$AAi?$AAl?$AAe?$AAI?$AAo?$AAR?$AAe?$AAa?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BO@JAPFHOGI@?$AA?$CB?$AA?$CB?$AAw?$AAS?$AAi?$AAg?$AAn?$AAa?$AAt?$AAu?$AAr?$AAe?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GA@IHOCKEEB@?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAU?$AAp?$AAd?$AAa?$AAt?$AAi?$AAn?$AAg?$AAF?$AAW?$AA?3?$AA?5?$AA?5?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAf@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BO@CBBMAJPN@?$AA?$CB?$AA?$CB?$AAF?$AAi?$AAl?$AAe?$AAI?$AAo?$AAO?$AAp?$AAe?$AAn?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EI@MDHGLDAB@?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAU?$AAp?$AAd?$AAa?$AAt?$AAi?$AAn?$AAg?$AAF?$AAW?$AA?3?$AA?5?$AA?5?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAo?$AAp?$AAe?$AAn?$AA?5?$AA?$CF@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FA@DHJBPJAM@?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAU?$AAp?$AAd?$AAa?$AAt?$AAi?$AAn?$AAg?$AAF?$AAW?$AA?3?$AA?5?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAi?$AAo?$AA?5?$AAi?$AAn?$AAi?$AAt?$AA?5?$AAf@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T45879| DCD	|$LN41@SDCardUpda|
	DCD	0xc000c202

  00000			 AREA	 |.xdata|, DATA
|$T45875| DCD	0xffffffdc

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BM@OOADGJG@?$AA?$CB?$AA?$CB?$AAR?$AAe?$AAa?$AAd?$AA?5?$AAd?$AAa?$AAt?$AAa?$AA?$AN?$AA?6?$AA?$AA@| DCB "!"
	DCB	0x0, "!", 0x0, "R", 0x0, "e", 0x0, "a", 0x0, "d", 0x0, " "
	DCB	0x0, "d", 0x0, "a", 0x0, "t", 0x0, "a", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1O@OLINODNP@?$AA?$CB?$AA?$CB?$AA?$DP?$AA?$DP?$AA?$AN?$AA?6?$AA?$AA@| DCB "!"
	DCB	0x0, "!", 0x0, "?", 0x0, "?", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FK@KFBIFCDO@?$AA?$CB?$AA?$CB?$AAR?$AAe?$AAa?$AAd?$AA?5?$AAd?$AAu?$AAm?$AAm?$AAy?$AA?5?$AAd?$AAa?$AAt?$AAa?$AA?5?$AAb?$AAe?$AAf?$AAo?$AAr?$AAe?$AA?5?$AAp?$AAi?$AAx?$AAe?$AAl?$AA?5?$AAd@| DCB "!"
	DCB	0x0, "!", 0x0, "R", 0x0, "e", 0x0, "a", 0x0, "d", 0x0, " "
	DCB	0x0, "d", 0x0, "u", 0x0, "m", 0x0, "m", 0x0, "y", 0x0, " "
	DCB	0x0, "d", 0x0, "a", 0x0, "t", 0x0, "a", 0x0, " ", 0x0, "b"
	DCB	0x0, "e", 0x0, "f", 0x0, "o", 0x0, "r", 0x0, "e", 0x0, " "
	DCB	0x0, "p", 0x0, "i", 0x0, "x", 0x0, "e", 0x0, "l", 0x0, " "
	DCB	0x0, "d", 0x0, "a", 0x0, "t", 0x0, "a", 0x0, " ", 0x0, "o"
	DCB	0x0, "f", 0x0, "f", 0x0, "s", 0x0, "e", 0x0, "t", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EM@MAMFLIKO@?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAU?$AAp?$AAd?$AAa?$AAt?$AAi?$AAn?$AAg?$AAF?$AAW?$AA?3?$AA?5?$AA?5?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAf@| DCB "S"
	DCB	0x0, "D", 0x0, "C", 0x0, "a", 0x0, "r", 0x0, "d", 0x0, "U"
	DCB	0x0, "p", 0x0, "d", 0x0, "a", 0x0, "t", 0x0, "i", 0x0, "n"
	DCB	0x0, "g", 0x0, "F", 0x0, "W", 0x0, ":", 0x0, " ", 0x0, " "
	DCB	0x0, "c", 0x0, "a", 0x0, "n", 0x0, "n", 0x0, "o", 0x0, "t"
	DCB	0x0, " ", 0x0, "r", 0x0, "e", 0x0, "a", 0x0, "d", 0x0, " "
	DCB	0x0, "f", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CK@IOAMKNCJ@?$AA?$CB?$AA?$CB?$AAR?$AAe?$AAa?$AAd?$AA?5?$AAd?$AAa?$AAt?$AAa?$AA?5?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?$AN?$AA?6?$AA?$AA@| DCB "!"
	DCB	0x0, "!", 0x0, "R", 0x0, "e", 0x0, "a", 0x0, "d", 0x0, " "
	DCB	0x0, "d", 0x0, "a", 0x0, "t", 0x0, "a", 0x0, " ", 0x0, "o"
	DCB	0x0, "f", 0x0, "f", 0x0, "s", 0x0, "e", 0x0, "t", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GM@BNMJNPKP@?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAU?$AAp?$AAd?$AAa?$AAt?$AAi?$AAn?$AAg?$AAF?$AAW?$AA?3?$AA?5?$AA?5?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAf@| DCB "S"
	DCB	0x0, "D", 0x0, "C", 0x0, "a", 0x0, "r", 0x0, "d", 0x0, "U"
	DCB	0x0, "p", 0x0, "d", 0x0, "a", 0x0, "t", 0x0, "i", 0x0, "n"
	DCB	0x0, "g", 0x0, "F", 0x0, "W", 0x0, ":", 0x0, " ", 0x0, " "
	DCB	0x0, "c", 0x0, "a", 0x0, "n", 0x0, "n", 0x0, "o", 0x0, "t"
	DCB	0x0, " ", 0x0, "r", 0x0, "e", 0x0, "a", 0x0, "d", 0x0, " "
	DCB	0x0, "f", 0x0, "i", 0x0, "r", 0x0, "m", 0x0, "w", 0x0, "a"
	DCB	0x0, "r", 0x0, "e", 0x0, " ", 0x0, "d", 0x0, "a", 0x0, "t"
	DCB	0x0, "a", 0x0, " ", 0x0, "o", 0x0, "f", 0x0, "f", 0x0, "s"
	DCB	0x0, "e", 0x0, "t", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@EJNAHAHP@?$AA?$CB?$AA?$CB?$AAR?$AAe?$AAa?$AAd?$AA?5?$AAd?$AAu?$AAm?$AAm?$AAy?$AA?5?$AAd?$AAa?$AAt?$AAa?$AA?$AN?$AA?6?$AA?$AA@| DCB "!"
	DCB	0x0, "!", 0x0, "R", 0x0, "e", 0x0, "a", 0x0, "d", 0x0, " "
	DCB	0x0, "d", 0x0, "u", 0x0, "m", 0x0, "m", 0x0, "y", 0x0, " "
	DCB	0x0, "d", 0x0, "a", 0x0, "t", 0x0, "a", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FK@CMIGGMDA@?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAU?$AAp?$AAd?$AAa?$AAt?$AAi?$AAn?$AAg?$AAF?$AAW?$AA?3?$AA?5?$AA?5?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAf@| DCB "S"
	DCB	0x0, "D", 0x0, "C", 0x0, "a", 0x0, "r", 0x0, "d", 0x0, "U"
	DCB	0x0, "p", 0x0, "d", 0x0, "a", 0x0, "t", 0x0, "i", 0x0, "n"
	DCB	0x0, "g", 0x0, "F", 0x0, "W", 0x0, ":", 0x0, " ", 0x0, " "
	DCB	0x0, "c", 0x0, "a", 0x0, "n", 0x0, "n", 0x0, "o", 0x0, "t"
	DCB	0x0, " ", 0x0, "r", 0x0, "e", 0x0, "a", 0x0, "d", 0x0, " "
	DCB	0x0, "f", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, " ", 0x0, "h"
	DCB	0x0, "e", 0x0, "a", 0x0, "d", 0x0, "e", 0x0, "r", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BO@PMMEGDJE@?$AA?$CB?$AA?$CB?$AAF?$AAi?$AAl?$AAe?$AAI?$AAo?$AAR?$AAe?$AAa?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "!"
	DCB	0x0, "!", 0x0, "F", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "I"
	DCB	0x0, "o", 0x0, "R", 0x0, "e", 0x0, "a", 0x0, "d", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BO@JAPFHOGI@?$AA?$CB?$AA?$CB?$AAw?$AAS?$AAi?$AAg?$AAn?$AAa?$AAt?$AAu?$AAr?$AAe?$AA?$AN?$AA?6?$AA?$AA@| DCB "!"
	DCB	0x0, "!", 0x0, "w", 0x0, "S", 0x0, "i", 0x0, "g", 0x0, "n"
	DCB	0x0, "a", 0x0, "t", 0x0, "u", 0x0, "r", 0x0, "e", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GA@IHOCKEEB@?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAU?$AAp?$AAd?$AAa?$AAt?$AAi?$AAn?$AAg?$AAF?$AAW?$AA?3?$AA?5?$AA?5?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAf@| DCB "S"
	DCB	0x0, "D", 0x0, "C", 0x0, "a", 0x0, "r", 0x0, "d", 0x0, "U"
	DCB	0x0, "p", 0x0, "d", 0x0, "a", 0x0, "t", 0x0, "i", 0x0, "n"
	DCB	0x0, "g", 0x0, "F", 0x0, "W", 0x0, ":", 0x0, " ", 0x0, " "
	DCB	0x0, "c", 0x0, "a", 0x0, "n", 0x0, "n", 0x0, "o", 0x0, "t"
	DCB	0x0, " ", 0x0, "r", 0x0, "e", 0x0, "a", 0x0, "d", 0x0, " "
	DCB	0x0, "f", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, " ", 0x0, "s"
	DCB	0x0, "i", 0x0, "g", 0x0, "n", 0x0, "a", 0x0, "t", 0x0, "u"
	DCB	0x0, "r", 0x0, "e", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BO@CBBMAJPN@?$AA?$CB?$AA?$CB?$AAF?$AAi?$AAl?$AAe?$AAI?$AAo?$AAO?$AAp?$AAe?$AAn?$AA?$AN?$AA?6?$AA?$AA@| DCB "!"
	DCB	0x0, "!", 0x0, "F", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "I"
	DCB	0x0, "o", 0x0, "O", 0x0, "p", 0x0, "e", 0x0, "n", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EI@MDHGLDAB@?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAU?$AAp?$AAd?$AAa?$AAt?$AAi?$AAn?$AAg?$AAF?$AAW?$AA?3?$AA?5?$AA?5?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAo?$AAp?$AAe?$AAn?$AA?5?$AA?$CF@| DCB "S"
	DCB	0x0, "D", 0x0, "C", 0x0, "a", 0x0, "r", 0x0, "d", 0x0, "U"
	DCB	0x0, "p", 0x0, "d", 0x0, "a", 0x0, "t", 0x0, "i", 0x0, "n"
	DCB	0x0, "g", 0x0, "F", 0x0, "W", 0x0, ":", 0x0, " ", 0x0, " "
	DCB	0x0, "c", 0x0, "a", 0x0, "n", 0x0, "n", 0x0, "o", 0x0, "t"
	DCB	0x0, " ", 0x0, "o", 0x0, "p", 0x0, "e", 0x0, "n", 0x0, " "
	DCB	0x0, "%", 0x0, "s", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FA@DHJBPJAM@?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAU?$AAp?$AAd?$AAa?$AAt?$AAi?$AAn?$AAg?$AAF?$AAW?$AA?3?$AA?5?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAi?$AAo?$AA?5?$AAi?$AAn?$AAi?$AAt?$AA?5?$AAf@| DCB "S"
	DCB	0x0, "D", 0x0, "C", 0x0, "a", 0x0, "r", 0x0, "d", 0x0, "U"
	DCB	0x0, "p", 0x0, "d", 0x0, "a", 0x0, "t", 0x0, "i", 0x0, "n"
	DCB	0x0, "g", 0x0, "F", 0x0, "W", 0x0, ":", 0x0, " ", 0x0, " "
	DCB	0x0, "f", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "i", 0x0, "o"
	DCB	0x0, " ", 0x0, "i", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, " "
	DCB	0x0, "f", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000	00000000	 DCD         |__GSHandlerCheck|
  00004	00000000	 DCD         |$T45875|

  00008		 |SDCardUpdatingFW| PROC

; 1641 : {

  00008		 |$LN41@SDCardUpda|
  00008	e92d47f0	 stmdb       sp!, {r4 - r10, lr}
  0000c	e24dde23	 sub         sp, sp, #0x23, 28
  00010		 |$M45876|
  00010	e1a09002	 mov         r9, r2
  00014	e1a0a001	 mov         r10, r1
  00018	e1a07000	 mov         r7, r0
  0001c	e59f32e8	 ldr         r3, [pc, #0x2E8]
  00020	e5933000	 ldr         r3, [r3]
  00024	e58d322c	 str         r3, [sp, #0x22C]

; 1642 : 	FILEHANDLE  firmwareFile;
; 1643 : 	WORD        wSignature = 0;
; 1644 : 	DWORD	    dwOffset = 0;
; 1645 : 	BYTE*	    pTmpBuf = NULL;
; 1646 : 	DWORD	    dwCursor = 0;
; 1647 : 	DWORD       i;
; 1648 : 	
; 1649 : 	if(!bFileIoInit)

  00028	e59f82d8	 ldr         r8, [pc, #0x2D8]
  0002c	e3a02000	 mov         r2, #0
  00030	e3a01000	 mov         r1, #0
  00034	e5983000	 ldr         r3, [r8]
  00038	e59f62c4	 ldr         r6, [pc, #0x2C4]
  0003c	e1cd20b4	 strh        r2, [sp, #4]
  00040	e3530000	 cmp         r3, #0
  00044	e58d1000	 str         r1, [sp]
  00048	1a000015	 bne         |$LN14@SDCardUpda|

; 1650 : 	{
; 1651 :         // set up data structure used by file system driver
; 1652 :         fileio_ops.init         =   &SDCardInit;

  0004c	e59f32ac	 ldr         r3, [pc, #0x2AC]

; 1653 :         fileio_ops.identify     =   &SDCardIdentify;

  00050	e59fe2a4	 ldr         lr, [pc, #0x2A4]

; 1654 :         fileio_ops.read_sector  =   &SDCardReadSector;

  00054	e59f429c	 ldr         r4, [pc, #0x29C]

; 1655 :         fileio_ops.read_multi_sectors   =   &SDCardReadMultiSectors;

  00058	e59f5294	 ldr         r5, [pc, #0x294]
  0005c	e8864008	 stmia       r6, {r3, lr}

; 1656 :         fileio_ops.drive_info   =   (PVOID)&Disk;	
; 1657 : 	
; 1658 : 	    // initialize file system driver (1)
; 1659 : 	    if( FileIoInit(&fileio_ops) != FILEIO_STATUS_OK)

  00060	e1a00006	 mov         r0, r6
  00064	e59f3284	 ldr         r3, [pc, #0x284]
  00068	e286c008	 add         r12, r6, #8
  0006c	e88c0030	 stmia       r12, {r4, r5}
  00070	e5863010	 str         r3, [r6, #0x10]
  00074	eb000000	 bl          FileIoInit
  00078	e3500000	 cmp         r0, #0
  0007c	0a000006	 beq         |$LN13@SDCardUpda|

; 1660 : 	    {
; 1661 :             OALMSG(OAL_ERROR, (L"SDCardUpdatingFW:  fileio init failed\r\n"));

  00080	e59f3230	 ldr         r3, [pc, #0x230]
  00084	e5933440	 ldr         r3, [r3, #0x440]
  00088	e3130001	 tst         r3, #1
  0008c	0a000082	 beq         |$LN17@SDCardUpda|
  00090	e59f0254	 ldr         r0, [pc, #0x254]
  00094	eb000000	 bl          NKDbgPrintfW

; 1662 : 			return FALSE;

  00098	ea00007f	 b           |$LN17@SDCardUpda|
  0009c		 |$LN13@SDCardUpda|

; 1663 : 	    }
; 1664 : 	    bFileIoInit = TRUE;

  0009c	e3a03001	 mov         r3, #1
  000a0	e5883000	 str         r3, [r8]
  000a4		 |$LN14@SDCardUpda|

; 1665 :     }
; 1666 :     
; 1667 :     // fill in file name (8.3 format)
; 1668 :     FileNameToDirEntry(filename, firmwareFile.name, firmwareFile.extension);

  000a4	e28d2011	 add         r2, sp, #0x11
  000a8	e28d1008	 add         r1, sp, #8
  000ac	e1a00007	 mov         r0, r7
  000b0	eb000000	 bl          FileNameToDirEntry

; 1669 :     
; 1670 :     // try to open file specified by pConfig->filename, return BL_ERROR on failure (2)
; 1671 : 	if( FileIoOpen( &fileio_ops, &firmwareFile) != FILEIO_STATUS_OK)    //it is not 0 failure

  000b4	e28d1008	 add         r1, sp, #8
  000b8	e1a00006	 mov         r0, r6
  000bc	eb000000	 bl          FileIoOpen
  000c0	e3500000	 cmp         r0, #0
  000c4	0a000007	 beq         |$LN12@SDCardUpda|

; 1672 : 	{
; 1673 :         OALMSG(OAL_ERROR, (L"SDCardUpdatingFW:  cannot open %s\r\n", filename));

  000c8	e59f31e8	 ldr         r3, [pc, #0x1E8]
  000cc	e5933440	 ldr         r3, [r3, #0x440]
  000d0	e3130001	 tst         r3, #1
  000d4	0a000070	 beq         |$LN17@SDCardUpda|
  000d8	e59f0208	 ldr         r0, [pc, #0x208]
  000dc	e1a01007	 mov         r1, r7
  000e0	eb000000	 bl          NKDbgPrintfW

; 1674 :         return FALSE;

  000e4	ea00006c	 b           |$LN17@SDCardUpda|
  000e8		 |$LN12@SDCardUpda|

; 1675 : 	}
; 1676 :     OALLog(L"!!FileIoOpen\r\n");    //~~

  000e8	e59f01f4	 ldr         r0, [pc, #0x1F4]
  000ec	eb000000	 bl          NKDbgPrintfW

; 1677 :     
; 1678 : 	// Read signature (3)
; 1679 : 	if( FileIoRead( &fileio_ops, &firmwareFile, (PVOID)&wSignature, sizeof(wSignature) ) != FILEIO_STATUS_OK)

  000f0	e3a03002	 mov         r3, #2
  000f4	e28d2004	 add         r2, sp, #4
  000f8	e28d1008	 add         r1, sp, #8
  000fc	e1a00006	 mov         r0, r6
  00100	eb000000	 bl          FileIoRead
  00104	e3500000	 cmp         r0, #0
  00108	0a000006	 beq         |$LN11@SDCardUpda|

; 1680 : 	{
; 1681 :         OALMSG(OAL_ERROR, (L"SDCardUpdatingFW:  cannot read file signature\r\n"));

  0010c	e59f31a4	 ldr         r3, [pc, #0x1A4]
  00110	e5933440	 ldr         r3, [r3, #0x440]
  00114	e3130001	 tst         r3, #1
  00118	0a00005f	 beq         |$LN17@SDCardUpda|
  0011c	e59f01bc	 ldr         r0, [pc, #0x1BC]
  00120	eb000000	 bl          NKDbgPrintfW
  00124	ea00005c	 b           |$LN17@SDCardUpda|
  00128		 |$LN11@SDCardUpda|

; 1682 :         return FALSE;  
; 1683 : 	}
; 1684 :     OALLog(L"!!FileIoRead\r\n");    //~~

  00128	e59f01ac	 ldr         r0, [pc, #0x1AC]
  0012c	eb000000	 bl          NKDbgPrintfW

; 1685 : 	dwCursor += sizeof(wSignature);
; 1686 : 
; 1687 : 	/*if( wSignature != 0x4D42 )  
; 1688 :     {
; 1689 :         OALMSG(OAL_ERROR, (L"BLSDCardReadLogo:  Invalid file signature\r\n"));
; 1690 :         return FALSE;
; 1691 : 	}*/
; 1692 :     OALLog(L"!!wSignature\r\n");    //~~

  00130	e59f01a0	 ldr         r0, [pc, #0x1A0]
  00134	eb000000	 bl          NKDbgPrintfW

; 1693 : 
; 1694 : 	// Read dummy data
; 1695 : 	pTmpBuf = (BYTE*)OALLocalAlloc(0, sizeof(DWORD));

  00138	e3a01004	 mov         r1, #4
  0013c	e3a00000	 mov         r0, #0
  00140	eb000000	 bl          OALLocalAlloc
  00144	e1a05000	 mov         r5, r0

; 1696 : 	for(i=0; i<2; i++)

  00148	e3a04000	 mov         r4, #0
  0014c		 |$LL10@SDCardUpda|

; 1697 : 	{
; 1698 :         if(FileIoRead(&fileio_ops, &firmwareFile, (PVOID)pTmpBuf, sizeof(DWORD)) != FILEIO_STATUS_OK)

  0014c	e3a03004	 mov         r3, #4
  00150	e1a02005	 mov         r2, r5
  00154	e28d1008	 add         r1, sp, #8
  00158	e1a00006	 mov         r0, r6
  0015c	eb000000	 bl          FileIoRead
  00160	e3500000	 cmp         r0, #0
  00164	1a000044	 bne         |$LN33@SDCardUpda|
  00168	e2844001	 add         r4, r4, #1
  0016c	e3540002	 cmp         r4, #2
  00170	3afffff5	 bcc         |$LL10@SDCardUpda|

; 1703 :         }
; 1704 :     }
; 1705 :     OALLog(L"!!Read dummy data\r\n");   //~~

  00174	e59f0158	 ldr         r0, [pc, #0x158]
  00178	eb000000	 bl          NKDbgPrintfW

; 1706 :     //OALLocalFree((HLOCAL)pTmpBuf);
; 1707 : 	dwCursor += 2*sizeof(DWORD);
; 1708 : 	
; 1709 : 	// Read data offset
; 1710 :     if (FileIoRead(&fileio_ops, &firmwareFile, (PVOID)&dwOffset, sizeof(dwOffset)) != FILEIO_STATUS_OK)

  0017c	e3a03004	 mov         r3, #4
  00180	e28d2000	 add         r2, sp, #0
  00184	e28d1008	 add         r1, sp, #8
  00188	e1a00006	 mov         r0, r6
  0018c	eb000000	 bl          FileIoRead
  00190	e3500000	 cmp         r0, #0
  00194	0a000006	 beq         |$LN6@SDCardUpda|

; 1711 : 	{
; 1712 :         OALMSG(OAL_ERROR, (L"SDCardUpdatingFW:  cannot read firmware data offset\r\n"));

  00198	e59f3118	 ldr         r3, [pc, #0x118]
  0019c	e5933440	 ldr         r3, [r3, #0x440]
  001a0	e3130001	 tst         r3, #1
  001a4	0a00003c	 beq         |$LN17@SDCardUpda|
  001a8	e59f0120	 ldr         r0, [pc, #0x120]
  001ac	eb000000	 bl          NKDbgPrintfW
  001b0	ea000039	 b           |$LN17@SDCardUpda|
  001b4		 |$LN6@SDCardUpda|

; 1713 :         return FALSE;
; 1714 : 	}
; 1715 :     OALLog(L"!!Read data offset\r\n");  //~~

  001b4	e59f0110	 ldr         r0, [pc, #0x110]
  001b8	eb000000	 bl          NKDbgPrintfW

; 1716 : 	dwOffset = dwOffset / sizeof(DWORD);

  001bc	e59d3000	 ldr         r3, [sp]

; 1717 : 
; 1718 : 	// Read dummy data before pixel data offset
; 1719 : 	for(i=0; i<dwOffset; i++)

  001c0	e3a04000	 mov         r4, #0
  001c4	e1b03123	 movs        r3, r3, lsr #2
  001c8	e58d3000	 str         r3, [sp]
  001cc	0a00000a	 beq         |$LN3@SDCardUpda|
  001d0		 |$LL5@SDCardUpda|

; 1720 : 	{
; 1721 :         if(FileIoRead(&fileio_ops, &firmwareFile, (PVOID)pTmpBuf, sizeof(DWORD)))

  001d0	e3a03004	 mov         r3, #4
  001d4	e1a02005	 mov         r2, r5
  001d8	e28d1008	 add         r1, sp, #8
  001dc	e1a00006	 mov         r0, r6
  001e0	eb000000	 bl          FileIoRead
  001e4	e3500000	 cmp         r0, #0
  001e8	1a000017	 bne         |$LN34@SDCardUpda|
  001ec	e59d3000	 ldr         r3, [sp]
  001f0	e2844001	 add         r4, r4, #1
  001f4	e1540003	 cmp         r4, r3
  001f8	3afffff4	 bcc         |$LL5@SDCardUpda|
  001fc		 |$LN3@SDCardUpda|

; 1726 :         }
; 1727 : 	}
; 1728 :     OALLocalFree((HLOCAL)pTmpBuf);

  001fc	e1a00005	 mov         r0, r5
  00200	eb000000	 bl          OALLocalFree

; 1729 :     OALLog(L"!!Read dummy data before pixel data offset\r\n");  //~~

  00204	e59f00bc	 ldr         r0, [pc, #0xBC]
  00208	eb000000	 bl          NKDbgPrintfW

; 1730 :     // Read data
; 1731 :     if(FileIoRead(&fileio_ops, &firmwareFile, (PVOID)pData, size) != FILEIO_STATUS_OK)

  0020c	e1a03009	 mov         r3, r9
  00210	e1a0200a	 mov         r2, r10
  00214	e28d1008	 add         r1, sp, #8
  00218	e1a00006	 mov         r0, r6
  0021c	eb000000	 bl          FileIoRead
  00220	e3500000	 cmp         r0, #0
  00224	0a00000e	 beq         |$LN1@SDCardUpda|

; 1732 :     {
; 1733 :         OALLog(L"!!??\r\n");

  00228	e59f0094	 ldr         r0, [pc, #0x94]
  0022c	eb000000	 bl          NKDbgPrintfW

; 1734 :         OALMSG(OAL_ERROR, (L"SDCardUpdatingFW:  cannot read file header\r\n"));

  00230	e59f3080	 ldr         r3, [pc, #0x80]
  00234	e5933440	 ldr         r3, [r3, #0x440]
  00238	e3130001	 tst         r3, #1
  0023c	0a000016	 beq         |$LN17@SDCardUpda|
  00240	e59f006c	 ldr         r0, [pc, #0x6C]
  00244	eb000000	 bl          NKDbgPrintfW
  00248	ea000013	 b           |$LN17@SDCardUpda|
  0024c		 |$LN34@SDCardUpda|

; 1722 :         {
; 1723 :         	OALMSG(OAL_ERROR, (L"SDCardUpdatingFW:  cannot read file\r\n"));

  0024c	e59f3064	 ldr         r3, [pc, #0x64]
  00250	e5933440	 ldr         r3, [r3, #0x440]
  00254	e3130001	 tst         r3, #1
  00258	0a00000d	 beq         |$LN23@SDCardUpda|
  0025c	e59f005c	 ldr         r0, [pc, #0x5C]

; 1724 : 			OALLocalFree((HLOCAL)pTmpBuf);
; 1725 :         	return FALSE;

  00260	ea00000a	 b           |$LN37@SDCardUpda|
  00264		 |$LN1@SDCardUpda|

; 1735 :         return FALSE;
; 1736 :     }
; 1737 :     OALLog(L"!!Read data\r\n"); //~~

  00264	e59f0050	 ldr         r0, [pc, #0x50]
  00268	eb000000	 bl          NKDbgPrintfW

; 1738 :     return TRUE;	

  0026c	e59d022c	 ldr         r0, [sp, #0x22C]
  00270	eb000000	 bl          __security_check_cookie
  00274	e3a00001	 mov         r0, #1
  00278	ea00000a	 b           |$LN15@SDCardUpda|
  0027c		 |$LN33@SDCardUpda|

; 1699 :         {
; 1700 :             OALMSG(OAL_ERROR, (L"SDCardUpdatingFW:  cannot read file header\r\n"));

  0027c	e59f3034	 ldr         r3, [pc, #0x34]
  00280	e5933440	 ldr         r3, [r3, #0x440]
  00284	e3130001	 tst         r3, #1
  00288	0a000001	 beq         |$LN23@SDCardUpda|
  0028c	e59f0020	 ldr         r0, [pc, #0x20]
  00290		 |$LN37@SDCardUpda|
  00290	eb000000	 bl          NKDbgPrintfW
  00294		 |$LN23@SDCardUpda|

; 1701 : 			OALLocalFree((HLOCAL)pTmpBuf);

  00294	e1a00005	 mov         r0, r5
  00298	eb000000	 bl          OALLocalFree
  0029c		 |$LN17@SDCardUpda|

; 1702 :         	return FALSE;

  0029c	e59d022c	 ldr         r0, [sp, #0x22C]
  002a0	eb000000	 bl          __security_check_cookie
  002a4	e3a00000	 mov         r0, #0

; 1738 :     return TRUE;	

  002a8		 |$LN15@SDCardUpda|

; 1739 : }

  002a8	e28dde23	 add         sp, sp, #0x23, 28
  002ac	e8bd47f0	 ldmia       sp!, {r4 - r10, lr}
  002b0	e12fff1e	 bx          lr
  002b4		 |$LN42@SDCardUpda|
  002b4		 |$LN43@SDCardUpda|
  002b4	00000000	 DCD         |??_C@_1FK@CMIGGMDA@?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAU?$AAp?$AAd?$AAa?$AAt?$AAi?$AAn?$AAg?$AAF?$AAW?$AA?3?$AA?5?$AA?5?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAf@|
  002b8		 |$LN44@SDCardUpda|
  002b8	00000000	 DCD         |dpCurSettings|
  002bc		 |$LN45@SDCardUpda|
  002bc	00000000	 DCD         |??_C@_1BM@OOADGJG@?$AA?$CB?$AA?$CB?$AAR?$AAe?$AAa?$AAd?$AA?5?$AAd?$AAa?$AAt?$AAa?$AA?$AN?$AA?6?$AA?$AA@|
  002c0		 |$LN46@SDCardUpda|
  002c0	00000000	 DCD         |??_C@_1EM@MAMFLIKO@?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAU?$AAp?$AAd?$AAa?$AAt?$AAi?$AAn?$AAg?$AAF?$AAW?$AA?3?$AA?5?$AA?5?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAf@|
  002c4		 |$LN47@SDCardUpda|
  002c4	00000000	 DCD         |??_C@_1O@OLINODNP@?$AA?$CB?$AA?$CB?$AA?$DP?$AA?$DP?$AA?$AN?$AA?6?$AA?$AA@|
  002c8		 |$LN48@SDCardUpda|
  002c8	00000000	 DCD         |??_C@_1FK@KFBIFCDO@?$AA?$CB?$AA?$CB?$AAR?$AAe?$AAa?$AAd?$AA?5?$AAd?$AAu?$AAm?$AAm?$AAy?$AA?5?$AAd?$AAa?$AAt?$AAa?$AA?5?$AAb?$AAe?$AAf?$AAo?$AAr?$AAe?$AA?5?$AAp?$AAi?$AAx?$AAe?$AAl?$AA?5?$AAd@|
  002cc		 |$LN49@SDCardUpda|
  002cc	00000000	 DCD         |??_C@_1CK@IOAMKNCJ@?$AA?$CB?$AA?$CB?$AAR?$AAe?$AAa?$AAd?$AA?5?$AAd?$AAa?$AAt?$AAa?$AA?5?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?$AN?$AA?6?$AA?$AA@|
  002d0		 |$LN50@SDCardUpda|
  002d0	00000000	 DCD         |??_C@_1GM@BNMJNPKP@?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAU?$AAp?$AAd?$AAa?$AAt?$AAi?$AAn?$AAg?$AAF?$AAW?$AA?3?$AA?5?$AA?5?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAf@|
  002d4		 |$LN51@SDCardUpda|
  002d4	00000000	 DCD         |??_C@_1CI@EJNAHAHP@?$AA?$CB?$AA?$CB?$AAR?$AAe?$AAa?$AAd?$AA?5?$AAd?$AAu?$AAm?$AAm?$AAy?$AA?5?$AAd?$AAa?$AAt?$AAa?$AA?$AN?$AA?6?$AA?$AA@|
  002d8		 |$LN52@SDCardUpda|
  002d8	00000000	 DCD         |??_C@_1BO@JAPFHOGI@?$AA?$CB?$AA?$CB?$AAw?$AAS?$AAi?$AAg?$AAn?$AAa?$AAt?$AAu?$AAr?$AAe?$AA?$AN?$AA?6?$AA?$AA@|
  002dc		 |$LN53@SDCardUpda|
  002dc	00000000	 DCD         |??_C@_1BO@PMMEGDJE@?$AA?$CB?$AA?$CB?$AAF?$AAi?$AAl?$AAe?$AAI?$AAo?$AAR?$AAe?$AAa?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  002e0		 |$LN54@SDCardUpda|
  002e0	00000000	 DCD         |??_C@_1GA@IHOCKEEB@?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAU?$AAp?$AAd?$AAa?$AAt?$AAi?$AAn?$AAg?$AAF?$AAW?$AA?3?$AA?5?$AA?5?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAf@|
  002e4		 |$LN55@SDCardUpda|
  002e4	00000000	 DCD         |??_C@_1BO@CBBMAJPN@?$AA?$CB?$AA?$CB?$AAF?$AAi?$AAl?$AAe?$AAI?$AAo?$AAO?$AAp?$AAe?$AAn?$AA?$AN?$AA?6?$AA?$AA@|
  002e8		 |$LN56@SDCardUpda|
  002e8	00000000	 DCD         |??_C@_1EI@MDHGLDAB@?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAU?$AAp?$AAd?$AAa?$AAt?$AAi?$AAn?$AAg?$AAF?$AAW?$AA?3?$AA?5?$AA?5?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAo?$AAp?$AAe?$AAn?$AA?5?$AA?$CF@|
  002ec		 |$LN57@SDCardUpda|
  002ec	00000000	 DCD         |??_C@_1FA@DHJBPJAM@?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AAU?$AAp?$AAd?$AAa?$AAt?$AAi?$AAn?$AAg?$AAF?$AAW?$AA?3?$AA?5?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAi?$AAo?$AA?5?$AAi?$AAn?$AAi?$AAt?$AA?5?$AAf@|
  002f0		 |$LN58@SDCardUpda|
  002f0	00000000	 DCD         |Disk|
  002f4		 |$LN59@SDCardUpda|
  002f4	00000000	 DCD         |SDCardReadMultiSectors|
  002f8		 |$LN60@SDCardUpda|
  002f8	00000000	 DCD         |SDCardReadSector|
  002fc		 |$LN61@SDCardUpda|
  002fc	00000000	 DCD         |SDCardIdentify|
  00300		 |$LN62@SDCardUpda|
  00300	00000000	 DCD         |SDCardInit|
  00304		 |$LN63@SDCardUpda|
  00304	00000000	 DCD         |fileio_ops|
  00308		 |$LN64@SDCardUpda|
  00308	00000000	 DCD         |bFileIoInit|
  0030c		 |$LN65@SDCardUpda|
  0030c	00000000	 DCD         |__security_cookie|
  00310		 |$M45877|

			 ENDP  ; |SDCardUpdatingFW|

	END
