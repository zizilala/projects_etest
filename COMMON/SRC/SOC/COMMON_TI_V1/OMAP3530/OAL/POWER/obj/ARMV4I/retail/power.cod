; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\OMAP3530\OAL\POWER\power.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "


  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
	EXPORT	|OEMInterruptPending|
	EXPORT	|??_C@_1EA@LOAJIJJI@?$AA?9?$AAO?$AAE?$AAM?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAP?$AAe?$AAn?$AAd?$AAi?$AAn?$AAg?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DG@KCFEDALK@?$AA?$CL?$AAO?$AAE?$AAM?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAP?$AAe?$AAn?$AAd?$AAi?$AAn?$AAg?$AA?$CI?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|OALIntrIsIrqPending|
	IMPORT	|OALIntrTranslateSysIntr|
	IMPORT	|NKDbgPrintfW|
	IMPORT	|dpCurSettings|
; File c:\wince600\platform\common\src\soc\common_ti_v1\omap3530\oal\power\power.c

  00000			 AREA	 |.pdata|, PDATA
|$T47358| DCD	|$LN16@OEMInterru|
	DCD	0x40002c02

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EA@LOAJIJJI@?$AA?9?$AAO?$AAE?$AAM?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAP?$AAe?$AAn?$AAd?$AAi?$AAn?$AAg?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "O", 0x0, "E", 0x0, "M", 0x0, "I", 0x0, "n", 0x0, "t"
	DCB	0x0, "e", 0x0, "r", 0x0, "r", 0x0, "u", 0x0, "p", 0x0, "t"
	DCB	0x0, "P", 0x0, "e", 0x0, "n", 0x0, "d", 0x0, "i", 0x0, "n"
	DCB	0x0, "g", 0x0, "(", 0x0, "r", 0x0, "c", 0x0, " ", 0x0, "="
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DG@KCFEDALK@?$AA?$CL?$AAO?$AAE?$AAM?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAP?$AAe?$AAn?$AAd?$AAi?$AAn?$AAg?$AA?$CI?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "O", 0x0, "E", 0x0, "M", 0x0, "I", 0x0, "n", 0x0, "t"
	DCB	0x0, "e", 0x0, "r", 0x0, "r", 0x0, "u", 0x0, "p", 0x0, "t"
	DCB	0x0, "P", 0x0, "e", 0x0, "n", 0x0, "d", 0x0, "i", 0x0, "n"
	DCB	0x0, "g", 0x0, "(", 0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OEMInterruptPending| PROC

; 73   : {

  00000		 |$LN16@OEMInterru|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004	e24dd008	 sub         sp, sp, #8
  00008		 |$M47355|
  00008	e1a05000	 mov         r5, r0

; 74   :     BOOL pending = FALSE;
; 75   :     const UINT32 *pIrqs;
; 76   :     UINT32 ix, count;
; 77   : 
; 78   :     OALMSG(OAL_INTR&&OAL_VERBOSE, (
; 79   :         L"+OEMInterruptPending(%d)\r\n", sysIntr
; 80   :         ));

  0000c	e59f6098	 ldr         r6, [pc, #0x98]
  00010	e3a04000	 mov         r4, #0
  00014	e5963440	 ldr         r3, [r6, #0x440]
  00018	e3130901	 tst         r3, #1, 18
  0001c	13130902	 tstne       r3, #2, 18
  00020	159f0080	 ldrne       r0, [pc, #0x80]
  00024	11a01005	 movne       r1, r5
  00028	1b000000	 blne        NKDbgPrintfW

; 81   : 
; 82   :     if (OALIntrTranslateSysIntr(sysIntr, &count, &pIrqs))

  0002c	e28d2004	 add         r2, sp, #4
  00030	e28d1000	 add         r1, sp, #0
  00034	e1a00005	 mov         r0, r5
  00038	eb000000	 bl          OALIntrTranslateSysIntr
  0003c	e3500000	 cmp         r0, #0
  00040	0a00000d	 beq         |$LN13@OEMInterru|

; 83   :         {
; 84   :         for (ix = 0; ix < count && !pending; ix++)

  00044	e59d3000	 ldr         r3, [sp]
  00048	e3a05000	 mov         r5, #0
  0004c	e3530000	 cmp         r3, #0
  00050	0a000009	 beq         |$LN13@OEMInterru|
  00054		 |$LL3@OEMInterru|
  00054	e3540000	 cmp         r4, #0
  00058	1a000007	 bne         |$LN13@OEMInterru|

; 85   :             {
; 86   :             pending = OALIntrIsIrqPending(pIrqs[ix]);

  0005c	e59d3004	 ldr         r3, [sp, #4]
  00060	e7930105	 ldr         r0, [r3, +r5, lsl #2]
  00064	eb000000	 bl          OALIntrIsIrqPending
  00068	e59d3000	 ldr         r3, [sp]
  0006c	e2855001	 add         r5, r5, #1
  00070	e1a04000	 mov         r4, r0
  00074	e1550003	 cmp         r5, r3
  00078	3afffff5	 bcc         |$LL3@OEMInterru|
  0007c		 |$LN13@OEMInterru|

; 87   :             }            
; 88   :         }
; 89   :         
; 90   :     OALMSG(OAL_INTR&&OAL_VERBOSE, (
; 91   :         L"-OEMInterruptPending(rc = %d)\r\n", pending
; 92   :         ));

  0007c	e5963440	 ldr         r3, [r6, #0x440]
  00080	e3130901	 tst         r3, #1, 18
  00084	13130902	 tstne       r3, #2, 18
  00088	159f0014	 ldrne       r0, [pc, #0x14]
  0008c	11a01004	 movne       r1, r4
  00090	1b000000	 blne        NKDbgPrintfW

; 93   :     return pending;
; 94   : }

  00094	e1a00004	 mov         r0, r4
  00098	e28dd008	 add         sp, sp, #8
  0009c	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  000a0	e12fff1e	 bx          lr
  000a4		 |$LN17@OEMInterru|
  000a4		 |$LN18@OEMInterru|
  000a4	00000000	 DCD         |??_C@_1EA@LOAJIJJI@?$AA?9?$AAO?$AAE?$AAM?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAP?$AAe?$AAn?$AAd?$AAi?$AAn?$AAg?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  000a8		 |$LN19@OEMInterru|
  000a8	00000000	 DCD         |??_C@_1DG@KCFEDALK@?$AA?$CL?$AAO?$AAE?$AAM?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAP?$AAe?$AAn?$AAd?$AAi?$AAn?$AAg?$AA?$CI?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  000ac		 |$LN20@OEMInterru|
  000ac	00000000	 DCD         |dpCurSettings|
  000b0		 |$M47356|

			 ENDP  ; |OEMInterruptPending|

	EXPORT	|OEMPowerOff|
	EXPORT	|??_C@_1DG@KDDHMOEO@?$AA?$AN?$AA?6?$AAW?$AAa?$AAk?$AAe?$AA?5?$AAd?$AAu?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAS?$AAY?$AAS?$AAI?$AAN?$AAT?$AAR?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BO@GGDDDJNF@?$AA?5?$AA?5?$AAS?$AAY?$AAS?$AAI?$AAN?$AAT?$AAR?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DA@OKMJBLLN@?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAd?$AA?5?$AAw?$AAa?$AAk?$AAe?$AA?5?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AAs?$AA?3?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CA@BDKPHEFC@?$AAO?$AAE?$AAM?$AAP?$AAo?$AAw?$AAe?$AAr?$AAO?$AAf?$AAf?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|DumpPrcmRegsSnapshot|
	IMPORT	|PrcmDumpSavedRefCounts|
	IMPORT	|OALWakeupLatency_DumpSnapshot|
	IMPORT	|g_PrcmDebugSuspendResume|
	IMPORT	|OALContextRestorePerfTimer|
	IMPORT	|OALIoCtlHalRtcTime|
	IMPORT	|BSPPowerOn|
	IMPORT	|PrcmSuspend|
	IMPORT	|OEMInterruptEnable|
	IMPORT	|OALPowerWakeSource|
	IMPORT	|OEMEnableIOPadWakeup|
	IMPORT	|BSPGetGpioIrq|
	IMPORT	|OALIntrEnableIrqs|
	IMPORT	|g_pIntr|
	IMPORT	|BSPPowerOff|
	IMPORT	|EnableDeviceClocks|
	IMPORT	|BSPGetGPTPerfDevice|
	IMPORT	|OALContextSavePerfTimer|
	IMPORT	|KITLIoctl|
	IMPORT	|OALWatchdogEnable|
	IMPORT	|INTERRUPTS_ENABLE|
	IMPORT	|g_oalWakeSource|

  00000			 AREA	 |.pdata|, PDATA
|$T47408| DCD	|$LN57@OEMPowerOf|
	DCD	0x4000f202

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DG@KDDHMOEO@?$AA?$AN?$AA?6?$AAW?$AAa?$AAk?$AAe?$AA?5?$AAd?$AAu?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAS?$AAY?$AAS?$AAI?$AAN?$AAT?$AAR?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB 0xd
	DCB	0x0, 0xa, 0x0, "W", 0x0, "a", 0x0, "k", 0x0, "e", 0x0, " "
	DCB	0x0, "d", 0x0, "u", 0x0, "e", 0x0, " ", 0x0, "t", 0x0, "o"
	DCB	0x0, " ", 0x0, "S", 0x0, "Y", 0x0, "S", 0x0, "I", 0x0, "N"
	DCB	0x0, "T", 0x0, "R", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BO@GGDDDJNF@?$AA?5?$AA?5?$AAS?$AAY?$AAS?$AAI?$AAN?$AAT?$AAR?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB " "
	DCB	0x0, " ", 0x0, "S", 0x0, "Y", 0x0, "S", 0x0, "I", 0x0, "N"
	DCB	0x0, "T", 0x0, "R", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DA@OKMJBLLN@?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAd?$AA?5?$AAw?$AAa?$AAk?$AAe?$AA?5?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AAs?$AA?3?$AA?$AN?$AA?6?$AA?$AA@| DCB "E"
	DCB	0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e", 0x0, "d"
	DCB	0x0, " ", 0x0, "w", 0x0, "a", 0x0, "k", 0x0, "e", 0x0, " "
	DCB	0x0, "s", 0x0, "o", 0x0, "u", 0x0, "r", 0x0, "c", 0x0, "e"
	DCB	0x0, "s", 0x0, ":", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CA@BDKPHEFC@?$AAO?$AAE?$AAM?$AAP?$AAo?$AAw?$AAe?$AAr?$AAO?$AAf?$AAf?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "O"
	DCB	0x0, "E", 0x0, "M", 0x0, "P", 0x0, "o", 0x0, "w", 0x0, "e"
	DCB	0x0, "r", 0x0, "O", 0x0, "f", 0x0, "f", 0x0, "(", 0x0, ")"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OEMPowerOff| PROC

; 103  : {

  00000		 |$LN57@OEMPowerOf|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd014	 sub         sp, sp, #0x14
  00008		 |$M47405|

; 104  :     DWORD i;
; 105  :     UINT32 sysIntr;
; 106  :     UINT intr[3];
; 107  :     BOOL bPowerOn;
; 108  :     BOOL bPrevIntrState;
; 109  :     UINT irq = 0;
; 110  :     UINT32 mask = 0;
; 111  : 	
; 112  : 	OALMSG(1, (L"OEMPowerOff()\r\n"));

  00008	e59f03b4	 ldr         r0, [pc, #0x3B4]
  0000c	eb000000	 bl          NKDbgPrintfW

; 113  :     // disable interrupts (note: this should not be needed)
; 114  :     bPrevIntrState = INTERRUPTS_ENABLE(FALSE);

  00010	e3a00000	 mov         r0, #0
  00014	eb000000	 bl          INTERRUPTS_ENABLE
  00018	e1a0a000	 mov         r10, r0

; 115  : 
; 116  :     // UNDONE: verify if this is still necessary
; 117  :     // Disable hardware watchdog
; 118  :     OALWatchdogEnable(FALSE);

  0001c	e3a00000	 mov         r0, #0
  00020	eb000000	 bl          OALWatchdogEnable

; 119  :     
; 120  :     // Make sure that KITL is powered off
; 121  :     bPowerOn = FALSE;
; 122  :     KITLIoctl(IOCTL_KITL_POWER_CALL, &bPowerOn, sizeof(bPowerOn), NULL, 0, NULL);    

  00024	e59f038c	 ldr         r0, [pc, #0x38C]
  00028	e3a03000	 mov         r3, #0
  0002c	e58d3008	 str         r3, [sp, #8]
  00030	e3a06000	 mov         r6, #0
  00034	e3a03000	 mov         r3, #0
  00038	e3a02004	 mov         r2, #4
  0003c	e28d1008	 add         r1, sp, #8
  00040	e58d6004	 str         r6, [sp, #4]
  00044	e58d6000	 str         r6, [sp]
  00048	eb000000	 bl          KITLIoctl

; 123  : 
; 124  :     //Save Perf Timer
; 125  :     OALContextSavePerfTimer();

  0004c	eb000000	 bl          OALContextSavePerfTimer

; 126  :     
; 127  :     // Disable GPTimer2 (used for high perf/monte carlo profiling)
; 128  :     EnableDeviceClocks(BSPGetGPTPerfDevice(), FALSE);

  00050	eb000000	 bl          BSPGetGPTPerfDevice
  00054	e3a01000	 mov         r1, #0
  00058	eb000000	 bl          EnableDeviceClocks

; 129  : 
; 130  :     // Give chance to do board specific stuff
; 131  :     BSPPowerOff();

  0005c	eb000000	 bl          BSPPowerOff

; 132  : 
; 133  :     //----------------------------------------------
; 134  :     // capture all enabled interrupts and disable interrupts
; 135  :     intr[0] = INREG32(&g_pIntr->pICLRegs->INTC_MIR0);

  00060	e59f8358	 ldr         r8, [pc, #0x358]

; 136  :     intr[1] = INREG32(&g_pIntr->pICLRegs->INTC_MIR1);
; 137  :     intr[2] = INREG32(&g_pIntr->pICLRegs->INTC_MIR2);
; 138  : 
; 139  :     OUTREG32(&g_pIntr->pICLRegs->INTC_MIR_SET0, OMAP_MPUIC_MASKALL);

  00064	e3e01000	 mvn         r1, #0

; 140  :     OUTREG32(&g_pIntr->pICLRegs->INTC_MIR_SET1, OMAP_MPUIC_MASKALL);
; 141  :     OUTREG32(&g_pIntr->pICLRegs->INTC_MIR_SET2, OMAP_MPUIC_MASKALL);
; 142  : 
; 143  :     //----------------------------------------------
; 144  :     // Context Save/Restore       
; 145  : 	// Save state then mask all GPIO interrupts
; 146  : 	for (i=0; i<g_pIntr->nbGpioBank; i++)

  00068	e3a05000	 mov         r5, #0
  0006c	e5983000	 ldr         r3, [r8]
  00070	e5933000	 ldr         r3, [r3]
  00074	e593b084	 ldr         r11, [r3, #0x84]
  00078	e59320a4	 ldr         r2, [r3, #0xA4]
  0007c	e58d200c	 str         r2, [sp, #0xC]
  00080	e59320c4	 ldr         r2, [r3, #0xC4]
  00084	e583108c	 str         r1, [r3, #0x8C]
  00088	e5983000	 ldr         r3, [r8]
  0008c	e58d2010	 str         r2, [sp, #0x10]
  00090	e5933000	 ldr         r3, [r3]
  00094	e58310ac	 str         r1, [r3, #0xAC]
  00098	e5983000	 ldr         r3, [r8]
  0009c	e5933000	 ldr         r3, [r3]
  000a0	e58310cc	 str         r1, [r3, #0xCC]
  000a4	e5982000	 ldr         r2, [r8]
  000a8	e5923004	 ldr         r3, [r2, #4]
  000ac	e3530000	 cmp         r3, #0
  000b0	9a000013	 bls         |$LN30@OEMPowerOf|

; 104  :     DWORD i;
; 105  :     UINT32 sysIntr;
; 106  :     UINT intr[3];
; 107  :     BOOL bPowerOn;
; 108  :     BOOL bPrevIntrState;
; 109  :     UINT irq = 0;
; 110  :     UINT32 mask = 0;
; 111  : 	
; 112  : 	OALMSG(1, (L"OEMPowerOff()\r\n"));

  000b4	e3a04000	 mov         r4, #0
  000b8		 |$LL32@OEMPowerOf|

; 140  :     OUTREG32(&g_pIntr->pICLRegs->INTC_MIR_SET1, OMAP_MPUIC_MASKALL);
; 141  :     OUTREG32(&g_pIntr->pICLRegs->INTC_MIR_SET2, OMAP_MPUIC_MASKALL);
; 142  : 
; 143  :     //----------------------------------------------
; 144  :     // Context Save/Restore       
; 145  : 	// Save state then mask all GPIO interrupts
; 146  : 	for (i=0; i<g_pIntr->nbGpioBank; i++)

  000b8	e5923008	 ldr         r3, [r2, #8]

; 147  :     {
; 148  : 		INTR_GPIO_CTXT* pCurrGpioCtxt = &g_pIntr->pGpioCtxt[i];
; 149  : 
; 150  : 		// Save current state
; 151  : 		pCurrGpioCtxt->restoreCtxt.IRQENABLE1 = INREG32(&pCurrGpioCtxt->pRegs->IRQENABLE1);
; 152  : 		pCurrGpioCtxt->restoreCtxt.WAKEUPENABLE = INREG32(&pCurrGpioCtxt->pRegs->WAKEUPENABLE);
; 153  : 
; 154  : 		// Disable all GPIO interrupts in the bank
; 155  :         OUTREG32(&pCurrGpioCtxt->pRegs->IRQENABLE1, 0);
; 156  :         OUTREG32(&pCurrGpioCtxt->pRegs->WAKEUPENABLE, 0);
; 157  : 
; 158  : 		OALIntrEnableIrqs(1,&pCurrGpioCtxt->bank_irq);

  000bc	e3a00001	 mov         r0, #1
  000c0	e084e003	 add         lr, r4, r3
  000c4	e59e200c	 ldr         r2, [lr, #0xC]
  000c8	e28e1008	 add         r1, lr, #8
  000cc	e592301c	 ldr         r3, [r2, #0x1C]
  000d0	e58e3014	 str         r3, [lr, #0x14]
  000d4	e5923020	 ldr         r3, [r2, #0x20]
  000d8	e58e3018	 str         r3, [lr, #0x18]
  000dc	e582601c	 str         r6, [r2, #0x1C]
  000e0	e59e300c	 ldr         r3, [lr, #0xC]
  000e4	e5836020	 str         r6, [r3, #0x20]
  000e8	eb000000	 bl          OALIntrEnableIrqs
  000ec	e5982000	 ldr         r2, [r8]
  000f0	e2855001	 add         r5, r5, #1
  000f4	e2844020	 add         r4, r4, #0x20
  000f8	e5923004	 ldr         r3, [r2, #4]
  000fc	e1550003	 cmp         r5, r3
  00100	3affffec	 bcc         |$LL32@OEMPowerOf|
  00104		 |$LN30@OEMPowerOf|

; 159  : 
; 160  : 	}
; 161  : 
; 162  :     //----------------------------------------------
; 163  :     // Clear all enabled IO PAD wakeups for GPIOs
; 164  :     for (i = 0; i < g_pIntr->nbGpioBank; ++i) 

  00104	e5923004	 ldr         r3, [r2, #4]
  00108	e3a07000	 mov         r7, #0
  0010c	e3530000	 cmp         r3, #0
  00110	9a000018	 bls         |$LN27@OEMPowerOf|
  00114	e3a05000	 mov         r5, #0
  00118		 |$LL29@OEMPowerOf|

; 165  :     {
; 166  : 		INTR_GPIO_CTXT* pCurrGpioCtxt = &g_pIntr->pGpioCtxt[i];

  00118	e5923008	 ldr         r3, [r2, #8]

; 167  : 
; 168  :         irq = BSPGetGpioIrq(0) + (i * 32);

  0011c	e3a00000	 mov         r0, #0
  00120	e0854003	 add         r4, r5, r3
  00124	eb000000	 bl          BSPGetGpioIrq

; 169  :         mask = pCurrGpioCtxt->restoreCtxt.WAKEUPENABLE;

  00128	e5943018	 ldr         r3, [r4, #0x18]
  0012c	e0856000	 add         r6, r5, r0
  00130	e1b04003	 movs        r4, r3

; 170  :         while (mask != 0)

  00134	0a000009	 beq         |$LN28@OEMPowerOf|
  00138		 |$LL26@OEMPowerOf|

; 171  :         {
; 172  :             // If a GPIO was wakeup enabled, then clear the wakeup
; 173  :             if (mask & 0x1)

  00138	e3140001	 tst         r4, #1
  0013c	0a000004	 beq         |$LN24@OEMPowerOf|

; 174  :             {
; 175  :                 OEMEnableIOPadWakeup((irq - BSPGetGpioIrq(0)), FALSE);

  00140	e3a00000	 mov         r0, #0
  00144	eb000000	 bl          BSPGetGpioIrq
  00148	e0460000	 sub         r0, r6, r0
  0014c	e3a01000	 mov         r1, #0
  00150	eb000000	 bl          OEMEnableIOPadWakeup
  00154		 |$LN24@OEMPowerOf|

; 176  :             }
; 177  :             
; 178  :             irq++;

  00154	e2866001	 add         r6, r6, #1

; 179  :             mask >>= 1;    

  00158	e1b040a4	 movs        r4, r4, lsr #1
  0015c	1afffff5	 bne         |$LL26@OEMPowerOf|
  00160		 |$LN28@OEMPowerOf|

; 159  : 
; 160  : 	}
; 161  : 
; 162  :     //----------------------------------------------
; 163  :     // Clear all enabled IO PAD wakeups for GPIOs
; 164  :     for (i = 0; i < g_pIntr->nbGpioBank; ++i) 

  00160	e5982000	 ldr         r2, [r8]
  00164	e2877001	 add         r7, r7, #1
  00168	e2855020	 add         r5, r5, #0x20
  0016c	e5923004	 ldr         r3, [r2, #4]
  00170	e1570003	 cmp         r7, r3
  00174	3affffe7	 bcc         |$LL29@OEMPowerOf|
  00178		 |$LN27@OEMPowerOf|

; 180  :         }
; 181  :     }
; 182  : 
; 183  :     //----------------------------------------------
; 184  :     // Enable wake sources interrupts
; 185  :     for (sysIntr = SYSINTR_DEVICES; sysIntr < SYSINTR_MAXIMUM; sysIntr++)

  00178	e3a04008	 mov         r4, #8
  0017c		 |$LL23@OEMPowerOf|

; 186  : 	{
; 187  :         // Skip if sysIntr isn't allowed as wake source
; 188  :         if (!OALPowerWakeSource(sysIntr)) 

  0017c	e1a00004	 mov         r0, r4
  00180	eb000000	 bl          OALPowerWakeSource
  00184	e3500000	 cmp         r0, #0

; 189  : 		    continue;
; 190  : 
; 191  :         // Enable it as interrupt
; 192  :         OEMInterruptEnable(sysIntr, NULL, 0);

  00188	13a02000	 movne       r2, #0
  0018c	13a01000	 movne       r1, #0
  00190	11a00004	 movne       r0, r4
  00194	1b000000	 blne        OEMInterruptEnable
  00198	e2844001	 add         r4, r4, #1
  0019c	e3540048	 cmp         r4, #0x48
  001a0	3afffff5	 bcc         |$LL23@OEMPowerOf|

; 193  : 	}
; 194  : 
; 195  :     // enter full retention
; 196  :     PrcmSuspend();

  001a4	eb000000	 bl          PrcmSuspend

; 197  :     
; 198  :     //----------------------------------------------
; 199  :     // Find wakeup source
; 200  :     for (sysIntr = SYSINTR_DEVICES; sysIntr < SYSINTR_MAXIMUM; sysIntr++)

  001a8	e59f920c	 ldr         r9, [pc, #0x20C]
  001ac	e3a04008	 mov         r4, #8
  001b0		 |$LL19@OEMPowerOf|

; 201  :         {            
; 202  :         // Skip if sysIntr isn't allowed as wake source
; 203  :         if (!OALPowerWakeSource(sysIntr)) 

  001b0	e1a00004	 mov         r0, r4
  001b4	eb000000	 bl          OALPowerWakeSource
  001b8	e3500000	 cmp         r0, #0
  001bc	0a000003	 beq         |$LN18@OEMPowerOf|

; 204  : 		    continue;
; 205  : 
; 206  :         // When this sysIntr is pending we find wake source
; 207  :         if (OEMInterruptPending(sysIntr))

  001c0	e1a00004	 mov         r0, r4
  001c4	eb000000	 bl          OEMInterruptPending
  001c8	e3500000	 cmp         r0, #0
  001cc	1a000003	 bne         |$LN44@OEMPowerOf|
  001d0		 |$LN18@OEMPowerOf|

; 197  :     
; 198  :     //----------------------------------------------
; 199  :     // Find wakeup source
; 200  :     for (sysIntr = SYSINTR_DEVICES; sysIntr < SYSINTR_MAXIMUM; sysIntr++)

  001d0	e2844001	 add         r4, r4, #1
  001d4	e3540048	 cmp         r4, #0x48
  001d8	3afffff4	 bcc         |$LL19@OEMPowerOf|
  001dc	ea000000	 b           |$LN54@OEMPowerOf|
  001e0		 |$LN44@OEMPowerOf|

; 208  :             {
; 209  :             g_oalWakeSource = sysIntr;

  001e0	e5894000	 str         r4, [r9]
  001e4		 |$LN54@OEMPowerOf|

; 210  :             break;
; 211  :             }
; 212  :         }
; 213  :   
; 214  :     //----------------------------------------------
; 215  :     // Context Save/Restore
; 216  :     // Put GPIO interrupt state back to the way it was before suspend
; 217  :     for (i=0; i<g_pIntr->nbGpioBank; i++)

  001e4	e5982000	 ldr         r2, [r8]
  001e8	e3a0e000	 mov         lr, #0
  001ec	e5923004	 ldr         r3, [r2, #4]
  001f0	e3530000	 cmp         r3, #0
  001f4	9a00000e	 bls         |$LN12@OEMPowerOf|
  001f8	e3a00000	 mov         r0, #0
  001fc		 |$LL14@OEMPowerOf|
  001fc	e5923008	 ldr         r3, [r2, #8]
  00200	e28ee001	 add         lr, lr, #1
  00204	e0801003	 add         r1, r0, r3

; 218  :     {
; 219  : 		INTR_GPIO_CTXT* pCurrGpioCtxt = &g_pIntr->pGpioCtxt[i];		
; 220  : 
; 221  :         // Write registers with the previously saved values
; 222  :         OUTREG32(&pCurrGpioCtxt->pRegs->IRQENABLE1, pCurrGpioCtxt->restoreCtxt.IRQENABLE1);

  00208	e591200c	 ldr         r2, [r1, #0xC]
  0020c	e5913014	 ldr         r3, [r1, #0x14]
  00210	e2800020	 add         r0, r0, #0x20
  00214	e582301c	 str         r3, [r2, #0x1C]

; 223  :         OUTREG32(&pCurrGpioCtxt->pRegs->WAKEUPENABLE, pCurrGpioCtxt->restoreCtxt.WAKEUPENABLE);

  00218	e591200c	 ldr         r2, [r1, #0xC]
  0021c	e5913018	 ldr         r3, [r1, #0x18]
  00220	e5823020	 str         r3, [r2, #0x20]
  00224	e5982000	 ldr         r2, [r8]
  00228	e5923004	 ldr         r3, [r2, #4]
  0022c	e15e0003	 cmp         lr, r3
  00230	3afffff1	 bcc         |$LL14@OEMPowerOf|
  00234		 |$LN12@OEMPowerOf|

; 224  : 
; 225  :     }
; 226  : 
; 227  :     //-------------------------------------------------------
; 228  :     // Enable all previously enabled IO PAD wakeups for GPIOs
; 229  :     for (i = 0; i < g_pIntr->nbGpioBank; ++i) 

  00234	e5923004	 ldr         r3, [r2, #4]
  00238	e3a07000	 mov         r7, #0
  0023c	e3530000	 cmp         r3, #0
  00240	9a000018	 bls         |$LN9@OEMPowerOf|
  00244	e3a05000	 mov         r5, #0
  00248		 |$LL11@OEMPowerOf|

; 230  :     {
; 231  : 		INTR_GPIO_CTXT* pCurrGpioCtxt = &g_pIntr->pGpioCtxt[i];

  00248	e5923008	 ldr         r3, [r2, #8]

; 232  : 
; 233  :         irq = BSPGetGpioIrq(0) + (i * 32);

  0024c	e3a00000	 mov         r0, #0
  00250	e0854003	 add         r4, r5, r3
  00254	eb000000	 bl          BSPGetGpioIrq

; 234  :         mask = pCurrGpioCtxt->restoreCtxt.WAKEUPENABLE;

  00258	e5943018	 ldr         r3, [r4, #0x18]
  0025c	e0856000	 add         r6, r5, r0
  00260	e1b04003	 movs        r4, r3

; 235  :         while (mask != 0)

  00264	0a000009	 beq         |$LN10@OEMPowerOf|
  00268		 |$LL8@OEMPowerOf|

; 236  :         {
; 237  :             // If a GPIO was wakeup enabled, then clear the wakeup
; 238  :             if (mask & 0x1)

  00268	e3140001	 tst         r4, #1
  0026c	0a000004	 beq         |$LN6@OEMPowerOf|

; 239  :             {
; 240  :                 OEMEnableIOPadWakeup((irq - BSPGetGpioIrq(0)), TRUE);

  00270	e3a00000	 mov         r0, #0
  00274	eb000000	 bl          BSPGetGpioIrq
  00278	e0460000	 sub         r0, r6, r0
  0027c	e3a01001	 mov         r1, #1
  00280	eb000000	 bl          OEMEnableIOPadWakeup
  00284		 |$LN6@OEMPowerOf|

; 241  :             }
; 242  :             
; 243  :             irq++;

  00284	e2866001	 add         r6, r6, #1

; 244  :             mask >>= 1;    

  00288	e1b040a4	 movs        r4, r4, lsr #1
  0028c	1afffff5	 bne         |$LL8@OEMPowerOf|
  00290		 |$LN10@OEMPowerOf|

; 224  : 
; 225  :     }
; 226  : 
; 227  :     //-------------------------------------------------------
; 228  :     // Enable all previously enabled IO PAD wakeups for GPIOs
; 229  :     for (i = 0; i < g_pIntr->nbGpioBank; ++i) 

  00290	e5982000	 ldr         r2, [r8]
  00294	e2877001	 add         r7, r7, #1
  00298	e2855020	 add         r5, r5, #0x20
  0029c	e5923004	 ldr         r3, [r2, #4]
  002a0	e1570003	 cmp         r7, r3
  002a4	3affffe7	 bcc         |$LL11@OEMPowerOf|
  002a8		 |$LN9@OEMPowerOf|

; 245  :         }
; 246  :     }
; 247  : 
; 248  :     //----------------------------------------------
; 249  :     // Re-enable interrupts    
; 250  :     OUTREG32(&g_pIntr->pICLRegs->INTC_MIR_CLEAR0, ~intr[0]);

  002a8	e5922000	 ldr         r2, [r2]
  002ac	e1e0300b	 mvn         r3, r11

; 251  :     OUTREG32(&g_pIntr->pICLRegs->INTC_MIR_CLEAR1, ~intr[1]);

  002b0	e59d100c	 ldr         r1, [sp, #0xC]
  002b4	e5823088	 str         r3, [r2, #0x88]
  002b8	e5983000	 ldr         r3, [r8]
  002bc	e1e01001	 mvn         r1, r1

; 252  :     OUTREG32(&g_pIntr->pICLRegs->INTC_MIR_CLEAR2, ~intr[2]);  

  002c0	e59d2010	 ldr         r2, [sp, #0x10]
  002c4	e5933000	 ldr         r3, [r3]
  002c8	e1e02002	 mvn         r2, r2
  002cc	e58310a8	 str         r1, [r3, #0xA8]
  002d0	e5983000	 ldr         r3, [r8]
  002d4	e5933000	 ldr         r3, [r3]
  002d8	e58320c8	 str         r2, [r3, #0xC8]

; 253  :     
; 254  :     //----------------------------------------------
; 255  :     // Do board specific stuff    
; 256  :     BSPPowerOn();   

  002dc	eb000000	 bl          BSPPowerOn

; 257  :         
; 258  :     //Sync to Hardware RTC after suspend\resume
; 259  :     OALIoCtlHalRtcTime( 0,  NULL, 0, NULL, 0, NULL);    

  002e0	e3a04000	 mov         r4, #0
  002e4	e3a03000	 mov         r3, #0
  002e8	e3a02000	 mov         r2, #0
  002ec	e3a01000	 mov         r1, #0
  002f0	e3a00000	 mov         r0, #0
  002f4	e58d4004	 str         r4, [sp, #4]
  002f8	e58d4000	 str         r4, [sp]
  002fc	eb000000	 bl          OALIoCtlHalRtcTime

; 260  : 
; 261  :     // Enable GPTimer (used for high perf/monte carlo profiling)
; 262  :     EnableDeviceClocks(BSPGetGPTPerfDevice(), TRUE);	

  00300	eb000000	 bl          BSPGetGPTPerfDevice
  00304	e3a01001	 mov         r1, #1
  00308	eb000000	 bl          EnableDeviceClocks

; 263  :     //Restore Perf Timer
; 264  :     OALContextRestorePerfTimer();

  0030c	eb000000	 bl          OALContextRestorePerfTimer

; 265  : 		
; 266  :     // Reinitialize KITL
; 267  :     bPowerOn = TRUE;
; 268  :     KITLIoctl(IOCTL_KITL_POWER_CALL, &bPowerOn, sizeof(bPowerOn), NULL, 0, NULL);    

  00310	e59f00a0	 ldr         r0, [pc, #0xA0]
  00314	e3a03001	 mov         r3, #1
  00318	e58d3008	 str         r3, [sp, #8]
  0031c	e3a03000	 mov         r3, #0
  00320	e3a02004	 mov         r2, #4
  00324	e28d1008	 add         r1, sp, #8
  00328	e58d4004	 str         r4, [sp, #4]
  0032c	e58d4000	 str         r4, [sp]
  00330	eb000000	 bl          KITLIoctl

; 269  :     
; 270  :     // Enable hardware watchdog
; 271  :     OALWatchdogEnable(TRUE);

  00334	e3a00001	 mov         r0, #1
  00338	eb000000	 bl          OALWatchdogEnable

; 272  : 	
; 273  : #ifndef SHIP_BUILD
; 274  :     if (g_PrcmDebugSuspendResume)

  0033c	e59f3070	 ldr         r3, [pc, #0x70]
  00340	e5933000	 ldr         r3, [r3]
  00344	e3530000	 cmp         r3, #0
  00348	0a000011	 beq         |$LN5@OEMPowerOf|

; 275  : 	{
; 276  :         OALMSG(1, (L"Enabled wake sources:\r\n"));

  0034c	e59f005c	 ldr         r0, [pc, #0x5C]
  00350	eb000000	 bl          NKDbgPrintfW

; 277  :         for (sysIntr = SYSINTR_FIRMWARE; sysIntr < SYSINTR_MAXIMUM; sysIntr++)

  00354	e3a04010	 mov         r4, #0x10
  00358		 |$LL4@OEMPowerOf|

; 278  :         {
; 279  :             if (OALPowerWakeSource(sysIntr)) 

  00358	e1a00004	 mov         r0, r4
  0035c	eb000000	 bl          OALPowerWakeSource
  00360	e3500000	 cmp         r0, #0

; 280  :                 OALMSG(1, (L"  SYSINTR %d\r\n", sysIntr));

  00364	159f0040	 ldrne       r0, [pc, #0x40]
  00368	11a01004	 movne       r1, r4
  0036c	1b000000	 blne        NKDbgPrintfW
  00370	e2844001	 add         r4, r4, #1
  00374	e3540048	 cmp         r4, #0x48
  00378	3afffff6	 bcc         |$LL4@OEMPowerOf|

; 281  :         }
; 282  : 
; 283  :     	OALMSG(1, (L"\r\nWake due to SYSINTR %d\r\n", g_oalWakeSource));

  0037c	e5991000	 ldr         r1, [r9]
  00380	e59f0020	 ldr         r0, [pc, #0x20]
  00384	eb000000	 bl          NKDbgPrintfW

; 284  :         OALWakeupLatency_DumpSnapshot();

  00388	eb000000	 bl          OALWakeupLatency_DumpSnapshot

; 285  :         PrcmDumpSavedRefCounts();

  0038c	eb000000	 bl          PrcmDumpSavedRefCounts

; 286  :         DumpPrcmRegsSnapshot();

  00390	eb000000	 bl          DumpPrcmRegsSnapshot
  00394		 |$LN5@OEMPowerOf|

; 287  :     }
; 288  : #endif
; 289  : 
; 290  :     // restore interrupts
; 291  :     INTERRUPTS_ENABLE(bPrevIntrState);

  00394	e1a0000a	 mov         r0, r10
  00398	eb000000	 bl          INTERRUPTS_ENABLE

; 292  : }

  0039c	e28dd014	 add         sp, sp, #0x14
  003a0	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  003a4	e12fff1e	 bx          lr
  003a8		 |$LN58@OEMPowerOf|
  003a8		 |$LN59@OEMPowerOf|
  003a8	00000000	 DCD         |??_C@_1DG@KDDHMOEO@?$AA?$AN?$AA?6?$AAW?$AAa?$AAk?$AAe?$AA?5?$AAd?$AAu?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAS?$AAY?$AAS?$AAI?$AAN?$AAT?$AAR?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  003ac		 |$LN60@OEMPowerOf|
  003ac	00000000	 DCD         |??_C@_1BO@GGDDDJNF@?$AA?5?$AA?5?$AAS?$AAY?$AAS?$AAI?$AAN?$AAT?$AAR?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  003b0		 |$LN61@OEMPowerOf|
  003b0	00000000	 DCD         |??_C@_1DA@OKMJBLLN@?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAd?$AA?5?$AAw?$AAa?$AAk?$AAe?$AA?5?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AAs?$AA?3?$AA?$AN?$AA?6?$AA?$AA@|
  003b4		 |$LN62@OEMPowerOf|
  003b4	00000000	 DCD         |g_PrcmDebugSuspendResume|
  003b8		 |$LN63@OEMPowerOf|
  003b8	01010144	 DCD         0x1010144
  003bc		 |$LN64@OEMPowerOf|
  003bc	00000000	 DCD         |g_oalWakeSource|
  003c0		 |$LN65@OEMPowerOf|
  003c0	00000000	 DCD         |g_pIntr|
  003c4		 |$LN66@OEMPowerOf|
  003c4	00000000	 DCD         |??_C@_1CA@BDKPHEFC@?$AAO?$AAE?$AAM?$AAP?$AAo?$AAw?$AAe?$AAr?$AAO?$AAf?$AAf?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  003c8		 |$M47406|

			 ENDP  ; |OEMPowerOff|

	END
