; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\TPS659XX\GPIO\tps659xx_gpio.cpp
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|?csGpio@@3UCRITICAL_SECTION@@A| [ DATA ] ; csGpio
	EXPORT	|DEVICE_IFC_TWL_GUID| [ DATA ]
	EXPORT	|?g_fGpioPostInit@@3HA| [ DATA ]	; g_fGpioPostInit
	EXPORT	|Tps659xx_Gpio| [ DATA ]

  00000			 AREA	 |.bss|, NOINIT
|?csGpio@@3UCRITICAL_SECTION@@A| % 0x14			; csGpio
|s_hTritonDriver| % 0x4
|?g_fGpioPostInit@@3HA| % 0x4				; g_fGpioPostInit

  00000			 AREA	 |.data|, DATA
|s_rgGpioRegs| DCD 0x10098
	DCD	0x1009b
	DCD	0x1009e
	DCD	0x100a1
	DCD	0x100a4
	DCD	0x100a7
	DCD	0x100ab
	DCD	0x100c0
	DCD	0x100ac
	DCD	0x100c1
	DCD	0x10099
	DCD	0x1009c
	DCD	0x1009f
	DCD	0x100a2
	DCD	0x100a5
	DCD	0x100a8
	DCD	0x100ad
	DCD	0x100c2
	DCD	0x100ae
	DCD	0x100c3
	DCD	0x1009a
	DCD	0x1009d
	DCD	0x100a0
	DCD	0x100a3
	DCD	0x100a6
	DCD	0x100a9
	DCD	0x100af
	DCD	0x100c4
	DCD	0x0
	DCD	0x0
|s_TritonIntrIdMap| DCD 0x18
	DCD	0x1000019
	DCD	0x200001a
	DCD	0x300001b
	DCD	0x400001c
	DCD	0x500001d
	DCD	0x600001e
	DCD	0x700001f
	DCD	0x10020
	DCD	0x1010021
	DCD	0x2010022
	DCD	0x3010023
	DCD	0x4010024
	DCD	0x5010025
	DCD	0x6010026
	DCD	0x7010027
	DCD	0x20028
	DCD	0x1020029
|Tps659xx_Gpio| DCD 0x0
	DCD	|?Tps659xxGpioInit@@YAHPBGPAPAXPAI@Z|
	DCD	|?Tps659xxGpioPostInit@@YAHPAX@Z|
	DCD	|?Tps659xxGpioDeinit@@YAHPAX@Z|
	DCD	|?Tps659xxGpioSetBit@@YAHPAXI@Z|
	DCD	|?Tps659xxGpioClrBit@@YAHPAXI@Z|
	DCD	|?Tps659xxGpioGetBit@@YAKPAXI@Z|
	DCD	|?Tps659xxGpioSetMode@@YAHPAXII@Z|
	DCD	|?Tps659xxGpioGetMode@@YAKPAXI@Z|
	DCD	|?Tps659xxGpioPullup@@YAHPAXII@Z|
	DCD	|?Tps659xxGpioPulldown@@YAHPAXII@Z|
	DCD	|?Tps659xxGpioIoControl@@YAHPAXIPAEI1IPAK@Z|
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	%	8

  00000			 AREA	 |.rdata|, DATA, READONLY
|DEVICE_IFC_TWL_GUID| DCD 0xdef0a04b
	DCW	0xb967
	DCW	0x43db
	DCB	0x95
	DCB	0x9e
	DCB	0xd9
	DCB	0xfc
	DCB	0x62
	DCB	0x25
	DCB	0xcd
	DCB	0xeb
	IMPORT	|TWLOpen|
; File c:\wince600\platform\common\src\soc\common_ti_v1\tps659xx\gpio\tps659xx_gpio.cpp

  00000			 AREA	 |.pdata|, PDATA
|$T37420| DCD	|$LN7@OpenTwl|
	DCD	0x40000b01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?OpenTwl@@YAHXZ| PROC			; OpenTwl

; 209  : {

  00000		 |$LN7@OpenTwl|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M37417|

; 210  :     // Try open TWL device driver
; 211  :     s_hTritonDriver = TWLOpen();

  00004	eb000000	 bl          TWLOpen
  00008	e59f3018	 ldr         r3, [pc, #0x18]
  0000c	e3500000	 cmp         r0, #0
  00010	e5830000	 str         r0, [r3]

; 212  : 
; 213  :     // If we get handle, we succeded
; 214  :     return (s_hTritonDriver != NULL);

  00014	13a00001	 movne       r0, #1

; 215  : }

  00018	149de004	 ldrne       lr, [sp], #4

; 212  : 
; 213  :     // If we get handle, we succeded
; 214  :     return (s_hTritonDriver != NULL);

  0001c	03a00000	 moveq       r0, #0

; 215  : }

  00020	049de004	 ldreq       lr, [sp], #4
  00024	e12fff1e	 bx          lr
  00028		 |$LN8@OpenTwl|
  00028		 |$LN9@OpenTwl|
  00028	00000000	 DCD         |s_hTritonDriver|
  0002c		 |$M37418|

			 ENDP  ; |?OpenTwl@@YAHXZ|, OpenTwl

	IMPORT	|TWLClose|

  00000			 AREA	 |.pdata|, PDATA
|$T37429| DCD	|$LN6@CloseTwl|
	DCD	0x40000b01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?CloseTwl@@YAXXZ| PROC		; CloseTwl

; 222  : {

  00000		 |$LN6@CloseTwl|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M37426|

; 223  :     if (s_hTritonDriver != NULL)

  00004	e59f401c	 ldr         r4, [pc, #0x1C]
  00008	e5940000	 ldr         r0, [r4]
  0000c	e3500000	 cmp         r0, #0
  00010	0a000002	 beq         |$LN1@CloseTwl|

; 224  :         {
; 225  :         TWLClose(s_hTritonDriver);

  00014	eb000000	 bl          TWLClose

; 226  :         s_hTritonDriver = NULL;

  00018	e3a03000	 mov         r3, #0
  0001c	e5843000	 str         r3, [r4]
  00020		 |$LN1@CloseTwl|

; 227  :         }
; 228  : }

  00020	e8bd4010	 ldmia       sp!, {r4, lr}
  00024	e12fff1e	 bx          lr
  00028		 |$LN7@CloseTwl|
  00028		 |$LN8@CloseTwl|
  00028	00000000	 DCD         |s_hTritonDriver|
  0002c		 |$M37427|

			 ENDP  ; |?CloseTwl@@YAXXZ|, CloseTwl

	IMPORT	|TWLWriteRegs|

  00000			 AREA	 |.pdata|, PDATA
|$T37451| DCD	|$LN11@WriteTwlRe|
	DCD	0x40001601
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?WriteTwlReg@@YAHKPAEI@Z| PROC	; WriteTwlReg

; 238  : {

  00000		 |$LN11@WriteTwlRe|
  00000	e92d41f0	 stmdb       sp!, {r4 - r8, lr}
  00004		 |$M37448|
  00004	e1a06002	 mov         r6, r2
  00008	e1a07001	 mov         r7, r1
  0000c	e1a08000	 mov         r8, r0

; 239  :     BOOL rc = FALSE;
; 240  : 
; 241  :     // If TWL isn't open, try to open it...
; 242  :     if ((s_hTritonDriver == NULL) && !OpenTwl()) goto cleanUp;

  00010	e59f503c	 ldr         r5, [pc, #0x3C]
  00014	e3a04000	 mov         r4, #0
  00018	e5950000	 ldr         r0, [r5]
  0001c	e3500000	 cmp         r0, #0
  00020	1a000003	 bne         |$LN2@WriteTwlRe|
  00024	eb000000	 bl          TWLOpen
  00028	e3500000	 cmp         r0, #0
  0002c	e5850000	 str         r0, [r5]
  00030	0a000004	 beq         |$cleanUp$37209|
  00034		 |$LN2@WriteTwlRe|

; 243  : 
; 244  :     // Call driver
; 245  :     rc = TWLWriteRegs(s_hTritonDriver, address, pdata, dataSize);

  00034	e1a03006	 mov         r3, r6
  00038	e1a02007	 mov         r2, r7
  0003c	e1a01008	 mov         r1, r8
  00040	eb000000	 bl          TWLWriteRegs
  00044	e1a04000	 mov         r4, r0
  00048		 |$cleanUp$37209|

; 246  : 
; 247  : cleanUp:
; 248  :     return rc;
; 249  : }

  00048	e1a00004	 mov         r0, r4
  0004c	e8bd41f0	 ldmia       sp!, {r4 - r8, lr}
  00050	e12fff1e	 bx          lr
  00054		 |$LN12@WriteTwlRe|
  00054		 |$LN13@WriteTwlRe|
  00054	00000000	 DCD         |s_hTritonDriver|
  00058		 |$M37449|

			 ENDP  ; |?WriteTwlReg@@YAHKPAEI@Z|, WriteTwlReg

	IMPORT	|TWLReadRegs|

  00000			 AREA	 |.pdata|, PDATA
|$T37473| DCD	|$LN11@ReadTwlReg|
	DCD	0x40001601
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?ReadTwlReg@@YAHKPAEI@Z| PROC		; ReadTwlReg

; 259  : {

  00000		 |$LN11@ReadTwlReg|
  00000	e92d41f0	 stmdb       sp!, {r4 - r8, lr}
  00004		 |$M37470|
  00004	e1a06002	 mov         r6, r2
  00008	e1a07001	 mov         r7, r1
  0000c	e1a08000	 mov         r8, r0

; 260  :     BOOL rc = FALSE;
; 261  : 
; 262  :     // If TWL isn't open, try to open it...
; 263  :     if ((s_hTritonDriver == NULL) && !OpenTwl()) goto cleanUp;

  00010	e59f503c	 ldr         r5, [pc, #0x3C]
  00014	e3a04000	 mov         r4, #0
  00018	e5950000	 ldr         r0, [r5]
  0001c	e3500000	 cmp         r0, #0
  00020	1a000003	 bne         |$LN2@ReadTwlReg|
  00024	eb000000	 bl          TWLOpen
  00028	e3500000	 cmp         r0, #0
  0002c	e5850000	 str         r0, [r5]
  00030	0a000004	 beq         |$cleanUp$37218|
  00034		 |$LN2@ReadTwlReg|

; 264  : 
; 265  :     // Call driver
; 266  :     rc = TWLReadRegs(s_hTritonDriver, address, pdata, dataSize);

  00034	e1a03006	 mov         r3, r6
  00038	e1a02007	 mov         r2, r7
  0003c	e1a01008	 mov         r1, r8
  00040	eb000000	 bl          TWLReadRegs
  00044	e1a04000	 mov         r4, r0
  00048		 |$cleanUp$37218|

; 267  : 
; 268  : cleanUp:
; 269  :     return rc;
; 270  : }

  00048	e1a00004	 mov         r0, r4
  0004c	e8bd41f0	 ldmia       sp!, {r4 - r8, lr}
  00050	e12fff1e	 bx          lr
  00054		 |$LN12@ReadTwlReg|
  00054		 |$LN13@ReadTwlReg|
  00054	00000000	 DCD         |s_hTritonDriver|
  00058		 |$M37471|

			 ENDP  ; |?ReadTwlReg@@YAHKPAEI@Z|, ReadTwlReg

	EXPORT	|?Lock@@YAXXZ|				; Lock
	IMPORT	|EnterCriticalSection|

  00000			 AREA	 |.pdata|, PDATA
|$T37482| DCD	|$LN6@Lock|
	DCD	0x40000801
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Lock@@YAXXZ| PROC			; Lock

; 276  : {

  00000		 |$LN6@Lock|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M37479|

; 277  :     if (g_fGpioPostInit)

  00004	e59f0010	 ldr         r0, [pc, #0x10]
  00008	e5903018	 ldr         r3, [r0, #0x18]
  0000c	e3530000	 cmp         r3, #0

; 278  :         EnterCriticalSection(&csGpio);

  00010	1b000000	 blne        EnterCriticalSection

; 279  : }

  00014	e49de004	 ldr         lr, [sp], #4
  00018	e12fff1e	 bx          lr
  0001c		 |$LN7@Lock|
  0001c		 |$LN8@Lock|
  0001c	00000000	 DCD         |?csGpio@@3UCRITICAL_SECTION@@A|
  00020		 |$M37480|

			 ENDP  ; |?Lock@@YAXXZ|, Lock

	EXPORT	|?Unlock@@YAXXZ|			; Unlock
	IMPORT	|LeaveCriticalSection|

  00000			 AREA	 |.pdata|, PDATA
|$T37491| DCD	|$LN6@Unlock|
	DCD	0x40000801
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Unlock@@YAXXZ| PROC			; Unlock

; 285  : {

  00000		 |$LN6@Unlock|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M37488|

; 286  :     if (g_fGpioPostInit)

  00004	e59f0010	 ldr         r0, [pc, #0x10]
  00008	e5903018	 ldr         r3, [r0, #0x18]
  0000c	e3530000	 cmp         r3, #0

; 287  :         LeaveCriticalSection(&csGpio);

  00010	1b000000	 blne        LeaveCriticalSection

; 288  : }

  00014	e49de004	 ldr         lr, [sp], #4
  00018	e12fff1e	 bx          lr
  0001c		 |$LN7@Unlock|
  0001c		 |$LN8@Unlock|
  0001c	00000000	 DCD         |?csGpio@@3UCRITICAL_SECTION@@A|
  00020		 |$M37489|

			 ENDP  ; |?Unlock@@YAXXZ|, Unlock


  00000			 AREA	 |.pdata|, PDATA
|$T37500| DCD	|$LN5@SetGpioBan|
	DCD	0x40000100
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?SetGpioBankPowerState@@YAXIW4_CEDEVICE_POWER_STATE@@@Z| PROC ; SetGpioBankPowerState

; 297  : {

  00000		 |$LN5@SetGpioBan|
  00000		 |$M37497|

; 298  :     UNREFERENCED_PARAMETER(id);
; 299  :     UNREFERENCED_PARAMETER(state);
; 300  : }

  00000	e12fff1e	 bx          lr
  00004		 |$M37498|

			 ENDP  ; |?SetGpioBankPowerState@@YAXIW4_CEDEVICE_POWER_STATE@@@Z|, SetGpioBankPowerState


  00000			 AREA	 |.pdata|, PDATA
|$T37510| DCD	|$LN5@Tps659xxGp|
	DCD	0x40000400
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Tps659xxGpioInit@@YAHPBGPAPAXPAI@Z| PROC ; Tps659xxGpioInit

; 316  : {

  00000		 |$LN5@Tps659xxGp|
  00000		 |$M37507|

; 317  : 
; 318  :     UNREFERENCED_PARAMETER(szContext);
; 319  :     UNREFERENCED_PARAMETER(phContext);
; 320  : 
; 321  :     DEBUGMSG(ZONE_FUNCTION, (
; 322  :         L"+Tps659xxGpioInit(%s)\r\n", szContext
; 323  :         ));
; 324  : 
; 325  :     *pGpioCount = TPS659XX_MAX_GPIO_COUNT;

  00000	e3a03012	 mov         r3, #0x12
  00004	e5823000	 str         r3, [r2]

; 326  : 
; 327  :     DEBUGMSG(ZONE_FUNCTION, (L"-Tps659xxGpioInit()\r\n"));
; 328  :     return TRUE;

  00008	e3a00001	 mov         r0, #1

; 329  : }

  0000c	e12fff1e	 bx          lr
  00010		 |$M37508|

			 ENDP  ; |?Tps659xxGpioInit@@YAHPBGPAPAXPAI@Z|, Tps659xxGpioInit

	IMPORT	|InitializeCriticalSection|

  00000			 AREA	 |.pdata|, PDATA
|$T37519| DCD	|$LN5@Tps659xxGp@2|
	DCD	0x40000a01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Tps659xxGpioPostInit@@YAHPAX@Z| PROC	; Tps659xxGpioPostInit

; 342  : {

  00000		 |$LN5@Tps659xxGp@2|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M37516|

; 343  : 
; 344  :     UNREFERENCED_PARAMETER(context);
; 345  :     InitializeCriticalSection(&csGpio);

  00004	e59f4018	 ldr         r4, [pc, #0x18]
  00008	e1a00004	 mov         r0, r4
  0000c	eb000000	 bl          InitializeCriticalSection

; 346  :     g_fGpioPostInit = TRUE;

  00010	e3a03001	 mov         r3, #1
  00014	e5843018	 str         r3, [r4, #0x18]

; 347  : 
; 348  :     return TRUE;

  00018	e3a00001	 mov         r0, #1

; 349  : }

  0001c	e8bd4010	 ldmia       sp!, {r4, lr}
  00020	e12fff1e	 bx          lr
  00024		 |$LN6@Tps659xxGp@2|
  00024		 |$LN7@Tps659xxGp@2|
  00024	00000000	 DCD         |?csGpio@@3UCRITICAL_SECTION@@A|
  00028		 |$M37517|

			 ENDP  ; |?Tps659xxGpioPostInit@@YAHPAX@Z|, Tps659xxGpioPostInit

	IMPORT	|DeleteCriticalSection|

  00000			 AREA	 |.pdata|, PDATA
|$T37534| DCD	|$LN9@Tps659xxGp@3|
	DCD	0x40001001
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Tps659xxGpioDeinit@@YAHPAX@Z| PROC	; Tps659xxGpioDeinit

; 361  : {    

  00000		 |$LN9@Tps659xxGp@3|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M37531|

; 362  :     UNREFERENCED_PARAMETER(context);
; 363  :     DEBUGMSG(ZONE_FUNCTION, (L"+Tps659xxGpioDeinit(0x%08x)\r\n", context));
; 364  : 
; 365  :     CloseTwl();

  00004	e59f4030	 ldr         r4, [pc, #0x30]
  00008	e5940014	 ldr         r0, [r4, #0x14]
  0000c	e3500000	 cmp         r0, #0
  00010	0a000002	 beq         |$LN4@Tps659xxGp@3|
  00014	eb000000	 bl          TWLClose
  00018	e3a03000	 mov         r3, #0
  0001c	e5843014	 str         r3, [r4, #0x14]
  00020		 |$LN4@Tps659xxGp@3|

; 366  :     if (g_fGpioPostInit) DeleteCriticalSection(&csGpio);

  00020	e5943018	 ldr         r3, [r4, #0x18]
  00024	e3530000	 cmp         r3, #0
  00028	11a00004	 movne       r0, r4
  0002c	1b000000	 blne        DeleteCriticalSection

; 367  : 
; 368  :     DEBUGMSG(ZONE_FUNCTION, (L"-Tps659xxGpioDeinit()\r\n"));
; 369  :     return TRUE;

  00030	e3a00001	 mov         r0, #1

; 370  : }

  00034	e8bd4010	 ldmia       sp!, {r4, lr}
  00038	e12fff1e	 bx          lr
  0003c		 |$LN10@Tps659xxGp@3|
  0003c		 |$LN11@Tps659xxGp@3|
  0003c	00000000	 DCD         |?csGpio@@3UCRITICAL_SECTION@@A|
  00040		 |$M37532|

			 ENDP  ; |?Tps659xxGpioDeinit@@YAHPAX@Z|, Tps659xxGpioDeinit


  00000			 AREA	 |.pdata|, PDATA
|$T37571| DCD	|$LN24@Tps659xxGp@4|
	DCD	0x40005a02
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Tps659xxGpioSetMode@@YAHPAXII@Z| PROC ; Tps659xxGpioSetMode

; 382  : {

  00000		 |$LN24@Tps659xxGp@4|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd008	 sub         sp, sp, #8
  00008		 |$M37568|
  00008	e1a04002	 mov         r4, r2

; 383  :     BOOL rc = FALSE;
; 384  :     UINT bit = GPIO_BIT(id);
; 385  :     UINT bank = GPIO_BANK(id);
; 386  :     UINT subGroup = GPIO_SUBGROUP(id);

  0000c	e1a03e81	 mov         r3, r1, lsl #29
  00010	e58d3004	 str         r3, [sp, #4]

; 387  :     UINT subIndex = GPIO_SUBINDEX(id);

  00014	e2013003	 and         r3, r1, #3
  00018	e1a0b083	 mov         r11, r3, lsl #1
  0001c	e3a00000	 mov         r0, #0
  00020	e2018007	 and         r8, r1, #7
  00024	e1a091a1	 mov         r9, r1, lsr #3

; 388  : 
; 389  :     UNREFERENCED_PARAMETER(context);
; 390  : 
; 391  : //    RETAILMSG(1,(TEXT("+Tps659xxGpioSetMode  %d\r\n"),id));
; 392  :     if (id < TPS659XX_MAX_GPIO_COUNT)

  00028	e3510012	 cmp         r1, #0x12
  0002c	2a000048	 bcs         |$LN7@Tps659xxGp@4|

; 393  :         {
; 394  :         UINT8 val;
; 395  :         UINT8 edgeMode = 0;
; 396  : 
; 397  :         Lock();

  00030	e59f612c	 ldr         r6, [pc, #0x12C]
  00034	e3a05000	 mov         r5, #0
  00038	e5963018	 ldr         r3, [r6, #0x18]
  0003c	e3530000	 cmp         r3, #0
  00040	11a00006	 movne       r0, r6
  00044	1b000000	 blne        EnterCriticalSection

; 398  :         SetGpioBankPowerState(id, D0);
; 399  : 
; 400  :         // set direction
; 401  :         if ((mode & GPIO_DIR_INPUT) != 0)
; 402  :             {
; 403  :             ReadTwlReg(s_rgGpioRegs[bank].GPIODATADIR, &val, sizeof(val));

  00048	e59fa110	 ldr         r10, [pc, #0x110]
  0004c	e0893109	 add         r3, r9, r9, lsl #2
  00050	e3140001	 tst         r4, #1
  00054	e08a7183	 add         r7, r10, r3, lsl #3
  00058	e5970004	 ldr         r0, [r7, #4]
  0005c	e3a02001	 mov         r2, #1
  00060	e28d1000	 add         r1, sp, #0
  00064	0a000005	 beq         |$LN6@Tps659xxGp@4|
  00068	eb000000	 bl          |?ReadTwlReg@@YAHKPAEI@Z|

; 404  :             val &= ~(1 << bit);

  0006c	e3a03001	 mov         r3, #1
  00070	e1a08813	 mov         r8, r3, lsl r8
  00074	e5dd3000	 ldrb        r3, [sp]

; 405  :             WriteTwlReg(s_rgGpioRegs[bank].GPIODATADIR, &val, sizeof(val));

  00078	e1c33008	 bic         r3, r3, r8

; 406  :             }
; 407  :         else

  0007c	ea000004	 b           |$LN20@Tps659xxGp@4|
  00080		 |$LN6@Tps659xxGp@4|

; 408  :             {
; 409  :             ReadTwlReg(s_rgGpioRegs[bank].GPIODATADIR, &val, sizeof(val));

  00080	eb000000	 bl          |?ReadTwlReg@@YAHKPAEI@Z|

; 410  :             val |= (1 << bit);

  00084	e5dd3000	 ldrb        r3, [sp]
  00088	e3a02001	 mov         r2, #1
  0008c	e1a08812	 mov         r8, r2, lsl r8

; 411  :             WriteTwlReg(s_rgGpioRegs[bank].GPIODATADIR, &val, sizeof(val));

  00090	e1833008	 orr         r3, r3, r8
  00094		 |$LN20@Tps659xxGp@4|
  00094	e5970004	 ldr         r0, [r7, #4]
  00098	e3a02001	 mov         r2, #1
  0009c	e28d1000	 add         r1, sp, #0
  000a0	e5cd3000	 strb        r3, [sp]
  000a4	eb000000	 bl          |?WriteTwlReg@@YAHKPAEI@Z|

; 412  :             }
; 413  : 
; 414  :         // enable debouncing
; 415  :         if ((mode & GPIO_DEBOUNCE_ENABLE) != 0)
; 416  :             {
; 417  :             ReadTwlReg(s_rgGpioRegs[bank].GPIO_DEBEN, &val, sizeof(val));

  000a8	e5970014	 ldr         r0, [r7, #0x14]
  000ac	e3140020	 tst         r4, #0x20
  000b0	e3a02001	 mov         r2, #1
  000b4	e28d1000	 add         r1, sp, #0
  000b8	0a000003	 beq         |$LN4@Tps659xxGp@4|
  000bc	eb000000	 bl          |?ReadTwlReg@@YAHKPAEI@Z|

; 418  :             val |= (1 << bit);

  000c0	e5dd3000	 ldrb        r3, [sp]

; 419  :             WriteTwlReg(s_rgGpioRegs[bank].GPIO_DEBEN, &val, sizeof(val));

  000c4	e1833008	 orr         r3, r3, r8

; 420  :             }
; 421  :         else

  000c8	ea000002	 b           |$LN21@Tps659xxGp@4|
  000cc		 |$LN4@Tps659xxGp@4|

; 422  :             {
; 423  :             ReadTwlReg(s_rgGpioRegs[bank].GPIO_DEBEN, &val, sizeof(val));

  000cc	eb000000	 bl          |?ReadTwlReg@@YAHKPAEI@Z|

; 424  :             val &= ~(1 << bit);

  000d0	e5dd3000	 ldrb        r3, [sp]

; 425  :             WriteTwlReg(s_rgGpioRegs[bank].GPIO_DEBEN, &val, sizeof(val));

  000d4	e1c33008	 bic         r3, r3, r8
  000d8		 |$LN21@Tps659xxGp@4|
  000d8	e5970014	 ldr         r0, [r7, #0x14]
  000dc	e3a02001	 mov         r2, #1
  000e0	e28d1000	 add         r1, sp, #0
  000e4	e5cd3000	 strb        r3, [sp]
  000e8	eb000000	 bl          |?WriteTwlReg@@YAHKPAEI@Z|

; 426  :             }
; 427  : 
; 428  :         // set edge interrupt type
; 429  :         if (mode & GPIO_INT_HIGH_LOW) edgeMode |= DETECT_FALLING;
; 430  :         if (mode & GPIO_INT_LOW_HIGH) edgeMode |= DETECT_RISING;
; 431  : 
; 432  :         ReadTwlReg(s_rgGpioRegs[bank].rgSubGroup[subGroup].GPIO_EDR, &val, sizeof(val));

  000ec	e59d2004	 ldr         r2, [sp, #4]
  000f0	e3140004	 tst         r4, #4
  000f4	e0893109	 add         r3, r9, r9, lsl #2
  000f8	e0833fa2	 add         r3, r3, r2, lsr #31
  000fc	13a05002	 movne       r5, #2
  00100	e3140002	 tst         r4, #2
  00104	e08a4183	 add         r4, r10, r3, lsl #3
  00108	e594001c	 ldr         r0, [r4, #0x1C]
  0010c	e3a02001	 mov         r2, #1
  00110	e28d1000	 add         r1, sp, #0
  00114	13855001	 orrne       r5, r5, #1
  00118	eb000000	 bl          |?ReadTwlReg@@YAHKPAEI@Z|

; 433  :         val &= ~(DETECT_MASK << subIndex);

  0011c	e5dd3000	 ldrb        r3, [sp]
  00120	e3a02003	 mov         r2, #3

; 434  :         val |= (edgeMode << subIndex);
; 435  :         WriteTwlReg(s_rgGpioRegs[bank].rgSubGroup[subGroup].GPIO_EDR, &val, sizeof(val));

  00124	e594001c	 ldr         r0, [r4, #0x1C]
  00128	e1c33b12	 bic         r3, r3, r2, lsl r11
  0012c	e3a02001	 mov         r2, #1
  00130	e1833b15	 orr         r3, r3, r5, lsl r11
  00134	e28d1000	 add         r1, sp, #0
  00138	e5cd3000	 strb        r3, [sp]
  0013c	eb000000	 bl          |?WriteTwlReg@@YAHKPAEI@Z|

; 436  : 
; 437  :         SetGpioBankPowerState(id, D4);
; 438  :         Unlock();

  00140	e5963018	 ldr         r3, [r6, #0x18]
  00144	e3530000	 cmp         r3, #0
  00148	11a00006	 movne       r0, r6
  0014c	1b000000	 blne        LeaveCriticalSection

; 439  :         rc = TRUE;

  00150	e3a00001	 mov         r0, #1
  00154		 |$LN7@Tps659xxGp@4|

; 440  :         }
; 441  :     return rc;
; 442  : }

  00154	e28dd008	 add         sp, sp, #8
  00158	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  0015c	e12fff1e	 bx          lr
  00160		 |$LN25@Tps659xxGp@4|
  00160		 |$LN26@Tps659xxGp@4|
  00160	00000000	 DCD         |s_rgGpioRegs|
  00164		 |$LN27@Tps659xxGp@4|
  00164	00000000	 DCD         |?csGpio@@3UCRITICAL_SECTION@@A|
  00168		 |$M37569|

			 ENDP  ; |?Tps659xxGpioSetMode@@YAHPAXII@Z|, Tps659xxGpioSetMode


  00000			 AREA	 |.pdata|, PDATA
|$T37601| DCD	|$LN16@Tps659xxGp@5|
	DCD	0x40003402
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Tps659xxGpioGetMode@@YAKPAXI@Z| PROC	; Tps659xxGpioGetMode

; 453  : { 

  00000		 |$LN16@Tps659xxGp@5|
  00000	e92d47f0	 stmdb       sp!, {r4 - r10, lr}
  00004	e24dd004	 sub         sp, sp, #4
  00008		 |$M37598|

; 454  :     UINT bit = GPIO_BIT(id);
; 455  :     UINT bank = GPIO_BANK(id);
; 456  :     UINT subGroup = GPIO_SUBGROUP(id);

  00008	e1a09e81	 mov         r9, r1, lsl #29

; 457  :     UINT subIndex = GPIO_SUBINDEX(id);

  0000c	e201a003	 and         r10, r1, #3
  00010	e2017007	 and         r7, r1, #7
  00014	e1a051a1	 mov         r5, r1, lsr #3

; 458  :     DWORD mode =(DWORD) -1;;

  00018	e3e04000	 mvn         r4, #0

; 459  : 
; 460  :     UNREFERENCED_PARAMETER(hContext);
; 461  : 
; 462  : 
; 463  :     if (id < TPS659XX_MAX_GPIO_COUNT)

  0001c	e3510012	 cmp         r1, #0x12
  00020	2a000025	 bcs         |$LN1@Tps659xxGp@5|

; 464  :         {
; 465  :         UINT8 val;
; 466  :         SetGpioBankPowerState(id, D0);
; 467  : 
; 468  :         // get direction
; 469  :         ReadTwlReg(s_rgGpioRegs[bank].GPIODATADIR, &val, sizeof(val));

  00024	e59f80a0	 ldr         r8, [pc, #0xA0]
  00028	e0853105	 add         r3, r5, r5, lsl #2
  0002c	e3a02001	 mov         r2, #1
  00030	e0886183	 add         r6, r8, r3, lsl #3
  00034	e5960004	 ldr         r0, [r6, #4]
  00038	e28d1000	 add         r1, sp, #0
  0003c	eb000000	 bl          |?ReadTwlReg@@YAHKPAEI@Z|

; 470  :         mode = (val & (1 << bit)) ? GPIO_DIR_OUTPUT : GPIO_DIR_INPUT;

  00040	e5dd3000	 ldrb        r3, [sp]
  00044	e3a02001	 mov         r2, #1
  00048	e1a07712	 mov         r7, r2, lsl r7

; 471  : 
; 472  :         // get debounce state
; 473  :         ReadTwlReg(s_rgGpioRegs[bank].GPIO_DEBEN, &val, sizeof(val));

  0004c	e5960014	 ldr         r0, [r6, #0x14]
  00050	e1130007	 tst         r3, r7
  00054	13a04000	 movne       r4, #0
  00058	e3a02001	 mov         r2, #1
  0005c	e28d1000	 add         r1, sp, #0
  00060	03a04001	 moveq       r4, #1
  00064	eb000000	 bl          |?ReadTwlReg@@YAHKPAEI@Z|

; 474  :         mode |= (val & (1 << bit)) ? GPIO_DEBOUNCE_ENABLE : 0;

  00068	e5dd3000	 ldrb        r3, [sp]

; 475  : 
; 476  :         // get edge detection mode
; 477  :         ReadTwlReg(s_rgGpioRegs[bank].rgSubGroup[subGroup].GPIO_EDR, &val, sizeof(val));

  0006c	e3a02001	 mov         r2, #1
  00070	e28d1000	 add         r1, sp, #0
  00074	e1130007	 tst         r3, r7
  00078	e0853105	 add         r3, r5, r5, lsl #2
  0007c	e0833fa9	 add         r3, r3, r9, lsr #31
  00080	e0883183	 add         r3, r8, r3, lsl #3
  00084	e593001c	 ldr         r0, [r3, #0x1C]
  00088	13a0e020	 movne       lr, #0x20
  0008c	03a0e000	 moveq       lr, #0
  00090	e18e4004	 orr         r4, lr, r4
  00094	eb000000	 bl          |?ReadTwlReg@@YAHKPAEI@Z|

; 478  :         val = (UINT8) ((val >> subIndex) & DETECT_MASK);

  00098	e5dd2000	 ldrb        r2, [sp]
  0009c	e1a0308a	 mov         r3, r10, lsl #1
  000a0	e1a03332	 mov         r3, r2, lsr r3
  000a4	e20330ff	 and         r3, r3, #0xFF
  000a8	e2033003	 and         r3, r3, #3

; 479  : 
; 480  :         if (val & DETECT_FALLING) mode |= GPIO_INT_HIGH_LOW;

  000ac	e3130002	 tst         r3, #2
  000b0	13844004	 orrne       r4, r4, #4

; 481  :         if (val & DETECT_RISING) mode |= GPIO_INT_LOW_HIGH;

  000b4	e3130001	 tst         r3, #1
  000b8	13844002	 orrne       r4, r4, #2
  000bc		 |$LN1@Tps659xxGp@5|

; 482  : 
; 483  :         SetGpioBankPowerState(id, D4);        
; 484  :         }
; 485  : 
; 486  :     return mode;
; 487  : }

  000bc	e1a00004	 mov         r0, r4
  000c0	e28dd004	 add         sp, sp, #4
  000c4	e8bd47f0	 ldmia       sp!, {r4 - r10, lr}
  000c8	e12fff1e	 bx          lr
  000cc		 |$LN17@Tps659xxGp@5|
  000cc		 |$LN18@Tps659xxGp@5|
  000cc	00000000	 DCD         |s_rgGpioRegs|
  000d0		 |$M37599|

			 ENDP  ; |?Tps659xxGpioGetMode@@YAKPAXI@Z|, Tps659xxGpioGetMode


  00000			 AREA	 |.pdata|, PDATA
|$T37633| DCD	|$LN17@Tps659xxGp@6|
	DCD	0x40002d02
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Tps659xxGpioPullup@@YAHPAXII@Z| PROC	; Tps659xxGpioPullup

; 501  : {

  00000		 |$LN17@Tps659xxGp@6|
  00000	e92d43f0	 stmdb       sp!, {r4 - r9, lr}
  00004	e24dd004	 sub         sp, sp, #4
  00008		 |$M37630|
  00008	e1a04002	 mov         r4, r2

; 502  :     BOOL rc = FALSE;
; 503  :     UINT bank = GPIO_BANK(id);
; 504  :     UINT subGroup = GPIO_SUBGROUP(id);
; 505  :     UINT subIndex = GPIO_SUBINDEX(id);

  0000c	e2013003	 and         r3, r1, #3
  00010	e1a07083	 mov         r7, r3, lsl #1
  00014	e1a09e81	 mov         r9, r1, lsl #29
  00018	e3a00000	 mov         r0, #0
  0001c	e1a081a1	 mov         r8, r1, lsr #3

; 506  : 
; 507  :     UNREFERENCED_PARAMETER(context);
; 508  : 
; 509  :     if (id < TPS659XX_MAX_GPIO_COUNT)

  00020	e3510012	 cmp         r1, #0x12
  00024	2a00001d	 bcs         |$LN2@Tps659xxGp@6|

; 510  :         {
; 511  :         UINT8 val;
; 512  :         UINT pullupState = 0;
; 513  : 
; 514  :         Lock();

  00028	e59f5080	 ldr         r5, [pc, #0x80]
  0002c	e3a06000	 mov         r6, #0
  00030	e5953018	 ldr         r3, [r5, #0x18]
  00034	e3530000	 cmp         r3, #0
  00038	11a00005	 movne       r0, r5
  0003c	1b000000	 blne        EnterCriticalSection

; 515  :         SetGpioBankPowerState(id, D0);
; 516  : 
; 517  :         // set pullup state
; 518  :         if (enable) pullupState = PULLUP_ENABLE;
; 519  : 
; 520  :         ReadTwlReg(s_rgGpioRegs[bank].rgSubGroup[subGroup].GPIOPUPDCTR, &val, sizeof(val));

  00040	e59f2064	 ldr         r2, [pc, #0x64]
  00044	e0883108	 add         r3, r8, r8, lsl #2
  00048	e0833fa9	 add         r3, r3, r9, lsr #31
  0004c	e3540000	 cmp         r4, #0
  00050	e0824183	 add         r4, r2, r3, lsl #3
  00054	e5940018	 ldr         r0, [r4, #0x18]
  00058	e3a02001	 mov         r2, #1
  0005c	e28d1000	 add         r1, sp, #0
  00060	13a06002	 movne       r6, #2
  00064	eb000000	 bl          |?ReadTwlReg@@YAHKPAEI@Z|

; 521  :         val &= ~(PULLUP_ENABLE << subIndex);

  00068	e5dd3000	 ldrb        r3, [sp]
  0006c	e3a02002	 mov         r2, #2

; 522  :         val |= (pullupState << subIndex);
; 523  :         WriteTwlReg(s_rgGpioRegs[bank].rgSubGroup[subGroup].GPIOPUPDCTR, &val, sizeof(val));

  00070	e5940018	 ldr         r0, [r4, #0x18]
  00074	e1c33712	 bic         r3, r3, r2, lsl r7
  00078	e3a02001	 mov         r2, #1
  0007c	e1833716	 orr         r3, r3, r6, lsl r7
  00080	e28d1000	 add         r1, sp, #0
  00084	e5cd3000	 strb        r3, [sp]
  00088	eb000000	 bl          |?WriteTwlReg@@YAHKPAEI@Z|

; 524  : 
; 525  :         SetGpioBankPowerState(id, D4);
; 526  :         Unlock();

  0008c	e5953018	 ldr         r3, [r5, #0x18]
  00090	e3530000	 cmp         r3, #0
  00094	11a00005	 movne       r0, r5
  00098	1b000000	 blne        LeaveCriticalSection

; 527  :         rc = TRUE;

  0009c	e3a00001	 mov         r0, #1
  000a0		 |$LN2@Tps659xxGp@6|

; 528  :         }
; 529  : 
; 530  :     return rc;
; 531  : }

  000a0	e28dd004	 add         sp, sp, #4
  000a4	e8bd43f0	 ldmia       sp!, {r4 - r9, lr}
  000a8	e12fff1e	 bx          lr
  000ac		 |$LN18@Tps659xxGp@6|
  000ac		 |$LN19@Tps659xxGp@6|
  000ac	00000000	 DCD         |s_rgGpioRegs|
  000b0		 |$LN20@Tps659xxGp@6|
  000b0	00000000	 DCD         |?csGpio@@3UCRITICAL_SECTION@@A|
  000b4		 |$M37631|

			 ENDP  ; |?Tps659xxGpioPullup@@YAHPAXII@Z|, Tps659xxGpioPullup


  00000			 AREA	 |.pdata|, PDATA
|$T37666| DCD	|$LN17@Tps659xxGp@7|
	DCD	0x40002d02
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Tps659xxGpioPulldown@@YAHPAXII@Z| PROC ; Tps659xxGpioPulldown

; 544  : {

  00000		 |$LN17@Tps659xxGp@7|
  00000	e92d43f0	 stmdb       sp!, {r4 - r9, lr}
  00004	e24dd004	 sub         sp, sp, #4
  00008		 |$M37663|
  00008	e1a04002	 mov         r4, r2

; 545  :     BOOL rc = FALSE;
; 546  :     UINT bank = GPIO_BANK(id);
; 547  :     UINT subGroup = GPIO_SUBGROUP(id);
; 548  :     UINT subIndex = GPIO_SUBINDEX(id);

  0000c	e2013003	 and         r3, r1, #3
  00010	e1a07083	 mov         r7, r3, lsl #1
  00014	e1a09e81	 mov         r9, r1, lsl #29
  00018	e3a00000	 mov         r0, #0
  0001c	e1a081a1	 mov         r8, r1, lsr #3

; 549  : 
; 550  :     UNREFERENCED_PARAMETER(context);
; 551  : 
; 552  :     if (id < TPS659XX_MAX_GPIO_COUNT)

  00020	e3510012	 cmp         r1, #0x12
  00024	2a00001d	 bcs         |$LN2@Tps659xxGp@7|

; 553  :         {
; 554  :         UINT8 val;
; 555  :         UINT pulldownState = 0;
; 556  : 
; 557  :         Lock();

  00028	e59f5080	 ldr         r5, [pc, #0x80]
  0002c	e3a06000	 mov         r6, #0
  00030	e5953018	 ldr         r3, [r5, #0x18]
  00034	e3530000	 cmp         r3, #0
  00038	11a00005	 movne       r0, r5
  0003c	1b000000	 blne        EnterCriticalSection

; 558  :         SetGpioBankPowerState(id, D0);
; 559  : 
; 560  :         // set pullup state
; 561  :         if (enable) pulldownState = PULLDOWN_ENABLE;
; 562  : 
; 563  :         ReadTwlReg(s_rgGpioRegs[bank].rgSubGroup[subGroup].GPIOPUPDCTR, &val, sizeof(val));

  00040	e59f2064	 ldr         r2, [pc, #0x64]
  00044	e0883108	 add         r3, r8, r8, lsl #2
  00048	e0833fa9	 add         r3, r3, r9, lsr #31
  0004c	e3540000	 cmp         r4, #0
  00050	e0824183	 add         r4, r2, r3, lsl #3
  00054	e5940018	 ldr         r0, [r4, #0x18]
  00058	e3a02001	 mov         r2, #1
  0005c	e28d1000	 add         r1, sp, #0
  00060	13a06001	 movne       r6, #1
  00064	eb000000	 bl          |?ReadTwlReg@@YAHKPAEI@Z|

; 564  :         val &= ~(PULLDOWN_ENABLE << subIndex);

  00068	e5dd3000	 ldrb        r3, [sp]
  0006c	e3a02001	 mov         r2, #1

; 565  :         val |= (pulldownState << subIndex);
; 566  :         WriteTwlReg(s_rgGpioRegs[bank].rgSubGroup[subGroup].GPIOPUPDCTR, &val, sizeof(val));

  00070	e5940018	 ldr         r0, [r4, #0x18]
  00074	e1c33712	 bic         r3, r3, r2, lsl r7
  00078	e3a02001	 mov         r2, #1
  0007c	e1833716	 orr         r3, r3, r6, lsl r7
  00080	e28d1000	 add         r1, sp, #0
  00084	e5cd3000	 strb        r3, [sp]
  00088	eb000000	 bl          |?WriteTwlReg@@YAHKPAEI@Z|

; 567  : 
; 568  :         SetGpioBankPowerState(id, D4);
; 569  :         Unlock();

  0008c	e5953018	 ldr         r3, [r5, #0x18]
  00090	e3530000	 cmp         r3, #0
  00094	11a00005	 movne       r0, r5
  00098	1b000000	 blne        LeaveCriticalSection

; 570  :         rc = TRUE;

  0009c	e3a00001	 mov         r0, #1
  000a0		 |$LN2@Tps659xxGp@7|

; 571  :         }
; 572  : 
; 573  :     return rc;
; 574  : }

  000a0	e28dd004	 add         sp, sp, #4
  000a4	e8bd43f0	 ldmia       sp!, {r4 - r9, lr}
  000a8	e12fff1e	 bx          lr
  000ac		 |$LN18@Tps659xxGp@7|
  000ac		 |$LN19@Tps659xxGp@7|
  000ac	00000000	 DCD         |s_rgGpioRegs|
  000b0		 |$LN20@Tps659xxGp@7|
  000b0	00000000	 DCD         |?csGpio@@3UCRITICAL_SECTION@@A|
  000b4		 |$M37664|

			 ENDP  ; |?Tps659xxGpioPulldown@@YAHPAXII@Z|, Tps659xxGpioPulldown


  00000			 AREA	 |.pdata|, PDATA
|$T37686| DCD	|$LN10@Tps659xxGp@8|
	DCD	0x40001602
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Tps659xxGpioSetBit@@YAHPAXI@Z| PROC	; Tps659xxGpioSetBit

; 728  : {

  00000		 |$LN10@Tps659xxGp@8|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004	e24dd004	 sub         sp, sp, #4
  00008		 |$M37683|

; 729  :     BOOL rc = FALSE;

  00008	e3a00000	 mov         r0, #0

; 730  :     UINT bit = GPIO_BIT(id);
; 731  :     UINT bank = GPIO_BANK(id);
; 732  : 
; 733  :     UNREFERENCED_PARAMETER(context);
; 734  : 
; 735  : //    RETAILMSG(1,(TEXT("+Tps659xxGpioSetBit %d\r\n"),id));
; 736  :     if (id < TPS659XX_MAX_GPIO_COUNT)

  0000c	e3510012	 cmp         r1, #0x12
  00010	2a00000c	 bcs         |$LN1@Tps659xxGp@8|

; 737  :         {
; 738  :         UINT8 val;
; 739  : 
; 740  :         SetGpioBankPowerState(id, D0);
; 741  :         val = (UINT8) ((1 << bit));
; 742  :         WriteTwlReg(s_rgGpioRegs[bank].SETGPIODATAOUT, &val, sizeof(val));

  00014	e59f2038	 ldr         r2, [pc, #0x38]
  00018	e1a031a1	 mov         r3, r1, lsr #3
  0001c	e0833103	 add         r3, r3, r3, lsl #2
  00020	e0823183	 add         r3, r2, r3, lsl #3
  00024	e2012007	 and         r2, r1, #7
  00028	e5930010	 ldr         r0, [r3, #0x10]
  0002c	e3a01001	 mov         r1, #1
  00030	e1a03211	 mov         r3, r1, lsl r2
  00034	e3a02001	 mov         r2, #1
  00038	e28d1000	 add         r1, sp, #0
  0003c	e5cd3000	 strb        r3, [sp]
  00040	eb000000	 bl          |?WriteTwlReg@@YAHKPAEI@Z|

; 743  :         SetGpioBankPowerState(id, D4);
; 744  :         rc = TRUE;

  00044	e3a00001	 mov         r0, #1
  00048		 |$LN1@Tps659xxGp@8|

; 745  :         }
; 746  :     return rc;
; 747  : }

  00048	e28dd004	 add         sp, sp, #4
  0004c	e49de004	 ldr         lr, [sp], #4
  00050	e12fff1e	 bx          lr
  00054		 |$LN11@Tps659xxGp@8|
  00054		 |$LN12@Tps659xxGp@8|
  00054	00000000	 DCD         |s_rgGpioRegs|
  00058		 |$M37684|

			 ENDP  ; |?Tps659xxGpioSetBit@@YAHPAXI@Z|, Tps659xxGpioSetBit


  00000			 AREA	 |.pdata|, PDATA
|$T37705| DCD	|$LN10@Tps659xxGp@9|
	DCD	0x40001602
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Tps659xxGpioClrBit@@YAHPAXI@Z| PROC	; Tps659xxGpioClrBit

; 761  : {

  00000		 |$LN10@Tps659xxGp@9|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004	e24dd004	 sub         sp, sp, #4
  00008		 |$M37702|

; 762  :     BOOL rc = FALSE;

  00008	e3a00000	 mov         r0, #0

; 763  :     UINT bit = GPIO_BIT(id);
; 764  :     UINT bank = GPIO_BANK(id);
; 765  : 
; 766  :     UNREFERENCED_PARAMETER(context);
; 767  : 
; 768  :     if (id < TPS659XX_MAX_GPIO_COUNT)

  0000c	e3510012	 cmp         r1, #0x12
  00010	2a00000c	 bcs         |$LN1@Tps659xxGp@9|

; 769  :         {
; 770  :         UINT8 val;
; 771  : 
; 772  :         SetGpioBankPowerState(id, D0);
; 773  :         val = (UINT8) ((1 << bit));
; 774  :         WriteTwlReg(s_rgGpioRegs[bank].CLEARGPIODATAOUT, &val, sizeof(val));

  00014	e59f2038	 ldr         r2, [pc, #0x38]
  00018	e1a031a1	 mov         r3, r1, lsr #3
  0001c	e0833103	 add         r3, r3, r3, lsl #2
  00020	e0823183	 add         r3, r2, r3, lsl #3
  00024	e2012007	 and         r2, r1, #7
  00028	e593000c	 ldr         r0, [r3, #0xC]
  0002c	e3a01001	 mov         r1, #1
  00030	e1a03211	 mov         r3, r1, lsl r2
  00034	e3a02001	 mov         r2, #1
  00038	e28d1000	 add         r1, sp, #0
  0003c	e5cd3000	 strb        r3, [sp]
  00040	eb000000	 bl          |?WriteTwlReg@@YAHKPAEI@Z|

; 775  :         SetGpioBankPowerState(id, D4);
; 776  :         rc = TRUE;

  00044	e3a00001	 mov         r0, #1
  00048		 |$LN1@Tps659xxGp@9|

; 777  :         }
; 778  : 
; 779  :     return rc;
; 780  : }

  00048	e28dd004	 add         sp, sp, #4
  0004c	e49de004	 ldr         lr, [sp], #4
  00050	e12fff1e	 bx          lr
  00054		 |$LN11@Tps659xxGp@9|
  00054		 |$LN12@Tps659xxGp@9|
  00054	00000000	 DCD         |s_rgGpioRegs|
  00058		 |$M37703|

			 ENDP  ; |?Tps659xxGpioClrBit@@YAHPAXI@Z|, Tps659xxGpioClrBit


  00000			 AREA	 |.pdata|, PDATA
|$T37726| DCD	|$LN12@Tps659xxGp@10|
	DCD	0x40001702
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Tps659xxGpioGetBit@@YAKPAXI@Z| PROC	; Tps659xxGpioGetBit

; 791  : {    

  00000		 |$LN12@Tps659xxGp@10|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004	e24dd004	 sub         sp, sp, #4
  00008		 |$M37723|
  00008	e1a04001	 mov         r4, r1

; 792  :     DWORD value = (DWORD) -1;

  0000c	e3e00000	 mvn         r0, #0

; 793  :     UINT bit = GPIO_BIT(id);
; 794  :     UINT bank = GPIO_BANK(id);
; 795  : 
; 796  :     UNREFERENCED_PARAMETER(context);
; 797  :     if (id < TPS659XX_MAX_GPIO_COUNT)

  00010	e3540012	 cmp         r4, #0x12
  00014	2a00000c	 bcs         |$LN5@Tps659xxGp@10|

; 798  :         {
; 799  :         UINT8 val;
; 800  :         SetGpioBankPowerState(id, D0);
; 801  :         ReadTwlReg(s_rgGpioRegs[bank].GPIODATAIN, &val, sizeof(val));

  00018	e59f2038	 ldr         r2, [pc, #0x38]
  0001c	e1a031a4	 mov         r3, r4, lsr #3
  00020	e0833103	 add         r3, r3, r3, lsl #2
  00024	e7920183	 ldr         r0, [r2, +r3, lsl #3]
  00028	e3a02001	 mov         r2, #1
  0002c	e28d1000	 add         r1, sp, #0
  00030	eb000000	 bl          |?ReadTwlReg@@YAHKPAEI@Z|

; 802  :         value = (val & (1 << bit)) ? 1 : 0;

  00034	e5dd2000	 ldrb        r2, [sp]
  00038	e2043007	 and         r3, r4, #7
  0003c	e3a01001	 mov         r1, #1
  00040	e1120311	 tst         r2, r1, lsl r3
  00044	13a00001	 movne       r0, #1
  00048	03a00000	 moveq       r0, #0
  0004c		 |$LN5@Tps659xxGp@10|

; 803  :         SetGpioBankPowerState(id, D4);        
; 804  :         }
; 805  : 
; 806  :     return value;
; 807  : }

  0004c	e28dd004	 add         sp, sp, #4
  00050	e8bd4010	 ldmia       sp!, {r4, lr}
  00054	e12fff1e	 bx          lr
  00058		 |$LN13@Tps659xxGp@10|
  00058		 |$LN14@Tps659xxGp@10|
  00058	00000000	 DCD         |s_rgGpioRegs|
  0005c		 |$M37724|

			 ENDP  ; |?Tps659xxGpioGetBit@@YAKPAXI@Z|, Tps659xxGpioGetBit


  00000			 AREA	 |.pdata|, PDATA
|$T37737| DCD	|$LN5@Tps659xxGp@11|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Tps659xxGpioIoControl@@YAHPAXIPAEI1IPAK@Z| PROC ; Tps659xxGpioIoControl

; 825  : {

  00000		 |$LN5@Tps659xxGp@11|
  00000		 |$M37734|

; 826  : #ifdef DEVICE
; 827  :     UINT id;
; 828  :     DWORD value,mode;
; 829  :     DEVICE_IFC_GPIO ifc;
; 830  :     BOOL rc = FALSE;
; 831  : //    Tps659xxGpioDevice_t *pDevice = (Tps659xxGpioDevice_t*)context;
; 832  : 
; 833  :     UNREFERENCED_PARAMETER(pOutSize);
; 834  : 
; 835  :     DEBUGMSG(ZONE_FUNCTION, (
; 836  :         L"+Tps659xxGpioIOControl(0x%08x, 0x%08x, 0x%08x, %d, 0x%08x, %d, 0x%08x)\r\n",
; 837  :         context, code, pInBuffer, inSize, pOutBuffer, outSize, pOutSize
; 838  :         ));
; 839  : 
; 840  :     // Check if we get correct context
; 841  :     /*if ((pDevice == NULL) || (pDevice->cookie != GPIO_DEVICE_COOKIE))
; 842  :     {
; 843  :         DEBUGMSG(ZONE_ERROR, (L"ERROR: Tps659xxGpioIOControl: "
; 844  :             L"Incorrect context parameter\r\n"
; 845  :             ));
; 846  :         goto cleanUp;
; 847  :     }*/
; 848  :     switch (code)
; 849  :     {
; 850  :     case IOCTL_DDK_GET_DRIVER_IFC:
; 851  :         // We can give interface only to our peer in device process
; 852  :         if (GetCurrentProcessId() != (DWORD)GetCallerProcess())
; 853  :         {
; 854  :             DEBUGMSG(ZONE_ERROR, (L"ERROR: GIO_IOControl: "
; 855  :                 L"IOCTL_DDK_GET_DRIVER_IFC can be called only from "
; 856  :                 L"device process (caller process id 0x%08x)\r\n",
; 857  :                 GetCurrentProcessId()
; 858  :                 ));
; 859  :             SetLastError(ERROR_ACCESS_DENIED);
; 860  :             goto cleanUp;
; 861  :         }
; 862  :         if ((pInBuffer == NULL) || (inSize < sizeof(GUID)))
; 863  :         {
; 864  :             SetLastError(ERROR_INVALID_PARAMETER);
; 865  :             break;
; 866  :         }
; 867  :         if (IsEqualGUID(*(GUID*)pInBuffer, DEVICE_IFC_GPIO_GUID))
; 868  :         {
; 869  :             if (pOutSize != NULL) *pOutSize = sizeof(DEVICE_IFC_GPIO);
; 870  :             if ((pOutBuffer == NULL) || (outSize < sizeof(DEVICE_IFC_GPIO)))
; 871  :             {
; 872  :                 SetLastError(ERROR_INVALID_PARAMETER);
; 873  :                 break;
; 874  :             }
; 875  :             ifc.context                 = context;
; 876  :             ifc.pfnSetBit               = Tps659xxGpioSetBit;
; 877  :             ifc.pfnClrBit               = Tps659xxGpioClrBit;
; 878  :             ifc.pfnGetBit               = Tps659xxGpioGetBit;
; 879  :             ifc.pfnSetMode              = Tps659xxGpioSetMode;
; 880  :             ifc.pfnGetMode              = Tps659xxGpioGetMode;
; 881  :             ifc.pfnPullup               = Tps659xxGpioPullup;
; 882  :             ifc.pfnPulldown             = Tps659xxGpioPulldown;
; 883  :             ifc.pfnInterruptInitialize  = Tps659xxGpioInterruptInitialize;
; 884  :             ifc.pfnInterruptMask        = Tps659xxGpioInterruptMask;
; 885  :             ifc.pfnInterruptDisable     = Tps659xxGpioInterruptDisable;
; 886  :             ifc.pfnInterruptDone        = Tps659xxGpioInterruptDone;
; 887  : 			ifc.pfnGetSystemIrq			= NULL;
; 888  :             ifc.pfnInterruptWakeUp      = Tps659xxGpioWakeEnable;
; 889  :             ifc.pfnIoControl            = Tps659xxGpioIoControl;
; 890  : 
; 891  :             if (!CeSafeCopyMemory(pOutBuffer, &ifc, sizeof(ifc))) break;
; 892  :             rc = TRUE;
; 893  :             break;
; 894  :         }
; 895  :         SetLastError(ERROR_INVALID_PARAMETER);
; 896  :         break;
; 897  : 
; 898  :     case IOCTL_GPIO_SETBIT:
; 899  :         if (pOutSize != 0) *pOutSize = 0;
; 900  :         if ((pInBuffer == NULL) || (inSize < sizeof(DWORD)) ||
; 901  :             !CeSafeCopyMemory(&id, pInBuffer, sizeof(DWORD)))
; 902  :         {
; 903  :             SetLastError(ERROR_INVALID_PARAMETER);
; 904  :             break;
; 905  :         }
; 906  :         Tps659xxGpioSetBit(context, id);
; 907  :         rc = TRUE;
; 908  :         break;
; 909  : 
; 910  :     case IOCTL_GPIO_CLRBIT:
; 911  :         if (pOutSize != 0) *pOutSize = 0;
; 912  :         if ((pInBuffer == NULL) || (inSize < sizeof(DWORD)) ||
; 913  :             !CeSafeCopyMemory(&id, pInBuffer, sizeof(DWORD)))
; 914  :         {
; 915  :             SetLastError(ERROR_INVALID_PARAMETER);
; 916  :             break;
; 917  :         }
; 918  :         Tps659xxGpioClrBit(context, id);
; 919  :         rc = TRUE;
; 920  :         break;
; 921  : 
; 922  :     case IOCTL_GPIO_GETBIT:
; 923  :         if (pOutSize != 0) *pOutSize = sizeof(DWORD);
; 924  :         if ((pInBuffer == NULL) || (inSize < sizeof(DWORD)) ||
; 925  :             !CeSafeCopyMemory(&id, pInBuffer, sizeof(DWORD)) ||
; 926  :             (pOutBuffer == NULL) || (outSize < sizeof(DWORD)))
; 927  :         {
; 928  :             SetLastError(ERROR_INVALID_PARAMETER);
; 929  :             break;
; 930  :         }
; 931  :         value = Tps659xxGpioGetBit(context, id);
; 932  :         if (!CeSafeCopyMemory(pOutBuffer, &value, sizeof(value)))
; 933  :         {
; 934  :             SetLastError(ERROR_INVALID_PARAMETER);
; 935  :             break;
; 936  :         }
; 937  :         rc = TRUE;
; 938  :         break;
; 939  : 
; 940  :     case IOCTL_GPIO_SETMODE:
; 941  :         if (pOutSize != 0) *pOutSize = 0;
; 942  :         if ((pInBuffer == NULL) || (inSize < 2 * sizeof(DWORD)) ||
; 943  :             !CeSafeCopyMemory(
; 944  :             &id, &((DWORD*)pInBuffer)[0], sizeof(DWORD)
; 945  :             ) ||
; 946  :             !CeSafeCopyMemory(
; 947  :             &mode, &((DWORD*)pInBuffer)[1], sizeof(DWORD)
; 948  :             ))
; 949  :         {
; 950  :             SetLastError(ERROR_INVALID_PARAMETER);
; 951  :             break;
; 952  :         }
; 953  :         Tps659xxGpioSetMode(context, id, mode);
; 954  :         rc = TRUE;
; 955  :         break;
; 956  : 
; 957  :     case IOCTL_GPIO_GETMODE:
; 958  :         if (pOutSize != 0) *pOutSize = sizeof(DWORD);
; 959  :         if ((pInBuffer == NULL) || (inSize < sizeof(DWORD)) ||
; 960  :             !CeSafeCopyMemory(&id, pInBuffer, sizeof(DWORD)) ||
; 961  :             (pOutBuffer == NULL) || (outSize < sizeof(DWORD)))
; 962  :         {
; 963  :             SetLastError(ERROR_INVALID_PARAMETER);
; 964  :             break;
; 965  :         }
; 966  :         mode = Tps659xxGpioGetMode(context, id);
; 967  :         if (!CeSafeCopyMemory(pOutBuffer, &mode, sizeof(mode)))
; 968  :         {
; 969  :             SetLastError(ERROR_INVALID_PARAMETER);
; 970  :             break;
; 971  :         }
; 972  :         rc = TRUE;
; 973  :         break;
; 974  :     }
; 975  : 
; 976  : cleanUp:
; 977  :     DEBUGMSG(ZONE_FUNCTION, (L"-Tps659xxGpioIOControl(rc = %d)\r\n", rc));
; 978  :     return rc;
; 979  : #endif
; 980  : 
; 981  : #ifdef OAL
; 982  :     UNREFERENCED_PARAMETER(context);
; 983  :     UNREFERENCED_PARAMETER(code);
; 984  :     UNREFERENCED_PARAMETER(pInBuffer);
; 985  :     UNREFERENCED_PARAMETER(inSize);
; 986  :     UNREFERENCED_PARAMETER(pOutBuffer);
; 987  :     UNREFERENCED_PARAMETER(outSize);
; 988  :     UNREFERENCED_PARAMETER(pOutSize);        
; 989  :     return FALSE;

  00000	e3a00000	 mov         r0, #0

; 990  : #endif
; 991  : }

  00004	e12fff1e	 bx          lr
  00008		 |$M37735|

			 ENDP  ; |?Tps659xxGpioIoControl@@YAHPAXIPAEI1IPAK@Z|, Tps659xxGpioIoControl

	END
