; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\TPS659XX\OALRTC\rtc.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "


  00000			 AREA	 |.bss|, NOINIT
|s_rtc|	%	0x40

  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
	IMPORT	|TWLWriteRegs|
; File c:\wince600\platform\common\src\soc\common_ti_v1\triton\inc\twl.h

  00000			 AREA	 |.pdata|, PDATA
|$T45386| DCD	|$LN5@TWLWriteBy|
	DCD	0x40000803
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |TWLWriteByteReg| PROC

; 51   : {

  00000		 |$LN5@TWLWriteBy|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d000f	 stmdb       sp!, {r0 - r3}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c		 |$M45383|

; 52   :     return TWLWriteRegs(hTWL,address,&data,sizeof(data));

  0000c	e3a03001	 mov         r3, #1
  00010	e28d2010	 add         r2, sp, #0x10
  00014	eb000000	 bl          TWLWriteRegs

; 53   : }

  00018	e89d6000	 ldmia       sp, {sp, lr}
  0001c	e12fff1e	 bx          lr
  00020		 |$M45384|

			 ENDP  ; |TWLWriteByteReg|

	IMPORT	|TWLReadRegs|

  00000			 AREA	 |.pdata|, PDATA
|$T45398| DCD	|$LN5@TWLReadByt|
	DCD	0x40000501
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |TWLReadByteReg| PROC

; 59   : {

  00000		 |$LN5@TWLReadByt|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M45395|

; 60   :     return TWLReadRegs(hTWL,address,data,sizeof(*data));

  00004	e3a03001	 mov         r3, #1
  00008	eb000000	 bl          TWLReadRegs

; 61   : }

  0000c	e49de004	 ldr         lr, [sp], #4
  00010	e12fff1e	 bx          lr
  00014		 |$M45396|

			 ENDP  ; |TWLReadByteReg|

	EXPORT	|SystemTimeToString|
	EXPORT	|??_C@_1EG@LALIIKNN@?$AA?$CF?$AA0?$AA4?$AAd?$AA?4?$AA?$CF?$AA0?$AA2?$AAd?$AA?4?$AA?$CF?$AA0?$AA2?$AAd?$AA?5?$AA?$CF?$AA0?$AA2?$AAd?$AA?3?$AA?$CF?$AA0?$AA2?$AAd?$AA?3?$AA?$CF?$AA0?$AA2?$AAd?$AA?4?$AA?$CF?$AA0@| [ DATA ] ; `string'
	IMPORT	|OALLogPrintf|

  00040			 AREA	 |.bss|, NOINIT
|?buffer@?1??SystemTimeToString@@9@9| % 0x80		; `SystemTimeToString'::`2'::buffer
|?buffer@?1??SystemTimeToString@@9@9| % 0x80		; `SystemTimeToString'::`2'::buffer
; File c:\wince600\platform\common\src\soc\common_ti_v1\tps659xx\oalrtc\rtc.c

  00000			 AREA	 |.pdata|, PDATA
|$T45408| DCD	|$LN5@SystemTime|
	DCD	0x40001902

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EG@LALIIKNN@?$AA?$CF?$AA0?$AA4?$AAd?$AA?4?$AA?$CF?$AA0?$AA2?$AAd?$AA?4?$AA?$CF?$AA0?$AA2?$AAd?$AA?5?$AA?$CF?$AA0?$AA2?$AAd?$AA?3?$AA?$CF?$AA0?$AA2?$AAd?$AA?3?$AA?$CF?$AA0?$AA2?$AAd?$AA?4?$AA?$CF?$AA0@| DCB "%"
	DCB	0x0, "0", 0x0, "4", 0x0, "d", 0x0, ".", 0x0, "%", 0x0, "0"
	DCB	0x0, "2", 0x0, "d", 0x0, ".", 0x0, "%", 0x0, "0", 0x0, "2"
	DCB	0x0, "d", 0x0, " ", 0x0, "%", 0x0, "0", 0x0, "2", 0x0, "d"
	DCB	0x0, ":", 0x0, "%", 0x0, "0", 0x0, "2", 0x0, "d", 0x0, ":"
	DCB	0x0, "%", 0x0, "0", 0x0, "2", 0x0, "d", 0x0, ".", 0x0, "%"
	DCB	0x0, "0", 0x0, "3", 0x0, "d", 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |SystemTimeToString| PROC

; 94   : {

  00000		 |$LN5@SystemTime|
  00000	e92d41f0	 stmdb       sp!, {r4 - r8, lr}
  00004	e24dd018	 sub         sp, sp, #0x18
  00008		 |$M45405|

; 95   :     static WCHAR buffer[64];
; 96   : 
; 97   :     OALLogPrintf(
; 98   :         buffer, 64, L"%04d.%02d.%02d %02d:%02d:%02d.%03d",
; 99   :         pSystemTime->wYear, pSystemTime->wMonth, pSystemTime->wDay,
; 100  :         pSystemTime->wHour, pSystemTime->wMinute, pSystemTime->wSecond, 
; 101  :         pSystemTime->wMilliseconds
; 102  :         );        

  00008	e1d0e0be	 ldrh        lr, [r0, #0xE]
  0000c	e1d040bc	 ldrh        r4, [r0, #0xC]
  00010	e1d050ba	 ldrh        r5, [r0, #0xA]
  00014	e1d060b8	 ldrh        r6, [r0, #8]
  00018	e1d070b6	 ldrh        r7, [r0, #6]
  0001c	e1d080b2	 ldrh        r8, [r0, #2]
  00020	e1d030b0	 ldrh        r3, [r0]
  00024	e59f0030	 ldr         r0, [pc, #0x30]
  00028	e59f2030	 ldr         r2, [pc, #0x30]
  0002c	e3a01040	 mov         r1, #0x40
  00030	e58de014	 str         lr, [sp, #0x14]
  00034	e58d4010	 str         r4, [sp, #0x10]
  00038	e58d500c	 str         r5, [sp, #0xC]
  0003c	e58d6008	 str         r6, [sp, #8]
  00040	e58d7004	 str         r7, [sp, #4]
  00044	e58d8000	 str         r8, [sp]
  00048	eb000000	 bl          OALLogPrintf

; 103  :     return buffer;
; 104  : }

  0004c	e59f0008	 ldr         r0, [pc, #8]
  00050	e28dd018	 add         sp, sp, #0x18
  00054	e8bd41f0	 ldmia       sp!, {r4 - r8, lr}
  00058	e12fff1e	 bx          lr
  0005c		 |$LN6@SystemTime|
  0005c		 |$LN7@SystemTime|
  0005c	00000000	 DCD         |?buffer@?1??SystemTimeToString@@9@9|
  00060		 |$LN8@SystemTime|
  00060	00000000	 DCD         |??_C@_1EG@LALIIKNN@?$AA?$CF?$AA0?$AA4?$AAd?$AA?4?$AA?$CF?$AA0?$AA2?$AAd?$AA?4?$AA?$CF?$AA0?$AA2?$AAd?$AA?5?$AA?$CF?$AA0?$AA2?$AAd?$AA?3?$AA?$CF?$AA0?$AA2?$AAd?$AA?3?$AA?$CF?$AA0?$AA2?$AAd?$AA?4?$AA?$CF?$AA0@|
  00064		 |$M45406|

			 ENDP  ; |SystemTimeToString|

	EXPORT	|HWTimeToString|
	EXPORT	|??_C@_1DM@BLINKFCK@?$AA?$CF?$AA0?$AA4?$AAd?$AA?4?$AA?$CF?$AA0?$AA2?$AAd?$AA?4?$AA?$CF?$AA0?$AA2?$AAd?$AA?5?$AA?$CF?$AA0?$AA2?$AAd?$AA?3?$AA?$CF?$AA0?$AA2?$AAd?$AA?3?$AA?$CF?$AA0?$AA2?$AAd?$AA?$AA@| [ DATA ] ; `string'

  00140			 AREA	 |.bss|, NOINIT
|?buffer@?1??HWTimeToString@@9@9| % 0x80		; `HWTimeToString'::`2'::buffer
|?buffer@?1??HWTimeToString@@9@9| % 0x80		; `HWTimeToString'::`2'::buffer

  00000			 AREA	 |.pdata|, PDATA
|$T45421| DCD	|$LN5@HWTimeToSt|
	DCD	0x40003a02

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DM@BLINKFCK@?$AA?$CF?$AA0?$AA4?$AAd?$AA?4?$AA?$CF?$AA0?$AA2?$AAd?$AA?4?$AA?$CF?$AA0?$AA2?$AAd?$AA?5?$AA?$CF?$AA0?$AA2?$AAd?$AA?3?$AA?$CF?$AA0?$AA2?$AAd?$AA?3?$AA?$CF?$AA0?$AA2?$AAd?$AA?$AA@| DCB "%"
	DCB	0x0, "0", 0x0, "4", 0x0, "d", 0x0, ".", 0x0, "%", 0x0, "0"
	DCB	0x0, "2", 0x0, "d", 0x0, ".", 0x0, "%", 0x0, "0", 0x0, "2"
	DCB	0x0, "d", 0x0, " ", 0x0, "%", 0x0, "0", 0x0, "2", 0x0, "d"
	DCB	0x0, ":", 0x0, "%", 0x0, "0", 0x0, "2", 0x0, "d", 0x0, ":"
	DCB	0x0, "%", 0x0, "0", 0x0, "2", 0x0, "d", 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |HWTimeToString| PROC

; 112  : {

  00000		 |$LN5@HWTimeToSt|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd028	 sub         sp, sp, #0x28
  00008		 |$M45418|

; 113  :     static WCHAR buffer[64];
; 114  : 
; 115  :     OALLogPrintf(
; 116  :         buffer, 64, L"%04d.%02d.%02d %02d:%02d:%02d",
; 117  :         BCD2BIN(bcdTime[5]) + RTC_BASE_YEAR_MIN, 
; 118  :         BCD2BIN(bcdTime[4]), 
; 119  :         BCD2BIN(bcdTime[3]),
; 120  :         BCD2BIN(bcdTime[2]), 
; 121  :         BCD2BIN(bcdTime[1]), 
; 122  :         BCD2BIN(bcdTime[0])
; 123  :         );        

  00008	e5d06000	 ldrb        r6, [r0]
  0000c	e5d07001	 ldrb        r7, [r0, #1]
  00010	e5d04003	 ldrb        r4, [r0, #3]
  00014	e1a02226	 mov         r2, r6, lsr #4
  00018	e0822102	 add         r2, r2, r2, lsl #2
  0001c	e5d03005	 ldrb        r3, [r0, #5]
  00020	e5d08002	 ldrb        r8, [r0, #2]
  00024	e1a01227	 mov         r1, r7, lsr #4
  00028	e58d2020	 str         r2, [sp, #0x20]
  0002c	e5d00004	 ldrb        r0, [r0, #4]
  00030	e0812101	 add         r2, r1, r1, lsl #2
  00034	e58d4014	 str         r4, [sp, #0x14]
  00038	e58d2024	 str         r2, [sp, #0x24]
  0003c	e59d2014	 ldr         r2, [sp, #0x14]
  00040	e58d301c	 str         r3, [sp, #0x1C]
  00044	e1a03223	 mov         r3, r3, lsr #4
  00048	e58d0018	 str         r0, [sp, #0x18]
  0004c	e1a0e228	 mov         lr, r8, lsr #4
  00050	e1a04224	 mov         r4, r4, lsr #4
  00054	e1a05220	 mov         r5, r0, lsr #4
  00058	e28330c8	 add         r3, r3, #0xC8
  0005c	e207a00f	 and         r10, r7, #0xF
  00060	e202700f	 and         r7, r2, #0xF
  00064	e59d2018	 ldr         r2, [sp, #0x18]
  00068	e206000f	 and         r0, r6, #0xF
  0006c	e08eb10e	 add         r11, lr, lr, lsl #2
  00070	e0849104	 add         r9, r4, r4, lsl #2
  00074	e59d4020	 ldr         r4, [sp, #0x20]
  00078	e208600f	 and         r6, r8, #0xF
  0007c	e083e103	 add         lr, r3, r3, lsl #2
  00080	e59d301c	 ldr         r3, [sp, #0x1C]
  00084	e0858105	 add         r8, r5, r5, lsl #2
  00088	e59d5024	 ldr         r5, [sp, #0x24]
  0008c	e202100f	 and         r1, r2, #0xF
  00090	e59f204c	 ldr         r2, [pc, #0x4C]
  00094	e0804084	 add         r4, r0, r4, lsl #1
  00098	e59f0040	 ldr         r0, [pc, #0x40]
  0009c	e203300f	 and         r3, r3, #0xF
  000a0	e0818088	 add         r8, r1, r8, lsl #1
  000a4	e08a5085	 add         r5, r10, r5, lsl #1
  000a8	e086608b	 add         r6, r6, r11, lsl #1
  000ac	e0877089	 add         r7, r7, r9, lsl #1
  000b0	e3a01040	 mov         r1, #0x40
  000b4	e083308e	 add         r3, r3, lr, lsl #1
  000b8	e58d8000	 str         r8, [sp]
  000bc	e58d4010	 str         r4, [sp, #0x10]
  000c0	e58d500c	 str         r5, [sp, #0xC]
  000c4	e58d6008	 str         r6, [sp, #8]
  000c8	e58d7004	 str         r7, [sp, #4]
  000cc	eb000000	 bl          OALLogPrintf

; 124  :     return buffer;
; 125  : }

  000d0	e59f0008	 ldr         r0, [pc, #8]
  000d4	e28dd028	 add         sp, sp, #0x28
  000d8	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  000dc	e12fff1e	 bx          lr
  000e0		 |$LN6@HWTimeToSt|
  000e0		 |$LN7@HWTimeToSt|
  000e0	00000000	 DCD         |?buffer@?1??HWTimeToString@@9@9|
  000e4		 |$LN8@HWTimeToSt|
  000e4	00000000	 DCD         |??_C@_1DM@BLINKFCK@?$AA?$CF?$AA0?$AA4?$AAd?$AA?4?$AA?$CF?$AA0?$AA2?$AAd?$AA?4?$AA?$CF?$AA0?$AA2?$AAd?$AA?5?$AA?$CF?$AA0?$AA2?$AAd?$AA?3?$AA?$CF?$AA0?$AA2?$AAd?$AA?3?$AA?$CF?$AA0?$AA2?$AAd?$AA?$AA@|
  000e8		 |$M45419|

			 ENDP  ; |HWTimeToString|

	EXPORT	|ReadBaseOffset|
; File c:\wince600\platform\common\src\soc\common_ti_v1\triton\inc\twl.h

  00000			 AREA	 |.pdata|, PDATA
|$T45464| DCD	|$LN21@ReadBaseOf|
	DCD	0x40007402
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\tps659xx\oalrtc\rtc.c

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |ReadBaseOffset| PROC

; 133  : {

  00000		 |$LN21@ReadBaseOf|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004	e24dd004	 sub         sp, sp, #4
  00008		 |$M45461|
  00008	e1a05000	 mov         r5, r0

; 134  :     UCHAR   val;
; 135  : 
; 136  :     // Read backup registers for secure time offset
; 137  :     *pOffset = 0;
; 138  : 
; 139  :     TWLReadByteReg(s_rtc.hTWL, TWL_BACKUP_REG_H, &val);

  0000c	e59f41b8	 ldr         r4, [pc, #0x1B8]
  00010	e3a03000	 mov         r3, #0
  00014	e5853000	 str         r3, [r5]
  00018	e5853004	 str         r3, [r5, #4]
  0001c	e5940018	 ldr         r0, [r4, #0x18]
  00020	e3a06803	 mov         r6, #3, 16
  00024	e3a03001	 mov         r3, #1
  00028	e28d2000	 add         r2, sp, #0
  0002c	e386101b	 orr         r1, r6, #0x1B
  00030	eb000000	 bl          TWLReadRegs

; 140  :     *pOffset = (*pOffset << 8) | val;

  00034	e5953004	 ldr         r3, [r5, #4]
  00038	e5951000	 ldr         r1, [r5]
  0003c	e5dd2000	 ldrb        r2, [sp]
  00040	e1a03403	 mov         r3, r3, lsl #8
  00044	e1833c21	 orr         r3, r3, r1, lsr #24
  00048	e1822401	 orr         r2, r2, r1, lsl #8
  0004c	e5853004	 str         r3, [r5, #4]
  00050	e5852000	 str         r2, [r5]

; 141  : 
; 142  :     TWLReadByteReg(s_rtc.hTWL, TWL_BACKUP_REG_G, &val);

  00054	e5940018	 ldr         r0, [r4, #0x18]
  00058	e3a03001	 mov         r3, #1
  0005c	e28d2000	 add         r2, sp, #0
  00060	e386101a	 orr         r1, r6, #0x1A
  00064	eb000000	 bl          TWLReadRegs

; 143  :     *pOffset = (*pOffset << 8) | val;

  00068	e5953004	 ldr         r3, [r5, #4]
  0006c	e5951000	 ldr         r1, [r5]
  00070	e5dd2000	 ldrb        r2, [sp]
  00074	e1a03403	 mov         r3, r3, lsl #8
  00078	e1833c21	 orr         r3, r3, r1, lsr #24
  0007c	e1822401	 orr         r2, r2, r1, lsl #8
  00080	e5853004	 str         r3, [r5, #4]
  00084	e5852000	 str         r2, [r5]

; 144  : 
; 145  :     TWLReadByteReg(s_rtc.hTWL, TWL_BACKUP_REG_F, &val);

  00088	e5940018	 ldr         r0, [r4, #0x18]
  0008c	e3a03001	 mov         r3, #1
  00090	e28d2000	 add         r2, sp, #0
  00094	e3861019	 orr         r1, r6, #0x19
  00098	eb000000	 bl          TWLReadRegs

; 146  :     *pOffset = (*pOffset << 8) | val;

  0009c	e5953004	 ldr         r3, [r5, #4]
  000a0	e5951000	 ldr         r1, [r5]
  000a4	e5dd2000	 ldrb        r2, [sp]
  000a8	e1a03403	 mov         r3, r3, lsl #8
  000ac	e1833c21	 orr         r3, r3, r1, lsr #24
  000b0	e1822401	 orr         r2, r2, r1, lsl #8
  000b4	e5853004	 str         r3, [r5, #4]
  000b8	e5852000	 str         r2, [r5]

; 147  : 
; 148  :     TWLReadByteReg(s_rtc.hTWL, TWL_BACKUP_REG_E, &val);

  000bc	e5940018	 ldr         r0, [r4, #0x18]
  000c0	e3a03001	 mov         r3, #1
  000c4	e28d2000	 add         r2, sp, #0
  000c8	e3861018	 orr         r1, r6, #0x18
  000cc	eb000000	 bl          TWLReadRegs

; 149  :     *pOffset = (*pOffset << 8) | val;

  000d0	e5953004	 ldr         r3, [r5, #4]
  000d4	e5951000	 ldr         r1, [r5]
  000d8	e5dd2000	 ldrb        r2, [sp]
  000dc	e1a03403	 mov         r3, r3, lsl #8
  000e0	e1833c21	 orr         r3, r3, r1, lsr #24
  000e4	e1822401	 orr         r2, r2, r1, lsl #8
  000e8	e5853004	 str         r3, [r5, #4]
  000ec	e5852000	 str         r2, [r5]

; 150  : 
; 151  :     TWLReadByteReg(s_rtc.hTWL, TWL_BACKUP_REG_D, &val);

  000f0	e5940018	 ldr         r0, [r4, #0x18]
  000f4	e3a03001	 mov         r3, #1
  000f8	e28d2000	 add         r2, sp, #0
  000fc	e3861017	 orr         r1, r6, #0x17
  00100	eb000000	 bl          TWLReadRegs

; 152  :     *pOffset = (*pOffset << 8) | val;

  00104	e5953004	 ldr         r3, [r5, #4]
  00108	e5951000	 ldr         r1, [r5]
  0010c	e5dd2000	 ldrb        r2, [sp]
  00110	e1a03403	 mov         r3, r3, lsl #8
  00114	e1833c21	 orr         r3, r3, r1, lsr #24
  00118	e1822401	 orr         r2, r2, r1, lsl #8
  0011c	e5853004	 str         r3, [r5, #4]
  00120	e5852000	 str         r2, [r5]

; 153  : 
; 154  :     TWLReadByteReg(s_rtc.hTWL, TWL_BACKUP_REG_C, &val);

  00124	e5940018	 ldr         r0, [r4, #0x18]
  00128	e3a03001	 mov         r3, #1
  0012c	e28d2000	 add         r2, sp, #0
  00130	e3861016	 orr         r1, r6, #0x16
  00134	eb000000	 bl          TWLReadRegs

; 155  :     *pOffset = (*pOffset << 8) | val;

  00138	e5953004	 ldr         r3, [r5, #4]
  0013c	e5950000	 ldr         r0, [r5]
  00140	e5dd2000	 ldrb        r2, [sp]
  00144	e1a03403	 mov         r3, r3, lsl #8
  00148	e1831c20	 orr         r1, r3, r0, lsr #24
  0014c	e1823400	 orr         r3, r2, r0, lsl #8
  00150	e5853000	 str         r3, [r5]
  00154	e5851004	 str         r1, [r5, #4]

; 156  : 
; 157  :     TWLReadByteReg(s_rtc.hTWL, TWL_BACKUP_REG_B, &val);

  00158	e5940018	 ldr         r0, [r4, #0x18]
  0015c	e3a03001	 mov         r3, #1
  00160	e28d2000	 add         r2, sp, #0
  00164	e3861015	 orr         r1, r6, #0x15
  00168	eb000000	 bl          TWLReadRegs

; 158  :     *pOffset = (*pOffset << 8) | val;

  0016c	e5953004	 ldr         r3, [r5, #4]
  00170	e5951000	 ldr         r1, [r5]
  00174	e5dd2000	 ldrb        r2, [sp]
  00178	e1a03403	 mov         r3, r3, lsl #8
  0017c	e1833c21	 orr         r3, r3, r1, lsr #24
  00180	e1822401	 orr         r2, r2, r1, lsl #8
  00184	e5853004	 str         r3, [r5, #4]
  00188	e5852000	 str         r2, [r5]

; 159  : 
; 160  :     TWLReadByteReg(s_rtc.hTWL, TWL_BACKUP_REG_A, &val);

  0018c	e5940018	 ldr         r0, [r4, #0x18]
  00190	e3a03001	 mov         r3, #1
  00194	e28d2000	 add         r2, sp, #0
  00198	e3861014	 orr         r1, r6, #0x14
  0019c	eb000000	 bl          TWLReadRegs

; 161  :     *pOffset = (*pOffset << 8) | val;

  001a0	e5953004	 ldr         r3, [r5, #4]
  001a4	e5951000	 ldr         r1, [r5]
  001a8	e5dd2000	 ldrb        r2, [sp]
  001ac	e1a03403	 mov         r3, r3, lsl #8
  001b0	e1833c21	 orr         r3, r3, r1, lsr #24
  001b4	e1822401	 orr         r2, r2, r1, lsl #8
  001b8	e5853004	 str         r3, [r5, #4]
  001bc	e5852000	 str         r2, [r5]

; 162  : }

  001c0	e28dd004	 add         sp, sp, #4
  001c4	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  001c8	e12fff1e	 bx          lr
  001cc		 |$LN22@ReadBaseOf|
  001cc		 |$LN23@ReadBaseOf|
  001cc	00000000	 DCD         |s_rtc|
  001d0		 |$M45462|

			 ENDP  ; |ReadBaseOffset|

	EXPORT	|WriteBaseOffset|
; File c:\wince600\platform\common\src\soc\common_ti_v1\triton\inc\twl.h

  00000			 AREA	 |.pdata|, PDATA
|$T45514| DCD	|$LN21@WriteBaseO|
	DCD	0x40004b02
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\tps659xx\oalrtc\rtc.c

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |WriteBaseOffset| PROC

; 170  : {

  00000		 |$LN21@WriteBaseO|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004	e24dd004	 sub         sp, sp, #4
  00008		 |$M45511|
  00008	e1a05000	 mov         r5, r0

; 171  :     UCHAR   val;
; 172  : 
; 173  :     // Write backup registers with secure time offset
; 174  :     val = (UCHAR)(*pOffset >> 0);
; 175  :     TWLWriteByteReg(s_rtc.hTWL, TWL_BACKUP_REG_A, val);

  0000c	e59f4114	 ldr         r4, [pc, #0x114]
  00010	e595e000	 ldr         lr, [r5]
  00014	e3a06803	 mov         r6, #3, 16
  00018	e5940018	 ldr         r0, [r4, #0x18]
  0001c	e3a03001	 mov         r3, #1
  00020	e28d2000	 add         r2, sp, #0
  00024	e3861014	 orr         r1, r6, #0x14
  00028	e5cde000	 strb        lr, [sp]
  0002c	eb000000	 bl          TWLWriteRegs

; 176  : 
; 177  :     val = (UCHAR)(*pOffset >> 8);

  00030	e5953004	 ldr         r3, [r5, #4]
  00034	e5952000	 ldr         r2, [r5]

; 178  :     TWLWriteByteReg(s_rtc.hTWL, TWL_BACKUP_REG_B, val);

  00038	e5940018	 ldr         r0, [r4, #0x18]
  0003c	e1a03c03	 mov         r3, r3, lsl #24
  00040	e1833422	 orr         r3, r3, r2, lsr #8
  00044	e5cd3000	 strb        r3, [sp]
  00048	e3a03001	 mov         r3, #1
  0004c	e28d2000	 add         r2, sp, #0
  00050	e3861015	 orr         r1, r6, #0x15
  00054	eb000000	 bl          TWLWriteRegs

; 179  : 
; 180  :     val = (UCHAR)(*pOffset >> 16);

  00058	e5953004	 ldr         r3, [r5, #4]
  0005c	e5952000	 ldr         r2, [r5]

; 181  :     TWLWriteByteReg(s_rtc.hTWL, TWL_BACKUP_REG_C, val);

  00060	e5940018	 ldr         r0, [r4, #0x18]
  00064	e1a03803	 mov         r3, r3, lsl #16
  00068	e1833822	 orr         r3, r3, r2, lsr #16
  0006c	e5cd3000	 strb        r3, [sp]
  00070	e3a03001	 mov         r3, #1
  00074	e28d2000	 add         r2, sp, #0
  00078	e3861016	 orr         r1, r6, #0x16
  0007c	eb000000	 bl          TWLWriteRegs

; 182  : 
; 183  :     val = (UCHAR)(*pOffset >> 24);

  00080	e5953004	 ldr         r3, [r5, #4]
  00084	e5952000	 ldr         r2, [r5]

; 184  :     TWLWriteByteReg(s_rtc.hTWL, TWL_BACKUP_REG_D, val);

  00088	e5940018	 ldr         r0, [r4, #0x18]
  0008c	e1a03403	 mov         r3, r3, lsl #8
  00090	e1833c22	 orr         r3, r3, r2, lsr #24
  00094	e5cd3000	 strb        r3, [sp]
  00098	e3a03001	 mov         r3, #1
  0009c	e28d2000	 add         r2, sp, #0
  000a0	e3861017	 orr         r1, r6, #0x17
  000a4	eb000000	 bl          TWLWriteRegs

; 185  : 
; 186  :     val = (UCHAR)(*pOffset >> 32);

  000a8	e5952004	 ldr         r2, [r5, #4]

; 187  :     TWLWriteByteReg(s_rtc.hTWL, TWL_BACKUP_REG_E, val);

  000ac	e5940018	 ldr         r0, [r4, #0x18]
  000b0	e3a03001	 mov         r3, #1
  000b4	e5cd2000	 strb        r2, [sp]
  000b8	e28d2000	 add         r2, sp, #0
  000bc	e3861018	 orr         r1, r6, #0x18
  000c0	eb000000	 bl          TWLWriteRegs

; 188  : 
; 189  :     val = (UCHAR)(*pOffset >> 40);

  000c4	e5952004	 ldr         r2, [r5, #4]

; 190  :     TWLWriteByteReg(s_rtc.hTWL, TWL_BACKUP_REG_F, val);

  000c8	e5940018	 ldr         r0, [r4, #0x18]
  000cc	e3a03001	 mov         r3, #1
  000d0	e1a02422	 mov         r2, r2, lsr #8
  000d4	e5cd2000	 strb        r2, [sp]
  000d8	e28d2000	 add         r2, sp, #0
  000dc	e3861019	 orr         r1, r6, #0x19
  000e0	eb000000	 bl          TWLWriteRegs

; 191  : 
; 192  :     val = (UCHAR)(*pOffset >> 48);
; 193  :     TWLWriteByteReg(s_rtc.hTWL, TWL_BACKUP_REG_G, val);

  000e4	e1d520b6	 ldrh        r2, [r5, #6]
  000e8	e5940018	 ldr         r0, [r4, #0x18]
  000ec	e3a03001	 mov         r3, #1
  000f0	e5cd2000	 strb        r2, [sp]
  000f4	e28d2000	 add         r2, sp, #0
  000f8	e386101a	 orr         r1, r6, #0x1A
  000fc	eb000000	 bl          TWLWriteRegs

; 194  : 
; 195  :     val = (UCHAR)(*pOffset >> 56);
; 196  :     TWLWriteByteReg(s_rtc.hTWL, TWL_BACKUP_REG_H, val);

  00100	e5d52007	 ldrb        r2, [r5, #7]
  00104	e5940018	 ldr         r0, [r4, #0x18]
  00108	e3a03001	 mov         r3, #1
  0010c	e5cd2000	 strb        r2, [sp]
  00110	e28d2000	 add         r2, sp, #0
  00114	e386101b	 orr         r1, r6, #0x1B
  00118	eb000000	 bl          TWLWriteRegs

; 197  : }

  0011c	e28dd004	 add         sp, sp, #4
  00120	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  00124	e12fff1e	 bx          lr
  00128		 |$LN22@WriteBaseO|
  00128		 |$LN23@WriteBaseO|
  00128	00000000	 DCD         |s_rtc|
  0012c		 |$M45512|

			 ENDP  ; |WriteBaseOffset|

	EXPORT	|__$ArrayPad$| [ DATA ]
	EXPORT	|OALIoCtlHalInitRTC|
	EXPORT	|??_C@_1EA@NFLJEDAN@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAI?$AAn?$AAi?$AAt?$AAR?$AAT?$AAC?$AA?$CI?$AA?$CJ?$AA?5?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EG@DMPAACGN@?$AA?5?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAI?$AAn?$AAi?$AAt?$AAR?$AAT?$AAC?$AA?$CI?$AA?$CJ?$AA?3?$AA?5?$AA?5?$AAR?$AAT?$AAC?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAs@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EM@GDGDGGII@?$AA?5?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAI?$AAn?$AAi?$AAt?$AAR?$AAT?$AAC?$AA?$CI?$AA?$CJ?$AA?3?$AA?5?$AA?5?$AAG?$AAe?$AAt?$AAt?$AAi?$AAn?$AAg?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FA@KEKFOIGH@?$AA?5?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAI?$AAn?$AAi?$AAt?$AAR?$AAT?$AAC?$AA?$CI?$AA?$CJ?$AA?3?$AA?5?$AA?5?$AAR?$AAe?$AAs?$AAe?$AAt?$AAt?$AAi?$AAn@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GM@BICOJKHL@?$AA?5?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAI?$AAn?$AAi?$AAt?$AAR?$AAT?$AAC?$AA?$CI?$AA?$CJ?$AA?3?$AA?5?$AA?5?$AAC?$AAl?$AAe?$AAa?$AAn?$AA?5?$AAb?$AAo@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GK@LBOBPPKI@?$AA?5?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAI?$AAn?$AAi?$AAt?$AAR?$AAT?$AAC?$AA?$CI?$AA?$CJ?$AA?3?$AA?5?$AA?5?$AAR?$AAT?$AAC?$AA?5?$AAT?$AAW?$AAL?$AA_@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FO@CGLDPGNO@?$AA?5?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAI?$AAn?$AAi?$AAt?$AAR?$AAT?$AAC?$AA?$CI?$AA?$CJ?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DA@GMIOKMIL@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAI?$AAn?$AAi?$AAt?$AAR?$AAT?$AAC?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|OEMGetTickCount|
	IMPORT	|NKSystemTimeToFileTime|
	IMPORT	|TWLOpen|
	IMPORT	|BSPSetT2MSECURE|
	IMPORT	|InitializeCriticalSection|
	IMPORT	|NKDbgPrintfW|
	IMPORT	|dpCurSettings|
	IMPORT	|__GSHandlerCheck|
	IMPORT	|dwOEMHighSecurity|
	IMPORT	|__security_cookie|
	IMPORT	|__security_check_cookie|
; File c:\wince600\platform\common\src\soc\common_ti_v1\triton\inc\twl.h

  00000			 AREA	 |.pdata|, PDATA
|$T45674| DCD	|$LN74@OALIoCtlHa|
	DCD	0xc001a302

  00000			 AREA	 |.xdata|, DATA
|$T45670| DCD	0xffffffd8

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EA@NFLJEDAN@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAI?$AAn?$AAi?$AAt?$AAR?$AAT?$AAC?$AA?$CI?$AA?$CJ?$AA?5?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "I", 0x0, "o", 0x0, "C"
	DCB	0x0, "t", 0x0, "l", 0x0, "H", 0x0, "a", 0x0, "l", 0x0, "I"
	DCB	0x0, "n", 0x0, "i", 0x0, "t", 0x0, "R", 0x0, "T", 0x0, "C"
	DCB	0x0, "(", 0x0, ")", 0x0, " ", 0x0, "r", 0x0, "c", 0x0, " "
	DCB	0x0, "=", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EG@DMPAACGN@?$AA?5?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAI?$AAn?$AAi?$AAt?$AAR?$AAT?$AAC?$AA?$CI?$AA?$CJ?$AA?3?$AA?5?$AA?5?$AAR?$AAT?$AAC?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAs@| DCB " "
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "I", 0x0, "o", 0x0, "C"
	DCB	0x0, "t", 0x0, "l", 0x0, "H", 0x0, "a", 0x0, "l", 0x0, "I"
	DCB	0x0, "n", 0x0, "i", 0x0, "t", 0x0, "R", 0x0, "T", 0x0, "C"
	DCB	0x0, "(", 0x0, ")", 0x0, ":", 0x0, " ", 0x0, " ", 0x0, "R"
	DCB	0x0, "T", 0x0, "C", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "%"
	DCB	0x0, "s", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EM@GDGDGGII@?$AA?5?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAI?$AAn?$AAi?$AAt?$AAR?$AAT?$AAC?$AA?$CI?$AA?$CJ?$AA?3?$AA?5?$AA?5?$AAG?$AAe?$AAt?$AAt?$AAi?$AAn?$AAg?$AA?5@| DCB " "
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "I", 0x0, "o", 0x0, "C"
	DCB	0x0, "t", 0x0, "l", 0x0, "H", 0x0, "a", 0x0, "l", 0x0, "I"
	DCB	0x0, "n", 0x0, "i", 0x0, "t", 0x0, "R", 0x0, "T", 0x0, "C"
	DCB	0x0, "(", 0x0, ")", 0x0, ":", 0x0, " ", 0x0, " ", 0x0, "G"
	DCB	0x0, "e", 0x0, "t", 0x0, "t", 0x0, "i", 0x0, "n", 0x0, "g"
	DCB	0x0, " ", 0x0, "R", 0x0, "T", 0x0, "C", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FA@KEKFOIGH@?$AA?5?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAI?$AAn?$AAi?$AAt?$AAR?$AAT?$AAC?$AA?$CI?$AA?$CJ?$AA?3?$AA?5?$AA?5?$AAR?$AAe?$AAs?$AAe?$AAt?$AAt?$AAi?$AAn@| DCB " "
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "I", 0x0, "o", 0x0, "C"
	DCB	0x0, "t", 0x0, "l", 0x0, "H", 0x0, "a", 0x0, "l", 0x0, "I"
	DCB	0x0, "n", 0x0, "i", 0x0, "t", 0x0, "R", 0x0, "T", 0x0, "C"
	DCB	0x0, "(", 0x0, ")", 0x0, ":", 0x0, " ", 0x0, " ", 0x0, "R"
	DCB	0x0, "e", 0x0, "s", 0x0, "e", 0x0, "t", 0x0, "t", 0x0, "i"
	DCB	0x0, "n", 0x0, "g", 0x0, " ", 0x0, "R", 0x0, "T", 0x0, "C"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GM@BICOJKHL@?$AA?5?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAI?$AAn?$AAi?$AAt?$AAR?$AAT?$AAC?$AA?$CI?$AA?$CJ?$AA?3?$AA?5?$AA?5?$AAC?$AAl?$AAe?$AAa?$AAn?$AA?5?$AAb?$AAo@| DCB " "
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "I", 0x0, "o", 0x0, "C"
	DCB	0x0, "t", 0x0, "l", 0x0, "H", 0x0, "a", 0x0, "l", 0x0, "I"
	DCB	0x0, "n", 0x0, "i", 0x0, "t", 0x0, "R", 0x0, "T", 0x0, "C"
	DCB	0x0, "(", 0x0, ")", 0x0, ":", 0x0, " ", 0x0, " ", 0x0, "C"
	DCB	0x0, "l", 0x0, "e", 0x0, "a", 0x0, "n", 0x0, " ", 0x0, "b"
	DCB	0x0, "o", 0x0, "o", 0x0, "t", 0x0, ",", 0x0, " ", 0x0, "r"
	DCB	0x0, "e", 0x0, "s", 0x0, "e", 0x0, "t", 0x0, " ", 0x0, "d"
	DCB	0x0, "a", 0x0, "t", 0x0, "e", 0x0, " ", 0x0, "t", 0x0, "i"
	DCB	0x0, "m", 0x0, "e", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GK@LBOBPPKI@?$AA?5?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAI?$AAn?$AAi?$AAt?$AAR?$AAT?$AAC?$AA?$CI?$AA?$CJ?$AA?3?$AA?5?$AA?5?$AAR?$AAT?$AAC?$AA?5?$AAT?$AAW?$AAL?$AA_@| DCB " "
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "I", 0x0, "o", 0x0, "C"
	DCB	0x0, "t", 0x0, "l", 0x0, "H", 0x0, "a", 0x0, "l", 0x0, "I"
	DCB	0x0, "n", 0x0, "i", 0x0, "t", 0x0, "R", 0x0, "T", 0x0, "C"
	DCB	0x0, "(", 0x0, ")", 0x0, ":", 0x0, " ", 0x0, " ", 0x0, "R"
	DCB	0x0, "T", 0x0, "C", 0x0, " ", 0x0, "T", 0x0, "W", 0x0, "L"
	DCB	0x0, "_", 0x0, "S", 0x0, "E", 0x0, "C", 0x0, "U", 0x0, "R"
	DCB	0x0, "E", 0x0, "D", 0x0, "_", 0x0, "R", 0x0, "E", 0x0, "G"
	DCB	0x0, "_", 0x0, "=", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FO@CGLDPGNO@?$AA?5?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAI?$AAn?$AAi?$AAt?$AAR?$AAT?$AAC?$AA?$CI?$AA?$CJ?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo@| DCB " "
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "I", 0x0, "o", 0x0, "C"
	DCB	0x0, "t", 0x0, "l", 0x0, "H", 0x0, "a", 0x0, "l", 0x0, "I"
	DCB	0x0, "n", 0x0, "i", 0x0, "t", 0x0, "R", 0x0, "T", 0x0, "C"
	DCB	0x0, "(", 0x0, ")", 0x0, ":", 0x0, " ", 0x0, "F", 0x0, "a"
	DCB	0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "t"
	DCB	0x0, "o", 0x0, " ", 0x0, "o", 0x0, "p", 0x0, "e", 0x0, "n"
	DCB	0x0, " ", 0x0, "T", 0x0, "r", 0x0, "i", 0x0, "t", 0x0, "o"
	DCB	0x0, "n", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DA@GMIOKMIL@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAI?$AAn?$AAi?$AAt?$AAR?$AAT?$AAC?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "I", 0x0, "o", 0x0, "C"
	DCB	0x0, "t", 0x0, "l", 0x0, "H", 0x0, "a", 0x0, "l", 0x0, "I"
	DCB	0x0, "n", 0x0, "i", 0x0, "t", 0x0, "R", 0x0, "T", 0x0, "C"
	DCB	0x0, "(", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\tps659xx\oalrtc\rtc.c

  00000			 AREA	 |.text|, CODE, ARM

  00000	00000000	 DCD         |__GSHandlerCheck|
  00004	00000000	 DCD         |$T45670|

  00008		 |OALIoCtlHalInitRTC| PROC

; 214  : {

  00008		 |$LN74@OALIoCtlHa|
  00008	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  0000c	e24dd054	 sub         sp, sp, #0x54
  00010		 |$M45671|
  00010	e1a06001	 mov         r6, r1
  00014	e58d602c	 str         r6, [sp, #0x2C]
  00018	e59f3670	 ldr         r3, [pc, #0x670]
  0001c	e5933000	 ldr         r3, [r3]
  00020	e58d3050	 str         r3, [sp, #0x50]

; 215  :     BOOL            rc = FALSE;
; 216  :     SYSTEMTIME      *pGivenTime = (LPSYSTEMTIME) pInBuffer;
; 217  :     UCHAR           bcdTime[6];
; 218  :     UCHAR           status;
; 219  :     UCHAR           secure;
; 220  : 
; 221  :     UNREFERENCED_PARAMETER(pOutSize);
; 222  :     UNREFERENCED_PARAMETER(outSize);
; 223  :     UNREFERENCED_PARAMETER(pOutBuffer);
; 224  :     UNREFERENCED_PARAMETER(inSize);
; 225  :     UNREFERENCED_PARAMETER(code);
; 226  : 
; 227  :     OALMSG(OAL_TIMER && OAL_FUNC, (L"+OALIoCtlHalInitRTC()\r\n"));

  00024	e59f463c	 ldr         r4, [pc, #0x63C]
  00028	e3a05000	 mov         r5, #0
  0002c	e5943440	 ldr         r3, [r4, #0x440]
  00030	e3130b02	 tst         r3, #2, 22
  00034	13130004	 tstne       r3, #4
  00038	159f064c	 ldrne       r0, [pc, #0x64C]
  0003c	1b000000	 blne        NKDbgPrintfW

; 228  : 
; 229  :    
; 230  :     // Initialize RTC critical section
; 231  :     InitializeCriticalSection(&s_rtc.cs);

  00040	e59fb628	 ldr         r11, [pc, #0x628]
  00044	e28b0004	 add         r0, r11, #4
  00048	eb000000	 bl          InitializeCriticalSection

; 232  : 
; 233  :     // Set CPU GPIO_64 (T2 MSECURE) to be output/high (unsecure)
; 234  :     // This allows write access to the T2 RTC calendar/time registers
; 235  :     // OMAP35XX GP only
; 236  :     if( dwOEMHighSecurity == OEM_HIGH_SECURITY_GP )

  0004c	e59f3634	 ldr         r3, [pc, #0x634]
  00050	e5933000	 ldr         r3, [r3]
  00054	e3530002	 cmp         r3, #2

; 237  :     {
; 238  :         BSPSetT2MSECURE(TRUE);

  00058	03a00001	 moveq       r0, #1
  0005c	0b000000	 bleq        BSPSetT2MSECURE

; 239  :     }
; 240  : 
; 241  :     // First read RTC status from Triton 
; 242  :     s_rtc.hTWL = TWLOpen();

  00060	eb000000	 bl          TWLOpen
  00064	e3500000	 cmp         r0, #0
  00068	e58b0018	 str         r0, [r11, #0x18]

; 243  :     if (s_rtc.hTWL == NULL)

  0006c	1a000005	 bne         |$LN3@OALIoCtlHa|

; 244  : 	{
; 245  :         OALMSG(OAL_ERROR, (L" OALIoCtlHalInitRTC(): Failed to open Triton\r\n"));

  00070	e5943440	 ldr         r3, [r4, #0x440]
  00074	e3130001	 tst         r3, #1
  00078	0a00016d	 beq         |$cleanUp$45176|
  0007c	e59f0600	 ldr         r0, [pc, #0x600]
  00080	eb000000	 bl          NKDbgPrintfW

; 246  :         goto cleanUp;

  00084	ea000169	 b           |$LN71@OALIoCtlHa|
  00088		 |$LN3@OALIoCtlHa|

; 247  : 	}
; 248  : 
; 249  :     // Read secure registers for secure hash
; 250  :     status = 0;

  00088	e3a03000	 mov         r3, #0
  0008c	e5cd3001	 strb        r3, [sp, #1]

; 251  : 
; 252  :     TWLReadByteReg(s_rtc.hTWL, TWL_SECURED_REG_A, &secure);

  00090	e3a03001	 mov         r3, #1
  00094	e28d2002	 add         r2, sp, #2
  00098	e3a01803	 mov         r1, #3, 16
  0009c	eb000000	 bl          TWLReadRegs

; 253  :     status |= secure;

  000a0	e5dd2002	 ldrb        r2, [sp, #2]
  000a4	e5dd3001	 ldrb        r3, [sp, #1]

; 254  : 
; 255  :     TWLReadByteReg(s_rtc.hTWL, TWL_SECURED_REG_B, &secure);

  000a8	e59b0018	 ldr         r0, [r11, #0x18]
  000ac	e3a05803	 mov         r5, #3, 16
  000b0	e1823003	 orr         r3, r2, r3
  000b4	e5cd3001	 strb        r3, [sp, #1]
  000b8	e3a03001	 mov         r3, #1
  000bc	e28d2002	 add         r2, sp, #2
  000c0	e3851001	 orr         r1, r5, #1
  000c4	eb000000	 bl          TWLReadRegs

; 256  :     status |= secure;

  000c8	e5dd2002	 ldrb        r2, [sp, #2]
  000cc	e5dd3001	 ldrb        r3, [sp, #1]

; 257  : 
; 258  :     TWLReadByteReg(s_rtc.hTWL, TWL_SECURED_REG_C, &secure);

  000d0	e59b0018	 ldr         r0, [r11, #0x18]
  000d4	e3851002	 orr         r1, r5, #2
  000d8	e1823003	 orr         r3, r2, r3
  000dc	e5cd3001	 strb        r3, [sp, #1]
  000e0	e3a03001	 mov         r3, #1
  000e4	e28d2002	 add         r2, sp, #2
  000e8	eb000000	 bl          TWLReadRegs

; 259  :     status |= secure;

  000ec	e5dd2002	 ldrb        r2, [sp, #2]
  000f0	e5dd3001	 ldrb        r3, [sp, #1]

; 260  : 
; 261  :     TWLReadByteReg(s_rtc.hTWL, TWL_SECURED_REG_D, &secure);

  000f4	e59b0018	 ldr         r0, [r11, #0x18]
  000f8	e3851003	 orr         r1, r5, #3
  000fc	e1823003	 orr         r3, r2, r3
  00100	e5cd3001	 strb        r3, [sp, #1]
  00104	e3a03001	 mov         r3, #1
  00108	e28d2002	 add         r2, sp, #2
  0010c	eb000000	 bl          TWLReadRegs

; 262  :     status |= secure;

  00110	e5dd2002	 ldrb        r2, [sp, #2]

; 263  : 
; 264  : 
; 265  :     OALMSG(OAL_TIMER && OAL_FUNC, (L" OALIoCtlHalInitRTC():  RTC TWL_SECURED_REG_= 0x%x\r\n", status));

  00114	e5dd3001	 ldrb        r3, [sp, #1]
  00118	e5940440	 ldr         r0, [r4, #0x440]
  0011c	e1821003	 orr         r1, r2, r3
  00120	e5cd1001	 strb        r1, [sp, #1]
  00124	e3100b02	 tst         r0, #2, 22
  00128	0a000004	 beq         |$LN11@OALIoCtlHa|
  0012c	e3100004	 tst         r0, #4
  00130	0a000002	 beq         |$LN11@OALIoCtlHa|
  00134	e59f0544	 ldr         r0, [pc, #0x544]
  00138	eb000000	 bl          NKDbgPrintfW
  0013c	e5940440	 ldr         r0, [r4, #0x440]
  00140		 |$LN11@OALIoCtlHa|

; 266  : 
; 267  : #if 1 // brian
; 268  :     // Not needed for CE embedded, only need to reset RTC if TWL/TPS PMIC is reset
; 269  :     // Check for a clean boot of device - if so, reset date/time to system default (LTK2026)
; 270  :     //pColdBoot = OALArgsQuery(OAL_ARGS_QUERY_COLDBOOT);
; 271  :     //if ((pColdBoot != NULL) && *pColdBoot)
; 272  :     //    {
; 273  : 	OALMSG(OAL_TIMER && OAL_FUNC, (L" OALIoCtlHalInitRTC():  Clean boot, reset date time\r\n"));

  00140	e3100b02	 tst         r0, #2, 22
  00144	0a000004	 beq         |$LN13@OALIoCtlHa|
  00148	e3100004	 tst         r0, #4
  0014c	0a000002	 beq         |$LN13@OALIoCtlHa|
  00150	e59f0524	 ldr         r0, [pc, #0x524]
  00154	eb000000	 bl          NKDbgPrintfW
  00158	e5940440	 ldr         r0, [r4, #0x440]
  0015c		 |$LN13@OALIoCtlHa|

; 274  : 	status = 0;

  0015c	e3a03000	 mov         r3, #0
  00160	e5cd3001	 strb        r3, [sp, #1]

; 275  :     //    }
; 276  : #endif
; 277  : 		
; 278  :     // Start RTC when it isn't running
; 279  :     if (status == 0 && pGivenTime != NULL)

  00164	e3560000	 cmp         r6, #0
  00168	0a0000b6	 beq         |$LN2@OALIoCtlHa|

; 280  : 	{
; 281  :         OALMSG(OAL_TIMER && OAL_FUNC, (L" OALIoCtlHalInitRTC():  Resetting RTC\r\n"));

  0016c	e3100b02	 tst         r0, #2, 22
  00170	13100004	 tstne       r0, #4
  00174	159f04fc	 ldrne       r0, [pc, #0x4FC]
  00178	1b000000	 blne        NKDbgPrintfW

; 282  : 
; 283  :         // Write power_up and alarm bits to clear power up flag (and any interrupt flag)
; 284  :         TWLWriteByteReg(s_rtc.hTWL, TWL_RTC_STATUS_REG, TWL_RTC_STATUS_POWER_UP|TWL_RTC_STATUS_ALARM);

  0017c	e59b0018	 ldr         r0, [r11, #0x18]
  00180	e3a03803	 mov         r3, #3, 16
  00184	e383102a	 orr         r1, r3, #0x2A
  00188	e3a0e0c0	 mov         lr, #0xC0
  0018c	e3a03001	 mov         r3, #1
  00190	e28d2000	 add         r2, sp, #0
  00194	e5cde000	 strb        lr, [sp]
  00198	eb000000	 bl          TWLWriteRegs

; 285  : 
; 286  :         //  Convert system time to BCD
; 287  :         bcdTime[5] = BIN2BCD(pGivenTime->wYear - RTC_BASE_YEAR_MIN);

  0019c	e1d630b0	 ldrh        r3, [r6]

; 288  :         bcdTime[4] = BIN2BCD(pGivenTime->wMonth);

  001a0	e5d6e002	 ldrb        lr, [r6, #2]

; 289  :         bcdTime[3] = BIN2BCD(pGivenTime->wDay);

  001a4	e5d64006	 ldrb        r4, [r6, #6]

; 290  :         bcdTime[2] = BIN2BCD(pGivenTime->wHour);

  001a8	e5d62008	 ldrb        r2, [r6, #8]

; 291  :         bcdTime[1] = BIN2BCD(pGivenTime->wMinute);

  001ac	e5d6800a	 ldrb        r8, [r6, #0xA]

; 292  :         bcdTime[0] = BIN2BCD(pGivenTime->wSecond);

  001b0	e5d6900c	 ldrb        r9, [r6, #0xC]
  001b4	e59f64b8	 ldr         r6, [pc, #0x4B8]
  001b8	e2833030	 add         r3, r3, #0x30
  001bc	e20370ff	 and         r7, r3, #0xFF
  001c0	e58d7018	 str         r7, [sp, #0x18]
  001c4	e0c35697	 smull       r5, r3, r7, r6
  001c8	e1a07002	 mov         r7, r2
  001cc	e0c2169e	 smull       r1, r2, lr, r6
  001d0	e58de00c	 str         lr, [sp, #0xC]
  001d4	e58d5030	 str         r5, [sp, #0x30]
  001d8	e58d4014	 str         r4, [sp, #0x14]

; 293  : 
; 294  :         //  Initialize RTC with given values
; 295  :         TWLWriteByteReg(s_rtc.hTWL, TWL_YEARS_REG,  bcdTime[5]);

  001dc	e1a03143	 mov         r3, r3, asr #2
  001e0	e58d7008	 str         r7, [sp, #8]
  001e4	e58d101c	 str         r1, [sp, #0x1C]
  001e8	e0c51694	 smull       r1, r5, r4, r6
  001ec	e58d8010	 str         r8, [sp, #0x10]
  001f0	e58d9004	 str         r9, [sp, #4]
  001f4	e59b0018	 ldr         r0, [r11, #0x18]
  001f8	e58d1028	 str         r1, [sp, #0x28]
  001fc	e0c1e697	 smull       lr, r1, r7, r6
  00200	e58de044	 str         lr, [sp, #0x44]
  00204	e0ce4698	 smull       r4, lr, r8, r6
  00208	e1a01141	 mov         r1, r1, asr #2
  0020c	e1a0e14e	 mov         lr, lr, asr #2
  00210	e08eafae	 add         r10, lr, lr, lsr #31
  00214	e58d4020	 str         r4, [sp, #0x20]
  00218	e0c46699	 smull       r6, r4, r9, r6
  0021c	e0819fa1	 add         r9, r1, r1, lsr #31
  00220	e089e109	 add         lr, r9, r9, lsl #2
  00224	e1a04144	 mov         r4, r4, asr #2
  00228	e084bfa4	 add         r11, r4, r4, lsr #31
  0022c	e58d6024	 str         r6, [sp, #0x24]
  00230	e0836fa3	 add         r6, r3, r3, lsr #31
  00234	e1a03142	 mov         r3, r2, asr #2
  00238	e0837fa3	 add         r7, r3, r3, lsr #31
  0023c	e1a02145	 mov         r2, r5, asr #2
  00240	e59d3018	 ldr         r3, [sp, #0x18]
  00244	e0865106	 add         r5, r6, r6, lsl #2
  00248	e0433085	 sub         r3, r3, r5, lsl #1
  0024c	e1833206	 orr         r3, r3, r6, lsl #4
  00250	e59d600c	 ldr         r6, [sp, #0xC]
  00254	e0828fa2	 add         r8, r2, r2, lsr #31
  00258	e0872107	 add         r2, r7, r7, lsl #2
  0025c	e0462082	 sub         r2, r6, r2, lsl #1
  00260	e59d6014	 ldr         r6, [sp, #0x14]
  00264	e0881108	 add         r1, r8, r8, lsl #2
  00268	e08a410a	 add         r4, r10, r10, lsl #2
  0026c	e0461081	 sub         r1, r6, r1, lsl #1
  00270	e59d6008	 ldr         r6, [sp, #8]
  00274	e08b510b	 add         r5, r11, r11, lsl #2
  00278	e5cd304d	 strb        r3, [sp, #0x4D]
  0027c	e046e08e	 sub         lr, r6, lr, lsl #1
  00280	e59d6010	 ldr         r6, [sp, #0x10]
  00284	e5cd3000	 strb        r3, [sp]
  00288	e3a03001	 mov         r3, #1
  0028c	e0464084	 sub         r4, r6, r4, lsl #1
  00290	e59d6004	 ldr         r6, [sp, #4]
  00294	e0465085	 sub         r5, r6, r5, lsl #1
  00298	e1826207	 orr         r6, r2, r7, lsl #4
  0029c	e1817208	 orr         r7, r1, r8, lsl #4
  002a0	e18e8209	 orr         r8, lr, r9, lsl #4
  002a4	e184e20a	 orr         lr, r4, r10, lsl #4
  002a8	e185420b	 orr         r4, r5, r11, lsl #4
  002ac	e28d2000	 add         r2, sp, #0
  002b0	e59d5030	 ldr         r5, [sp, #0x30]
  002b4	e59d501c	 ldr         r5, [sp, #0x1C]
  002b8	e59d5028	 ldr         r5, [sp, #0x28]
  002bc	e59d5044	 ldr         r5, [sp, #0x44]
  002c0	e59d5020	 ldr         r5, [sp, #0x20]
  002c4	e3a0a803	 mov         r10, #3, 16
  002c8	e59d9018	 ldr         r9, [sp, #0x18]
  002cc	e5cd604c	 strb        r6, [sp, #0x4C]
  002d0	e59d6014	 ldr         r6, [sp, #0x14]
  002d4	e59d6008	 ldr         r6, [sp, #8]
  002d8	e59d5004	 ldr         r5, [sp, #4]
  002dc	e59d900c	 ldr         r9, [sp, #0xC]
  002e0	e59d6010	 ldr         r6, [sp, #0x10]
  002e4	e5cde049	 strb        lr, [sp, #0x49]
  002e8	e59de024	 ldr         lr, [sp, #0x24]
  002ec	e38a1021	 orr         r1, r10, #0x21
  002f0	e5cd704b	 strb        r7, [sp, #0x4B]
  002f4	e5cd804a	 strb        r8, [sp, #0x4A]
  002f8	e5cd4048	 strb        r4, [sp, #0x48]
  002fc	eb000000	 bl          TWLWriteRegs

; 296  :         TWLWriteByteReg(s_rtc.hTWL, TWL_MONTHS_REG, bcdTime[4]);

  00300	e59fb368	 ldr         r11, [pc, #0x368]
  00304	e5dd104c	 ldrb        r1, [sp, #0x4C]
  00308	e3a03001	 mov         r3, #1
  0030c	e59b0018	 ldr         r0, [r11, #0x18]
  00310	e5cd1000	 strb        r1, [sp]
  00314	e28d2000	 add         r2, sp, #0
  00318	e38a1020	 orr         r1, r10, #0x20
  0031c	eb000000	 bl          TWLWriteRegs

; 297  :         TWLWriteByteReg(s_rtc.hTWL, TWL_DAYS_REG,   bcdTime[3]);

  00320	e5dd204b	 ldrb        r2, [sp, #0x4B]
  00324	e59b0018	 ldr         r0, [r11, #0x18]
  00328	e3a03001	 mov         r3, #1
  0032c	e5cd2000	 strb        r2, [sp]
  00330	e28d2000	 add         r2, sp, #0
  00334	e38a101f	 orr         r1, r10, #0x1F
  00338	eb000000	 bl          TWLWriteRegs

; 298  :         TWLWriteByteReg(s_rtc.hTWL, TWL_HOURS_REG,  bcdTime[2]);

  0033c	e5dd204a	 ldrb        r2, [sp, #0x4A]
  00340	e59b0018	 ldr         r0, [r11, #0x18]
  00344	e3a03001	 mov         r3, #1
  00348	e5cd2000	 strb        r2, [sp]
  0034c	e28d2000	 add         r2, sp, #0
  00350	e38a101e	 orr         r1, r10, #0x1E
  00354	eb000000	 bl          TWLWriteRegs

; 299  :         TWLWriteByteReg(s_rtc.hTWL, TWL_MINUTES_REG, bcdTime[1]);

  00358	e5dd2049	 ldrb        r2, [sp, #0x49]
  0035c	e59b0018	 ldr         r0, [r11, #0x18]
  00360	e3a03001	 mov         r3, #1
  00364	e5cd2000	 strb        r2, [sp]
  00368	e28d2000	 add         r2, sp, #0
  0036c	e38a101d	 orr         r1, r10, #0x1D
  00370	eb000000	 bl          TWLWriteRegs

; 300  :         TWLWriteByteReg(s_rtc.hTWL, TWL_SECONDS_REG, bcdTime[0]);

  00374	e5dd2048	 ldrb        r2, [sp, #0x48]
  00378	e59b0018	 ldr         r0, [r11, #0x18]
  0037c	e3a03001	 mov         r3, #1
  00380	e5cd2000	 strb        r2, [sp]
  00384	e28d2000	 add         r2, sp, #0
  00388	e38a101c	 orr         r1, r10, #0x1C
  0038c	eb000000	 bl          TWLWriteRegs

; 301  : 
; 302  :         //  Enable RTC
; 303  :         TWLWriteByteReg(s_rtc.hTWL, TWL_RTC_CTRL_REG, TWL_RTC_CTRL_RUN);

  00390	e59b0018	 ldr         r0, [r11, #0x18]
  00394	e3a0e001	 mov         lr, #1
  00398	e3a03001	 mov         r3, #1
  0039c	e28d2000	 add         r2, sp, #0
  003a0	e38a1029	 orr         r1, r10, #0x29
  003a4	e5cde000	 strb        lr, [sp]
  003a8	eb000000	 bl          TWLWriteRegs

; 304  : 
; 305  :         //  Write fake hash to secure regs
; 306  :         TWLWriteByteReg(s_rtc.hTWL, TWL_SECURED_REG_A, 0xAA);

  003ac	e59b0018	 ldr         r0, [r11, #0x18]
  003b0	e3a0e0aa	 mov         lr, #0xAA
  003b4	e3a03001	 mov         r3, #1
  003b8	e28d2000	 add         r2, sp, #0
  003bc	e3a01803	 mov         r1, #3, 16
  003c0	e5cde000	 strb        lr, [sp]
  003c4	eb000000	 bl          TWLWriteRegs

; 307  :         TWLWriteByteReg(s_rtc.hTWL, TWL_SECURED_REG_B, 0xBB);

  003c8	e59b0018	 ldr         r0, [r11, #0x18]
  003cc	e3a04803	 mov         r4, #3, 16
  003d0	e3a0e0bb	 mov         lr, #0xBB
  003d4	e3841001	 orr         r1, r4, #1
  003d8	e3a03001	 mov         r3, #1
  003dc	e28d2000	 add         r2, sp, #0
  003e0	e5cde000	 strb        lr, [sp]
  003e4	eb000000	 bl          TWLWriteRegs

; 308  :         TWLWriteByteReg(s_rtc.hTWL, TWL_SECURED_REG_C, 0xCC);

  003e8	e59b0018	 ldr         r0, [r11, #0x18]
  003ec	e3a0e0cc	 mov         lr, #0xCC
  003f0	e3a03001	 mov         r3, #1
  003f4	e28d2000	 add         r2, sp, #0
  003f8	e3841002	 orr         r1, r4, #2
  003fc	e5cde000	 strb        lr, [sp]
  00400	eb000000	 bl          TWLWriteRegs

; 309  :         TWLWriteByteReg(s_rtc.hTWL, TWL_SECURED_REG_D, 0xDD);

  00404	e59b0018	 ldr         r0, [r11, #0x18]
  00408	e3a0e0dd	 mov         lr, #0xDD
  0040c	e3a03001	 mov         r3, #1
  00410	e28d2000	 add         r2, sp, #0
  00414	e3841003	 orr         r1, r4, #3
  00418	e5cde000	 strb        lr, [sp]
  0041c	eb000000	 bl          TWLWriteRegs

; 310  : 
; 311  :         //  Convert given time initialization date/time to FILETIME
; 312  :         NKSystemTimeToFileTime(pGivenTime, (FILETIME*)&s_rtc.baseFiletime);

  00420	e59d002c	 ldr         r0, [sp, #0x2C]
  00424	e28b1020	 add         r1, r11, #0x20
  00428	eb000000	 bl          NKSystemTimeToFileTime

; 313  : 
; 314  :         //  Set a default value for base offset
; 315  :         s_rtc.baseOffset = 0;

  0042c	e3a03000	 mov         r3, #0
  00430	e58b3028	 str         r3, [r11, #0x28]
  00434	e3a03000	 mov         r3, #0

; 316  : 
; 317  :         //  Save off base offset to the backup regs
; 318  :         WriteBaseOffset( &s_rtc.baseOffset ); 

  00438	e28b0028	 add         r0, r11, #0x28
  0043c	e58b302c	 str         r3, [r11, #0x2C]
  00440	eb000000	 bl          WriteBaseOffset

; 319  : 	}
; 320  :     else

  00444	ea000069	 b           |$LN1@OALIoCtlHa|
  00448		 |$LN2@OALIoCtlHa|

; 321  : 	{
; 322  :         SYSTEMTIME  baseSystemTime;
; 323  : 
; 324  :         OALMSG(OAL_TIMER && OAL_FUNC, (L" OALIoCtlHalInitRTC():  Getting RTC\r\n"));

  00448	e3100b02	 tst         r0, #2, 22
  0044c	13100004	 tstne       r0, #4
  00450	159f0214	 ldrne       r0, [pc, #0x214]
  00454	1b000000	 blne        NKDbgPrintfW

; 325  : 
; 326  :         //  Set get time flag            
; 327  :         TWLReadByteReg(s_rtc.hTWL, TWL_RTC_CTRL_REG, &status);

  00458	e59b0018	 ldr         r0, [r11, #0x18]
  0045c	e3a04803	 mov         r4, #3, 16
  00460	e3841029	 orr         r1, r4, #0x29
  00464	e3a03001	 mov         r3, #1
  00468	e28d2001	 add         r2, sp, #1
  0046c	eb000000	 bl          TWLReadRegs

; 328  : 
; 329  :         status |= TWL_RTC_CTRL_RUN | TWL_RTC_CTRL_GET_TIME;

  00470	e5dd3001	 ldrb        r3, [sp, #1]

; 330  :         TWLWriteByteReg(s_rtc.hTWL, TWL_RTC_CTRL_REG, status);

  00474	e59b0018	 ldr         r0, [r11, #0x18]
  00478	e28d2000	 add         r2, sp, #0
  0047c	e3833041	 orr         r3, r3, #0x41
  00480	e5cd3001	 strb        r3, [sp, #1]
  00484	e5cd3000	 strb        r3, [sp]
  00488	e3a03001	 mov         r3, #1
  0048c	e3841029	 orr         r1, r4, #0x29
  00490	eb000000	 bl          TWLWriteRegs

; 331  : 
; 332  :         //  Get date and time from RTC
; 333  :         TWLReadByteReg(s_rtc.hTWL, TWL_YEARS_REG, &bcdTime[5]);

  00494	e59b0018	 ldr         r0, [r11, #0x18]
  00498	e3a04803	 mov         r4, #3, 16
  0049c	e3841021	 orr         r1, r4, #0x21
  004a0	e3a03001	 mov         r3, #1
  004a4	e28d204d	 add         r2, sp, #0x4D
  004a8	eb000000	 bl          TWLReadRegs

; 334  :         TWLReadByteReg(s_rtc.hTWL, TWL_MONTHS_REG, &bcdTime[4]);

  004ac	e59b0018	 ldr         r0, [r11, #0x18]
  004b0	e3a03001	 mov         r3, #1
  004b4	e28d204c	 add         r2, sp, #0x4C
  004b8	e3841020	 orr         r1, r4, #0x20
  004bc	eb000000	 bl          TWLReadRegs

; 335  :         TWLReadByteReg(s_rtc.hTWL, TWL_DAYS_REG, &bcdTime[3]);

  004c0	e59b0018	 ldr         r0, [r11, #0x18]
  004c4	e3a03001	 mov         r3, #1
  004c8	e28d204b	 add         r2, sp, #0x4B
  004cc	e384101f	 orr         r1, r4, #0x1F
  004d0	eb000000	 bl          TWLReadRegs

; 336  :         TWLReadByteReg(s_rtc.hTWL, TWL_HOURS_REG, &bcdTime[2]);

  004d4	e59b0018	 ldr         r0, [r11, #0x18]
  004d8	e3a03001	 mov         r3, #1
  004dc	e28d204a	 add         r2, sp, #0x4A
  004e0	e384101e	 orr         r1, r4, #0x1E
  004e4	eb000000	 bl          TWLReadRegs

; 337  :         TWLReadByteReg(s_rtc.hTWL, TWL_MINUTES_REG, &bcdTime[1]);

  004e8	e59b0018	 ldr         r0, [r11, #0x18]
  004ec	e3a03001	 mov         r3, #1
  004f0	e28d2049	 add         r2, sp, #0x49
  004f4	e384101d	 orr         r1, r4, #0x1D
  004f8	eb000000	 bl          TWLReadRegs

; 338  :         TWLReadByteReg(s_rtc.hTWL, TWL_SECONDS_REG, &bcdTime[0]);

  004fc	e59b0018	 ldr         r0, [r11, #0x18]
  00500	e3a03001	 mov         r3, #1
  00504	e28d2048	 add         r2, sp, #0x48
  00508	e384101c	 orr         r1, r4, #0x1C
  0050c	eb000000	 bl          TWLReadRegs

; 339  : 
; 340  :         //  Convert current RTC date/time to FILETIME
; 341  :         baseSystemTime.wYear    = BCD2BIN(bcdTime[5]) + RTC_BASE_YEAR_MIN;

  00510	e5dda04d	 ldrb        r10, [sp, #0x4D]

; 342  :         baseSystemTime.wMonth   = BCD2BIN(bcdTime[4]);
; 343  :         baseSystemTime.wDay     = BCD2BIN(bcdTime[3]);
; 344  :         baseSystemTime.wHour    = BCD2BIN(bcdTime[2]);

  00514	e5dd704a	 ldrb        r7, [sp, #0x4A]
  00518	e5dd904c	 ldrb        r9, [sp, #0x4C]
  0051c	e1a0322a	 mov         r3, r10, lsr #4
  00520	e28330c8	 add         r3, r3, #0xC8
  00524	e5dd804b	 ldrb        r8, [sp, #0x4B]
  00528	e1a00227	 mov         r0, r7, lsr #4
  0052c	e1a06803	 mov         r6, r3, lsl #16
  00530	e1a0e800	 mov         lr, r0, lsl #16
  00534	e1a02229	 mov         r2, r9, lsr #4
  00538	e207000f	 and         r0, r7, #0xF
  0053c	e1a06826	 mov         r6, r6, lsr #16
  00540	e20a300f	 and         r3, r10, #0xF
  00544	e3a0700a	 mov         r7, #0xA
  00548	e1a05802	 mov         r5, r2, lsl #16
  0054c	e0233796	 mla         r3, r6, r7, r3
  00550	e1a01228	 mov         r1, r8, lsr #4
  00554	e3a0600a	 mov         r6, #0xA
  00558	e1a05825	 mov         r5, r5, lsr #16
  0055c	e209200f	 and         r2, r9, #0xF
  00560	e1a04801	 mov         r4, r1, lsl #16
  00564	e0222695	 mla         r2, r5, r6, r2
  00568	e3a0500a	 mov         r5, #0xA
  0056c	e1a04824	 mov         r4, r4, lsr #16
  00570	e208100f	 and         r1, r8, #0xF
  00574	e0211594	 mla         r1, r4, r5, r1
  00578	e3a0400a	 mov         r4, #0xA
  0057c	e1a0e82e	 mov         lr, lr, lsr #16
  00580	e020049e	 mla         r0, lr, r4, r0

; 345  :         baseSystemTime.wMinute  = BCD2BIN(bcdTime[1]);

  00584	e1cd33b4	 strh        r3, [sp, #0x34]
  00588	e5dd4049	 ldrb        r4, [sp, #0x49]

; 346  :         baseSystemTime.wSecond  = BCD2BIN(bcdTime[0]);

  0058c	e5dde048	 ldrb        lr, [sp, #0x48]
  00590	e1cd23b6	 strh        r2, [sp, #0x36]
  00594	e1a02224	 mov         r2, r4, lsr #4
  00598	e1a0322e	 mov         r3, lr, lsr #4
  0059c	e1cd13ba	 strh        r1, [sp, #0x3A]
  005a0	e1cd03bc	 strh        r0, [sp, #0x3C]
  005a4	e1a01803	 mov         r1, r3, lsl #16
  005a8	e1a00802	 mov         r0, r2, lsl #16
  005ac	e1a01821	 mov         r1, r1, lsr #16
  005b0	e1a00820	 mov         r0, r0, lsr #16
  005b4	e3a0600a	 mov         r6, #0xA
  005b8	e3a0500a	 mov         r5, #0xA
  005bc	e204200f	 and         r2, r4, #0xF
  005c0	e20e300f	 and         r3, lr, #0xF
  005c4	e0233591	 mla         r3, r1, r5, r3
  005c8	e0222690	 mla         r2, r0, r6, r2

; 347  :         baseSystemTime.wMilliseconds = 0;

  005cc	e3a0e000	 mov         lr, #0

; 348  : 
; 349  :         NKSystemTimeToFileTime(&baseSystemTime, (FILETIME*)&s_rtc.baseFiletime);

  005d0	e28b1020	 add         r1, r11, #0x20
  005d4	e28d0034	 add         r0, sp, #0x34
  005d8	e1cd34b0	 strh        r3, [sp, #0x40]
  005dc	e1cd23be	 strh        r2, [sp, #0x3E]
  005e0	e1cde4b2	 strh        lr, [sp, #0x42]
  005e4	eb000000	 bl          NKSystemTimeToFileTime

; 350  : 
; 351  :         //  Read the offset from the backup regs
; 352  :         ReadBaseOffset( &s_rtc.baseOffset ); 

  005e8	e28b0028	 add         r0, r11, #0x28
  005ec	eb000000	 bl          ReadBaseOffset
  005f0		 |$LN1@OALIoCtlHa|

; 353  : 	}        
; 354  : 
; 355  : 
; 356  :     OALMSG(OAL_TIMER && OAL_FUNC, (L" OALIoCtlHalInitRTC():  RTC = %s\r\n", HWTimeToString(bcdTime)));

  005f0	e59f4070	 ldr         r4, [pc, #0x70]
  005f4	e5943440	 ldr         r3, [r4, #0x440]
  005f8	e3130b02	 tst         r3, #2, 22
  005fc	0a000006	 beq         |$LN19@OALIoCtlHa|
  00600	e3130004	 tst         r3, #4
  00604	0a000004	 beq         |$LN19@OALIoCtlHa|
  00608	e28d0048	 add         r0, sp, #0x48
  0060c	eb000000	 bl          HWTimeToString
  00610	e1a01000	 mov         r1, r0
  00614	e59f0048	 ldr         r0, [pc, #0x48]
  00618	eb000000	 bl          NKDbgPrintfW
  0061c		 |$LN19@OALIoCtlHa|

; 357  : 
; 358  : 
; 359  :     // Now update RTC state values
; 360  :     s_rtc.initialized   = TRUE;

  0061c	e3a03001	 mov         r3, #1
  00620	e58b3000	 str         r3, [r11]

; 361  :     s_rtc.baseTickCount = OEMGetTickCount();

  00624	eb000000	 bl          OEMGetTickCount
  00628	e58b0030	 str         r0, [r11, #0x30]

; 362  : 
; 363  : 
; 364  :     //  Success
; 365  :     rc = TRUE;

  0062c	e3a05001	 mov         r5, #1
  00630		 |$LN71@OALIoCtlHa|
  00630	e5943440	 ldr         r3, [r4, #0x440]
  00634		 |$cleanUp$45176|

; 366  : 
; 367  : 
; 368  : cleanUp:
; 369  :     OALMSG(OAL_TIMER && OAL_FUNC, (L"-OALIoCtlHalInitRTC() rc = %d\r\n", rc));

  00634	e3130b02	 tst         r3, #2, 22
  00638	13130004	 tstne       r3, #4
  0063c	159f001c	 ldrne       r0, [pc, #0x1C]
  00640	11a01005	 movne       r1, r5
  00644	1b000000	 blne        NKDbgPrintfW

; 370  :     return rc;

  00648	e59d0050	 ldr         r0, [sp, #0x50]
  0064c	eb000000	 bl          __security_check_cookie

; 371  : }

  00650	e1a00005	 mov         r0, r5
  00654	e28dd054	 add         sp, sp, #0x54
  00658	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  0065c	e12fff1e	 bx          lr
  00660		 |$LN75@OALIoCtlHa|
  00660		 |$LN76@OALIoCtlHa|
  00660	00000000	 DCD         |??_C@_1EA@NFLJEDAN@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAI?$AAn?$AAi?$AAt?$AAR?$AAT?$AAC?$AA?$CI?$AA?$CJ?$AA?5?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  00664		 |$LN77@OALIoCtlHa|
  00664	00000000	 DCD         |??_C@_1EG@DMPAACGN@?$AA?5?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAI?$AAn?$AAi?$AAt?$AAR?$AAT?$AAC?$AA?$CI?$AA?$CJ?$AA?3?$AA?5?$AA?5?$AAR?$AAT?$AAC?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAs@|
  00668		 |$LN78@OALIoCtlHa|
  00668	00000000	 DCD         |dpCurSettings|
  0066c		 |$LN79@OALIoCtlHa|
  0066c	00000000	 DCD         |??_C@_1EM@GDGDGGII@?$AA?5?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAI?$AAn?$AAi?$AAt?$AAR?$AAT?$AAC?$AA?$CI?$AA?$CJ?$AA?3?$AA?5?$AA?5?$AAG?$AAe?$AAt?$AAt?$AAi?$AAn?$AAg?$AA?5@|
  00670		 |$LN80@OALIoCtlHa|
  00670	00000000	 DCD         |s_rtc|
  00674		 |$LN81@OALIoCtlHa|
  00674	66666667	 DCD         0x66666667
  00678		 |$LN82@OALIoCtlHa|
  00678	00000000	 DCD         |??_C@_1FA@KEKFOIGH@?$AA?5?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAI?$AAn?$AAi?$AAt?$AAR?$AAT?$AAC?$AA?$CI?$AA?$CJ?$AA?3?$AA?5?$AA?5?$AAR?$AAe?$AAs?$AAe?$AAt?$AAt?$AAi?$AAn@|
  0067c		 |$LN83@OALIoCtlHa|
  0067c	00000000	 DCD         |??_C@_1GM@BICOJKHL@?$AA?5?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAI?$AAn?$AAi?$AAt?$AAR?$AAT?$AAC?$AA?$CI?$AA?$CJ?$AA?3?$AA?5?$AA?5?$AAC?$AAl?$AAe?$AAa?$AAn?$AA?5?$AAb?$AAo@|
  00680		 |$LN84@OALIoCtlHa|
  00680	00000000	 DCD         |??_C@_1GK@LBOBPPKI@?$AA?5?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAI?$AAn?$AAi?$AAt?$AAR?$AAT?$AAC?$AA?$CI?$AA?$CJ?$AA?3?$AA?5?$AA?5?$AAR?$AAT?$AAC?$AA?5?$AAT?$AAW?$AAL?$AA_@|
  00684		 |$LN85@OALIoCtlHa|
  00684	00000000	 DCD         |??_C@_1FO@CGLDPGNO@?$AA?5?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAI?$AAn?$AAi?$AAt?$AAR?$AAT?$AAC?$AA?$CI?$AA?$CJ?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo@|
  00688		 |$LN86@OALIoCtlHa|
  00688	00000000	 DCD         |dwOEMHighSecurity|
  0068c		 |$LN87@OALIoCtlHa|
  0068c	00000000	 DCD         |??_C@_1DA@GMIOKMIL@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAI?$AAn?$AAi?$AAt?$AAR?$AAT?$AAC?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  00690		 |$LN88@OALIoCtlHa|
  00690	00000000	 DCD         |__security_cookie|
  00694		 |$M45672|

			 ENDP  ; |OALIoCtlHalInitRTC|

	EXPORT	|__$ArrayPad$| [ DATA ]
	EXPORT	|OALIoCtlHalRtcTime|
	EXPORT	|??_C@_1DA@PEAOFAFN@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAR?$AAt?$AAc?$AAT?$AAi?$AAm?$AAe?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|LeaveCriticalSection|
	IMPORT	|EnterCriticalSection|
; File c:\wince600\platform\common\src\soc\common_ti_v1\triton\inc\twl.h

  00000			 AREA	 |.pdata|, PDATA
|$T45743| DCD	|$LN23@OALIoCtlHa@2|
	DCD	0xc0008102

  00000			 AREA	 |.xdata|, DATA
|$T45739| DCD	0xffffffd8

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DA@PEAOFAFN@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAR?$AAt?$AAc?$AAT?$AAi?$AAm?$AAe?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "I", 0x0, "o", 0x0, "C"
	DCB	0x0, "t", 0x0, "l", 0x0, "H", 0x0, "a", 0x0, "l", 0x0, "R"
	DCB	0x0, "t", 0x0, "c", 0x0, "T", 0x0, "i", 0x0, "m", 0x0, "e"
	DCB	0x0, "(", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\tps659xx\oalrtc\rtc.c

  00000			 AREA	 |.text|, CODE, ARM

  00000	00000000	 DCD         |__GSHandlerCheck|
  00004	00000000	 DCD         |$T45739|

  00008		 |OALIoCtlHalRtcTime| PROC

; 564  : {

  00008		 |$LN23@OALIoCtlHa@2|
  00008	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  0000c	e24dd024	 sub         sp, sp, #0x24
  00010		 |$M45740|
  00010	e59f31f0	 ldr         r3, [pc, #0x1F0]
  00014	e5933000	 ldr         r3, [r3]
  00018	e58d3020	 str         r3, [sp, #0x20]

; 565  :     SYSTEMTIME  baseSystemTime;
; 566  :     UCHAR       status;
; 567  :     UCHAR       bcdTime[6];
; 568  : 
; 569  :     UNREFERENCED_PARAMETER(pOutSize);
; 570  :     UNREFERENCED_PARAMETER(outSize);
; 571  :     UNREFERENCED_PARAMETER(pOutBuffer);
; 572  :     UNREFERENCED_PARAMETER(inSize);
; 573  :     UNREFERENCED_PARAMETER(pInBuffer);
; 574  :     UNREFERENCED_PARAMETER(code);
; 575  : 
; 576  :     OALMSG(OAL_TIMER && OAL_FUNC, (L"+OALIoCtlHalRtcTime()\r\n"));

  0001c	e59f31e0	 ldr         r3, [pc, #0x1E0]
  00020	e5933440	 ldr         r3, [r3, #0x440]
  00024	e3130b02	 tst         r3, #2, 22
  00028	13130004	 tstne       r3, #4
  0002c	159f01cc	 ldrne       r0, [pc, #0x1CC]
  00030	1b000000	 blne        NKDbgPrintfW

; 577  : 
; 578  :     //  The RTC in Triton2 is set to periodically sync with the kernel time
; 579  :     //  to ensure there is no clock drift.  When a sync event is triggered,
; 580  :     //  the T2 RTC is used to set the base time in the kernel.
; 581  : 
; 582  :     EnterCriticalSection(&s_rtc.cs);

  00034	e59fa1c0	 ldr         r10, [pc, #0x1C0]
  00038	e28a0004	 add         r0, r10, #4
  0003c	eb000000	 bl          EnterCriticalSection

; 583  : 
; 584  :     //  Set get time flag            
; 585  :     TWLReadByteReg(s_rtc.hTWL, TWL_RTC_CTRL_REG, &status);

  00040	e59a0018	 ldr         r0, [r10, #0x18]
  00044	e3a04803	 mov         r4, #3, 16
  00048	e3841029	 orr         r1, r4, #0x29
  0004c	e3a03001	 mov         r3, #1
  00050	e28d2000	 add         r2, sp, #0
  00054	eb000000	 bl          TWLReadRegs

; 586  : 
; 587  :     status |= TWL_RTC_CTRL_RUN | TWL_RTC_CTRL_GET_TIME;

  00058	e5dd3000	 ldrb        r3, [sp]

; 588  :     TWLWriteByteReg(s_rtc.hTWL, TWL_RTC_CTRL_REG, status);

  0005c	e59a0018	 ldr         r0, [r10, #0x18]
  00060	e28d2004	 add         r2, sp, #4
  00064	e3833041	 orr         r3, r3, #0x41
  00068	e5cd3000	 strb        r3, [sp]
  0006c	e5cd3004	 strb        r3, [sp, #4]
  00070	e3a03001	 mov         r3, #1
  00074	e3841029	 orr         r1, r4, #0x29
  00078	eb000000	 bl          TWLWriteRegs

; 589  : 
; 590  :     //  Get date and time from RTC
; 591  :     TWLReadByteReg(s_rtc.hTWL, TWL_YEARS_REG, &bcdTime[5]);

  0007c	e59a0018	 ldr         r0, [r10, #0x18]
  00080	e3a04803	 mov         r4, #3, 16
  00084	e3841021	 orr         r1, r4, #0x21
  00088	e3a03001	 mov         r3, #1
  0008c	e28d201d	 add         r2, sp, #0x1D
  00090	eb000000	 bl          TWLReadRegs

; 592  :     TWLReadByteReg(s_rtc.hTWL, TWL_MONTHS_REG, &bcdTime[4]);

  00094	e59a0018	 ldr         r0, [r10, #0x18]
  00098	e3a03001	 mov         r3, #1
  0009c	e28d201c	 add         r2, sp, #0x1C
  000a0	e3841020	 orr         r1, r4, #0x20
  000a4	eb000000	 bl          TWLReadRegs

; 593  :     TWLReadByteReg(s_rtc.hTWL, TWL_DAYS_REG, &bcdTime[3]);

  000a8	e59a0018	 ldr         r0, [r10, #0x18]
  000ac	e3a03001	 mov         r3, #1
  000b0	e28d201b	 add         r2, sp, #0x1B
  000b4	e384101f	 orr         r1, r4, #0x1F
  000b8	eb000000	 bl          TWLReadRegs

; 594  :     TWLReadByteReg(s_rtc.hTWL, TWL_HOURS_REG, &bcdTime[2]);

  000bc	e59a0018	 ldr         r0, [r10, #0x18]
  000c0	e3a03001	 mov         r3, #1
  000c4	e28d201a	 add         r2, sp, #0x1A
  000c8	e384101e	 orr         r1, r4, #0x1E
  000cc	eb000000	 bl          TWLReadRegs

; 595  :     TWLReadByteReg(s_rtc.hTWL, TWL_MINUTES_REG, &bcdTime[1]);

  000d0	e59a0018	 ldr         r0, [r10, #0x18]
  000d4	e3a03001	 mov         r3, #1
  000d8	e28d2019	 add         r2, sp, #0x19
  000dc	e384101d	 orr         r1, r4, #0x1D
  000e0	eb000000	 bl          TWLReadRegs

; 596  :     TWLReadByteReg(s_rtc.hTWL, TWL_SECONDS_REG, &bcdTime[0]);

  000e4	e59a0018	 ldr         r0, [r10, #0x18]
  000e8	e3a03001	 mov         r3, #1
  000ec	e28d2018	 add         r2, sp, #0x18
  000f0	e384101c	 orr         r1, r4, #0x1C
  000f4	eb000000	 bl          TWLReadRegs

; 597  : 
; 598  :     //  Convert current RTC date/time to FILETIME
; 599  :     baseSystemTime.wYear    = BCD2BIN(bcdTime[5]) + RTC_BASE_YEAR_MIN;

  000f8	e5dd901d	 ldrb        r9, [sp, #0x1D]

; 600  :     baseSystemTime.wMonth   = BCD2BIN(bcdTime[4]);

  000fc	e5dd801c	 ldrb        r8, [sp, #0x1C]

; 601  :     baseSystemTime.wDay     = BCD2BIN(bcdTime[3]);

  00100	e5dd001b	 ldrb        r0, [sp, #0x1B]

; 602  :     baseSystemTime.wHour    = BCD2BIN(bcdTime[2]);

  00104	e5dd701a	 ldrb        r7, [sp, #0x1A]
  00108	e1a03229	 mov         r3, r9, lsr #4
  0010c	e28330c8	 add         r3, r3, #0xC8
  00110	e1a06803	 mov         r6, r3, lsl #16
  00114	e1a03227	 mov         r3, r7, lsr #4
  00118	e1a02228	 mov         r2, r8, lsr #4
  0011c	e1a01220	 mov         r1, r0, lsr #4
  00120	e1a0e803	 mov         lr, r3, lsl #16
  00124	e1a05802	 mov         r5, r2, lsl #16
  00128	e1a04801	 mov         r4, r1, lsl #16
  0012c	e1a0e82e	 mov         lr, lr, lsr #16
  00130	e1a06826	 mov         r6, r6, lsr #16
  00134	e1a05825	 mov         r5, r5, lsr #16
  00138	e1a04824	 mov         r4, r4, lsr #16
  0013c	e3a0b00a	 mov         r11, #0xA
  00140	e209300f	 and         r3, r9, #0xF
  00144	e208200f	 and         r2, r8, #0xF
  00148	e200100f	 and         r1, r0, #0xF
  0014c	e3a0000a	 mov         r0, #0xA
  00150	e0203096	 mla         r0, r6, r0, r3
  00154	e3a0300a	 mov         r3, #0xA
  00158	e0222395	 mla         r2, r5, r3, r2
  0015c	e3a0300a	 mov         r3, #0xA
  00160	e0211394	 mla         r1, r4, r3, r1
  00164	e207300f	 and         r3, r7, #0xF

; 603  :     baseSystemTime.wMinute  = BCD2BIN(bcdTime[1]);

  00168	e5dd4019	 ldrb        r4, [sp, #0x19]
  0016c	e0253b9e	 mla         r5, lr, r11, r3
  00170	e1cd20ba	 strh        r2, [sp, #0xA]

; 604  :     baseSystemTime.wSecond  = BCD2BIN(bcdTime[0]);

  00174	e5dde018	 ldrb        lr, [sp, #0x18]
  00178	e1a03224	 mov         r3, r4, lsr #4
  0017c	e1a0222e	 mov         r2, lr, lsr #4
  00180	e1cd00b8	 strh        r0, [sp, #8]
  00184	e1cd10be	 strh        r1, [sp, #0xE]
  00188	e1a00802	 mov         r0, r2, lsl #16
  0018c	e1a01803	 mov         r1, r3, lsl #16
  00190	e1a00820	 mov         r0, r0, lsr #16
  00194	e1a01821	 mov         r1, r1, lsr #16
  00198	e3a0600a	 mov         r6, #0xA
  0019c	e3a0700a	 mov         r7, #0xA
  001a0	e204300f	 and         r3, r4, #0xF
  001a4	e20e200f	 and         r2, lr, #0xF
  001a8	e0222790	 mla         r2, r0, r7, r2
  001ac	e0233691	 mla         r3, r1, r6, r3

; 605  :     baseSystemTime.wMilliseconds = 0;

  001b0	e3a0e000	 mov         lr, #0

; 606  : 
; 607  :     //  Update the base filetime to match RTC
; 608  :     NKSystemTimeToFileTime(&baseSystemTime, (FILETIME*)&s_rtc.baseFiletime);

  001b4	e28a1020	 add         r1, r10, #0x20
  001b8	e28d0008	 add         r0, sp, #8
  001bc	e1cd21b4	 strh        r2, [sp, #0x14]
  001c0	e1cd31b2	 strh        r3, [sp, #0x12]
  001c4	e1cd51b0	 strh        r5, [sp, #0x10]
  001c8	e1cde1b6	 strh        lr, [sp, #0x16]
  001cc	eb000000	 bl          NKSystemTimeToFileTime

; 609  : 
; 610  :     //  Reset the tick count
; 611  :     s_rtc.baseTickCount = OEMGetTickCount();

  001d0	eb000000	 bl          OEMGetTickCount
  001d4	e1a03000	 mov         r3, r0

; 612  :     
; 613  :     LeaveCriticalSection(&s_rtc.cs);

  001d8	e28a0004	 add         r0, r10, #4
  001dc	e58a3030	 str         r3, [r10, #0x30]
  001e0	eb000000	 bl          LeaveCriticalSection

; 614  : 
; 615  :     return TRUE;

  001e4	e59d0020	 ldr         r0, [sp, #0x20]
  001e8	eb000000	 bl          __security_check_cookie
  001ec	e3a00001	 mov         r0, #1

; 616  : }

  001f0	e28dd024	 add         sp, sp, #0x24
  001f4	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  001f8	e12fff1e	 bx          lr
  001fc		 |$LN24@OALIoCtlHa@2|
  001fc		 |$LN25@OALIoCtlHa@2|
  001fc	00000000	 DCD         |s_rtc|
  00200		 |$LN26@OALIoCtlHa@2|
  00200	00000000	 DCD         |??_C@_1DA@PEAOFAFN@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAR?$AAt?$AAc?$AAT?$AAi?$AAm?$AAe?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  00204		 |$LN27@OALIoCtlHa@2|
  00204	00000000	 DCD         |dpCurSettings|
  00208		 |$LN28@OALIoCtlHa@2|
  00208	00000000	 DCD         |__security_cookie|
  0020c		 |$M45741|

			 ENDP  ; |OALIoCtlHalRtcTime|

	EXPORT	|OALIoCtlHalRtcAlarm|
	EXPORT	|??_C@_1DC@KHBDMOPE@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAR?$AAt?$AAc?$AAA?$AAl?$AAa?$AAr?$AAm?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|NKSetInterruptEvent|

  00000			 AREA	 |.pdata|, PDATA
|$T45760| DCD	|$LN7@OALIoCtlHa@3|
	DCD	0x40000e01

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DC@KHBDMOPE@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAR?$AAt?$AAc?$AAA?$AAl?$AAa?$AAr?$AAm?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "I", 0x0, "o", 0x0, "C"
	DCB	0x0, "t", 0x0, "l", 0x0, "H", 0x0, "a", 0x0, "l", 0x0, "R"
	DCB	0x0, "t", 0x0, "c", 0x0, "A", 0x0, "l", 0x0, "a", 0x0, "r"
	DCB	0x0, "m", 0x0, "(", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALIoCtlHalRtcAlarm| PROC

; 634  : {

  00000		 |$LN7@OALIoCtlHa@3|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M45757|

; 635  :     OALMSG(OAL_TIMER && OAL_FUNC, (L"+OALIoCtlHalRtcAlarm()\r\n"));

  00004	e59f3028	 ldr         r3, [pc, #0x28]
  00008	e5933440	 ldr         r3, [r3, #0x440]
  0000c	e3130b02	 tst         r3, #2, 22
  00010	13130004	 tstne       r3, #4
  00014	159f0014	 ldrne       r0, [pc, #0x14]
  00018	1b000000	 blne        NKDbgPrintfW

; 636  : 
; 637  :     UNREFERENCED_PARAMETER(pOutSize);
; 638  :     UNREFERENCED_PARAMETER(outSize);
; 639  :     UNREFERENCED_PARAMETER(pOutBuffer);
; 640  :     UNREFERENCED_PARAMETER(inSize);
; 641  :     UNREFERENCED_PARAMETER(pInBuffer);
; 642  :     UNREFERENCED_PARAMETER(code);
; 643  : 
; 644  :     //  Alarm has been triggered by RTC driver.
; 645  :     NKSetInterruptEvent(SYSINTR_RTC_ALARM);

  0001c	e3a0000d	 mov         r0, #0xD
  00020	eb000000	 bl          NKSetInterruptEvent

; 646  :     return TRUE;

  00024	e3a00001	 mov         r0, #1

; 647  : }

  00028	e49de004	 ldr         lr, [sp], #4
  0002c	e12fff1e	 bx          lr
  00030		 |$LN8@OALIoCtlHa@3|
  00030		 |$LN9@OALIoCtlHa@3|
  00030	00000000	 DCD         |??_C@_1DC@KHBDMOPE@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAR?$AAt?$AAc?$AAA?$AAl?$AAa?$AAr?$AAm?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  00034		 |$LN10@OALIoCtlHa@3|
  00034	00000000	 DCD         |dpCurSettings|
  00038		 |$M45758|

			 ENDP  ; |OALIoCtlHalRtcAlarm|

	EXPORT	|FiletimeToHWTime|
	IMPORT	|NKFileTimeToSystemTime|

  00000			 AREA	 |.pdata|, PDATA
|$T45774| DCD	|$LN7@FiletimeTo|
	DCD	0x40006a04
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |FiletimeToHWTime| PROC

; 656  : {

  00000		 |$LN7@FiletimeTo|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d000f	 stmdb       sp!, {r0 - r3}
  00008	e92d5ff0	 stmdb       sp!, {r4 - r12, lr}
  0000c	e24dd044	 sub         sp, sp, #0x44
  00010		 |$M45771|
  00010	e58d2018	 str         r2, [sp, #0x18]

; 657  :     SYSTEMTIME systemTime;
; 658  : 
; 659  :     //  Convert filetime to RTC HW time format
; 660  :     NKFileTimeToSystemTime((FILETIME*)&fileTime, &systemTime);

  00014	e28d1034	 add         r1, sp, #0x34
  00018	e28d006c	 add         r0, sp, #0x6C
  0001c	eb000000	 bl          NKFileTimeToSystemTime

; 661  : 
; 662  :     //  Limit RTC year range
; 663  :     if( systemTime.wYear < RTC_BASE_YEAR_MIN )

  00020	e1dd43b4	 ldrh        r4, [sp, #0x34]

; 664  :         systemTime.wYear = RTC_BASE_YEAR_MIN;
; 665  : 
; 666  :     if( systemTime.wYear > RTC_BASE_YEAR_MAX )

  00024	e3a03b02	 mov         r3, #2, 22
  00028	e3833033	 orr         r3, r3, #0x33
  0002c	e3540e7d	 cmp         r4, #0x7D, 28
  00030	33a04e7d	 movcc       r4, #0x7D, 28
  00034	e1540003	 cmp         r4, r3

; 667  :         systemTime.wYear = RTC_BASE_YEAR_MAX;

  00038	81a04003	 movhi       r4, r3

; 668  : 
; 669  :     bcdTime[5] = BIN2BCD(systemTime.wYear - RTC_BASE_YEAR_MIN);
; 670  :     bcdTime[4] = BIN2BCD(systemTime.wMonth);

  0003c	e1dd33b6	 ldrh        r3, [sp, #0x36]

; 671  :     bcdTime[3] = BIN2BCD(systemTime.wDay);
; 672  :     bcdTime[2] = BIN2BCD(systemTime.wHour);
; 673  :     bcdTime[1] = BIN2BCD(systemTime.wMinute);
; 674  :     bcdTime[0] = BIN2BCD(systemTime.wSecond);

  00040	e2844030	 add         r4, r4, #0x30
  00044	e1dd23ba	 ldrh        r2, [sp, #0x3A]
  00048	e20460ff	 and         r6, r4, #0xFF
  0004c	e59f4150	 ldr         r4, [pc, #0x150]
  00050	e20350ff	 and         r5, r3, #0xFF
  00054	e1dd13bc	 ldrh        r1, [sp, #0x3C]
  00058	e20270ff	 and         r7, r2, #0xFF
  0005c	e0c32495	 smull       r2, r3, r5, r4
  00060	e1dd03be	 ldrh        r0, [sp, #0x3E]
  00064	e20180ff	 and         r8, r1, #0xFF
  00068	e1dde4b0	 ldrh        lr, [sp, #0x40]
  0006c	e58d2020	 str         r2, [sp, #0x20]
  00070	e0c21497	 smull       r1, r2, r7, r4
  00074	e20090ff	 and         r9, r0, #0xFF
  00078	e20ea0ff	 and         r10, lr, #0xFF
  0007c	e58d5004	 str         r5, [sp, #4]
  00080	e58d1024	 str         r1, [sp, #0x24]
  00084	e0c10498	 smull       r0, r1, r8, r4
  00088	e1a03143	 mov         r3, r3, asr #2
  0008c	e58d7008	 str         r7, [sp, #8]
  00090	e1a02142	 mov         r2, r2, asr #2
  00094	e58d0028	 str         r0, [sp, #0x28]
  00098	e0c0e499	 smull       lr, r0, r9, r4
  0009c	e58d6000	 str         r6, [sp]
  000a0	e58d800c	 str         r8, [sp, #0xC]
  000a4	e1a01141	 mov         r1, r1, asr #2
  000a8	e58de02c	 str         lr, [sp, #0x2C]
  000ac	e0ce549a	 smull       r5, lr, r10, r4
  000b0	e0c4b496	 smull       r11, r4, r6, r4
  000b4	e0826fa2	 add         r6, r2, r2, lsr #31
  000b8	e0862106	 add         r2, r6, r6, lsl #2
  000bc	e58d5030	 str         r5, [sp, #0x30]
  000c0	e0835fa3	 add         r5, r3, r3, lsr #31
  000c4	e0853105	 add         r3, r5, r5, lsl #2
  000c8	e58db01c	 str         r11, [sp, #0x1C]
  000cc	e59db004	 ldr         r11, [sp, #4]
  000d0	e0817fa1	 add         r7, r1, r1, lsr #31
  000d4	e04b3083	 sub         r3, r11, r3, lsl #1
  000d8	e59db008	 ldr         r11, [sp, #8]
  000dc	e58d9010	 str         r9, [sp, #0x10]
  000e0	e0871107	 add         r1, r7, r7, lsl #2
  000e4	e04b2082	 sub         r2, r11, r2, lsl #1
  000e8	e59db00c	 ldr         r11, [sp, #0xC]
  000ec	e1a00140	 mov         r0, r0, asr #2
  000f0	e0808fa0	 add         r8, r0, r0, lsr #31
  000f4	e04b1081	 sub         r1, r11, r1, lsl #1
  000f8	e59db010	 ldr         r11, [sp, #0x10]
  000fc	e58da014	 str         r10, [sp, #0x14]
  00100	e0880108	 add         r0, r8, r8, lsl #2
  00104	e1a0e14e	 mov         lr, lr, asr #2
  00108	e04b0080	 sub         r0, r11, r0, lsl #1
  0010c	e59db014	 ldr         r11, [sp, #0x14]
  00110	e08e9fae	 add         r9, lr, lr, lsr #31
  00114	e089e109	 add         lr, r9, r9, lsl #2
  00118	e1a04144	 mov         r4, r4, asr #2
  0011c	e04be08e	 sub         lr, r11, lr, lsl #1
  00120	e59db000	 ldr         r11, [sp]
  00124	e084afa4	 add         r10, r4, r4, lsr #31
  00128	e1833205	 orr         r3, r3, r5, lsl #4
  0012c	e59d5018	 ldr         r5, [sp, #0x18]
  00130	e08a410a	 add         r4, r10, r10, lsl #2
  00134	e04b4084	 sub         r4, r11, r4, lsl #1
  00138	e184420a	 orr         r4, r4, r10, lsl #4
  0013c	e1822206	 orr         r2, r2, r6, lsl #4
  00140	e1811207	 orr         r1, r1, r7, lsl #4
  00144	e1800208	 orr         r0, r0, r8, lsl #4
  00148	e18ee209	 orr         lr, lr, r9, lsl #4
  0014c	e5c53004	 strb        r3, [r5, #4]
  00150	e59d3000	 ldr         r3, [sp]
  00154	e59d3020	 ldr         r3, [sp, #0x20]
  00158	e5c52003	 strb        r2, [r5, #3]
  0015c	e59d2004	 ldr         r2, [sp, #4]
  00160	e59d3024	 ldr         r3, [sp, #0x24]
  00164	e59d2008	 ldr         r2, [sp, #8]
  00168	e59d3028	 ldr         r3, [sp, #0x28]
  0016c	e59d200c	 ldr         r2, [sp, #0xC]
  00170	e59d302c	 ldr         r3, [sp, #0x2C]
  00174	e59d2010	 ldr         r2, [sp, #0x10]
  00178	e59d3030	 ldr         r3, [sp, #0x30]
  0017c	e59d2014	 ldr         r2, [sp, #0x14]
  00180	e59db01c	 ldr         r11, [sp, #0x1C]
  00184	e5c50001	 strb        r0, [r5, #1]
  00188	e5c51002	 strb        r1, [r5, #2]
  0018c	e5c5e000	 strb        lr, [r5]
  00190	e5c54005	 strb        r4, [r5, #5]

; 675  :         
; 676  :     return TRUE;

  00194	e3a00001	 mov         r0, #1

; 677  : }

  00198	e28dd044	 add         sp, sp, #0x44
  0019c	e89d6ff0	 ldmia       sp, {r4 - r11, sp, lr}
  001a0	e12fff1e	 bx          lr
  001a4		 |$LN8@FiletimeTo|
  001a4		 |$LN9@FiletimeTo|
  001a4	66666667	 DCD         0x66666667
  001a8		 |$M45772|

			 ENDP  ; |FiletimeToHWTime|

	EXPORT	|OEMGetRealTime|
	EXPORT	|??_C@_1DC@DJKOOINA@?$AA?9?$AAO?$AAE?$AAM?$AAG?$AAe?$AAt?$AAR?$AAe?$AAa?$AAl?$AAT?$AAi?$AAm?$AAe?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAs?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CI@OLGNILCF@?$AA?$CL?$AAO?$AAE?$AAM?$AAG?$AAe?$AAt?$AAR?$AAe?$AAa?$AAl?$AAT?$AAi?$AAm?$AAe?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|g_ResumeRTC|

  00000			 AREA	 |.pdata|, PDATA
|$T45790| DCD	|$LN12@OEMGetReal|
	DCD	0x40005202

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DC@DJKOOINA@?$AA?9?$AAO?$AAE?$AAM?$AAG?$AAe?$AAt?$AAR?$AAe?$AAa?$AAl?$AAT?$AAi?$AAm?$AAe?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAs?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "O", 0x0, "E", 0x0, "M", 0x0, "G", 0x0, "e", 0x0, "t"
	DCB	0x0, "R", 0x0, "e", 0x0, "a", 0x0, "l", 0x0, "T", 0x0, "i"
	DCB	0x0, "m", 0x0, "e", 0x0, "(", 0x0, ")", 0x0, " ", 0x0, "="
	DCB	0x0, " ", 0x0, "%", 0x0, "s", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@OLGNILCF@?$AA?$CL?$AAO?$AAE?$AAM?$AAG?$AAe?$AAt?$AAR?$AAe?$AAa?$AAl?$AAT?$AAi?$AAm?$AAe?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "O", 0x0, "E", 0x0, "M", 0x0, "G", 0x0, "e", 0x0, "t"
	DCB	0x0, "R", 0x0, "e", 0x0, "a", 0x0, "l", 0x0, "T", 0x0, "i"
	DCB	0x0, "m", 0x0, "e", 0x0, "(", 0x0, ")", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OEMGetRealTime| PROC

; 385  : {

  00000		 |$LN12@OEMGetReal|
  00000	e92d41f0	 stmdb       sp!, {r4 - r8, lr}
  00004	e24dd010	 sub         sp, sp, #0x10
  00008		 |$M45787|
  00008	e1a05000	 mov         r5, r0

; 386  :     DWORD       delta;
; 387  :     ULONGLONG   time;
; 388  : 
; 389  :     OALMSG(OAL_TIMER && OAL_FUNC, (L"+OEMGetRealTime()\r\n"));

  0000c	e59f8130	 ldr         r8, [pc, #0x130]
  00010	e5983440	 ldr         r3, [r8, #0x440]
  00014	e3130b02	 tst         r3, #2, 22
  00018	13130004	 tstne       r3, #4
  0001c	159f011c	 ldrne       r0, [pc, #0x11C]
  00020	1b000000	 blne        NKDbgPrintfW

; 390  : 
; 391  :     if (!s_rtc.initialized)

  00024	e59f7110	 ldr         r7, [pc, #0x110]
  00028	e5973000	 ldr         r3, [r7]
  0002c	e3530000	 cmp         r3, #0
  00030	1a00000b	 bne         |$LN3@OEMGetReal|

; 392  :         {
; 393  :         // Return default time if RTC isn't initialized
; 394  :         pSystemTime->wYear   = RTC_BASE_YEAR_MIN;

  00034	e3a03e7d	 mov         r3, #0x7D, 28
  00038	e1c530b0	 strh        r3, [r5]

; 395  :         pSystemTime->wMonth  = 1;

  0003c	e3a03001	 mov         r3, #1

; 396  :         pSystemTime->wDay    = 1;
; 397  :         pSystemTime->wHour   = 0;

  00040	e3a06000	 mov         r6, #0
  00044	e1c530b2	 strh        r3, [r5, #2]
  00048	e1c530b6	 strh        r3, [r5, #6]
  0004c	e1c560b8	 strh        r6, [r5, #8]

; 398  :         pSystemTime->wMinute = 0;

  00050	e1c560ba	 strh        r6, [r5, #0xA]

; 399  :         pSystemTime->wSecond = 0;

  00054	e1c560bc	 strh        r6, [r5, #0xC]

; 400  :         pSystemTime->wDayOfWeek    = 0;

  00058	e1c560b4	 strh        r6, [r5, #4]

; 401  :         pSystemTime->wMilliseconds = 0;

  0005c	e1c560be	 strh        r6, [r5, #0xE]

; 402  :         }
; 403  :     else

  00060	ea000025	 b           |$LN2@OEMGetReal|
  00064		 |$LN3@OEMGetReal|

; 404  :         {
; 405  :         EnterCriticalSection(&s_rtc.cs);

  00064	e2870004	 add         r0, r7, #4
  00068	eb000000	 bl          EnterCriticalSection

; 406  :         if (g_ResumeRTC)

  0006c	e59f40c4	 ldr         r4, [pc, #0xC4]
  00070	e3a06000	 mov         r6, #0
  00074	e5943000	 ldr         r3, [r4]
  00078	e3530000	 cmp         r3, #0
  0007c	0a000008	 beq         |$LN1@OEMGetReal|

; 407  :     		{
; 408  :             // suspend/resume occured, sync RTC
; 409  :             OALIoCtlHalRtcTime(0, NULL, 0, NULL, 0, NULL);

  00080	e3a03000	 mov         r3, #0
  00084	e3a02000	 mov         r2, #0
  00088	e3a01000	 mov         r1, #0
  0008c	e3a00000	 mov         r0, #0
  00090	e58d6004	 str         r6, [sp, #4]
  00094	e58d6000	 str         r6, [sp]
  00098	eb000000	 bl          OALIoCtlHalRtcTime

; 410  :             g_ResumeRTC = FALSE;

  0009c	e3a03000	 mov         r3, #0
  000a0	e5843000	 str         r3, [r4]
  000a4		 |$LN1@OEMGetReal|

; 411  : 	    	}
; 412  :         delta = OEMGetTickCount() - s_rtc.baseTickCount;

  000a4	eb000000	 bl          OEMGetTickCount
  000a8	e5973030	 ldr         r3, [r7, #0x30]
  000ac	e3a01c27	 mov         r1, #0x27, 24

; 413  :         time = s_rtc.baseFiletime + s_rtc.baseOffset + ((ULONGLONG)delta) * 10000;

  000b0	e597e02c	 ldr         lr, [r7, #0x2C]
  000b4	e0402003	 sub         r2, r0, r3
  000b8	e3813010	 orr         r3, r1, #0x10
  000bc	e0841392	 umull       r1, r4, r2, r3
  000c0	e5973028	 ldr         r3, [r7, #0x28]
  000c4	e5970020	 ldr         r0, [r7, #0x20]
  000c8	e0912003	 adds        r2, r1, r3
  000cc	e5971024	 ldr         r1, [r7, #0x24]
  000d0	e0a4300e	 adc         r3, r4, lr
  000d4	e0922000	 adds        r2, r2, r0
  000d8	e0a33001	 adc         r3, r3, r1

; 414  :         NKFileTimeToSystemTime((FILETIME*)&time, pSystemTime);

  000dc	e1a01005	 mov         r1, r5
  000e0	e28d0008	 add         r0, sp, #8
  000e4	e58d300c	 str         r3, [sp, #0xC]
  000e8	e58d2008	 str         r2, [sp, #8]
  000ec	eb000000	 bl          NKFileTimeToSystemTime

; 415  :         pSystemTime->wMilliseconds = 0;
; 416  :         LeaveCriticalSection(&s_rtc.cs);

  000f0	e2870004	 add         r0, r7, #4
  000f4	e1c560be	 strh        r6, [r5, #0xE]
  000f8	eb000000	 bl          LeaveCriticalSection
  000fc		 |$LN2@OEMGetReal|

; 417  :         }
; 418  : 
; 419  :     OALMSG(OAL_TIMER && OAL_FUNC, (L"-OEMGetRealTime() = %s\r\n", SystemTimeToString(pSystemTime)));

  000fc	e5983440	 ldr         r3, [r8, #0x440]
  00100	e3130b02	 tst         r3, #2, 22
  00104	0a000006	 beq         |$LN8@OEMGetReal|
  00108	e3130004	 tst         r3, #4
  0010c	0a000004	 beq         |$LN8@OEMGetReal|
  00110	e1a00005	 mov         r0, r5
  00114	eb000000	 bl          SystemTimeToString
  00118	e1a01000	 mov         r1, r0
  0011c	e59f0010	 ldr         r0, [pc, #0x10]
  00120	eb000000	 bl          NKDbgPrintfW
  00124		 |$LN8@OEMGetReal|

; 420  : 
; 421  :     return TRUE;

  00124	e3a00001	 mov         r0, #1

; 422  : }

  00128	e28dd010	 add         sp, sp, #0x10
  0012c	e8bd41f0	 ldmia       sp!, {r4 - r8, lr}
  00130	e12fff1e	 bx          lr
  00134		 |$LN13@OEMGetReal|
  00134		 |$LN14@OEMGetReal|
  00134	00000000	 DCD         |??_C@_1DC@DJKOOINA@?$AA?9?$AAO?$AAE?$AAM?$AAG?$AAe?$AAt?$AAR?$AAe?$AAa?$AAl?$AAT?$AAi?$AAm?$AAe?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAs?$AA?$AN?$AA?6?$AA?$AA@|
  00138		 |$LN15@OEMGetReal|
  00138	00000000	 DCD         |g_ResumeRTC|
  0013c		 |$LN16@OEMGetReal|
  0013c	00000000	 DCD         |s_rtc|
  00140		 |$LN17@OEMGetReal|
  00140	00000000	 DCD         |??_C@_1CI@OLGNILCF@?$AA?$CL?$AAO?$AAE?$AAM?$AAG?$AAe?$AAt?$AAR?$AAe?$AAa?$AAl?$AAT?$AAi?$AAm?$AAe?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  00144		 |$LN18@OEMGetReal|
  00144	00000000	 DCD         |dpCurSettings|
  00148		 |$M45788|

			 ENDP  ; |OEMGetRealTime|

	EXPORT	|OEMSetRealTime|
	EXPORT	|??_C@_1CE@NIIADMMF@?$AA?9?$AAO?$AAE?$AAM?$AAS?$AAe?$AAt?$AAR?$AAe?$AAa?$AAl?$AAT?$AAi?$AAm?$AAe?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CM@NEGNBBJ@?$AA?$CL?$AAO?$AAE?$AAM?$AAS?$AAe?$AAt?$AAR?$AAe?$AAa?$AAl?$AAT?$AAi?$AAm?$AAe?$AA?$CI?$AA?$CF?$AAs?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T45811| DCD	|$LN12@OEMSetReal|
	DCD	0x40005102

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CE@NIIADMMF@?$AA?9?$AAO?$AAE?$AAM?$AAS?$AAe?$AAt?$AAR?$AAe?$AAa?$AAl?$AAT?$AAi?$AAm?$AAe?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "O", 0x0, "E", 0x0, "M", 0x0, "S", 0x0, "e", 0x0, "t"
	DCB	0x0, "R", 0x0, "e", 0x0, "a", 0x0, "l", 0x0, "T", 0x0, "i"
	DCB	0x0, "m", 0x0, "e", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CM@NEGNBBJ@?$AA?$CL?$AAO?$AAE?$AAM?$AAS?$AAe?$AAt?$AAR?$AAe?$AAa?$AAl?$AAT?$AAi?$AAm?$AAe?$AA?$CI?$AA?$CF?$AAs?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "O", 0x0, "E", 0x0, "M", 0x0, "S", 0x0, "e", 0x0, "t"
	DCB	0x0, "R", 0x0, "e", 0x0, "a", 0x0, "l", 0x0, "T", 0x0, "i"
	DCB	0x0, "m", 0x0, "e", 0x0, "(", 0x0, "%", 0x0, "s", 0x0, ")"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OEMSetRealTime| PROC

; 436  : {

  00000		 |$LN12@OEMSetReal|
  00000	e92d43f0	 stmdb       sp!, {r4 - r9, lr}
  00004	e24dd010	 sub         sp, sp, #0x10
  00008		 |$M45808|
  00008	e1a04000	 mov         r4, r0

; 437  :     BOOL        rc = FALSE;
; 438  :     ULONGLONG   fileTime;
; 439  :     DWORD       tickDelta;
; 440  : 
; 441  :     OALMSG(OAL_TIMER && OAL_FUNC, (L"+OEMSetRealTime(%s)\r\n", SystemTimeToString(pSystemTime)));

  0000c	e59f612c	 ldr         r6, [pc, #0x12C]
  00010	e3a08000	 mov         r8, #0
  00014	e5962440	 ldr         r2, [r6, #0x440]
  00018	e3120b02	 tst         r2, #2, 22
  0001c	0a000006	 beq         |$LN6@OEMSetReal|
  00020	e3120004	 tst         r2, #4
  00024	0a000004	 beq         |$LN6@OEMSetReal|
  00028	eb000000	 bl          SystemTimeToString
  0002c	e1a01000	 mov         r1, r0
  00030	e59f0104	 ldr         r0, [pc, #0x104]
  00034	eb000000	 bl          NKDbgPrintfW
  00038	e5962440	 ldr         r2, [r6, #0x440]
  0003c		 |$LN6@OEMSetReal|

; 442  : 
; 443  :     if (s_rtc.initialized)

  0003c	e59f50f4	 ldr         r5, [pc, #0xF4]
  00040	e5953000	 ldr         r3, [r5]
  00044	e3530000	 cmp         r3, #0
  00048	0a000030	 beq         |$LN3@OEMSetReal|

; 444  :         {
; 445  :         // Save time to global structure
; 446  :         EnterCriticalSection(&s_rtc.cs);

  0004c	e2850004	 add         r0, r5, #4
  00050	eb000000	 bl          EnterCriticalSection

; 447  : 
; 448  :         if (g_ResumeRTC)

  00054	e59f70d8	 ldr         r7, [pc, #0xD8]
  00058	e3a09000	 mov         r9, #0
  0005c	e5973000	 ldr         r3, [r7]
  00060	e3530000	 cmp         r3, #0
  00064	0a000008	 beq         |$LN2@OEMSetReal|

; 449  :     		{
; 450  :             OALIoCtlHalRtcTime(0, NULL, 0, NULL, 0, NULL);

  00068	e3a03000	 mov         r3, #0
  0006c	e3a02000	 mov         r2, #0
  00070	e3a01000	 mov         r1, #0
  00074	e3a00000	 mov         r0, #0
  00078	e58d9004	 str         r9, [sp, #4]
  0007c	e58d9000	 str         r9, [sp]
  00080	eb000000	 bl          OALIoCtlHalRtcTime

; 451  :             g_ResumeRTC = FALSE;

  00084	e3a03000	 mov         r3, #0
  00088	e5873000	 str         r3, [r7]
  0008c		 |$LN2@OEMSetReal|

; 452  : 	    	}
; 453  : 		
; 454  :         // Round to seconds
; 455  :         pSystemTime->wMilliseconds = 0;
; 456  : 
; 457  :         // Convert to filetime
; 458  :         if (NKSystemTimeToFileTime(pSystemTime, (FILETIME*)&fileTime))

  0008c	e28d1008	 add         r1, sp, #8
  00090	e1a00004	 mov         r0, r4
  00094	e1c490be	 strh        r9, [r4, #0xE]
  00098	eb000000	 bl          NKSystemTimeToFileTime
  0009c	e3500000	 cmp         r0, #0
  000a0	0a000017	 beq         |$LN1@OEMSetReal|

; 459  :             {
; 460  :             // Compute the tick delta (indicates the time in the RTC)
; 461  :             tickDelta = OEMGetTickCount() - s_rtc.baseTickCount;

  000a4	eb000000	 bl          OEMGetTickCount
  000a8	e5953030	 ldr         r3, [r5, #0x30]
  000ac	e3a01c27	 mov         r1, #0x27, 24

; 462  :             
; 463  :             // Update all the parameters
; 464  :             s_rtc.baseFiletime  = s_rtc.baseFiletime + ((ULONGLONG)tickDelta)*10000;
; 465  :             s_rtc.baseOffset    = fileTime - s_rtc.baseFiletime;

  000b0	e59de00c	 ldr         lr, [sp, #0xC]
  000b4	e0402003	 sub         r2, r0, r3
  000b8	e3813010	 orr         r3, r1, #0x10
  000bc	e0841392	 umull       r1, r4, r2, r3
  000c0	e5953020	 ldr         r3, [r5, #0x20]
  000c4	e59d0008	 ldr         r0, [sp, #8]
  000c8	e0932001	 adds        r2, r3, r1
  000cc	e5852020	 str         r2, [r5, #0x20]
  000d0	e5953024	 ldr         r3, [r5, #0x24]
  000d4	e0a33004	 adc         r3, r3, r4
  000d8	e0502002	 subs        r2, r0, r2
  000dc	e0ce1003	 sbc         r1, lr, r3
  000e0	e5853024	 str         r3, [r5, #0x24]
  000e4	e5852028	 str         r2, [r5, #0x28]
  000e8	e585102c	 str         r1, [r5, #0x2C]

; 466  :             s_rtc.baseTickCount = OEMGetTickCount();

  000ec	eb000000	 bl          OEMGetTickCount
  000f0	e1a03000	 mov         r3, r0

; 467  : 
; 468  :             //  Save off base offset to the backup regs
; 469  :             WriteBaseOffset( &s_rtc.baseOffset ); 

  000f4	e2850028	 add         r0, r5, #0x28
  000f8	e5853030	 str         r3, [r5, #0x30]
  000fc	eb000000	 bl          WriteBaseOffset

; 470  : 
; 471  :             // Done
; 472  :             rc = TRUE;

  00100	e3a08001	 mov         r8, #1
  00104		 |$LN1@OEMSetReal|

; 473  :             }
; 474  : 
; 475  :         LeaveCriticalSection(&s_rtc.cs);

  00104	e2850004	 add         r0, r5, #4
  00108	eb000000	 bl          LeaveCriticalSection
  0010c	e5962440	 ldr         r2, [r6, #0x440]
  00110		 |$LN3@OEMSetReal|

; 476  :         }
; 477  :     
; 478  :     OALMSG(OAL_TIMER && OAL_FUNC, (L"-OEMSetRealTime\r\n"));

  00110	e3120b02	 tst         r2, #2, 22
  00114	13120004	 tstne       r2, #4
  00118	159f0010	 ldrne       r0, [pc, #0x10]
  0011c	1b000000	 blne        NKDbgPrintfW

; 479  : 
; 480  :     return rc;
; 481  : }

  00120	e1a00008	 mov         r0, r8
  00124	e28dd010	 add         sp, sp, #0x10
  00128	e8bd43f0	 ldmia       sp!, {r4 - r9, lr}
  0012c	e12fff1e	 bx          lr
  00130		 |$LN13@OEMSetReal|
  00130		 |$LN14@OEMSetReal|
  00130	00000000	 DCD         |??_C@_1CE@NIIADMMF@?$AA?9?$AAO?$AAE?$AAM?$AAS?$AAe?$AAt?$AAR?$AAe?$AAa?$AAl?$AAT?$AAi?$AAm?$AAe?$AA?$AN?$AA?6?$AA?$AA@|
  00134		 |$LN15@OEMSetReal|
  00134	00000000	 DCD         |g_ResumeRTC|
  00138		 |$LN16@OEMSetReal|
  00138	00000000	 DCD         |s_rtc|
  0013c		 |$LN17@OEMSetReal|
  0013c	00000000	 DCD         |??_C@_1CM@NEGNBBJ@?$AA?$CL?$AAO?$AAE?$AAM?$AAS?$AAe?$AAt?$AAR?$AAe?$AAa?$AAl?$AAT?$AAi?$AAm?$AAe?$AA?$CI?$AA?$CF?$AAs?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  00140		 |$LN18@OEMSetReal|
  00140	00000000	 DCD         |dpCurSettings|
  00144		 |$M45809|

			 ENDP  ; |OEMSetRealTime|

	EXPORT	|__$ArrayPad$| [ DATA ]
	EXPORT	|OEMSetAlarmTime|
	EXPORT	|??_C@_1CO@MAJAHDBK@?$AA?$CL?$AAO?$AAE?$AAM?$AAS?$AAe?$AAt?$AAA?$AAl?$AAa?$AAr?$AAm?$AAT?$AAi?$AAm?$AAe?$AA?$CI?$AA?$CF?$AAs?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
; File c:\wince600\platform\common\src\soc\common_ti_v1\triton\inc\twl.h

  00000			 AREA	 |.pdata|, PDATA
|$T45875| DCD	|$LN26@OEMSetAlar|
	DCD	0xc0007d02

  00000			 AREA	 |.xdata|, DATA
|$T45871| DCD	0xffffffe4

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CO@MAJAHDBK@?$AA?$CL?$AAO?$AAE?$AAM?$AAS?$AAe?$AAt?$AAA?$AAl?$AAa?$AAr?$AAm?$AAT?$AAi?$AAm?$AAe?$AA?$CI?$AA?$CF?$AAs?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "O", 0x0, "E", 0x0, "M", 0x0, "S", 0x0, "e", 0x0, "t"
	DCB	0x0, "A", 0x0, "l", 0x0, "a", 0x0, "r", 0x0, "m", 0x0, "T"
	DCB	0x0, "i", 0x0, "m", 0x0, "e", 0x0, "(", 0x0, "%", 0x0, "s"
	DCB	0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\tps659xx\oalrtc\rtc.c

  00000			 AREA	 |.text|, CODE, ARM

  00000	00000000	 DCD         |__GSHandlerCheck|
  00004	00000000	 DCD         |$T45871|

  00008		 |OEMSetAlarmTime| PROC

; 493  : {

  00008		 |$LN26@OEMSetAlar|
  00008	e92d41f0	 stmdb       sp!, {r4 - r8, lr}
  0000c	e24dd018	 sub         sp, sp, #0x18
  00010		 |$M45872|
  00010	e1a05000	 mov         r5, r0
  00014	e59f31dc	 ldr         r3, [pc, #0x1DC]
  00018	e5933000	 ldr         r3, [r3]
  0001c	e58d3014	 str         r3, [sp, #0x14]

; 494  :     BOOL rc = FALSE;
; 495  : 
; 496  :     OALMSG(OAL_TIMER && OAL_FUNC, (L"+OEMSetAlarmTime(%s)\r\n", SystemTimeToString(pSystemTime)));

  00020	e59f31cc	 ldr         r3, [pc, #0x1CC]
  00024	e3a07000	 mov         r7, #0
  00028	e5933440	 ldr         r3, [r3, #0x440]
  0002c	e3130b02	 tst         r3, #2, 22
  00030	0a000005	 beq         |$LN6@OEMSetAlar|
  00034	e3130004	 tst         r3, #4
  00038	0a000003	 beq         |$LN6@OEMSetAlar|
  0003c	eb000000	 bl          SystemTimeToString
  00040	e1a01000	 mov         r1, r0
  00044	e59f01a4	 ldr         r0, [pc, #0x1A4]
  00048	eb000000	 bl          NKDbgPrintfW
  0004c		 |$LN6@OEMSetAlar|

; 497  : 
; 498  :     if (s_rtc.initialized)

  0004c	e59f4198	 ldr         r4, [pc, #0x198]
  00050	e5943000	 ldr         r3, [r4]
  00054	e3530000	 cmp         r3, #0
  00058	0a00005c	 beq         |$LN3@OEMSetAlar|

; 499  :         {
; 500  :         // Save time to global structure
; 501  :         EnterCriticalSection(&s_rtc.cs);

  0005c	e2840004	 add         r0, r4, #4
  00060	eb000000	 bl          EnterCriticalSection

; 502  : 
; 503  :         if (g_ResumeRTC)

  00064	e59f617c	 ldr         r6, [pc, #0x17C]
  00068	e3a08000	 mov         r8, #0
  0006c	e5963000	 ldr         r3, [r6]
  00070	e3530000	 cmp         r3, #0
  00074	0a000008	 beq         |$LN2@OEMSetAlar|

; 504  :     		{
; 505  :             OALIoCtlHalRtcTime(0, NULL, 0, NULL, 0, NULL);

  00078	e3a03000	 mov         r3, #0
  0007c	e3a02000	 mov         r2, #0
  00080	e3a01000	 mov         r1, #0
  00084	e3a00000	 mov         r0, #0
  00088	e58d8004	 str         r8, [sp, #4]
  0008c	e58d8000	 str         r8, [sp]
  00090	eb000000	 bl          OALIoCtlHalRtcTime

; 506  :             g_ResumeRTC = FALSE;

  00094	e3a03000	 mov         r3, #0
  00098	e5863000	 str         r3, [r6]
  0009c		 |$LN2@OEMSetAlar|

; 507  : 	    	}
; 508  : 
; 509  :         // Round to seconds
; 510  :         pSystemTime->wMilliseconds = 0;
; 511  : 
; 512  :         // Convert to filetime
; 513  :         if (NKSystemTimeToFileTime(pSystemTime, (FILETIME*)&s_rtc.alarmFiletime))

  0009c	e2841038	 add         r1, r4, #0x38
  000a0	e1a00005	 mov         r0, r5
  000a4	e1c580be	 strh        r8, [r5, #0xE]
  000a8	eb000000	 bl          NKSystemTimeToFileTime
  000ac	e3500000	 cmp         r0, #0
  000b0	0a000044	 beq         |$LN1@OEMSetAlar|

; 514  :             {
; 515  :             UCHAR   status;
; 516  :             UCHAR   bcdTime[6];
; 517  : 
; 518  :             //  Adjust alarm time by secure offset
; 519  :             s_rtc.alarmFiletime  = s_rtc.alarmFiletime - s_rtc.baseOffset;

  000b4	e5941038	 ldr         r1, [r4, #0x38]
  000b8	e5943028	 ldr         r3, [r4, #0x28]

; 520  : 
; 521  :             //  Convert to BCD time format
; 522  :             FiletimeToHWTime( s_rtc.alarmFiletime, bcdTime );

  000bc	e28d200c	 add         r2, sp, #0xC
  000c0	e0510003	 subs        r0, r1, r3
  000c4	e5840038	 str         r0, [r4, #0x38]
  000c8	e594103c	 ldr         r1, [r4, #0x3C]
  000cc	e594302c	 ldr         r3, [r4, #0x2C]
  000d0	e0c13003	 sbc         r3, r1, r3
  000d4	e1a01003	 mov         r1, r3
  000d8	e584303c	 str         r3, [r4, #0x3C]
  000dc	eb000000	 bl          FiletimeToHWTime

; 523  : 
; 524  :             //  Write alarm registers
; 525  :             TWLWriteByteReg(s_rtc.hTWL, TWL_ALARM_YEARS_REG, bcdTime[5]);

  000e0	e5dd3011	 ldrb        r3, [sp, #0x11]
  000e4	e5940018	 ldr         r0, [r4, #0x18]
  000e8	e3a05803	 mov         r5, #3, 16
  000ec	e5cd3008	 strb        r3, [sp, #8]
  000f0	e3a03001	 mov         r3, #1
  000f4	e28d2008	 add         r2, sp, #8
  000f8	e3851028	 orr         r1, r5, #0x28
  000fc	eb000000	 bl          TWLWriteRegs

; 526  :             TWLWriteByteReg(s_rtc.hTWL, TWL_ALARM_MONTHS_REG, bcdTime[4]);

  00100	e5dd2010	 ldrb        r2, [sp, #0x10]
  00104	e5940018	 ldr         r0, [r4, #0x18]
  00108	e3a03001	 mov         r3, #1
  0010c	e5cd2008	 strb        r2, [sp, #8]
  00110	e28d2008	 add         r2, sp, #8
  00114	e3851027	 orr         r1, r5, #0x27
  00118	eb000000	 bl          TWLWriteRegs

; 527  :             TWLWriteByteReg(s_rtc.hTWL, TWL_ALARM_DAYS_REG, bcdTime[3]);

  0011c	e5dd200f	 ldrb        r2, [sp, #0xF]
  00120	e5940018	 ldr         r0, [r4, #0x18]
  00124	e3a03001	 mov         r3, #1
  00128	e5cd2008	 strb        r2, [sp, #8]
  0012c	e28d2008	 add         r2, sp, #8
  00130	e3851026	 orr         r1, r5, #0x26
  00134	eb000000	 bl          TWLWriteRegs

; 528  :             TWLWriteByteReg(s_rtc.hTWL, TWL_ALARM_HOURS_REG, bcdTime[2]);

  00138	e5dd200e	 ldrb        r2, [sp, #0xE]
  0013c	e5940018	 ldr         r0, [r4, #0x18]
  00140	e3a03001	 mov         r3, #1
  00144	e5cd2008	 strb        r2, [sp, #8]
  00148	e28d2008	 add         r2, sp, #8
  0014c	e3851025	 orr         r1, r5, #0x25
  00150	eb000000	 bl          TWLWriteRegs

; 529  :             TWLWriteByteReg(s_rtc.hTWL, TWL_ALARM_MINUTES_REG, bcdTime[1]);

  00154	e5dd200d	 ldrb        r2, [sp, #0xD]
  00158	e5940018	 ldr         r0, [r4, #0x18]
  0015c	e3a03001	 mov         r3, #1
  00160	e5cd2008	 strb        r2, [sp, #8]
  00164	e28d2008	 add         r2, sp, #8
  00168	e3851024	 orr         r1, r5, #0x24
  0016c	eb000000	 bl          TWLWriteRegs

; 530  :             TWLWriteByteReg(s_rtc.hTWL, TWL_ALARM_SECONDS_REG, bcdTime[0]);

  00170	e5dd200c	 ldrb        r2, [sp, #0xC]
  00174	e5940018	 ldr         r0, [r4, #0x18]
  00178	e3a03001	 mov         r3, #1
  0017c	e5cd2008	 strb        r2, [sp, #8]
  00180	e28d2008	 add         r2, sp, #8
  00184	e3851023	 orr         r1, r5, #0x23
  00188	eb000000	 bl          TWLWriteRegs

; 531  : 
; 532  :             //  Set toggle bit to latch alarm registers
; 533  :             TWLReadByteReg(s_rtc.hTWL, TWL_RTC_CTRL_REG, &status);

  0018c	e5940018	 ldr         r0, [r4, #0x18]
  00190	e3a03001	 mov         r3, #1
  00194	e28d2009	 add         r2, sp, #9
  00198	e3851029	 orr         r1, r5, #0x29
  0019c	eb000000	 bl          TWLReadRegs

; 534  : 
; 535  :             status |= TWL_RTC_CTRL_RUN | TWL_RTC_CTRL_GET_TIME;

  001a0	e5dd3009	 ldrb        r3, [sp, #9]

; 536  :             TWLWriteByteReg(s_rtc.hTWL, TWL_RTC_CTRL_REG, status);

  001a4	e5940018	 ldr         r0, [r4, #0x18]
  001a8	e28d2008	 add         r2, sp, #8
  001ac	e3833041	 orr         r3, r3, #0x41
  001b0	e5cd3009	 strb        r3, [sp, #9]
  001b4	e5cd3008	 strb        r3, [sp, #8]
  001b8	e3a03001	 mov         r3, #1
  001bc	e3851029	 orr         r1, r5, #0x29
  001c0	eb000000	 bl          TWLWriteRegs

; 537  : 
; 538  :             // Done
; 539  :             rc = TRUE;

  001c4	e3a07001	 mov         r7, #1
  001c8		 |$LN1@OEMSetAlar|

; 540  :             }
; 541  : 
; 542  :         LeaveCriticalSection(&s_rtc.cs);

  001c8	e2840004	 add         r0, r4, #4
  001cc	eb000000	 bl          LeaveCriticalSection
  001d0		 |$LN3@OEMSetAlar|

; 543  :         }
; 544  :     
; 545  :     return rc;

  001d0	e59d0014	 ldr         r0, [sp, #0x14]
  001d4	eb000000	 bl          __security_check_cookie

; 546  : }

  001d8	e1a00007	 mov         r0, r7
  001dc	e28dd018	 add         sp, sp, #0x18
  001e0	e8bd41f0	 ldmia       sp!, {r4 - r8, lr}
  001e4	e12fff1e	 bx          lr
  001e8		 |$LN27@OEMSetAlar|
  001e8		 |$LN28@OEMSetAlar|
  001e8	00000000	 DCD         |g_ResumeRTC|
  001ec		 |$LN29@OEMSetAlar|
  001ec	00000000	 DCD         |s_rtc|
  001f0		 |$LN30@OEMSetAlar|
  001f0	00000000	 DCD         |??_C@_1CO@MAJAHDBK@?$AA?$CL?$AAO?$AAE?$AAM?$AAS?$AAe?$AAt?$AAA?$AAl?$AAa?$AAr?$AAm?$AAT?$AAi?$AAm?$AAe?$AA?$CI?$AA?$CF?$AAs?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  001f4		 |$LN31@OEMSetAlar|
  001f4	00000000	 DCD         |dpCurSettings|
  001f8		 |$LN32@OEMSetAlar|
  001f8	00000000	 DCD         |__security_cookie|
  001fc		 |$M45873|

			 ENDP  ; |OEMSetAlarmTime|

	END
