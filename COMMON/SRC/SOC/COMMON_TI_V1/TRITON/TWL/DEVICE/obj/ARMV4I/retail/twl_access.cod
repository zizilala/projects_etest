; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\TRITON\TWL\DEVICE\twl_access.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "


  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
	EXPORT	|GetCurrentProcessId|
	IMPORT	|__GetUserKData|
; File c:\wince600\public\common\sdk\inc\kfuncs.h

  00000			 AREA	 |.pdata|, PDATA
|$T44136| DCD	|$LN5@GetCurrent|
	DCD	0x40000501
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |GetCurrentProcessId| PROC

; 373  : _inline DWORD GetCurrentProcessId(void) {

  00000		 |$LN5@GetCurrent|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M44133|

; 374  :     return __GetUserKData (SYSHANDLE_OFFSET + (SH_CURPROC * sizeof(HANDLE)));

  00004	e3a0000c	 mov         r0, #0xC
  00008	eb000000	 bl          __GetUserKData

; 375  : }

  0000c	e49de004	 ldr         lr, [sp], #4
  00010	e12fff1e	 bx          lr
  00014		 |$M44134|

			 ENDP  ; |GetCurrentProcessId|

	EXPORT	|TWLOpen|
	EXPORT	|??_C@_1M@MOBNNOLN@?$AAT?$AAW?$AAL?$AA1?$AA?3?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|LocalFree|
	IMPORT	|DeviceIoControl|
	IMPORT	|CloseHandle|
	IMPORT	|LocalAlloc|
	IMPORT	|CreateFileW|
	IMPORT	|DEVICE_IFC_TWL_GUID|
; File c:\wince600\platform\common\src\soc\common_ti_v1\triton\twl\device\twl_access.c

  00000			 AREA	 |.pdata|, PDATA
|$T44147| DCD	|$LN8@TWLOpen|
	DCD	0x40003002

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1M@MOBNNOLN@?$AAT?$AAW?$AAL?$AA1?$AA?3?$AA?$AA@| DCB "T", 0x0, "W", 0x0
	DCB	"L", 0x0, "1", 0x0, ":", 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |TWLOpen| PROC

; 36   : {

  00000		 |$LN8@TWLOpen|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004	e24dd010	 sub         sp, sp, #0x10
  00008		 |$M44144|

; 37   :     HANDLE hDevice;
; 38   :     DEVICE_CONTEXT_TWL *pContext = NULL;
; 39   : 
; 40   :     hDevice = CreateFile(TWL_DEVICE_NAME, 0, 0, NULL, 0, 0, NULL);

  00008	e59f00ac	 ldr         r0, [pc, #0xAC]
  0000c	e3a06000	 mov         r6, #0
  00010	e3a03000	 mov         r3, #0
  00014	e3a02000	 mov         r2, #0
  00018	e3a01000	 mov         r1, #0
  0001c	e3a04000	 mov         r4, #0
  00020	e58d6008	 str         r6, [sp, #8]
  00024	e58d6004	 str         r6, [sp, #4]
  00028	e58d6000	 str         r6, [sp]
  0002c	eb000000	 bl          CreateFileW
  00030	e1a05000	 mov         r5, r0

; 41   :     if (hDevice == INVALID_HANDLE_VALUE) goto cleanUp;

  00034	e3750001	 cmn         r5, #1
  00038	0a00001a	 beq         |$cleanUp$43978|

; 42   : 
; 43   :     // Allocate memory for our handler...
; 44   :     pContext = (DEVICE_CONTEXT_TWL*)LocalAlloc(
; 45   :         LPTR, sizeof(DEVICE_CONTEXT_TWL)
; 46   :         );

  0003c	e3a01024	 mov         r1, #0x24
  00040	e3a00040	 mov         r0, #0x40
  00044	eb000000	 bl          LocalAlloc
  00048	e1b04000	 movs        r4, r0

; 47   :     if (pContext == NULL)
; 48   :         {
; 49   :         CloseHandle(hDevice);

  0004c	e1a00005	 mov         r0, r5
  00050	1a000001	 bne         |$LN2@TWLOpen|
  00054	eb000000	 bl          CloseHandle

; 50   :         goto cleanUp;

  00058	ea000012	 b           |$cleanUp$43978|
  0005c		 |$LN2@TWLOpen|

; 51   :         }
; 52   : 
; 53   :     // Get function pointers, fail when IOCTL isn't supported...
; 54   :     if (!DeviceIoControl(
; 55   :             hDevice, IOCTL_DDK_GET_DRIVER_IFC, (VOID*)&DEVICE_IFC_TWL_GUID,
; 56   :             sizeof(DEVICE_IFC_TWL_GUID), &pContext->ifc, sizeof(DEVICE_IFC_TWL),
; 57   :             NULL, NULL))

  0005c	e59f2054	 ldr         r2, [pc, #0x54]
  00060	e3a03822	 mov         r3, #0x22, 16
  00064	e3831b01	 orr         r1, r3, #1, 22
  00068	e3a0e01c	 mov         lr, #0x1C
  0006c	e3a03010	 mov         r3, #0x10
  00070	e58d600c	 str         r6, [sp, #0xC]
  00074	e58d6008	 str         r6, [sp, #8]
  00078	e58de004	 str         lr, [sp, #4]
  0007c	e58d4000	 str         r4, [sp]
  00080	eb000000	 bl          DeviceIoControl
  00084	e3500000	 cmp         r0, #0
  00088	1a000005	 bne         |$LN1@TWLOpen|

; 58   :         {
; 59   :         CloseHandle(hDevice);

  0008c	e1a00005	 mov         r0, r5
  00090	eb000000	 bl          CloseHandle

; 60   :         LocalFree(pContext);

  00094	e1a00004	 mov         r0, r4
  00098	eb000000	 bl          LocalFree

; 61   :         pContext = NULL;

  0009c	e3a04000	 mov         r4, #0

; 62   :         goto cleanUp;

  000a0	ea000000	 b           |$cleanUp$43978|
  000a4		 |$LN1@TWLOpen|

; 63   :         }
; 64   : 
; 65   :     // Save device handle
; 66   :     pContext->hDevice = hDevice;

  000a4	e584501c	 str         r5, [r4, #0x1C]
  000a8		 |$cleanUp$43978|

; 67   : 
; 68   : cleanUp:
; 69   :     return pContext;
; 70   : }

  000a8	e1a00004	 mov         r0, r4
  000ac	e28dd010	 add         sp, sp, #0x10
  000b0	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  000b4	e12fff1e	 bx          lr
  000b8		 |$LN9@TWLOpen|
  000b8		 |$LN10@TWLOpen|
  000b8	00000000	 DCD         |DEVICE_IFC_TWL_GUID|
  000bc		 |$LN11@TWLOpen|
  000bc	00000000	 DCD         |??_C@_1M@MOBNNOLN@?$AAT?$AAW?$AAL?$AA1?$AA?3?$AA?$AA@|
  000c0		 |$M44145|

			 ENDP  ; |TWLOpen|

	EXPORT	|TWLClose|

  00000			 AREA	 |.pdata|, PDATA
|$T44158| DCD	|$LN5@TWLClose|
	DCD	0x40000801
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |TWLClose| PROC

; 77   : {

  00000		 |$LN5@TWLClose|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M44155|
  00004	e1a04000	 mov         r4, r0

; 78   :     DEVICE_CONTEXT_TWL *pContext = (DEVICE_CONTEXT_TWL*)hContext;
; 79   :     CloseHandle(pContext->hDevice);

  00008	e594001c	 ldr         r0, [r4, #0x1C]
  0000c	eb000000	 bl          CloseHandle

; 80   :     LocalFree(pContext);

  00010	e1a00004	 mov         r0, r4
  00014	eb000000	 bl          LocalFree

; 81   : }

  00018	e8bd4010	 ldmia       sp!, {r4, lr}
  0001c	e12fff1e	 bx          lr
  00020		 |$M44156|

			 ENDP  ; |TWLClose|

	EXPORT	|TWLReadRegs|
	IMPORT	|ReadFile|
	IMPORT	|SetFilePointer|

  00000			 AREA	 |.pdata|, PDATA
|$T44171| DCD	|$LN8@TWLReadReg|
	DCD	0x40002302
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |TWLReadRegs| PROC

; 85   : {

  00000		 |$LN8@TWLReadReg|
  00000	e92d41f0	 stmdb       sp!, {r4 - r8, lr}
  00004	e24dd008	 sub         sp, sp, #8
  00008		 |$M44168|
  00008	e1a06003	 mov         r6, r3
  0000c	e1a07002	 mov         r7, r2
  00010	e1a05001	 mov         r5, r1
  00014	e1a04000	 mov         r4, r0

; 86   :     DEVICE_CONTEXT_TWL *pContext = (DEVICE_CONTEXT_TWL*)hContext;
; 87   :   
; 88   :     if (pContext->ifc.pfnReadRegs != NULL)

  00018	e594e004	 ldr         lr, [r4, #4]
  0001c	e1b0800e	 movs        r8, lr
  00020	0a000003	 beq         |$LN3@TWLReadReg|

; 89   :     {
; 90   :         return pContext->ifc.pfnReadRegs(pContext->ifc.context, 
; 91   :                                          address, pBuffer, size);

  00024	e5940000	 ldr         r0, [r4]
  00028	e1a0e00f	 mov         lr, pc
  0002c	e12fff18	 bx          r8
  00030	ea000012	 b           |$LN2@TWLReadReg|
  00034		 |$LN3@TWLReadReg|

; 92   :     }else{
; 93   :         DWORD dwCount = 0;
; 94   :         
; 95   :         if (pContext->seekAddress != address)

  00034	e5943020	 ldr         r3, [r4, #0x20]
  00038	e3a02000	 mov         r2, #0
  0003c	e58d2004	 str         r2, [sp, #4]
  00040	e1530005	 cmp         r3, r5
  00044	0a000005	 beq         |$LN1@TWLReadReg|

; 96   :         {
; 97   :             SetFilePointer(pContext->hDevice, address, NULL, FILE_CURRENT);

  00048	e594001c	 ldr         r0, [r4, #0x1C]
  0004c	e3a03001	 mov         r3, #1
  00050	e3a02000	 mov         r2, #0
  00054	e1a01005	 mov         r1, r5
  00058	eb000000	 bl          SetFilePointer

; 98   :             pContext->seekAddress = address;

  0005c	e5845020	 str         r5, [r4, #0x20]
  00060		 |$LN1@TWLReadReg|

; 99   :         }
; 100  :         
; 101  :         ReadFile(pContext->hDevice, pBuffer, size, &dwCount, NULL);

  00060	e594001c	 ldr         r0, [r4, #0x1C]
  00064	e3a0e000	 mov         lr, #0
  00068	e28d3004	 add         r3, sp, #4
  0006c	e1a02006	 mov         r2, r6
  00070	e1a01007	 mov         r1, r7
  00074	e58de000	 str         lr, [sp]
  00078	eb000000	 bl          ReadFile

; 102  :         return dwCount;

  0007c	e59d0004	 ldr         r0, [sp, #4]
  00080		 |$LN2@TWLReadReg|

; 103  :     }
; 104  : }

  00080	e28dd008	 add         sp, sp, #8
  00084	e8bd41f0	 ldmia       sp!, {r4 - r8, lr}
  00088	e12fff1e	 bx          lr
  0008c		 |$M44169|

			 ENDP  ; |TWLReadRegs|

	EXPORT	|TWLWriteRegs|
	IMPORT	|WriteFile|

  00000			 AREA	 |.pdata|, PDATA
|$T44184| DCD	|$LN8@TWLWriteRe|
	DCD	0x40002202
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |TWLWriteRegs| PROC

; 111  : {

  00000		 |$LN8@TWLWriteRe|
  00000	e92d41f0	 stmdb       sp!, {r4 - r8, lr}
  00004	e24dd008	 sub         sp, sp, #8
  00008		 |$M44181|
  00008	e1a06003	 mov         r6, r3
  0000c	e1a07002	 mov         r7, r2
  00010	e1a05001	 mov         r5, r1
  00014	e1a04000	 mov         r4, r0

; 112  :     DEVICE_CONTEXT_TWL *pContext = (DEVICE_CONTEXT_TWL*)hContext;
; 113  :     if (pContext->ifc.pfnWriteRegs != NULL)

  00018	e594e008	 ldr         lr, [r4, #8]
  0001c	e1b0800e	 movs        r8, lr
  00020	0a000003	 beq         |$LN3@TWLWriteRe|

; 114  :         {
; 115  :         return pContext->ifc.pfnWriteRegs(
; 116  :             pContext->ifc.context, address, pBuffer, size
; 117  :             );

  00024	e5940000	 ldr         r0, [r4]
  00028	e1a0e00f	 mov         lr, pc
  0002c	e12fff18	 bx          r8
  00030	ea000011	 b           |$LN2@TWLWriteRe|
  00034		 |$LN3@TWLWriteRe|

; 118  :         }
; 119  :     else
; 120  :         {
; 121  :         DWORD dwCount = 0;
; 122  :         if (pContext->seekAddress != address)

  00034	e5943020	 ldr         r3, [r4, #0x20]
  00038	e3a02000	 mov         r2, #0
  0003c	e58d2004	 str         r2, [sp, #4]
  00040	e1530005	 cmp         r3, r5
  00044	0a000005	 beq         |$LN1@TWLWriteRe|

; 123  :             {
; 124  :             SetFilePointer(pContext->hDevice, address, NULL, FILE_CURRENT);

  00048	e594001c	 ldr         r0, [r4, #0x1C]
  0004c	e3a03001	 mov         r3, #1
  00050	e3a02000	 mov         r2, #0
  00054	e1a01005	 mov         r1, r5
  00058	eb000000	 bl          SetFilePointer

; 125  :             pContext->seekAddress = address;

  0005c	e5845020	 str         r5, [r4, #0x20]
  00060		 |$LN1@TWLWriteRe|

; 126  :             }
; 127  :         return WriteFile(pContext->hDevice, pBuffer, size, &dwCount, NULL);

  00060	e594001c	 ldr         r0, [r4, #0x1C]
  00064	e3a0e000	 mov         lr, #0
  00068	e28d3004	 add         r3, sp, #4
  0006c	e1a02006	 mov         r2, r6
  00070	e1a01007	 mov         r1, r7
  00074	e58de000	 str         lr, [sp]
  00078	eb000000	 bl          WriteFile
  0007c		 |$LN2@TWLWriteRe|

; 128  :         }
; 129  : }

  0007c	e28dd008	 add         sp, sp, #8
  00080	e8bd41f0	 ldmia       sp!, {r4 - r8, lr}
  00084	e12fff1e	 bx          lr
  00088		 |$M44182|

			 ENDP  ; |TWLWriteRegs|

	EXPORT	|TWLInterruptInitialize|
; File c:\wince600\public\common\sdk\inc\kfuncs.h

  00000			 AREA	 |.pdata|, PDATA
|$T44199| DCD	|$LN9@TWLInterru|
	DCD	0x40001e02
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\triton\twl\device\twl_access.c

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |TWLInterruptInitialize| PROC

; 137  : {

  00000		 |$LN9@TWLInterru|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004	e24dd01c	 sub         sp, sp, #0x1C
  00008		 |$M44196|
  00008	e1a04000	 mov         r4, r0

; 138  :     IOCTL_TWL_INTRINIT_IN inParam;
; 139  :     DEVICE_CONTEXT_TWL *pContext = (DEVICE_CONTEXT_TWL*)hContext;
; 140  : 
; 141  :     if (pContext->ifc.pfnInterruptInitialize != NULL)

  0000c	e594300c	 ldr         r3, [r4, #0xC]
  00010	e3530000	 cmp         r3, #0
  00014	0a000003	 beq         |$LN2@TWLInterru|

; 142  :         {
; 143  :         return pContext->ifc.pfnInterruptInitialize(
; 144  :             pContext->ifc.context, intrId, hEvent
; 145  :             );

  00018	e5940000	 ldr         r0, [r4]
  0001c	e1a0e00f	 mov         lr, pc
  00020	e12fff13	 bx          r3
  00024	ea00000f	 b           |$LN1@TWLInterru|
  00028		 |$LN2@TWLInterru|

; 146  :         }
; 147  :     else
; 148  :         {
; 149  :         inParam.intrId = intrId;
; 150  :         inParam.hEvent = hEvent;
; 151  :         inParam.procId = GetCurrentProcessId();

  00028	e3a0000c	 mov         r0, #0xC
  0002c	e58d1014	 str         r1, [sp, #0x14]
  00030	e58d2018	 str         r2, [sp, #0x18]
  00034	eb000000	 bl          __GetUserKData

; 152  :         return DeviceIoControl(pContext->hDevice,
; 153  :                                IOCTL_TWL_INTRINIT,
; 154  :                                &inParam,
; 155  :                                sizeof(inParam),
; 156  :                                NULL,
; 157  :                                0,
; 158  :                                NULL,
; 159  :                                NULL 
; 160  :                                );

  00038	e59f1034	 ldr         r1, [pc, #0x34]
  0003c	e1a0e000	 mov         lr, r0
  00040	e594001c	 ldr         r0, [r4, #0x1C]
  00044	e3a04000	 mov         r4, #0
  00048	e3a0300c	 mov         r3, #0xC
  0004c	e28d2010	 add         r2, sp, #0x10
  00050	e58d400c	 str         r4, [sp, #0xC]
  00054	e58d4008	 str         r4, [sp, #8]
  00058	e58d4004	 str         r4, [sp, #4]
  0005c	e58d4000	 str         r4, [sp]
  00060	e58de010	 str         lr, [sp, #0x10]
  00064	eb000000	 bl          DeviceIoControl
  00068		 |$LN1@TWLInterru|

; 161  :         }
; 162  : }

  00068	e28dd01c	 add         sp, sp, #0x1C
  0006c	e8bd4010	 ldmia       sp!, {r4, lr}
  00070	e12fff1e	 bx          lr
  00074		 |$LN10@TWLInterru|
  00074		 |$LN11@TWLInterru|
  00074	00220c0c	 DCD         0x220c0c
  00078		 |$M44197|

			 ENDP  ; |TWLInterruptInitialize|

	EXPORT	|TWLInterruptMask|

  00000			 AREA	 |.pdata|, PDATA
|$T44213| DCD	|$LN7@TWLInterru@2|
	DCD	0x40001b02
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |TWLInterruptMask| PROC

; 171  : {

  00000		 |$LN7@TWLInterru@2|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004	e24dd01c	 sub         sp, sp, #0x1C
  00008		 |$M44210|
  00008	e1a0e002	 mov         lr, r2
  0000c	e1a04001	 mov         r4, r1

; 172  :     DEVICE_CONTEXT_TWL *pContext = (DEVICE_CONTEXT_TWL*)hContext;
; 173  : 
; 174  :     if (pContext->ifc.pfnInterruptMask != NULL)

  00010	e5903014	 ldr         r3, [r0, #0x14]
  00014	e3530000	 cmp         r3, #0
  00018	0a000003	 beq         |$LN2@TWLInterru@2|

; 175  :         {
; 176  :         return pContext->ifc.pfnInterruptMask(
; 177  :             pContext->ifc.context, intrId, bEnable
; 178  :             );

  0001c	e5900000	 ldr         r0, [r0]
  00020	e1a0e00f	 mov         lr, pc
  00024	e12fff13	 bx          r3
  00028	ea00000b	 b           |$LN1@TWLInterru@2|
  0002c		 |$LN2@TWLInterru@2|

; 179  :         }
; 180  :     else
; 181  :         {
; 182  :         IOCTL_TWL_INTRMASK_IN inParam;
; 183  :         inParam.intrId = intrId;
; 184  :         inParam.bEnable = bEnable;
; 185  : 
; 186  :         return DeviceIoControl(pContext->hDevice,
; 187  :                                IOCTL_TWL_INTRMASK,
; 188  :                                &inParam,
; 189  :                                sizeof(inParam),
; 190  :                                NULL,
; 191  :                                0,
; 192  :                                NULL,
; 193  :                                NULL 
; 194  :                                );

  0002c	e59f1034	 ldr         r1, [pc, #0x34]
  00030	e590001c	 ldr         r0, [r0, #0x1C]
  00034	e3a05000	 mov         r5, #0
  00038	e3a0300c	 mov         r3, #0xC
  0003c	e28d2010	 add         r2, sp, #0x10
  00040	e58d4014	 str         r4, [sp, #0x14]
  00044	e58de018	 str         lr, [sp, #0x18]
  00048	e58d500c	 str         r5, [sp, #0xC]
  0004c	e58d5008	 str         r5, [sp, #8]
  00050	e58d5004	 str         r5, [sp, #4]
  00054	e58d5000	 str         r5, [sp]
  00058	eb000000	 bl          DeviceIoControl
  0005c		 |$LN1@TWLInterru@2|

; 195  :         }
; 196  : }

  0005c	e28dd01c	 add         sp, sp, #0x1C
  00060	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00064	e12fff1e	 bx          lr
  00068		 |$LN8@TWLInterru@2|
  00068		 |$LN9@TWLInterru@2|
  00068	00220c14	 DCD         0x220c14
  0006c		 |$M44211|

			 ENDP  ; |TWLInterruptMask|

	EXPORT	|TWLInterruptDisable|

  00000			 AREA	 |.pdata|, PDATA
|$T44226| DCD	|$LN7@TWLInterru@3|
	DCD	0x40001a04
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |TWLInterruptDisable| PROC

; 203  : {

  00000		 |$LN7@TWLInterru@3|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d000f	 stmdb       sp!, {r0 - r3}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd010	 sub         sp, sp, #0x10
  00010		 |$M44223|
  00010	e58d101c	 str         r1, [sp, #0x1C]

; 204  :     DEVICE_CONTEXT_TWL *pContext = (DEVICE_CONTEXT_TWL*)hContext;
; 205  : 
; 206  :     if (pContext->ifc.pfnInterruptDisable != NULL)

  00014	e5903010	 ldr         r3, [r0, #0x10]
  00018	e3530000	 cmp         r3, #0
  0001c	0a000003	 beq         |$LN2@TWLInterru@3|

; 207  :         {
; 208  :         return pContext->ifc.pfnInterruptDisable(
; 209  :             pContext->ifc.context, intrId
; 210  :             );

  00020	e5900000	 ldr         r0, [r0]
  00024	e1a0e00f	 mov         lr, pc
  00028	e12fff13	 bx          r3
  0002c	ea00000a	 b           |$LN1@TWLInterru@3|
  00030		 |$LN2@TWLInterru@3|

; 211  :         }
; 212  :     else
; 213  :         {
; 214  :         return DeviceIoControl(pContext->hDevice,
; 215  :                                IOCTL_TWL_INTRDISABLE,
; 216  :                                &intrId,
; 217  :                                sizeof(DWORD),
; 218  :                                NULL,
; 219  :                                0,
; 220  :                                NULL,
; 221  :                                NULL 
; 222  :                                );

  00030	e590001c	 ldr         r0, [r0, #0x1C]
  00034	e3a03822	 mov         r3, #0x22, 16
  00038	e3831ec1	 orr         r1, r3, #0xC1, 28
  0003c	e3a0e000	 mov         lr, #0
  00040	e3a03004	 mov         r3, #4
  00044	e28d201c	 add         r2, sp, #0x1C
  00048	e58de00c	 str         lr, [sp, #0xC]
  0004c	e58de008	 str         lr, [sp, #8]
  00050	e58de004	 str         lr, [sp, #4]
  00054	e58de000	 str         lr, [sp]
  00058	eb000000	 bl          DeviceIoControl
  0005c		 |$LN1@TWLInterru@3|

; 223  :         }
; 224  : }

  0005c	e28dd010	 add         sp, sp, #0x10
  00060	e89d6000	 ldmia       sp, {sp, lr}
  00064	e12fff1e	 bx          lr
  00068		 |$M44224|

			 ENDP  ; |TWLInterruptDisable|

	EXPORT	|TWLWakeEnable|

  00000			 AREA	 |.pdata|, PDATA
|$T44238| DCD	|$LN7@TWLWakeEna|
	DCD	0x40001b02
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |TWLWakeEnable| PROC

; 233  : {

  00000		 |$LN7@TWLWakeEna|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004	e24dd018	 sub         sp, sp, #0x18
  00008		 |$M44235|
  00008	e1a0e002	 mov         lr, r2
  0000c	e1a04001	 mov         r4, r1

; 234  :     IOCTL_TWL_WAKEENABLE_IN inParam;
; 235  :     DEVICE_CONTEXT_TWL *pContext = (DEVICE_CONTEXT_TWL*)hContext;
; 236  : 
; 237  :     if (pContext->ifc.pfnEnableWakeup != NULL)

  00010	e5903018	 ldr         r3, [r0, #0x18]
  00014	e3530000	 cmp         r3, #0
  00018	0a000003	 beq         |$LN2@TWLWakeEna|

; 238  :         {
; 239  :         return pContext->ifc.pfnEnableWakeup(
; 240  :             pContext->ifc.context, intrId, bEnable
; 241  :             );

  0001c	e5900000	 ldr         r0, [r0]
  00020	e1a0e00f	 mov         lr, pc
  00024	e12fff13	 bx          r3
  00028	ea00000b	 b           |$LN1@TWLWakeEna|
  0002c		 |$LN2@TWLWakeEna|

; 242  :         }
; 243  :     else
; 244  :         {
; 245  :         inParam.intrId = intrId;
; 246  :         inParam.bEnable = bEnable;
; 247  :         return DeviceIoControl(pContext->hDevice,
; 248  :                                IOCTL_TWL_WAKEENABLE,
; 249  :                                &inParam,
; 250  :                                sizeof(inParam),
; 251  :                                NULL,
; 252  :                                0,
; 253  :                                NULL,
; 254  :                                NULL 
; 255  :                                );

  0002c	e59f1034	 ldr         r1, [pc, #0x34]
  00030	e590001c	 ldr         r0, [r0, #0x1C]
  00034	e3a05000	 mov         r5, #0
  00038	e3a03008	 mov         r3, #8
  0003c	e28d2010	 add         r2, sp, #0x10
  00040	e58d4010	 str         r4, [sp, #0x10]
  00044	e58de014	 str         lr, [sp, #0x14]
  00048	e58d500c	 str         r5, [sp, #0xC]
  0004c	e58d5008	 str         r5, [sp, #8]
  00050	e58d5004	 str         r5, [sp, #4]
  00054	e58d5000	 str         r5, [sp]
  00058	eb000000	 bl          DeviceIoControl
  0005c		 |$LN1@TWLWakeEna|

; 256  :         }
; 257  : }

  0005c	e28dd018	 add         sp, sp, #0x18
  00060	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00064	e12fff1e	 bx          lr
  00068		 |$LN8@TWLWakeEna|
  00068		 |$LN9@TWLWakeEna|
  00068	00220c18	 DCD         0x220c18
  0006c		 |$M44236|

			 ENDP  ; |TWLWakeEnable|

	END
