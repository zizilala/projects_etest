; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\TRITON\TWL\OAL\twl_access.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "


  00000			 AREA	 |.bss|, NOINIT
|?Device@?1??TWLOpen@@9@9| % 0x24			; `TWLOpen'::`2'::Device

  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
	EXPORT	|TWLOpen|
	IMPORT	|I2CSetSlaveAddress|
	IMPORT	|BSPGetTritonSlaveAddress|
	IMPORT	|I2COpen|
	IMPORT	|BSPGetTritonBusID|
; File c:\wince600\platform\common\src\soc\common_ti_v1\triton\twl\oal\twl_access.c

  00000			 AREA	 |.pdata|, PDATA
|$T44093| DCD	|$LN7@TWLOpen|
	DCD	0x40001801
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |TWLOpen| PROC

; 35   : {

  00000		 |$LN7@TWLOpen|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M44090|

; 36   :     static  Device_t Device = {NULL,0,FALSE,0};     
; 37   : 
; 38   :     // Open i2c bus
; 39   :     if (Device.refCount == 0)

  00004	e59f4050	 ldr         r4, [pc, #0x50]
  00008	e5943004	 ldr         r3, [r4, #4]
  0000c	e3530000	 cmp         r3, #0
  00010	1a00000c	 bne         |$LN2@TWLOpen|

; 40   :     {
; 41   :         Device.hI2C = I2COpen(BSPGetTritonBusID());

  00014	eb000000	 bl          BSPGetTritonBusID
  00018	eb000000	 bl          I2COpen
  0001c	e3500000	 cmp         r0, #0
  00020	e5840000	 str         r0, [r4]

; 42   :         if (Device.hI2C == NULL)
; 43   :         {
; 44   :             DEBUGMSG(ZONE_ERROR, (L"ERROR: TWLOpen: "
; 45   :                 L"Failed open I2C bus driver\r\n"
; 46   :             ));
; 47   :             return NULL;

  00024	03a04000	 moveq       r4, #0
  00028	0a000008	 beq         |$LN3@TWLOpen|

; 48   :         }
; 49   :         
; 50   :         Device.slaveAddress = BSPGetTritonSlaveAddress();

  0002c	eb000000	 bl          BSPGetTritonSlaveAddress
  00030	e1a01800	 mov         r1, r0, lsl #16
  00034	e1a01821	 mov         r1, r1, lsr #16
  00038	e1c410bc	 strh        r1, [r4, #0xC]

; 51   :         I2CSetSlaveAddress(Device.hI2C, Device.slaveAddress);  

  0003c	e5940000	 ldr         r0, [r4]
  00040	eb000000	 bl          I2CSetSlaveAddress
  00044	e5943004	 ldr         r3, [r4, #4]
  00048		 |$LN2@TWLOpen|

; 52   :     }
; 53   :     Device.refCount++;

  00048	e2833001	 add         r3, r3, #1
  0004c	e5843004	 str         r3, [r4, #4]

; 54   :     return &Device;

  00050		 |$LN3@TWLOpen|

; 55   : }

  00050	e1a00004	 mov         r0, r4
  00054	e8bd4010	 ldmia       sp!, {r4, lr}
  00058	e12fff1e	 bx          lr
  0005c		 |$LN8@TWLOpen|
  0005c		 |$LN9@TWLOpen|
  0005c	00000000	 DCD         |?Device@?1??TWLOpen@@9@9|
  00060		 |$M44091|

			 ENDP  ; |TWLOpen|

	EXPORT	|TWLClose|
	IMPORT	|I2CClose|

  00000			 AREA	 |.pdata|, PDATA
|$T44103| DCD	|$LN7@TWLClose|
	DCD	0x40000f01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |TWLClose| PROC

; 61   : {

  00000		 |$LN7@TWLClose|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M44100|
  00004	e1a04000	 mov         r4, r0

; 62   :     Device_t * pDevice = (Device_t *) hContext;
; 63   :     pDevice->refCount--;

  00008	e5943004	 ldr         r3, [r4, #4]
  0000c	e2533001	 subs        r3, r3, #1
  00010	e5843004	 str         r3, [r4, #4]

; 64   :     if (pDevice->refCount == 0)

  00014	1a000006	 bne         |$LN1@TWLClose|

; 65   :     {
; 66   :         if (pDevice->hI2C) 

  00018	e5943000	 ldr         r3, [r4]
  0001c	e3530000	 cmp         r3, #0
  00020	0a000003	 beq         |$LN1@TWLClose|

; 67   :         {
; 68   :             I2CClose(pDevice->hI2C);

  00024	e1a00003	 mov         r0, r3
  00028	eb000000	 bl          I2CClose

; 69   :             pDevice->hI2C = 0;

  0002c	e3a03000	 mov         r3, #0
  00030	e5843000	 str         r3, [r4]
  00034		 |$LN1@TWLClose|

; 70   :         }
; 71   :     }
; 72   :     
; 73   : }

  00034	e8bd4010	 ldmia       sp!, {r4, lr}
  00038	e12fff1e	 bx          lr
  0003c		 |$M44101|

			 ENDP  ; |TWLClose|

	EXPORT	|TWLReadRegs|
	IMPORT	|LeaveCriticalSection|
	IMPORT	|I2CRead|
	IMPORT	|EnterCriticalSection|

  00000			 AREA	 |.pdata|, PDATA
|$T44117| DCD	|$LN9@TWLReadReg|
	DCD	0x40002301
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |TWLReadRegs| PROC

; 88   : {

  00000		 |$LN9@TWLReadReg|
  00000	e92d43f0	 stmdb       sp!, {r4 - r9, lr}
  00004		 |$M44114|
  00004	e1a08003	 mov         r8, r3
  00008	e1a09002	 mov         r9, r2
  0000c	e1a07001	 mov         r7, r1
  00010	e1a04000	 mov         r4, r0

; 89   :     BOOL rc = FALSE;   
; 90   :     
; 91   :     Device_t * pDevice = (Device_t *) hContext;
; 92   : 
; 93   :     if (pDevice->csInitialized) EnterCriticalSection(&pDevice->cs);

  00014	e594e008	 ldr         lr, [r4, #8]
  00018	e3a05000	 mov         r5, #0
  0001c	e35e0000	 cmp         lr, #0
  00020	12840010	 addne       r0, r4, #0x10
  00024	1b000000	 blne        EnterCriticalSection

; 94   :     // set slave address if necessary
; 95   :     if (pDevice->slaveAddress != HIWORD(address))

  00028	e1d4e0bc	 ldrh        lr, [r4, #0xC]
  0002c	e1a06827	 mov         r6, r7, lsr #16
  00030	e15e0006	 cmp         lr, r6
  00034	0a000006	 beq         |$LN3@TWLReadReg|

; 96   :         {
; 97   :         I2CSetSlaveAddress(pDevice->hI2C, BSPGetTritonSlaveAddress() | HIWORD(address));

  00038	eb000000	 bl          BSPGetTritonSlaveAddress
  0003c	e180e827	 orr         lr, r0, r7, lsr #16
  00040	e5940000	 ldr         r0, [r4]
  00044	e1a0180e	 mov         r1, lr, lsl #16
  00048	e1a01821	 mov         r1, r1, lsr #16
  0004c	eb000000	 bl          I2CSetSlaveAddress

; 98   :         pDevice->slaveAddress = HIWORD(address);

  00050	e1c460bc	 strh        r6, [r4, #0xC]
  00054		 |$LN3@TWLReadReg|

; 99   :         }
; 100  : 
; 101  :     if (I2CRead(pDevice->hI2C, (UCHAR)address, pBuffer, size) != size)

  00054	e5940000	 ldr         r0, [r4]
  00058	e1a03008	 mov         r3, r8
  0005c	e1a02009	 mov         r2, r9
  00060	e20710ff	 and         r1, r7, #0xFF
  00064	eb000000	 bl          I2CRead
  00068	e1500008	 cmp         r0, r8

; 102  :         {
; 103  :         goto cleanUp;
; 104  :         }
; 105  :     
; 106  :     // We succceded
; 107  :     rc = TRUE;

  0006c	03a05001	 moveq       r5, #1
  00070		 |$cleanUp$44009|

; 108  : 
; 109  : 
; 110  : cleanUp:    
; 111  :     if (pDevice->csInitialized) LeaveCriticalSection(&pDevice->cs);

  00070	e5943008	 ldr         r3, [r4, #8]
  00074	e3530000	 cmp         r3, #0
  00078	12840010	 addne       r0, r4, #0x10
  0007c	1b000000	 blne        LeaveCriticalSection

; 112  : 
; 113  :     //if (rc)
; 114  :     //{
; 115  :     //    RETAILMSG(1,(TEXT("Triton ReadRegs @0x%x = 0x%x\r\n"),address,*(UCHAR*)pBuffer));
; 116  :     //}
; 117  :     //else
; 118  :     //{
; 119  :     //    RETAILMSG(1,(TEXT("Triton ReadRegs @0x%x failed\r\n"),address));
; 120  :     //}
; 121  :     return rc;
; 122  : }

  00080	e1a00005	 mov         r0, r5
  00084	e8bd43f0	 ldmia       sp!, {r4 - r9, lr}
  00088	e12fff1e	 bx          lr
  0008c		 |$M44115|

			 ENDP  ; |TWLReadRegs|

	EXPORT	|TWLWriteRegs|
	IMPORT	|I2CWrite|

  00000			 AREA	 |.pdata|, PDATA
|$T44131| DCD	|$LN9@TWLWriteRe|
	DCD	0x40002301
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |TWLWriteRegs| PROC

; 138  : {

  00000		 |$LN9@TWLWriteRe|
  00000	e92d43f0	 stmdb       sp!, {r4 - r9, lr}
  00004		 |$M44128|
  00004	e1a08003	 mov         r8, r3
  00008	e1a09002	 mov         r9, r2
  0000c	e1a07001	 mov         r7, r1
  00010	e1a04000	 mov         r4, r0

; 139  :     BOOL rc = FALSE;
; 140  :     
; 141  :     Device_t * pDevice = (Device_t *) hContext;
; 142  :     
; 143  : //    RETAILMSG(1,(TEXT("Triton WriteRegs @0x%x = 0x%x\r\n"),address,*(UCHAR*)pBuffer));   
; 144  :  
; 145  :     if (pDevice->csInitialized) EnterCriticalSection(&pDevice->cs);

  00014	e594e008	 ldr         lr, [r4, #8]
  00018	e3a05000	 mov         r5, #0
  0001c	e35e0000	 cmp         lr, #0
  00020	12840010	 addne       r0, r4, #0x10
  00024	1b000000	 blne        EnterCriticalSection

; 146  : 
; 147  :     // set slave address if necessary
; 148  :     if (pDevice->slaveAddress != HIWORD(address))

  00028	e1d4e0bc	 ldrh        lr, [r4, #0xC]
  0002c	e1a06827	 mov         r6, r7, lsr #16
  00030	e15e0006	 cmp         lr, r6
  00034	0a000006	 beq         |$LN3@TWLWriteRe|

; 149  :         {
; 150  :         I2CSetSlaveAddress(pDevice->hI2C, BSPGetTritonSlaveAddress() | HIWORD(address));

  00038	eb000000	 bl          BSPGetTritonSlaveAddress
  0003c	e180e827	 orr         lr, r0, r7, lsr #16
  00040	e5940000	 ldr         r0, [r4]
  00044	e1a0180e	 mov         r1, lr, lsl #16
  00048	e1a01821	 mov         r1, r1, lsr #16
  0004c	eb000000	 bl          I2CSetSlaveAddress

; 151  :         pDevice->slaveAddress = HIWORD(address);

  00050	e1c460bc	 strh        r6, [r4, #0xC]
  00054		 |$LN3@TWLWriteRe|

; 152  :         }
; 153  : 
; 154  :     if (I2CWrite(pDevice->hI2C, (UCHAR)address, pBuffer, size) != size)

  00054	e5940000	 ldr         r0, [r4]
  00058	e1a03008	 mov         r3, r8
  0005c	e1a02009	 mov         r2, r9
  00060	e20710ff	 and         r1, r7, #0xFF
  00064	eb000000	 bl          I2CWrite
  00068	e1500008	 cmp         r0, r8

; 155  :         {
; 156  :         goto cleanUp;
; 157  :         }   
; 158  : 
; 159  :     // We succceded
; 160  :     rc = TRUE;

  0006c	03a05001	 moveq       r5, #1
  00070		 |$cleanUp$44033|

; 161  : 
; 162  : cleanUp:  
; 163  :     if (pDevice->csInitialized) LeaveCriticalSection(&pDevice->cs);

  00070	e5943008	 ldr         r3, [r4, #8]
  00074	e3530000	 cmp         r3, #0
  00078	12840010	 addne       r0, r4, #0x10
  0007c	1b000000	 blne        LeaveCriticalSection

; 164  :     
; 165  :  /*   
; 166  :     if (!rc)
; 167  :     {
; 168  :         RETAILMSG(1,(TEXT("Triton WriteRegs @0x%x failed\r\n"),address));
; 169  :     }
; 170  :  */   
; 171  :     return rc;
; 172  : }

  00080	e1a00005	 mov         r0, r5
  00084	e8bd43f0	 ldmia       sp!, {r4 - r9, lr}
  00088	e12fff1e	 bx          lr
  0008c		 |$M44129|

			 ENDP  ; |TWLWriteRegs|

	EXPORT	|TWLSetValue|

  00000			 AREA	 |.pdata|, PDATA
|$T44145| DCD	|$LN10@TWLSetValu|
	DCD	0x40003002
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |TWLSetValue| PROC

; 181  : {

  00000		 |$LN10@TWLSetValu|
  00000	e92d43f0	 stmdb       sp!, {r4 - r9, lr}
  00004	e24dd004	 sub         sp, sp, #4
  00008		 |$M44142|
  00008	e1a08003	 mov         r8, r3
  0000c	e1a09002	 mov         r9, r2
  00010	e1a06001	 mov         r6, r1
  00014	e1a04000	 mov         r4, r0

; 182  :     UCHAR regval;
; 183  :     BOOL rc = FALSE;
; 184  :     
; 185  :     Device_t * pDevice = (Device_t *) hContext;
; 186  : 
; 187  :     if (pDevice->csInitialized) EnterCriticalSection(&pDevice->cs);

  00018	e594e008	 ldr         lr, [r4, #8]
  0001c	e3a05000	 mov         r5, #0
  00020	e35e0000	 cmp         lr, #0
  00024	12840010	 addne       r0, r4, #0x10
  00028	1b000000	 blne        EnterCriticalSection

; 188  : 
; 189  :     // set slave address if necessary
; 190  :     if (pDevice->slaveAddress != HIWORD(address))

  0002c	e1d4e0bc	 ldrh        lr, [r4, #0xC]
  00030	e1a07826	 mov         r7, r6, lsr #16
  00034	e15e0007	 cmp         lr, r7
  00038	0a000006	 beq         |$LN4@TWLSetValu|

; 191  :         {
; 192  :         I2CSetSlaveAddress(pDevice->hI2C, BSPGetTritonSlaveAddress() | HIWORD(address));

  0003c	eb000000	 bl          BSPGetTritonSlaveAddress
  00040	e180e826	 orr         lr, r0, r6, lsr #16
  00044	e5940000	 ldr         r0, [r4]
  00048	e1a0180e	 mov         r1, lr, lsl #16
  0004c	e1a01821	 mov         r1, r1, lsr #16
  00050	eb000000	 bl          I2CSetSlaveAddress

; 193  :         pDevice->slaveAddress = HIWORD(address);

  00054	e1c470bc	 strh        r7, [r4, #0xC]
  00058		 |$LN4@TWLSetValu|

; 194  :         }
; 195  : 
; 196  :     if (I2CRead(pDevice->hI2C, (UCHAR)address, &regval, sizeof(regval)) != sizeof(regval))

  00058	e5940000	 ldr         r0, [r4]
  0005c	e20610ff	 and         r1, r6, #0xFF
  00060	e3a03001	 mov         r3, #1
  00064	e28d2000	 add         r2, sp, #0
  00068	eb000000	 bl          I2CRead
  0006c	e3500001	 cmp         r0, #1
  00070	1a00000a	 bne         |$cleanUp$44058|

; 197  :         {
; 198  :         goto cleanUp;
; 199  :         }   
; 200  : 
; 201  :         regval = (regval & ~mask) | value;

  00074	e5dd3000	 ldrb        r3, [sp]

; 202  : 
; 203  :     if (I2CWrite(pDevice->hI2C, (UCHAR)address, &regval, sizeof(regval)) != sizeof(regval))

  00078	e5940000	 ldr         r0, [r4]
  0007c	e28d2000	 add         r2, sp, #0
  00080	e1c33008	 bic         r3, r3, r8
  00084	e1833009	 orr         r3, r3, r9
  00088	e5cd3000	 strb        r3, [sp]
  0008c	e3a03001	 mov         r3, #1
  00090	e20610ff	 and         r1, r6, #0xFF
  00094	eb000000	 bl          I2CWrite
  00098	e3500001	 cmp         r0, #1

; 204  :         {
; 205  :         goto cleanUp;
; 206  :         }   
; 207  : 
; 208  :     // We succceded
; 209  :     rc = TRUE;

  0009c	03a05001	 moveq       r5, #1
  000a0		 |$cleanUp$44058|

; 210  : 
; 211  : cleanUp:  
; 212  :     if (pDevice->csInitialized) LeaveCriticalSection(&pDevice->cs);

  000a0	e5943008	 ldr         r3, [r4, #8]
  000a4	e3530000	 cmp         r3, #0
  000a8	12840010	 addne       r0, r4, #0x10
  000ac	1b000000	 blne        LeaveCriticalSection

; 213  :   
; 214  :     return rc;    
; 215  : }

  000b0	e1a00005	 mov         r0, r5
  000b4	e28dd004	 add         sp, sp, #4
  000b8	e8bd43f0	 ldmia       sp!, {r4 - r9, lr}
  000bc	e12fff1e	 bx          lr
  000c0		 |$M44143|

			 ENDP  ; |TWLSetValue|

	END
