#include <windows.h>
#include "bsp.h"
#include "bsp_logo.h"
#include "omap_dss_regs.h"
#include "lcd.h"
#include "oalex.h"
#include "eboot.h"
#include "sdk_gpio.h"

#include "twl.h"
#include "triton.h"
#include "tps659xx_internals.h"

#define FONT_HEIGHT		16
#define FONT_WIDTH		8
UINT 	PANEL_WIDTH  = 320;
UINT 	PANEL_HEIGHT = 240;

static UINT g_nHeight	= 0;
static UINT g_nWidth	= 0;
static UINT g_nColMax	= 0;
static UINT g_nRowMax	= 0;
static PUCHAR	g_nBpp;
static DWORD g_wFontColor = 0x080000;
static DWORD g_wBkColor   = 0x000000;

static volatile DWORD *g_dwFrameBuffer = NULL;

//static int sXPos = 0;
//static int sYPos = 0;

//static int cur_row = 0;
//static int cur_col = 0;

typedef struct DIRECT{
		int left;   
    	int top;   
   		int right;
   		int bottom;
}DIRECT;

const BYTE asciiFont[][16] = {
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0x00 */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0x01 */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0x02 */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0x03 */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0x04 */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0x05 */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0x06 */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0x07 */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0x08 */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0x09 */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0x0A */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0x0B */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0x0C */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0x0D */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0x0E */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0x0F */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0x10 */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0x11 */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0x12 */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0x13 */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0x14 */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0x15 */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0x16 */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0x17 */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0x18 */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0x19 */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0x1A */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0x1B */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0x1C */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0x1D */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0x1E */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0x1F */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  [ ]  ASCII =  0x20 */
{0x00, 0x00, 0x00, 0x18, 0x3C, 0x3C, 0x3C, 0x18,
 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00},  /*  [!]  ASCII =  0x21 */
{0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  ["]  ASCII =  0x22 */
{0x00, 0x00, 0x00, 0x36, 0x36, 0x7F, 0x36, 0x36,
 0x36, 0x7F, 0x36, 0x36, 0x00, 0x00, 0x00, 0x00},  /*  [#]  ASCII =  0x23 */
{0x00, 0x18, 0x18, 0x3C, 0x66, 0x60, 0x30, 0x18,
 0x0C, 0x06, 0x66, 0x3C, 0x18, 0x18, 0x00, 0x00},  /*  [$]  ASCII =  0x24 */
{0x00, 0x00, 0x70, 0xD8, 0xDA, 0x76, 0x0C, 0x18,
 0x30, 0x6E, 0x5B, 0x1B, 0x0E, 0x00, 0x00, 0x00},  /*  [%]  ASCII =  0x25 */
{0x00, 0x00, 0x70, 0xD0, 0xD0, 0x70, 0x00, 0x10,
 0x30, 0x60, 0x50, 0x10, 0x00, 0x00, 0x00, 0x00},  /*  [&]  ASCII =  0x26 */
{0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  [']  ASCII =  0x27 */
{0x00, 0x00, 0x00, 0x0C, 0x18, 0x18, 0x30, 0x30,
 0x30, 0x30, 0x30, 0x18, 0x18, 0x0C, 0x00, 0x00},  /*  [(]  ASCII =  0x28 */
{0x00, 0x00, 0x00, 0x30, 0x18, 0x18, 0x0C, 0x0C,
 0x0C, 0x0C, 0x0C, 0x18, 0x18, 0x30, 0x00, 0x00},  /*  [)]  ASCII =  0x29 */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x1C, 0x7F,
 0x1C, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  [*]  ASCII =  0x2A */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x7E,
 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  [+]  ASCII =  0x2B */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x1C, 0x1C, 0x0C, 0x18, 0x00, 0x00},  /*  [,]  ASCII =  0x2C */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7E,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  [-]  ASCII =  0x2D */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x1C, 0x1C, 0x00, 0x00, 0x00, 0x00},  /*  [.]  ASCII =  0x2E */
{0x00, 0x00, 0x00, 0x06, 0x06, 0x0C, 0x0C, 0x18,
 0x18, 0x30, 0x30, 0x60, 0x60, 0x00, 0x00, 0x00},  /*  [/]  ASCII =  0x2F */
{0x00, 0x00, 0x00, 0x1E, 0x33, 0x37, 0x37, 0x33,
 0x3B, 0x3B, 0x33, 0x1E, 0x00, 0x00, 0x00, 0x00},  /*  [0]  ASCII =  0x30 */
{0x00, 0x00, 0x00, 0x0C, 0x1C, 0x7C, 0x0C, 0x0C,
 0x0C, 0x0C, 0x0C, 0x0C, 0x00, 0x00, 0x00, 0x00},  /*  [1]  ASCII =  0x31 */
{0x00, 0x00, 0x00, 0x3C, 0x66, 0x66, 0x06, 0x0C,
 0x18, 0x30, 0x60, 0x7E, 0x00, 0x00, 0x00, 0x00},  /*  [2]  ASCII =  0x32 */
{0x00, 0x00, 0x00, 0x3C, 0x66, 0x66, 0x06, 0x1C,
 0x06, 0x66, 0x66, 0x3C, 0x00, 0x00, 0x00, 0x00},  /*  [3]  ASCII =  0x33 */
{0x00, 0x00, 0x00, 0x30, 0x30, 0x36, 0x36, 0x36,
 0x66, 0x7F, 0x06, 0x06, 0x00, 0x00, 0x00, 0x00},  /*  [4]  ASCII =  0x34 */
{0x00, 0x00, 0x00, 0x7E, 0x60, 0x60, 0x60, 0x7C,
 0x06, 0x06, 0x0C, 0x78, 0x00, 0x00, 0x00, 0x00},  /*  [5]  ASCII =  0x35 */
{0x00, 0x00, 0x00, 0x1C, 0x18, 0x30, 0x7C, 0x66,
 0x66, 0x66, 0x66, 0x3C, 0x00, 0x00, 0x00, 0x00},  /*  [6]  ASCII =  0x36 */
{0x00, 0x00, 0x00, 0x7E, 0x06, 0x0C, 0x0C, 0x18,
 0x18, 0x30, 0x30, 0x30, 0x00, 0x00, 0x00, 0x00},  /*  [7]  ASCII =  0x37 */
{0x00, 0x00, 0x00, 0x3C, 0x66, 0x66, 0x76, 0x3C,
 0x6E, 0x66, 0x66, 0x3C, 0x00, 0x00, 0x00, 0x00},  /*  [8]  ASCII =  0x38 */
{0x00, 0x00, 0x00, 0x3C, 0x66, 0x66, 0x66, 0x66,
 0x3E, 0x0C, 0x18, 0x38, 0x00, 0x00, 0x00, 0x00},  /*  [9]  ASCII =  0x39 */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x1C, 0x1C, 0x00,
 0x00, 0x00, 0x1C, 0x1C, 0x00, 0x00, 0x00, 0x00},  /*  [:]  ASCII =  0x3A */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x1C, 0x1C, 0x00,
 0x00, 0x00, 0x1C, 0x1C, 0x0C, 0x18, 0x00, 0x00},  /*  [;]  ASCII =  0x3B */
{0x00, 0x00, 0x00, 0x06, 0x0C, 0x18, 0x30, 0x60,
 0x30, 0x18, 0x0C, 0x06, 0x00, 0x00, 0x00, 0x00},  /*  [<]  ASCII =  0x3C */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7E, 0x00,
 0x7E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  [=]  ASCII =  0x3D */
{0x00, 0x00, 0x00, 0x60, 0x30, 0x18, 0x0C, 0x06,
 0x0C, 0x18, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00},  /*  [>]  ASCII =  0x3E */
{0x00, 0x00, 0x00, 0x3C, 0x66, 0x66, 0x0C, 0x18,
 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00},  /*  [?]  ASCII =  0x3F */
{0x00, 0x00, 0x00, 0x7E, 0xC3, 0xC3, 0xCF, 0xDB,
 0xDB, 0xCF, 0xC0, 0x7F, 0x00, 0x00, 0x00, 0x00},  /*  [@]  ASCII =  0x40 */
{0x00, 0x00, 0x00, 0x18, 0x3C, 0x66, 0x66, 0x66,
 0x7E, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00},  /*  [A]  ASCII =  0x41 */
{0x00, 0x00, 0x00, 0x7C, 0x66, 0x66, 0x66, 0x7C,
 0x66, 0x66, 0x66, 0x7C, 0x00, 0x00, 0x00, 0x00},  /*  [B]  ASCII =  0x42 */
{0x00, 0x00, 0x00, 0x3C, 0x66, 0x66, 0x60, 0x60,
 0x60, 0x66, 0x66, 0x3C, 0x00, 0x00, 0x00, 0x00},  /*  [C]  ASCII =  0x43 */
{0x00, 0x00, 0x00, 0x78, 0x6C, 0x66, 0x66, 0x66,
 0x66, 0x66, 0x6C, 0x78, 0x00, 0x00, 0x00, 0x00},  /*  [D]  ASCII =  0x44 */
{0x00, 0x00, 0x00, 0x7E, 0x60, 0x60, 0x60, 0x7C,
 0x60, 0x60, 0x60, 0x7E, 0x00, 0x00, 0x00, 0x00},  /*  [E]  ASCII =  0x45 */
{0x00, 0x00, 0x00, 0x7E, 0x60, 0x60, 0x60, 0x7C,
 0x60, 0x60, 0x60, 0x60, 0x00, 0x00, 0x00, 0x00},  /*  [F]  ASCII =  0x46 */
{0x00, 0x00, 0x00, 0x3C, 0x66, 0x66, 0x60, 0x60,
 0x6E, 0x66, 0x66, 0x3E, 0x00, 0x00, 0x00, 0x00},  /*  [G]  ASCII =  0x47 */
{0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x7E,
 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00},  /*  [H]  ASCII =  0x48 */
{0x00, 0x00, 0x00, 0x3C, 0x18, 0x18, 0x18, 0x18,
 0x18, 0x18, 0x18, 0x3C, 0x00, 0x00, 0x00, 0x00},  /*  [I]  ASCII =  0x49 */
{0x00, 0x00, 0x00, 0x06, 0x06, 0x06, 0x06, 0x06,
 0x06, 0x66, 0x66, 0x3C, 0x00, 0x00, 0x00, 0x00},  /*  [J]  ASCII =  0x4A */
{0x00, 0x00, 0x00, 0x66, 0x66, 0x6C, 0x6C, 0x78,
 0x6C, 0x6C, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00},  /*  [K]  ASCII =  0x4B */
{0x00, 0x00, 0x00, 0x60, 0x60, 0x60, 0x60, 0x60,
 0x60, 0x60, 0x60, 0x7E, 0x00, 0x00, 0x00, 0x00},  /*  [L]  ASCII =  0x4C */
{0x00, 0x00, 0x00, 0x63, 0x63, 0x77, 0x6B, 0x6B,
 0x6B, 0x63, 0x63, 0x63, 0x00, 0x00, 0x00, 0x00},  /*  [M]  ASCII =  0x4D */
{0x00, 0x00, 0x00, 0x63, 0x63, 0x73, 0x7B, 0x6F,
 0x67, 0x63, 0x63, 0x63, 0x00, 0x00, 0x00, 0x00},  /*  [N]  ASCII =  0x4E */
{0x00, 0x00, 0x00, 0x3C, 0x66, 0x66, 0x66, 0x66,
 0x66, 0x66, 0x66, 0x3C, 0x00, 0x00, 0x00, 0x00},  /*  [O]  ASCII =  0x4F */
{0x00, 0x00, 0x00, 0x7C, 0x66, 0x66, 0x66, 0x7C,
 0x60, 0x60, 0x60, 0x60, 0x00, 0x00, 0x00, 0x00},  /*  [P]  ASCII =  0x50 */
{0x00, 0x00, 0x00, 0x3C, 0x66, 0x66, 0x66, 0x66,
 0x66, 0x66, 0x66, 0x3C, 0x0C, 0x06, 0x00, 0x00},  /*  [Q]  ASCII =  0x51 */
{0x00, 0x00, 0x00, 0x7C, 0x66, 0x66, 0x66, 0x7C,
 0x6C, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00},  /*  [R]  ASCII =  0x52 */
{0x00, 0x00, 0x00, 0x3C, 0x66, 0x60, 0x30, 0x18,
 0x0C, 0x06, 0x66, 0x3C, 0x00, 0x00, 0x00, 0x00},  /*  [S]  ASCII =  0x53 */
{0x00, 0x00, 0x00, 0x7E, 0x18, 0x18, 0x18, 0x18,
 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00},  /*  [T]  ASCII =  0x54 */
{0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66,
 0x66, 0x66, 0x66, 0x3C, 0x00, 0x00, 0x00, 0x00},  /*  [U]  ASCII =  0x55 */
{0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66,
 0x66, 0x66, 0x3C, 0x18, 0x00, 0x00, 0x00, 0x00},  /*  [V]  ASCII =  0x56 */
{0x00, 0x00, 0x00, 0x63, 0x63, 0x63, 0x6B, 0x6B,
 0x6B, 0x36, 0x36, 0x36, 0x00, 0x00, 0x00, 0x00},  /*  [W]  ASCII =  0x57 */
{0x00, 0x00, 0x00, 0x66, 0x66, 0x34, 0x18, 0x18,
 0x2C, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00},  /*  [X]  ASCII =  0x58 */
{0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x3C,
 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00},  /*  [Y]  ASCII =  0x59 */
{0x00, 0x00, 0x00, 0x7E, 0x06, 0x06, 0x0C, 0x18,
 0x30, 0x60, 0x60, 0x7E, 0x00, 0x00, 0x00, 0x00},  /*  [Z]  ASCII =  0x5A */
{0x00, 0x00, 0x00, 0x3C, 0x30, 0x30, 0x30, 0x30,
 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3C, 0x3C},  /*  [[]  ASCII =  0x5B */
{0x00, 0x00, 0x00, 0x60, 0x60, 0x30, 0x30, 0x18,
 0x18, 0x0C, 0x0C, 0x06, 0x06, 0x00, 0x00, 0x00},  /*  [\]  ASCII =  0x5C */
{0x00, 0x00, 0x00, 0x3C, 0x0C, 0x0C, 0x0C, 0x0C,
 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x3C, 0x3C},  /*  []]  ASCII =  0x5D */
{0x00, 0x18, 0x3C, 0x66, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  [^]  ASCII =  0x5E */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF},  /*  [_]  ASCII =  0x5F */
{0x00, 0x38, 0x18, 0x0C, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  [`]  ASCII =  0x60 */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x06, 0x06,
 0x3E, 0x66, 0x66, 0x3E, 0x00, 0x00, 0x00, 0x00},  /*  [a]  ASCII =  0x61 */
{0x00, 0x00, 0x00, 0x60, 0x60, 0x7C, 0x66, 0x66,
 0x66, 0x66, 0x66, 0x7C, 0x00, 0x00, 0x00, 0x00},  /*  [b]  ASCII =  0x62 */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x66, 0x60,
 0x60, 0x60, 0x66, 0x3C, 0x00, 0x00, 0x00, 0x00},  /*  [c]  ASCII =  0x63 */
{0x00, 0x00, 0x00, 0x06, 0x06, 0x3E, 0x66, 0x66,
 0x66, 0x66, 0x66, 0x3E, 0x00, 0x00, 0x00, 0x00},  /*  [d]  ASCII =  0x64 */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x66, 0x66,
 0x7E, 0x60, 0x60, 0x3C, 0x00, 0x00, 0x00, 0x00},  /*  [e]  ASCII =  0x65 */
{0x00, 0x00, 0x00, 0x1E, 0x30, 0x30, 0x30, 0x7E,
 0x30, 0x30, 0x30, 0x30, 0x00, 0x00, 0x00, 0x00},  /*  [f]  ASCII =  0x66 */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0x66, 0x66,
 0x66, 0x66, 0x66, 0x3E, 0x06, 0x06, 0x7C, 0x7C},  /*  [g]  ASCII =  0x67 */
{0x00, 0x00, 0x00, 0x60, 0x60, 0x7C, 0x66, 0x66,
 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00},  /*  [h]  ASCII =  0x68 */
{0x00, 0x00, 0x18, 0x18, 0x00, 0x78, 0x18, 0x18,
 0x18, 0x18, 0x18, 0x7E, 0x00, 0x00, 0x00, 0x00},  /*  [i]  ASCII =  0x69 */
{0x00, 0x00, 0x0C, 0x0C, 0x00, 0x3C, 0x0C, 0x0C,
 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x78, 0x78},  /*  [j]  ASCII =  0x6A */
{0x00, 0x00, 0x00, 0x60, 0x60, 0x66, 0x66, 0x6C,
 0x78, 0x6C, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00},  /*  [k]  ASCII =  0x6B */
{0x00, 0x00, 0x00, 0x78, 0x18, 0x18, 0x18, 0x18,
 0x18, 0x18, 0x18, 0x7E, 0x00, 0x00, 0x00, 0x00},  /*  [l]  ASCII =  0x6C */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x7E, 0x6B, 0x6B,
 0x6B, 0x6B, 0x6B, 0x63, 0x00, 0x00, 0x00, 0x00},  /*  [m]  ASCII =  0x6D */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0x66, 0x66,
 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00},  /*  [n]  ASCII =  0x6E */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x66, 0x66,
 0x66, 0x66, 0x66, 0x3C, 0x00, 0x00, 0x00, 0x00},  /*  [o]  ASCII =  0x6F */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0x66, 0x66,
 0x66, 0x66, 0x66, 0x7C, 0x60, 0x60, 0x60, 0x60},  /*  [p]  ASCII =  0x70 */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0x66, 0x66,
 0x66, 0x66, 0x66, 0x3E, 0x06, 0x06, 0x06, 0x06},  /*  [q]  ASCII =  0x71 */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x6E, 0x70,
 0x60, 0x60, 0x60, 0x60, 0x00, 0x00, 0x00, 0x00},  /*  [r]  ASCII =  0x72 */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0x60, 0x60,
 0x3C, 0x06, 0x06, 0x7C, 0x00, 0x00, 0x00, 0x00},  /*  [s]  ASCII =  0x73 */
{0x00, 0x00, 0x00, 0x30, 0x30, 0x7E, 0x30, 0x30,
 0x30, 0x30, 0x30, 0x1E, 0x00, 0x00, 0x00, 0x00},  /*  [t]  ASCII =  0x74 */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66,
 0x66, 0x66, 0x66, 0x3E, 0x00, 0x00, 0x00, 0x00},  /*  [u]  ASCII =  0x75 */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66,
 0x66, 0x66, 0x3C, 0x18, 0x00, 0x00, 0x00, 0x00},  /*  [v]  ASCII =  0x76 */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x63, 0x6B, 0x6B,
 0x6B, 0x6B, 0x36, 0x36, 0x00, 0x00, 0x00, 0x00},  /*  [w]  ASCII =  0x77 */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x3C,
 0x18, 0x3C, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00},  /*  [x]  ASCII =  0x78 */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66,
 0x66, 0x66, 0x66, 0x3C, 0x0C, 0x18, 0xF0, 0xF0},  /*  [y]  ASCII =  0x79 */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x7E, 0x06, 0x0C,
 0x18, 0x30, 0x60, 0x7E, 0x00, 0x00, 0x00, 0x00},  /*  [z]  ASCII =  0x7A */
{0x00, 0x00, 0x00, 0x0C, 0x18, 0x18, 0x18, 0x30,
 0x60, 0x30, 0x18, 0x18, 0x18, 0x0C, 0x00, 0x00},  /*  [{]  ASCII =  0x7B */
{0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18,
 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18},  /*  [|]  ASCII =  0x7C */
{0x00, 0x00, 0x00, 0x30, 0x18, 0x18, 0x18, 0x0C,
 0x06, 0x0C, 0x18, 0x18, 0x18, 0x30, 0x00, 0x00},  /*  [}]  ASCII =  0x7D */
{0x00, 0x00, 0x00, 0x71, 0xDB, 0x8E, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  [~]  ASCII =  0x7E */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0x7F */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0x80 */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0x81 */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0x82 */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0x83 */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0x84 */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0x85 */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0x86 */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0x87 */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0x88 */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0x89 */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0x8A */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0x8B */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0x8C */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0x8D */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0x8E */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0x8F */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0x90 */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0x91 */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0x92 */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0x93 */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0x94 */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0x95 */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0x96 */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0x97 */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0x98 */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0x99 */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0x9A */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0x9B */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0x9C */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0x9D */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0x9E */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0x9F */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0xA0 */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0xA1 */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0xA2 */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0xA3 */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0xA4 */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0xA5 */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0xA6 */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0xA7 */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0xA8 */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0xA9 */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0xAA */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0xAB */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0xAC */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0xAD */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0xAE */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0xAF */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0xB0 */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0xB1 */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0xB2 */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0xB3 */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0xB4 */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0xB5 */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0xB6 */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0xB7 */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0xB8 */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0xB9 */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0xBA */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0xBB */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0xBC */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0xBD */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0xBE */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0xBF */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0xC0 */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0xC1 */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0xC2 */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0xC3 */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0xC4 */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0xC5 */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0xC6 */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0xC7 */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0xC8 */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0xC9 */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0xCA */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0xCB */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0xCC */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0xCD */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0xCE */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0xCF */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0xD0 */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0xD1 */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0xD2 */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0xD3 */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0xD4 */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0xD5 */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0xD6 */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0xD7 */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0xD8 */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0xD9 */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0xDA */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0xDB */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0xDC */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0xDD */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0xDE */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0xDF */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0xE0 */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0xE1 */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0xE2 */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0xE3 */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0xE4 */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0xE5 */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0xE6 */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0xE7 */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0xE8 */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0xE9 */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0xEA */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0xEB */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0xEC */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0xED */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0xEE */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0xEF */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0xF0 */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0xF1 */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0xF2 */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0xF3 */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0xF4 */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0xF5 */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0xF6 */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0xF7 */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0xF8 */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0xF9 */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0xFA */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0xFB */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0xFC */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0xFD */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0xFE */
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},  /*  []  ASCII =  0xFF */
};
/*void Fill24BitColorBuffer(
		PUCHAR framebuffer, 
		DWORD LOGO_HEIGHT, 
		DWORD LOGO_WIDTH*BYTES_PER_PIXEL, 
		PUCHAR)framebuffer + dwLength);*/

//nWidth = 240, nHeight = 320, nBpp = RGB*8, dwFrameBuffer = Locaton
BOOL InitGraphicsEngine(UINT nWidth, UINT nHeight, PUCHAR nBpp, DWORD dwFrameBuffer)
{
	UINT checkbpp = 24;
	if(nBpp != (PUCHAR)checkbpp)
		return FALSE;

	g_nWidth  = nWidth;
	g_nHeight = nHeight;

	g_nColMax = g_nWidth  / FONT_WIDTH;
	g_nRowMax = g_nHeight / FONT_HEIGHT;
	
	g_nBpp = nBpp;  
	g_dwFrameBuffer = (volatile DWORD *) dwFrameBuffer;
	
	return TRUE;
}
	
void FillColorBar(int xPos, int yPos, int dWidth,int dHigh, DWORD wColor)
{
	volatile DWORD *lpFBuffer = g_dwFrameBuffer + (PANEL_WIDTH*yPos) + xPos;

	int y,x;
	DIRECT bounds;

	bounds.left		= xPos;
	bounds.top		= yPos;
	bounds.right	= xPos + PANEL_WIDTH;
	bounds.bottom  	= yPos + dWidth;

	for(y = 0; y < dHigh; y++)
	{
		for(x = 0; x < dWidth; x++){
			*(DWORD *) (lpFBuffer+x) = wColor;
		}
		lpFBuffer += PANEL_WIDTH;
	}
	
	//Fill24BitColorBuffer((PWORD)(g_dwFrameBuffer + (PANEL_WIDTH*yPos)) , 0, yPos, (PANEL_WIDTH*dHigh));	
}

void FillColor(DWORD wColor)
{
	volatile DWORD *mem = g_dwFrameBuffer;
	int i,size;

	DIRECT bounds;
	g_wBkColor = wColor;

	bounds.left   = 0;
	bounds.top    = 0;
	bounds.right  = PANEL_WIDTH;
	bounds.bottom = PANEL_HEIGHT;

	size = g_nWidth * g_nHeight;
	for(i = 0; i < size; i ++) {
        *mem = wColor;
        	mem++;
    }
	//Fill24BitColorBuffer((PWORD)FRAME_BUFFER_PHYSICAL_ADDRESS, 0, 0, SCREEM_PIXEL);
}

VOID FillASCII(INT Row, INT Col, BYTE c)
{
    volatile DWORD *mem = g_dwFrameBuffer;
    int i, j;
	unsigned int ttbit;
    int p = 8;
    unsigned long offset;
    int offh, offw;
    unsigned char bit;

    offw = FONT_WIDTH * Col;
    
    for(i=0; i<16; i++) 
	{
        offh = FONT_HEIGHT * Row + i;
 		for (j=0; j<8; j++) 
        {
            ttbit = 1 << j;
			bit = (unsigned char)ttbit;
            bit &= asciiFont[c][i];
			offset = g_nWidth * offh + offw;
            if (!bit) {							//Non-zero is Running
        	  	mem[ p + offset ] = g_wBkColor;
                p--;
            }else {
                mem[ p + offset ] = g_wFontColor;
                p--;
            }
            
            if(p == 0){
                p = 8;
            }
        }
    }
}

void MoveLineUp(void)
{
    DWORD sizeof_line = g_nWidth * FONT_HEIGHT;
    volatile DWORD   *src;
    volatile DWORD   *dest;
    DWORD    i;

    dest = g_dwFrameBuffer;
    src = dest + sizeof_line;
    i = 0;

    while ( i < g_nRowMax - 1) 
    {
        memcpy((PVOID) dest, (PVOID) src, sizeof_line * sizeof(DWORD));

        i++;
        dest += sizeof_line;
        src  += sizeof_line;
    }

    for (i = 0; i < sizeof_line; i ++)				
        *dest = g_wBkColor;							//let it "g_wBkColor" value = *dest, until to "sizeof_line"  			
}

static int cur_row = 0;
static int cur_col = 0;

void SetFontColor(DWORD wColor)
{
    g_wFontColor = wColor;
}

void GL_SetBkColor(DWORD bk)
{
    g_wBkColor = bk;
}

void GL_SetCursor(int col, int row)
{
    cur_col = col;
    cur_row = row;
}

void PrintString(char* s)
{
	DIRECT bounds;

	bounds.left   = 0;
	bounds.top    = 0;
	bounds.right  = PANEL_WIDTH;
	bounds.bottom = PANEL_HEIGHT;

	while(*s){
		if(*s == '\n'){
			cur_col = g_nColMax - 1;/* new line */
        }else if(*s == '\r'){
        	cur_col = 0;
            goto next_char;
        }else if (*s == '\b'){
        	cur_col --;
            goto next_char;
		}else{
			FillASCII(cur_row, cur_col, *s);
		}
	
		cur_col++;
        if (cur_col == (int)g_nColMax) //MM
		{
            if (cur_row == (int)g_nRowMax-2) //MM 
			{
                MoveLineUp();
            }else{
                cur_row++;
            }
            cur_col = 0;
        }
next_char:
       s++;
	}
}

PCHAR MapToHex(ULONG value, int Unit)
{	
  char str[MAX_PATH];
  int  index;
  
  	for(index = 0; index < Unit; index++)
  	{
         if( (value & 0xf) < 10)
            str[Unit-1 - index] = (char)( (value&0xf)+'0');         
         else
            str[Unit-1 - index] = (char)( (value&0xf-10)+'A');                 
         
         value = value>>4;
    }          
   return &str[0];
}

PCHAR MapToInt(ULONG value)
{
	 char str[MAX_PATH];	
	 char StrInt[MAX_PATH];
	 char cINT;
	 int  num,index=0;	 
	 while(value)
     {        	
      	cINT = (char)(value%10) + '0';                
         str[index] = cINT;
         value/=10;
         index++;
     }
    	    
   	for(num = 0; num<index; num++)
    {      	
       StrInt[num] = str[index-1 - num];
    }   
     	StrInt[index]='\0';         
		return &StrInt[0];
}

/*void PrintString2(char *textString, ...)
{
   char cText;
   char str[MAX_PATH];
   int  index=0;
   int  i=0;
   va_list vl;    
   va_start(vl, textString); 
      
   while(*textString)
       {
        cText = *textString++;
        i++;
        
        switch (cText)
        {        					        
				   
				   case '%':
	                     cText = *textString++;
	                     switch (cText) {
	                                  
	                                    case '%' :
	                                    	           memcpy(&str[index],&cText,1);
				                                           index++;
	                                    	           break;   
	                                    	           
	                                    case 's' :
	                                    case 'S' :	                                              	                                                
	                                                strcpy(&str[index],(char *)va_arg(vl,ULONG)); 
	                                             
	                                                index=strlen(str); 
	                                                
	                                                break;     
	                                    
	                                    
	                                     case 'd' :
	                                     case 'D' :	                                              	                                                
	                                                strcpy(&str[index],MapToInt(va_arg(vl,ULONG)) ); 
	                                             
	                                                index=strlen(str); 
	                                                
	                                                break;     
	                                     
	                                     
	                                     case 'b' :
	                                     case 'B' :
	                                               
	                                                memcpy(&str[index], MapToHex(va_arg(vl, ULONG),2) ,2);	
	                                                index+=2;                     
	                                                break;
	                                     
	                                     case 'h' :
	                                     case 'H' :
	                                                memcpy(&str[index], MapToHex(va_arg(vl, ULONG),4) ,4);	
	                                                index+=4;                      
	                                                break;
	                                     
	                                     case 'x' :
	                                     case 'X' :
	                                                memcpy(&str[index], MapToHex(va_arg(vl, ULONG),8) ,8);	
	                                                index+=8;                      
	                                                break;           
	                                                
				                              } 
				               break;
          
			         default:			                
				               
				               memcpy(&str[index],&cText,1);
				               index++;
				               				               				              
				               break;
		       }
	}
 va_end(vl);		
 str[index]='\0';    
 

 
 PrintString(str);
	
}*/
