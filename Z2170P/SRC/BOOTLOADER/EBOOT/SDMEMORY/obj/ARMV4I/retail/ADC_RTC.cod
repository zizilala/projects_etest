; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\Z2170P\SRC\BOOTLOADER\EBOOT\ADC_RTC.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|stall_1Sec| [ DATA ]

  00000			 AREA	 |.data|, DATA
	 COMMON	|ghGPIO|, 0x4

	 COMMON	|ghTwl|, 0x4

|stall_1Sec| DCD 0xf4240

  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
	IMPORT	|TWLWriteRegs|
; File c:\wince600\platform\common\src\soc\common_ti_v1\triton\inc\twl.h

  00000			 AREA	 |.pdata|, PDATA
|$T47331| DCD	|$LN5@TWLWriteBy|
	DCD	0x40000803
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |TWLWriteByteReg| PROC

; 51   : {

  00000		 |$LN5@TWLWriteBy|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d000f	 stmdb       sp!, {r0 - r3}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c		 |$M47328|

; 52   :     return TWLWriteRegs(hTWL,address,&data,sizeof(data));

  0000c	e3a03001	 mov         r3, #1
  00010	e28d2010	 add         r2, sp, #0x10
  00014	eb000000	 bl          TWLWriteRegs

; 53   : }

  00018	e89d6000	 ldmia       sp, {sp, lr}
  0001c	e12fff1e	 bx          lr
  00020		 |$M47329|

			 ENDP  ; |TWLWriteByteReg|

	IMPORT	|TWLReadRegs|

  00000			 AREA	 |.pdata|, PDATA
|$T47343| DCD	|$LN5@TWLReadByt|
	DCD	0x40000501
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |TWLReadByteReg| PROC

; 59   : {

  00000		 |$LN5@TWLReadByt|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M47340|

; 60   :     return TWLReadRegs(hTWL,address,data,sizeof(*data));

  00004	e3a03001	 mov         r3, #1
  00008	eb000000	 bl          TWLReadRegs

; 61   : }

  0000c	e49de004	 ldr         lr, [sp], #4
  00010	e12fff1e	 bx          lr
  00014		 |$M47341|

			 ENDP  ; |TWLReadByteReg|

	EXPORT	|ADCRTCInit|
	IMPORT	|GPIOSetBit|
	IMPORT	|GPIOOpen|

  00000			 AREA	 |.pdata|, PDATA
|$T47360| DCD	|$LN9@ADCRTCInit|
	DCD	0x40002e02
; Function compile flags: /Ogspy
; File c:\wince600\platform\z2170p\src\bootloader\eboot\adc_rtc.c

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |ADCRTCInit| PROC

; 25   : {   

  00000		 |$LN9@ADCRTCInit|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004	e24dd008	 sub         sp, sp, #8
  00008		 |$M47357|

; 26   :     UCHAR   status;   
; 27   :     UINT16  channels = 0x4;  // ADCIN2

  00008	e3a03004	 mov         r3, #4
  0000c	e1cd30b6	 strh        r3, [sp, #6]

; 28   :  
; 29   :     ghGPIO = GPIOOpen();

  00010	eb000000	 bl          GPIOOpen
  00014	e59f2098	 ldr         r2, [pc, #0x98]
  00018	e1a03000	 mov         r3, r0

; 30   :     //UNREFERENCED_PARAMETER(pMenu);  
; 31   :     
; 32   :     // Backup battery & ADC initial
; 33   :     GPIOSetBit(ghGPIO, EN_SB_CHARGE);             // Backup battery charge 

  0001c	e3a0108b	 mov         r1, #0x8B
  00020	e5823000	 str         r3, [r2]
  00024	eb000000	 bl          GPIOSetBit

; 34   :     TWLReadByteReg(ghTwl, TWL_GPBR1, &status);  //

  00028	e59f4080	 ldr         r4, [pc, #0x80]
  0002c	e3a05801	 mov         r5, #1, 16
  00030	e3a03001	 mov         r3, #1
  00034	e5940000	 ldr         r0, [r4]
  00038	e28d2000	 add         r2, sp, #0
  0003c	e3851091	 orr         r1, r5, #0x91
  00040	eb000000	 bl          TWLReadRegs

; 35   :     status |= 0x90;                             // MADC_HFCLK_EN & DEFAULT_MADC_CLK_EN

  00044	e5dd3000	 ldrb        r3, [sp]

; 36   :     TWLWriteRegs(ghTwl, TWL_GPBR1, &status, 1);

  00048	e5940000	 ldr         r0, [r4]
  0004c	e28d2000	 add         r2, sp, #0
  00050	e3833090	 orr         r3, r3, #0x90
  00054	e5cd3000	 strb        r3, [sp]
  00058	e3a03001	 mov         r3, #1
  0005c	e3851091	 orr         r1, r5, #0x91
  00060	eb000000	 bl          TWLWriteRegs

; 37   :     TWLWriteRegs(ghTwl, TWL_SW1AVERAGE_LSB, &channels, 2);

  00064	e5940000	 ldr         r0, [r4]
  00068	e3a03802	 mov         r3, #2, 16
  0006c	e3831008	 orr         r1, r3, #8
  00070	e3a03002	 mov         r3, #2
  00074	e28d2006	 add         r2, sp, #6
  00078	eb000000	 bl          TWLWriteRegs

; 38   :     
; 39   :     // RTC initial
; 40   :     status = ((1 << 4)|(1 << 2)|(2 << 0)); 		// (1<<4)enable BBCharge, 01:3V ,10:500uA(01:150uA)  
; 41   :     TWLWriteByteReg(ghTwl, TWL_BB_CFG, status);	

  0007c	e5940000	 ldr         r0, [r4]
  00080	e3a03803	 mov         r3, #3, 16
  00084	e383106d	 orr         r1, r3, #0x6D
  00088	e3a0e016	 mov         lr, #0x16
  0008c	e3a04016	 mov         r4, #0x16
  00090	e3a03001	 mov         r3, #1
  00094	e28d2004	 add         r2, sp, #4
  00098	e5cde000	 strb        lr, [sp]
  0009c	e5cd4004	 strb        r4, [sp, #4]
  000a0	eb000000	 bl          TWLWriteRegs

; 42   :     
; 43   : }

  000a4	e28dd008	 add         sp, sp, #8
  000a8	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  000ac	e12fff1e	 bx          lr
  000b0		 |$LN10@ADCRTCInit|
  000b0		 |$LN11@ADCRTCInit|
  000b0	00000000	 DCD         |ghTwl|
  000b4		 |$LN12@ADCRTCInit|
  000b4	00000000	 DCD         |ghGPIO|
  000b8		 |$M47358|

			 ENDP  ; |ADCRTCInit|

	EXPORT	|ReadBBVoltage|
	EXPORT	|??_C@_1BO@ECHFOKMI@?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?3?$AA?5?$AA?$CF?$AAd?$AA?5?$AAm?$AAV?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|NKDbgPrintfW|
	IMPORT	|LcdSleep|
	IMPORT	|LcdStall|
	IMPORT	|GPIOClrBit|

  00000			 AREA	 |.pdata|, PDATA
|$T47376| DCD	|$LN13@ReadBBVolt|
	DCD	0x40005c02

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BO@ECHFOKMI@?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?3?$AA?5?$AA?$CF?$AAd?$AA?5?$AAm?$AAV?$AA?$AN?$AA?6?$AA?$AA@| DCB "V"
	DCB	0x0, "a", 0x0, "l", 0x0, "u", 0x0, "e", 0x0, ":", 0x0, " "
	DCB	0x0, "%", 0x0, "d", 0x0, " ", 0x0, "m", 0x0, "V", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |ReadBBVoltage| PROC

; 47   : {

  00000		 |$LN13@ReadBBVolt|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004	e24dd008	 sub         sp, sp, #8
  00008		 |$M47373|

; 48   :     UCHAR   status;
; 49   :     UINT16  channels = 0x4;  // ADCIN2
; 50   :     UINT8   counter = 0;
; 51   :     UINT16  ADCValue;
; 52   : 
; 53   :     
; 54   :     //UNREFERENCED_PARAMETER(pMenu);
; 55   :     GPIOClrBit(ghGPIO, EN_SB_CHARGE);      //Cutoff Main battery

  00008	e59f615c	 ldr         r6, [pc, #0x15C]
  0000c	e3a03004	 mov         r3, #4
  00010	e3a0108b	 mov         r1, #0x8B
  00014	e5960000	 ldr         r0, [r6]
  00018	e1cd30b4	 strh        r3, [sp, #4]
  0001c	e3a04000	 mov         r4, #0
  00020	eb000000	 bl          GPIOClrBit

; 56   :     LcdStall(stall_1Sec*2);

  00024	e59f313c	 ldr         r3, [pc, #0x13C]
  00028	e5933000	 ldr         r3, [r3]
  0002c	e1a00083	 mov         r0, r3, lsl #1
  00030	eb000000	 bl          LcdStall

; 57   :     
; 58   :     //power on MADC
; 59   :     status = 0x01; // MADC ON
; 60   : 	TWLWriteRegs(ghTwl, TWL_CTRL1, &status, 1);

  00034	e59f5128	 ldr         r5, [pc, #0x128]
  00038	e3a0e001	 mov         lr, #1
  0003c	e3a03001	 mov         r3, #1
  00040	e5950000	 ldr         r0, [r5]
  00044	e28d2000	 add         r2, sp, #0
  00048	e3a01802	 mov         r1, #2, 16
  0004c	e5cde000	 strb        lr, [sp]
  00050	eb000000	 bl          TWLWriteRegs

; 61   : 
; 62   : 	// select the channels
; 63   : 	TWLWriteRegs(ghTwl, TWL_SW1SELECT_LSB, &channels, 2);   //Using Asynchronous Conversion by SW1

  00054	e5950000	 ldr         r0, [r5]
  00058	e3a07802	 mov         r7, #2, 16
  0005c	e3871006	 orr         r1, r7, #6
  00060	e3a03002	 mov         r3, #2
  00064	e28d2004	 add         r2, sp, #4
  00068	eb000000	 bl          TWLWriteRegs

; 64   : 
; 65   : 	//start conversion	
; 66   :     status = (1<<5);            // TWL_MADC_CTRL_SW_TOGGLE;
; 67   : 	TWLWriteRegs(ghTwl, TWL_CTRL_SW1, &status, 1);

  0006c	e5950000	 ldr         r0, [r5]
  00070	e3a0e020	 mov         lr, #0x20
  00074	e3a03001	 mov         r3, #1
  00078	e28d2000	 add         r2, sp, #0
  0007c	e3871012	 orr         r1, r7, #0x12
  00080	e5cde000	 strb        lr, [sp]
  00084	eb000000	 bl          TWLWriteRegs

; 68   : 
; 69   :     // waits for conversion complete
; 70   :     status = 0;

  00088	e3a03000	 mov         r3, #0
  0008c	e5cd3000	 strb        r3, [sp]
  00090		 |$LL4@ReadBBVolt|

; 71   :     while(counter++ < 0xFF)
; 72   :     {
; 73   :         TWLReadRegs(ghTwl, TWL_CTRL_SW1, &status, 1);

  00090	e5950000	 ldr         r0, [r5]
  00094	e284e001	 add         lr, r4, #1
  00098	e3a03001	 mov         r3, #1
  0009c	e28d2000	 add         r2, sp, #0
  000a0	e3871012	 orr         r1, r7, #0x12
  000a4	e20e40ff	 and         r4, lr, #0xFF
  000a8	eb000000	 bl          TWLReadRegs

; 74   :         if(status & 0x02)

  000ac	e5dd3000	 ldrb        r3, [sp]
  000b0	e3130002	 tst         r3, #2
  000b4	1a000003	 bne         |$LN8@ReadBBVolt|

; 75   :         {
; 76   :             break;
; 77   :         }
; 78   :         LcdSleep(10);

  000b8	e3a0000a	 mov         r0, #0xA
  000bc	eb000000	 bl          LcdSleep
  000c0	e35400ff	 cmp         r4, #0xFF
  000c4	3afffff1	 bcc         |$LL4@ReadBBVolt|
  000c8		 |$LN8@ReadBBVolt|

; 79   :     }
; 80   : 	TWLReadRegs(ghTwl, TWL_GPCH2_LSB, &ADCValue, sizeof(ADCValue));

  000c8	e5950000	 ldr         r0, [r5]
  000cc	e3a03802	 mov         r3, #2, 16
  000d0	e383103b	 orr         r1, r3, #0x3B
  000d4	e3a03002	 mov         r3, #2
  000d8	e28d2002	 add         r2, sp, #2
  000dc	eb000000	 bl          TWLReadRegs

; 81   : 
; 82   : 	ADCValue = (ADCValue >> 6) * 5000 / 0x3ff;      //UINT16 acquire 10bit, 2.5V*2 = 5000mV, 1024 

  000e0	e1dd30b2	 ldrh        r3, [sp, #2]
  000e4	e3a02c13	 mov         r2, #0x13, 24
  000e8	e382e088	 orr         lr, r2, #0x88
  000ec	e1a01323	 mov         r1, r3, lsr #6
  000f0	e59f3068	 ldr         r3, [pc, #0x68]
  000f4	e0000e91	 mul         r0, r1, lr
  000f8	e0c32390	 smull       r2, r3, r0, r3
  000fc	e0233e91	 mla         r3, r1, lr, r3
  00100	e1a034c3	 mov         r3, r3, asr #9
  00104	e0833fa3	 add         r3, r3, r3, lsr #31
  00108	e1a01803	 mov         r1, r3, lsl #16
  0010c	e1a01821	 mov         r1, r1, lsr #16
  00110	e1cd10b2	 strh        r1, [sp, #2]

; 83   : 
; 84   :     if(ADCValue < 4000)

  00114	e3510efa	 cmp         r1, #0xFA, 28
  00118	2a000003	 bcs         |$LN1@ReadBBVolt|

; 85   :         GPIOSetBit(ghGPIO, EN_SB_CHARGE); 

  0011c	e5960000	 ldr         r0, [r6]
  00120	e3a0108b	 mov         r1, #0x8B
  00124	eb000000	 bl          GPIOSetBit
  00128	e1dd10b2	 ldrh        r1, [sp, #2]
  0012c		 |$LN1@ReadBBVolt|

; 86   :     
; 87   : 	OALLog(L"Value: %d mV\r\n", ADCValue);

  0012c	e59f0028	 ldr         r0, [pc, #0x28]
  00130	eb000000	 bl          NKDbgPrintfW

; 88   :         
; 89   : 	// power off MADC
; 90   : 	status = 0x00; // MADCON
; 91   : 	TWLWriteRegs(ghTwl, TWL_CTRL1, &status, 1);

  00134	e5950000	 ldr         r0, [r5]
  00138	e3a0e000	 mov         lr, #0
  0013c	e3a03001	 mov         r3, #1
  00140	e28d2000	 add         r2, sp, #0
  00144	e3a01802	 mov         r1, #2, 16
  00148	e5cde000	 strb        lr, [sp]
  0014c	eb000000	 bl          TWLWriteRegs

; 92   : }

  00150	e28dd008	 add         sp, sp, #8
  00154	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  00158	e12fff1e	 bx          lr
  0015c		 |$LN14@ReadBBVolt|
  0015c		 |$LN15@ReadBBVolt|
  0015c	00000000	 DCD         |??_C@_1BO@ECHFOKMI@?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?3?$AA?5?$AA?$CF?$AAd?$AA?5?$AAm?$AAV?$AA?$AN?$AA?6?$AA?$AA@|
  00160		 |$LN16@ReadBBVolt|
  00160	80200803	 DCD         0x80200803
  00164		 |$LN17@ReadBBVolt|
  00164	00000000	 DCD         |ghTwl|
  00168		 |$LN18@ReadBBVolt|
  00168	00000000	 DCD         |stall_1Sec|
  0016c		 |$LN19@ReadBBVolt|
  0016c	00000000	 DCD         |ghGPIO|
  00170		 |$M47374|

			 ENDP  ; |ReadBBVoltage|

	EXPORT	|__$ArrayPad$| [ DATA ]
	EXPORT	|ReadRTC|
	EXPORT	|??_C@_1M@OMJPBPEL@?$AA?$HO?$AA?$HO?$AA?$CF?$AAd?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BM@HDDBMJFA@?$AAi?$AA?$CF?$AAd?$AA?0?$AA?5?$AAs?$AAt?$AAr?$AA?3?$AA?5?$AA?$CF?$AAd?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EK@BMADCGGJ@?$AAR?$AAT?$AAC?$AA?3?$AA?5?$AA?$CF?$AA0?$AA4?$AAd?$AA?9?$AA?$CF?$AA0?$AA2?$AAd?$AA?9?$AA?$CF?$AA0?$AA2?$AAd?$AA?5?$AA?$CF?$AA0?$AA2?$AAd?$AA?3?$AA?$CF?$AA0?$AA2?$AAd?$AA?3?$AA?$CF?$AA0@| [ DATA ] ; `string'
	IMPORT	|TWLOpen|
	IMPORT	|GPIOClose|
	IMPORT	|printStringMode|
	IMPORT	|__GSHandlerCheck|
	IMPORT	|__security_cookie|
	IMPORT	|__security_check_cookie|
; File c:\wince600\platform\common\src\soc\common_ti_v1\triton\inc\twl.h

  00000			 AREA	 |.pdata|, PDATA
|$T47433| DCD	|$LN27@ReadRTC|
	DCD	0xc0008702

  00000			 AREA	 |.xdata|, DATA
|$T47429| DCD	0xffffffd8

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1M@OMJPBPEL@?$AA?$HO?$AA?$HO?$AA?$CF?$AAd?$AA?6?$AA?$AA@| DCB "~", 0x0
	DCB	"~", 0x0, "%", 0x0, "d", 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BM@HDDBMJFA@?$AAi?$AA?$CF?$AAd?$AA?0?$AA?5?$AAs?$AAt?$AAr?$AA?3?$AA?5?$AA?$CF?$AAd?$AA?6?$AA?$AA@| DCB "i"
	DCB	0x0, "%", 0x0, "d", 0x0, ",", 0x0, " ", 0x0, "s", 0x0, "t"
	DCB	0x0, "r", 0x0, ":", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EK@BMADCGGJ@?$AAR?$AAT?$AAC?$AA?3?$AA?5?$AA?$CF?$AA0?$AA4?$AAd?$AA?9?$AA?$CF?$AA0?$AA2?$AAd?$AA?9?$AA?$CF?$AA0?$AA2?$AAd?$AA?5?$AA?$CF?$AA0?$AA2?$AAd?$AA?3?$AA?$CF?$AA0?$AA2?$AAd?$AA?3?$AA?$CF?$AA0@| DCB "R"
	DCB	0x0, "T", 0x0, "C", 0x0, ":", 0x0, " ", 0x0, "%", 0x0, "0"
	DCB	0x0, "4", 0x0, "d", 0x0, "-", 0x0, "%", 0x0, "0", 0x0, "2"
	DCB	0x0, "d", 0x0, "-", 0x0, "%", 0x0, "0", 0x0, "2", 0x0, "d"
	DCB	0x0, " ", 0x0, "%", 0x0, "0", 0x0, "2", 0x0, "d", 0x0, ":"
	DCB	0x0, "%", 0x0, "0", 0x0, "2", 0x0, "d", 0x0, ":", 0x0, "%"
	DCB	0x0, "0", 0x0, "2", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Ogspy
; File c:\wince600\platform\z2170p\src\bootloader\eboot\adc_rtc.c

  00000			 AREA	 |.text|, CODE, ARM

  00000	00000000	 DCD         |__GSHandlerCheck|
  00004	00000000	 DCD         |$T47429|

  00008		 |ReadRTC| PROC

; 96   : {

  00008		 |$LN27@ReadRTC|
  00008	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  0000c	e24ddf53	 sub         sp, sp, #0x53, 30
  00010		 |$M47430|
  00010	e59f3208	 ldr         r3, [pc, #0x208]
  00014	e5933000	 ldr         r3, [r3]
  00018	e58d3148	 str         r3, [sp, #0x148]

; 97   :     UCHAR status;
; 98   : 	UCHAR bcdTime[6];
; 99   :     char  showChar[10][30];
; 100  :     int   i,x;
; 101  :     char *str;
; 102  :     
; 103  : 	//UNREFERENCED_PARAMETER(pMenu);
; 104  : 
; 105  : 	TWLReadByteReg(ghTwl, TWL_RTC_CTRL_REG, &status);

  0001c	e59fb1f8	 ldr         r11, [pc, #0x1F8]
  00020	e3a04803	 mov         r4, #3, 16
  00024	e3a03001	 mov         r3, #1
  00028	e59b0000	 ldr         r0, [r11]
  0002c	e28d200c	 add         r2, sp, #0xC
  00030	e3841029	 orr         r1, r4, #0x29
  00034	eb000000	 bl          TWLReadRegs

; 106  : 	status |= TWL_RTC_CTRL_RUN | TWL_RTC_CTRL_GET_TIME; //RTC is running, TC register values are stored in latches

  00038	e5dd300c	 ldrb        r3, [sp, #0xC]

; 107  : 	TWLWriteByteReg(ghTwl, TWL_RTC_CTRL_REG, status);

  0003c	e59b0000	 ldr         r0, [r11]
  00040	e28d2010	 add         r2, sp, #0x10
  00044	e3833041	 orr         r3, r3, #0x41
  00048	e5cd300c	 strb        r3, [sp, #0xC]
  0004c	e5cd3010	 strb        r3, [sp, #0x10]
  00050	e3a03001	 mov         r3, #1
  00054	e3841029	 orr         r1, r4, #0x29
  00058	eb000000	 bl          TWLWriteRegs

; 108  : 
; 109  : 	
; 110  :     TWLReadByteReg(ghTwl, TWL_YEARS_REG,    &bcdTime[5]);

  0005c	e59b0000	 ldr         r0, [r11]
  00060	e3a04803	 mov         r4, #3, 16
  00064	e3841021	 orr         r1, r4, #0x21
  00068	e3a03001	 mov         r3, #1
  0006c	e28d2019	 add         r2, sp, #0x19
  00070	eb000000	 bl          TWLReadRegs

; 111  :     TWLReadByteReg(ghTwl, TWL_MONTHS_REG,   &bcdTime[4]);

  00074	e59b0000	 ldr         r0, [r11]
  00078	e3a03001	 mov         r3, #1
  0007c	e28d2018	 add         r2, sp, #0x18
  00080	e3841020	 orr         r1, r4, #0x20
  00084	eb000000	 bl          TWLReadRegs

; 112  :     TWLReadByteReg(ghTwl, TWL_DAYS_REG,     &bcdTime[3]);

  00088	e59b0000	 ldr         r0, [r11]
  0008c	e3a03001	 mov         r3, #1
  00090	e28d2017	 add         r2, sp, #0x17
  00094	e384101f	 orr         r1, r4, #0x1F
  00098	eb000000	 bl          TWLReadRegs

; 113  :     TWLReadByteReg(ghTwl, TWL_HOURS_REG,    &bcdTime[2]);

  0009c	e59b0000	 ldr         r0, [r11]
  000a0	e3a03001	 mov         r3, #1
  000a4	e28d2016	 add         r2, sp, #0x16
  000a8	e384101e	 orr         r1, r4, #0x1E
  000ac	eb000000	 bl          TWLReadRegs

; 114  :     TWLReadByteReg(ghTwl, TWL_MINUTES_REG,  &bcdTime[1]);

  000b0	e59b0000	 ldr         r0, [r11]
  000b4	e3a03001	 mov         r3, #1
  000b8	e28d2015	 add         r2, sp, #0x15
  000bc	e384101d	 orr         r1, r4, #0x1D
  000c0	eb000000	 bl          TWLReadRegs

; 115  :     TWLReadByteReg(ghTwl, TWL_SECONDS_REG,  &bcdTime[0]);

  000c4	e59b0000	 ldr         r0, [r11]
  000c8	e3a03001	 mov         r3, #1
  000cc	e28d2014	 add         r2, sp, #0x14
  000d0	e384101c	 orr         r1, r4, #0x1C
  000d4	eb000000	 bl          TWLReadRegs

; 116  : 
; 117  :     OALLog(L"RTC: %04d-%02d-%02d %02d:%02d:%02d\r\n" , 
; 118  :             BCD2BIN(bcdTime[5]) + RTC_BASE_YEAR_MIN,
; 119  : 			BCD2BIN(bcdTime[4]), BCD2BIN(bcdTime[3]) , BCD2BIN(bcdTime[2]),
; 120  : 			BCD2BIN(bcdTime[1]), BCD2BIN(bcdTime[0]));

  000d8	e5dde015	 ldrb        lr, [sp, #0x15]
  000dc	e5dd0014	 ldrb        r0, [sp, #0x14]
  000e0	e5dd7016	 ldrb        r7, [sp, #0x16]
  000e4	e5dd8017	 ldrb        r8, [sp, #0x17]
  000e8	e5dd9018	 ldrb        r9, [sp, #0x18]
  000ec	e1a0222e	 mov         r2, lr, lsr #4
  000f0	e1a03220	 mov         r3, r0, lsr #4
  000f4	e1a01227	 mov         r1, r7, lsr #4
  000f8	e0825102	 add         r5, r2, r2, lsl #2
  000fc	e0834103	 add         r4, r3, r3, lsl #2
  00100	e0816101	 add         r6, r1, r1, lsl #2
  00104	e20e200f	 and         r2, lr, #0xF
  00108	e200300f	 and         r3, r0, #0xF
  0010c	e207100f	 and         r1, r7, #0xF
  00110	e1a0e229	 mov         lr, r9, lsr #4
  00114	e1a00228	 mov         r0, r8, lsr #4
  00118	e0825085	 add         r5, r2, r5, lsl #1
  0011c	e0834084	 add         r4, r3, r4, lsl #1
  00120	e0816086	 add         r6, r1, r6, lsl #1
  00124	e08e110e	 add         r1, lr, lr, lsl #2
  00128	e209200f	 and         r2, r9, #0xF
  0012c	e5dda019	 ldrb        r10, [sp, #0x19]
  00130	e0800100	 add         r0, r0, r0, lsl #2
  00134	e208300f	 and         r3, r8, #0xF
  00138	e0822081	 add         r2, r2, r1, lsl #1
  0013c	e58d4008	 str         r4, [sp, #8]
  00140	e58d5004	 str         r5, [sp, #4]
  00144	e58d6000	 str         r6, [sp]
  00148	e0833080	 add         r3, r3, r0, lsl #1
  0014c	e1a0122a	 mov         r1, r10, lsr #4
  00150	e28110c8	 add         r1, r1, #0xC8
  00154	e59f00bc	 ldr         r0, [pc, #0xBC]
  00158	e081e101	 add         lr, r1, r1, lsl #2
  0015c	e20a100f	 and         r1, r10, #0xF
  00160	e081108e	 add         r1, r1, lr, lsl #1
  00164	eb000000	 bl          NKDbgPrintfW

; 121  : 
; 122  :    for(i=0,x=3; i<=5; i++, x+2)

  00168	e3a04000	 mov         r4, #0
  0016c	e28d6014	 add         r6, sp, #0x14
  00170	e28d701c	 add         r7, sp, #0x1C
  00174	e28d801c	 add         r8, sp, #0x1C
  00178		 |$LL4@ReadRTC|

; 123  :    {
; 124  :       str = (char *)BCD2BIN(bcdTime[i]);

  00178	e7d4e006	 ldrb        lr, [r4, +r6]

; 125  :       OALLog(L"i%d, str: %d\n", i, str);

  0017c	e59f0090	 ldr         r0, [pc, #0x90]
  00180	e1a01004	 mov         r1, r4
  00184	e1a0322e	 mov         r3, lr, lsr #4
  00188	e0832103	 add         r2, r3, r3, lsl #2
  0018c	e20e300f	 and         r3, lr, #0xF
  00190	e0835082	 add         r5, r3, r2, lsl #1
  00194	e1a02005	 mov         r2, r5
  00198	eb000000	 bl          NKDbgPrintfW

; 126  :       if(i == 4){

  0019c	e3540004	 cmp         r4, #4

; 127  :        showChar[i][0] = *str;

  001a0	01d530d0	 ldreqsb     r3, [r5]

; 128  :       }
; 129  :        OALLog(L"~~%d\n", showChar[i][0]);

  001a4	e59f0064	 ldr         r0, [pc, #0x64]
  001a8	05cd3094	 streqb      r3, [sp, #0x94]
  001ac	e0643204	 rsb         r3, r4, r4, lsl #4
  001b0	e0873083	 add         r3, r7, r3, lsl #1
  001b4	e1d310d0	 ldrsb       r1, [r3]
  001b8	eb000000	 bl          NKDbgPrintfW

; 130  :         //else
; 131  : 	    //showChar[i][0] = BCD2BIN(bcdTime[i]);
; 132  :        printStringMode(8, x, RED_COLOR, GREEN_COLOR, showChar, i);

  001bc	e3a03001	 mov         r3, #1
  001c0	e3a02000	 mov         r2, #0
  001c4	e3a01003	 mov         r1, #3
  001c8	e3a00008	 mov         r0, #8
  001cc	e58d4004	 str         r4, [sp, #4]
  001d0	e58d8000	 str         r8, [sp]
  001d4	eb000000	 bl          printStringMode
  001d8	e2844001	 add         r4, r4, #1
  001dc	e3540005	 cmp         r4, #5
  001e0	daffffe4	 ble         |$LL4@ReadRTC|

; 133  :    }    
; 134  : 
; 135  :    GPIOClose(ghGPIO);

  001e4	e59f3020	 ldr         r3, [pc, #0x20]
  001e8	e5930000	 ldr         r0, [r3]
  001ec	eb000000	 bl          GPIOClose

; 136  :    TWLOpen(ghTwl);

  001f0	e59b0000	 ldr         r0, [r11]
  001f4	eb000000	 bl          TWLOpen
  001f8	e59d0148	 ldr         r0, [sp, #0x148]
  001fc	eb000000	 bl          __security_check_cookie

; 137  : }    

  00200	e28ddf53	 add         sp, sp, #0x53, 30
  00204	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  00208	e12fff1e	 bx          lr
  0020c		 |$LN28@ReadRTC|
  0020c		 |$LN29@ReadRTC|
  0020c	00000000	 DCD         |ghGPIO|
  00210		 |$LN30@ReadRTC|
  00210	00000000	 DCD         |??_C@_1M@OMJPBPEL@?$AA?$HO?$AA?$HO?$AA?$CF?$AAd?$AA?6?$AA?$AA@|
  00214		 |$LN31@ReadRTC|
  00214	00000000	 DCD         |??_C@_1BM@HDDBMJFA@?$AAi?$AA?$CF?$AAd?$AA?0?$AA?5?$AAs?$AAt?$AAr?$AA?3?$AA?5?$AA?$CF?$AAd?$AA?6?$AA?$AA@|
  00218		 |$LN32@ReadRTC|
  00218	00000000	 DCD         |??_C@_1EK@BMADCGGJ@?$AAR?$AAT?$AAC?$AA?3?$AA?5?$AA?$CF?$AA0?$AA4?$AAd?$AA?9?$AA?$CF?$AA0?$AA2?$AAd?$AA?9?$AA?$CF?$AA0?$AA2?$AAd?$AA?5?$AA?$CF?$AA0?$AA2?$AAd?$AA?3?$AA?$CF?$AA0?$AA2?$AAd?$AA?3?$AA?$CF?$AA0@|
  0021c		 |$LN33@ReadRTC|
  0021c	00000000	 DCD         |ghTwl|
  00220		 |$LN34@ReadRTC|
  00220	00000000	 DCD         |__security_cookie|
  00224		 |$M47431|

			 ENDP  ; |ReadRTC|

	END
