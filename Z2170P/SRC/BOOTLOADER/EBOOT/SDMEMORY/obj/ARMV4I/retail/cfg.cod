; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\Z2170P\SRC\BOOTLOADER\EBOOT\SDMEMORY\cfg.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "


  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
	EXPORT	|__$ArrayPad$| [ DATA ]
	EXPORT	|BLReadBootCfg|
	EXPORT	|??_C@_1HE@BDJAOKHO@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAE?$AAB?$AAO?$AAO?$AAT?$AA?$CB?$AAB?$AAL?$AAR?$AAe?$AAa?$AAd?$AAB?$AAo?$AAo?$AAt?$AAC?$AAf?$AAg?$AA?3?$AA?5?$AAF?$AAl?$AAa?$AAs@| [ DATA ] ; `string'
	EXPORT	|??_C@_1IG@EBGBGDAI@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAF?$AAl?$AAa?$AAs?$AAh?$AA?5?$AAs?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAi?$AAz?$AAe?$AA?5?$AA?$CF?$AAd?$AA?5?$AAb?$AAy?$AAt?$AAe@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EE@MHCJNGAF@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAF?$AAM?$AAD?$AA_?$AAG?$AAe?$AAt?$AAI?$AAn?$AAf?$AAo?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?$CB?$AA?$AN@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DO@FFNONGBO@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAF?$AAM?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?$CB?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|FMD_Deinit|
	IMPORT	|FMD_ReadSector|
	IMPORT	|FMD_GetBlockStatus|
	IMPORT	|FMD_GetInfo|
	IMPORT	|NKDbgPrintfW|
	IMPORT	|dpCurSettings|
	IMPORT	|FMD_Init|
	IMPORT	|g_ulFlashBase|
	IMPORT	|__GSHandlerCheck|
	IMPORT	|__security_cookie|
	IMPORT	|memcpy|
	IMPORT	|__security_check_cookie|
; File c:\wince600\platform\z2170p\src\bootloader\eboot\sdmemory\cfg.c

  00000			 AREA	 |.pdata|, PDATA
|$T47027| DCD	|$LN23@BLReadBoot|
	DCD	0xc0006303

  00000			 AREA	 |.xdata|, DATA
|$T47023| DCD	0xffffffe4

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HE@BDJAOKHO@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAE?$AAB?$AAO?$AAO?$AAT?$AA?$CB?$AAB?$AAL?$AAR?$AAe?$AAa?$AAd?$AAB?$AAo?$AAo?$AAt?$AAC?$AAf?$AAg?$AA?3?$AA?5?$AAF?$AAl?$AAa?$AAs@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "E", 0x0, "B", 0x0, "O", 0x0, "O", 0x0, "T", 0x0, "!"
	DCB	0x0, "B", 0x0, "L", 0x0, "R", 0x0, "e", 0x0, "a", 0x0, "d"
	DCB	0x0, "B", 0x0, "o", 0x0, "o", 0x0, "t", 0x0, "C", 0x0, "f"
	DCB	0x0, "g", 0x0, ":", 0x0, " ", 0x0, "F", 0x0, "l", 0x0, "a"
	DCB	0x0, "s", 0x0, "h", 0x0, " ", 0x0, "s", 0x0, "e", 0x0, "c"
	DCB	0x0, "t", 0x0, "o", 0x0, "r", 0x0, " ", 0x0, "%", 0x0, "d"
	DCB	0x0, " ", 0x0, "r", 0x0, "e", 0x0, "a", 0x0, "d", 0x0, " "
	DCB	0x0, "f", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1IG@EBGBGDAI@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAF?$AAl?$AAa?$AAs?$AAh?$AA?5?$AAs?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAi?$AAz?$AAe?$AA?5?$AA?$CF?$AAd?$AA?5?$AAb?$AAy?$AAt?$AAe@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "F", 0x0, "l", 0x0, "a", 0x0, "s", 0x0, "h", 0x0, " "
	DCB	0x0, "s", 0x0, "e", 0x0, "c", 0x0, "t", 0x0, "o", 0x0, "r"
	DCB	0x0, " ", 0x0, "s", 0x0, "i", 0x0, "z", 0x0, "e", 0x0, " "
	DCB	0x0, "%", 0x0, "d", 0x0, " ", 0x0, "b", 0x0, "y", 0x0, "t"
	DCB	0x0, "e", 0x0, "s", 0x0, " ", 0x0, "b", 0x0, "i", 0x0, "g"
	DCB	0x0, "g", 0x0, "e", 0x0, "r", 0x0, " ", 0x0, "t", 0x0, "h"
	DCB	0x0, "a", 0x0, "n", 0x0, " ", 0x0, "s", 0x0, "u", 0x0, "p"
	DCB	0x0, "p", 0x0, "o", 0x0, "r", 0x0, "t", 0x0, "e", 0x0, "d"
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, " ", 0x0, "b", 0x0, "y"
	DCB	0x0, "t", 0x0, "e", 0x0, "s", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EE@MHCJNGAF@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAF?$AAM?$AAD?$AA_?$AAG?$AAe?$AAt?$AAI?$AAn?$AAf?$AAo?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?$CB?$AA?$AN@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "F", 0x0, "M", 0x0, "D", 0x0, "_", 0x0, "G", 0x0, "e"
	DCB	0x0, "t", 0x0, "I", 0x0, "n", 0x0, "f", 0x0, "o", 0x0, " "
	DCB	0x0, "c", 0x0, "a", 0x0, "l", 0x0, "l", 0x0, " ", 0x0, "f"
	DCB	0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, "!"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DO@FFNONGBO@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAF?$AAM?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?$CB?$AA?$AN?$AA?6?$AA?$AA@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "F", 0x0, "M", 0x0, "D", 0x0, "_", 0x0, "I", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, " ", 0x0, "c", 0x0, "a", 0x0, "l"
	DCB	0x0, "l", 0x0, " ", 0x0, "f", 0x0, "a", 0x0, "i", 0x0, "l"
	DCB	0x0, "e", 0x0, "d", 0x0, "!", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000	00000000	 DCD         |__GSHandlerCheck|
  00004	00000000	 DCD         |$T47023|

  00008		 |BLReadBootCfg| PROC

; 30   : {

  00008		 |$LN23@BLReadBoot|
  00008	e92d41f0	 stmdb       sp!, {r4 - r8, lr}
  0000c	e59fc17c	 ldr         r12, [pc, #0x17C]
  00010	e08dd00c	 add         sp, sp, r12
  00014		 |$M47024|
  00014	e1a07000	 mov         r7, r0
  00018	e59f316c	 ldr         r3, [pc, #0x16C]
  0001c	e5933000	 ldr         r3, [r3]
  00020	e58d3b98	 str         r3, [sp, #0xB98]

; 31   :     BOOL rc = FALSE;
; 32   : #ifndef BSP_NO_NAND_IN_SDBOOT
; 33   :     HANDLE hFMD;
; 34   :     PCI_REG_INFO regInfo;
; 35   :     FlashInfo flashInfo;
; 36   :     SectorInfo sectorInfo;
; 37   :     SECTOR_ADDR sector;
; 38   :     BLOCK_ID block;
; 39   :     UINT32 count, offset;
; 40   :     UINT8 buffer[2048];
; 41   :     
; 42   : 
; 43   :     // EBOOT configuration is placed in last sector of EBOOT image
; 44   :     regInfo.MemBase.Reg[0] = g_ulFlashBase;

  00024	e59f315c	 ldr         r3, [pc, #0x15C]

; 45   :     hFMD = FMD_Init(NULL, &regInfo, NULL);

  00028	e3a02000	 mov         r2, #0
  0002c	e28d1018	 add         r1, sp, #0x18
  00030	e5933000	 ldr         r3, [r3]
  00034	e3a00000	 mov         r0, #0
  00038	e3a06000	 mov         r6, #0
  0003c	e58d3328	 str         r3, [sp, #0x328]
  00040	eb000000	 bl          FMD_Init
  00044	e1b08000	 movs        r8, r0

; 46   :     if (hFMD == NULL)

  00048	1a000006	 bne         |$LN8@BLReadBoot|

; 47   :         {
; 48   :         OALMSG(OAL_ERROR, (L"ERROR: FMD_Init call failed!\r\n"));

  0004c	e59f3124	 ldr         r3, [pc, #0x124]
  00050	e5933440	 ldr         r3, [r3, #0x440]
  00054	e3130001	 tst         r3, #1
  00058	0a00003d	 beq         |$LN1@BLReadBoot|
  0005c	e59f0120	 ldr         r0, [pc, #0x120]
  00060	eb000000	 bl          NKDbgPrintfW

; 49   :         goto cleanUp;

  00064	ea00003a	 b           |$LN1@BLReadBoot|
  00068		 |$LN8@BLReadBoot|

; 50   :         }
; 51   : 
; 52   :     // Get flash info
; 53   :     if (!FMD_GetInfo(&flashInfo))

  00068	e28d0000	 add         r0, sp, #0
  0006c	eb000000	 bl          FMD_GetInfo
  00070	e3500000	 cmp         r0, #0
  00074	1a000006	 bne         |$LN7@BLReadBoot|

; 54   :         {
; 55   :         OALMSG(OAL_ERROR, (L"ERROR: FMD_GetInfo call failed!\r\n"));

  00078	e59f30f8	 ldr         r3, [pc, #0xF8]
  0007c	e5933440	 ldr         r3, [r3, #0x440]
  00080	e3130001	 tst         r3, #1
  00084	0a000030	 beq         |$cleanUp$46838|
  00088	e59f00f0	 ldr         r0, [pc, #0xF0]
  0008c	eb000000	 bl          NKDbgPrintfW

; 56   :         goto cleanUp;

  00090	ea00002d	 b           |$cleanUp$46838|
  00094		 |$LN7@BLReadBoot|

; 57   :         }
; 58   : 
; 59   :     // We can support only flash with sector size < 2048 bytes
; 60   :     if (flashInfo.wDataBytesPerSector > sizeof(buffer))

  00094	e1dd10be	 ldrh        r1, [sp, #0xE]
  00098	e3510b02	 cmp         r1, #2, 22
  0009c	9a000007	 bls         |$LN6@BLReadBoot|

; 61   :         {
; 62   :         OALMSG(OAL_ERROR, (L"ERROR: "
; 63   :             L"Flash sector size %d bytes bigger than supported %d bytes\r\n",
; 64   :             flashInfo.wDataBytesPerSector, sizeof(buffer)    
; 65   :             ));

  000a0	e59f30d0	 ldr         r3, [pc, #0xD0]
  000a4	e5933440	 ldr         r3, [r3, #0x440]
  000a8	e3130001	 tst         r3, #1
  000ac	0a000026	 beq         |$cleanUp$46838|
  000b0	e59f00c4	 ldr         r0, [pc, #0xC4]
  000b4	e3a02b02	 mov         r2, #2, 22
  000b8	eb000000	 bl          NKDbgPrintfW

; 66   :         goto cleanUp;

  000bc	ea000022	 b           |$cleanUp$46838|
  000c0		 |$LN6@BLReadBoot|

; 67   :         }
; 68   : 
; 69   :     // Configuration is located in last sector of EBOOT image
; 70   :     offset = IMAGE_XLDR_BOOTSEC_NAND_SIZE + IMAGE_EBOOT_BOOTSEC_NAND_SIZE;
; 71   :     
; 72   :     // Start from beginning
; 73   :     block  = 0;

  000c0	e3a04000	 mov         r4, #0

; 74   :     sector = 0;
; 75   : 
; 76   :     // Skip X-Loader & EBOOT code & bad blocks
; 77   :     // Note that we also check the last eboot block in order to ensure it is good
; 78   :     count = 0;

  000c4	e3a05000	 mov         r5, #0
  000c8		 |$LL5@BLReadBoot|

; 79   :     while ((count < offset) && (block < flashInfo.dwNumBlocks))

  000c8	e59d3004	 ldr         r3, [sp, #4]
  000cc	e1540003	 cmp         r4, r3
  000d0	2a000007	 bcs         |$LN4@BLReadBoot|

; 80   :         {
; 81   :         if ((FMD_GetBlockStatus(block) & BLOCK_STATUS_BAD) == 0)

  000d4	e1a00004	 mov         r0, r4
  000d8	eb000000	 bl          FMD_GetBlockStatus
  000dc	e3100002	 tst         r0, #2

; 82   :             {
; 83   :             count += flashInfo.dwBytesPerBlock;

  000e0	059d3008	 ldreq       r3, [sp, #8]

; 84   :             }
; 85   :         block++;

  000e4	e2844001	 add         r4, r4, #1
  000e8	00855003	 addeq       r5, r5, r3
  000ec	e3550703	 cmp         r5, #3, 14
  000f0	3afffff4	 bcc         |$LL5@BLReadBoot|
  000f4		 |$LN4@BLReadBoot|

; 86   :         }
; 87   : 
; 88   :     // We've incremented past the last eboot block in order to check it too
; 89   :     // Back up now, the previous block is the last one containing eboot and is good
; 90   :     block--;
; 91   : 
; 92   :     //  Compute sector within the block where config lies
; 93   :     sector = block * flashInfo.wSectorsPerBlock;
; 94   :     sector += flashInfo.wSectorsPerBlock - 1;
; 95   : 
; 96   :     // Read sector to buffer
; 97   :     if (!FMD_ReadSector(sector, buffer, &sectorInfo, 1)) {

  000f4	e1dd10bc	 ldrh        r1, [sp, #0xC]
  000f8	e3a03001	 mov         r3, #1
  000fc	e28d2010	 add         r2, sp, #0x10
  00100	e0040491	 mul         r4, r1, r4
  00104	e28d1fe6	 add         r1, sp, #0xE6, 30
  00108	e2440001	 sub         r0, r4, #1
  0010c	eb000000	 bl          FMD_ReadSector
  00110	e3500000	 cmp         r0, #0
  00114	1a000007	 bne         |$LN2@BLReadBoot|

; 98   :         OALMSG(OAL_ERROR, (L"ERROR: EBOOT!BLReadBootCfg: "
; 99   :             L"Flash sector %d read failed\r\n", sector
; 100  :         ));

  00118	e59f3058	 ldr         r3, [pc, #0x58]
  0011c	e5933440	 ldr         r3, [r3, #0x440]
  00120	e3130001	 tst         r3, #1
  00124	0a000008	 beq         |$cleanUp$46838|
  00128	e59f0044	 ldr         r0, [pc, #0x44]
  0012c	e2441001	 sub         r1, r4, #1
  00130	eb000000	 bl          NKDbgPrintfW

; 101  :             goto cleanUp;

  00134	ea000004	 b           |$cleanUp$46838|
  00138		 |$LN2@BLReadBoot|

; 102  :     }
; 103  : 
; 104  :     // Copy data to BOOT_CFG structure
; 105  :     memcpy(pBootCfg, buffer, sizeof(BOOT_CFG));        

  00138	e28d1fe6	 add         r1, sp, #0xE6, 30
  0013c	e3a02090	 mov         r2, #0x90
  00140	e1a00007	 mov         r0, r7
  00144	eb000000	 bl          memcpy

; 106  : 
; 107  :     // Done    
; 108  :     rc = TRUE;

  00148	e3a06001	 mov         r6, #1
  0014c		 |$cleanUp$46838|

; 109  : 
; 110  : cleanUp:
; 111  :     if (hFMD != NULL) FMD_Deinit(hFMD);

  0014c	e1a00008	 mov         r0, r8
  00150	eb000000	 bl          FMD_Deinit
  00154		 |$LN1@BLReadBoot|

; 112  : #else
; 113  :     UNREFERENCED_PARAMETER(pBootCfg);
; 114  : #endif
; 115  :     return rc;

  00154	e59d0b98	 ldr         r0, [sp, #0xB98]
  00158	eb000000	 bl          __security_check_cookie

; 116  : }

  0015c	e1a00006	 mov         r0, r6
  00160	e3a0cc0b	 mov         r12, #0xB, 24
  00164	e38cc09c	 orr         r12, r12, #0x9C
  00168	e08dd00c	 add         sp, sp, r12
  0016c	e8bd41f0	 ldmia       sp!, {r4 - r8, lr}
  00170	e12fff1e	 bx          lr
  00174		 |$LN24@BLReadBoot|
  00174		 |$LN25@BLReadBoot|
  00174	00000000	 DCD         |??_C@_1HE@BDJAOKHO@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAE?$AAB?$AAO?$AAO?$AAT?$AA?$CB?$AAB?$AAL?$AAR?$AAe?$AAa?$AAd?$AAB?$AAo?$AAo?$AAt?$AAC?$AAf?$AAg?$AA?3?$AA?5?$AAF?$AAl?$AAa?$AAs@|
  00178		 |$LN26@BLReadBoot|
  00178	00000000	 DCD         |dpCurSettings|
  0017c		 |$LN27@BLReadBoot|
  0017c	00000000	 DCD         |??_C@_1IG@EBGBGDAI@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAF?$AAl?$AAa?$AAs?$AAh?$AA?5?$AAs?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAi?$AAz?$AAe?$AA?5?$AA?$CF?$AAd?$AA?5?$AAb?$AAy?$AAt?$AAe@|
  00180		 |$LN28@BLReadBoot|
  00180	00000000	 DCD         |??_C@_1EE@MHCJNGAF@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAF?$AAM?$AAD?$AA_?$AAG?$AAe?$AAt?$AAI?$AAn?$AAf?$AAo?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?$CB?$AA?$AN@|
  00184		 |$LN29@BLReadBoot|
  00184	00000000	 DCD         |??_C@_1DO@FFNONGBO@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAF?$AAM?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?$CB?$AA?$AN?$AA?6?$AA?$AA@|
  00188		 |$LN30@BLReadBoot|
  00188	00000000	 DCD         |g_ulFlashBase|
  0018c		 |$LN31@BLReadBoot|
  0018c	00000000	 DCD         |__security_cookie|
  00190		 |$LN32@BLReadBoot|
  00190	fffff464	 DCD         0xfffff464
  00194		 |$M47025|

			 ENDP  ; |BLReadBootCfg|

	EXPORT	|__$ArrayPad$| [ DATA ]
	EXPORT	|BLWriteBootCfg|
	EXPORT	|??_C@_1HI@NMGONLPH@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAE?$AAB?$AAO?$AAO?$AAT?$AA?$CB?$AAB?$AAL?$AAW?$AAr?$AAi?$AAt?$AAe?$AAB?$AAo?$AAo?$AAt?$AAC?$AAf?$AAg?$AA?3?$AA?5?$AAF?$AAl?$AAa@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HG@CNPKAHCG@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAE?$AAB?$AAO?$AAO?$AAT?$AA?$CB?$AAB?$AAL?$AAW?$AAr?$AAi?$AAt?$AAe?$AAB?$AAo?$AAo?$AAt?$AAC?$AAf?$AAg?$AA?3?$AA?5?$AAF?$AAl?$AAa@| [ DATA ] ; `string'
	EXPORT	|??_C@_1IE@IPHMEIA@?$AA?$AN?$AA?6?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAE?$AAB?$AAO?$AAO?$AAT?$AA?$CB?$AAB?$AAL?$AAW?$AAr?$AAi?$AAt?$AAe?$AAB?$AAo?$AAo?$AAt?$AAC?$AAf?$AAg?$AA?3?$AA?5?$AAF@| [ DATA ] ; `string'
	EXPORT	|??_C@_1IG@GHABCEAA@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAF?$AAl?$AAa?$AAs?$AAh?$AA?5?$AAs?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAi?$AAz?$AAe?$AA?5?$AA?$CF?$AAd?$AA?5?$AAb?$AAy?$AAt?$AAe@| [ DATA ] ; `string'
	IMPORT	|FMD_WriteSector|
	IMPORT	|FMD_EraseBlock|
	IMPORT	|memset|

  00000			 AREA	 |.pdata|, PDATA
|$T47085| DCD	|$LN40@BLWriteBoo|
	DCD	0xc000a502

  00000			 AREA	 |.xdata|, DATA
|$T47081| DCD	0xffffffd8

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HI@NMGONLPH@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAE?$AAB?$AAO?$AAO?$AAT?$AA?$CB?$AAB?$AAL?$AAW?$AAr?$AAi?$AAt?$AAe?$AAB?$AAo?$AAo?$AAt?$AAC?$AAf?$AAg?$AA?3?$AA?5?$AAF?$AAl?$AAa@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "E", 0x0, "B", 0x0, "O", 0x0, "O", 0x0, "T", 0x0, "!"
	DCB	0x0, "B", 0x0, "L", 0x0, "W", 0x0, "r", 0x0, "i", 0x0, "t"
	DCB	0x0, "e", 0x0, "B", 0x0, "o", 0x0, "o", 0x0, "t", 0x0, "C"
	DCB	0x0, "f", 0x0, "g", 0x0, ":", 0x0, " ", 0x0, "F", 0x0, "l"
	DCB	0x0, "a", 0x0, "s", 0x0, "h", 0x0, " ", 0x0, "s", 0x0, "e"
	DCB	0x0, "c", 0x0, "t", 0x0, "o", 0x0, "r", 0x0, " ", 0x0, "%"
	DCB	0x0, "d", 0x0, " ", 0x0, "w", 0x0, "r", 0x0, "i", 0x0, "t"
	DCB	0x0, "e", 0x0, " ", 0x0, "f", 0x0, "a", 0x0, "i", 0x0, "l"
	DCB	0x0, "e", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HG@CNPKAHCG@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAE?$AAB?$AAO?$AAO?$AAT?$AA?$CB?$AAB?$AAL?$AAW?$AAr?$AAi?$AAt?$AAe?$AAB?$AAo?$AAo?$AAt?$AAC?$AAf?$AAg?$AA?3?$AA?5?$AAF?$AAl?$AAa@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "E", 0x0, "B", 0x0, "O", 0x0, "O", 0x0, "T", 0x0, "!"
	DCB	0x0, "B", 0x0, "L", 0x0, "W", 0x0, "r", 0x0, "i", 0x0, "t"
	DCB	0x0, "e", 0x0, "B", 0x0, "o", 0x0, "o", 0x0, "t", 0x0, "C"
	DCB	0x0, "f", 0x0, "g", 0x0, ":", 0x0, " ", 0x0, "F", 0x0, "l"
	DCB	0x0, "a", 0x0, "s", 0x0, "h", 0x0, " ", 0x0, "b", 0x0, "l"
	DCB	0x0, "o", 0x0, "c", 0x0, "k", 0x0, " ", 0x0, "%", 0x0, "d"
	DCB	0x0, " ", 0x0, "e", 0x0, "r", 0x0, "a", 0x0, "s", 0x0, "e"
	DCB	0x0, " ", 0x0, "f", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e"
	DCB	0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1IE@IPHMEIA@?$AA?$AN?$AA?6?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAE?$AAB?$AAO?$AAO?$AAT?$AA?$CB?$AAB?$AAL?$AAW?$AAr?$AAi?$AAt?$AAe?$AAB?$AAo?$AAo?$AAt?$AAC?$AAf?$AAg?$AA?3?$AA?5?$AAF@| DCB 0xd
	DCB	0x0, 0xa, 0x0, "E", 0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R"
	DCB	0x0, ":", 0x0, " ", 0x0, "E", 0x0, "B", 0x0, "O", 0x0, "O"
	DCB	0x0, "T", 0x0, "!", 0x0, "B", 0x0, "L", 0x0, "W", 0x0, "r"
	DCB	0x0, "i", 0x0, "t", 0x0, "e", 0x0, "B", 0x0, "o", 0x0, "o"
	DCB	0x0, "t", 0x0, "C", 0x0, "f", 0x0, "g", 0x0, ":", 0x0, " "
	DCB	0x0, "F", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d"
	DCB	0x0, " ", 0x0, "r", 0x0, "e", 0x0, "a", 0x0, "d", 0x0, " "
	DCB	0x0, "s", 0x0, "e", 0x0, "c", 0x0, "t", 0x0, "o", 0x0, "r"
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, " ", 0x0, "f", 0x0, "r"
	DCB	0x0, "o", 0x0, "m", 0x0, " ", 0x0, "f", 0x0, "l", 0x0, "a"
	DCB	0x0, "s", 0x0, "h", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1IG@GHABCEAA@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAF?$AAl?$AAa?$AAs?$AAh?$AA?5?$AAs?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAi?$AAz?$AAe?$AA?5?$AA?$CF?$AAd?$AA?5?$AAb?$AAy?$AAt?$AAe@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "F", 0x0, "l", 0x0, "a", 0x0, "s", 0x0, "h", 0x0, " "
	DCB	0x0, "s", 0x0, "e", 0x0, "c", 0x0, "t", 0x0, "o", 0x0, "r"
	DCB	0x0, " ", 0x0, "s", 0x0, "i", 0x0, "z", 0x0, "e", 0x0, " "
	DCB	0x0, "%", 0x0, "d", 0x0, " ", 0x0, "b", 0x0, "y", 0x0, "t"
	DCB	0x0, "e", 0x0, "s", 0x0, " ", 0x0, "b", 0x0, "i", 0x0, "g"
	DCB	0x0, "g", 0x0, "e", 0x0, "r", 0x0, " ", 0x0, "t", 0x0, "h"
	DCB	0x0, "a", 0x0, "t", 0x0, " ", 0x0, "s", 0x0, "u", 0x0, "p"
	DCB	0x0, "p", 0x0, "o", 0x0, "r", 0x0, "t", 0x0, "e", 0x0, "d"
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, " ", 0x0, "b", 0x0, "y"
	DCB	0x0, "t", 0x0, "e", 0x0, "s", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000	00000000	 DCD         |__GSHandlerCheck|
  00004	00000000	 DCD         |$T47081|

  00008		 |BLWriteBootCfg| PROC

; 120  : {

  00008		 |$LN40@BLWriteBoo|
  00008	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  0000c	e24ddfe7	 sub         sp, sp, #0xE7, 30
  00010		 |$M47082|
  00010	e1a0a000	 mov         r10, r0
  00014	e59f327c	 ldr         r3, [pc, #0x27C]
  00018	e5933000	 ldr         r3, [r3]
  0001c	e58d3398	 str         r3, [sp, #0x398]

; 121  :     BOOL rc = FALSE;
; 122  : #ifndef BSP_NO_NAND_IN_SDBOOT
; 123  :     HANDLE hFMD;
; 124  :     PCI_REG_INFO regInfo;
; 125  :     FlashInfo flashInfo;
; 126  :     SectorInfo sectorInfo;
; 127  :     SECTOR_ADDR sector;
; 128  :     BLOCK_ID block;
; 129  :     UINT32 count, offset, length;
; 130  :     UINT8 buffer[2048];
; 131  :     UINT8 *pEBOOT;
; 132  :     
; 133  :     // EBOOT configuration is placed in last sector of image
; 134  :     regInfo.MemBase.Reg[0] = g_ulFlashBase;

  00020	e59f326c	 ldr         r3, [pc, #0x26C]

; 135  :     hFMD = FMD_Init(NULL, &regInfo, NULL);

  00024	e3a02000	 mov         r2, #0
  00028	e28d1018	 add         r1, sp, #0x18
  0002c	e5933000	 ldr         r3, [r3]
  00030	e3a00000	 mov         r0, #0
  00034	e3a08000	 mov         r8, #0
  00038	e58d3328	 str         r3, [sp, #0x328]
  0003c	eb000000	 bl          FMD_Init
  00040	e1b0b000	 movs        r11, r0

; 136  :     if (hFMD == NULL)

  00044	1a000006	 bne         |$LN14@BLWriteBoo|

; 137  : 	{
; 138  :         OALMSG(OAL_ERROR, (L"ERROR: FMD_Init call failed!\r\n"));

  00048	e59f322c	 ldr         r3, [pc, #0x22C]
  0004c	e5933440	 ldr         r3, [r3, #0x440]
  00050	e3130001	 tst         r3, #1
  00054	0a000079	 beq         |$LN1@BLWriteBoo|
  00058	e59f0230	 ldr         r0, [pc, #0x230]
  0005c	eb000000	 bl          NKDbgPrintfW

; 139  :         goto cleanUp;

  00060	ea000076	 b           |$LN1@BLWriteBoo|
  00064		 |$LN14@BLWriteBoo|

; 140  : 	}
; 141  : 
; 142  :     // Get flash info
; 143  :     if (!FMD_GetInfo(&flashInfo))

  00064	e28d0008	 add         r0, sp, #8
  00068	eb000000	 bl          FMD_GetInfo
  0006c	e3500000	 cmp         r0, #0
  00070	1a000006	 bne         |$LN13@BLWriteBoo|

; 144  : 	{
; 145  :         OALMSG(OAL_ERROR, (L"ERROR: FMD_GetInfo call failed!\r\n"));

  00074	e59f3200	 ldr         r3, [pc, #0x200]
  00078	e5933440	 ldr         r3, [r3, #0x440]
  0007c	e3130001	 tst         r3, #1
  00080	0a00006c	 beq         |$cleanUp$46875|
  00084	e59f0200	 ldr         r0, [pc, #0x200]
  00088	eb000000	 bl          NKDbgPrintfW

; 146  :         goto cleanUp;

  0008c	ea000069	 b           |$cleanUp$46875|
  00090		 |$LN13@BLWriteBoo|

; 147  : 	}
; 148  : 
; 149  :     // We can support only flash with sector size which fit to our buffer
; 150  :     if (flashInfo.wDataBytesPerSector > sizeof(buffer))

  00090	e1dd11b6	 ldrh        r1, [sp, #0x16]
  00094	e3510b02	 cmp         r1, #2, 22
  00098	9a000007	 bls         |$LN12@BLWriteBoo|

; 151  : 	{
; 152  :         OALMSG(OAL_ERROR, (L"ERROR: "
; 153  :             L"Flash sector size %d bytes bigger that supported %d bytes\r\n",
; 154  :             flashInfo.wDataBytesPerSector, sizeof(buffer) ));

  0009c	e59f31d8	 ldr         r3, [pc, #0x1D8]
  000a0	e5933440	 ldr         r3, [r3, #0x440]
  000a4	e3130001	 tst         r3, #1
  000a8	0a000062	 beq         |$cleanUp$46875|
  000ac	e59f01d4	 ldr         r0, [pc, #0x1D4]
  000b0	e3a02b02	 mov         r2, #2, 22
  000b4	eb000000	 bl          NKDbgPrintfW

; 155  :         goto cleanUp;

  000b8	ea00005e	 b           |$cleanUp$46875|
  000bc		 |$LN12@BLWriteBoo|

; 156  : 	}
; 157  : 
; 158  :     // Configuration is located in last sector of last EBOOT block
; 159  :     offset = IMAGE_XLDR_BOOTSEC_NAND_SIZE + IMAGE_EBOOT_BOOTSEC_NAND_SIZE; // 0x80000 + 0x40000
; 160  : 
; 161  :     // Skip X-Loader & EBOOT code & bad blocks
; 162  :     // Note that we also check the last eboot block in order to ensure it is good
; 163  :     block  = 0;
; 164  :     count = 0;

  000bc	e59d1010	 ldr         r1, [sp, #0x10]
  000c0	e3a04000	 mov         r4, #0
  000c4	e3a05000	 mov         r5, #0
  000c8		 |$LL11@BLWriteBoo|

; 165  :     while ((count < offset) && (block < flashInfo.dwNumBlocks))

  000c8	e59d300c	 ldr         r3, [sp, #0xC]
  000cc	e1540003	 cmp         r4, r3
  000d0	2a000007	 bcs         |$LN10@BLWriteBoo|

; 166  : 	{
; 167  :         if ((FMD_GetBlockStatus(block) & BLOCK_STATUS_BAD) == 0)

  000d4	e1a00004	 mov         r0, r4
  000d8	eb000000	 bl          FMD_GetBlockStatus
  000dc	e59d1010	 ldr         r1, [sp, #0x10]
  000e0	e3100002	 tst         r0, #2

; 168  : 		{
; 169  :             count += flashInfo.dwBytesPerBlock;
; 170  : 		}
; 171  :         block++;

  000e4	e2844001	 add         r4, r4, #1
  000e8	00855001	 addeq       r5, r5, r1
  000ec	e3550703	 cmp         r5, #3, 14
  000f0	3afffff4	 bcc         |$LL11@BLWriteBoo|
  000f4		 |$LN10@BLWriteBoo|

; 172  : 	}
; 173  : 
; 174  :     // We've incremented past the last eboot block in order to check it too
; 175  :     // Back up now, the previous block is the last one containing eboot and is good
; 176  :     block--; // 5
; 177  : 
; 178  :     // Need to copy off the block contents to RAM (minus the config sector)
; 179  :     pEBOOT = (UINT8*)IMAGE_WINCE_CODE_CA; // 0x80002000
; 180  :     length = flashInfo.dwBytesPerBlock - flashInfo.wDataBytesPerSector; // 0x20000 - 0x800

  000f4	e1dd31b6	 ldrh        r3, [sp, #0x16]
  000f8	e3a00102	 mov         r0, #2, 2

; 181  : 
; 182  :     memset((VOID*)pEBOOT, 0xFF, flashInfo.dwBytesPerBlock);

  000fc	e1a02001	 mov         r2, r1
  00100	e0417003	 sub         r7, r1, r3
  00104	e3a010ff	 mov         r1, #0xFF
  00108	e3800a02	 orr         r0, r0, #2, 20
  0010c	e2446001	 sub         r6, r4, #1
  00110	eb000000	 bl          memset

; 183  :     sector = block * flashInfo.wSectorsPerBlock; // 5 * 0x40 = 0x140

  00114	e1dd31b4	 ldrh        r3, [sp, #0x14]

; 184  :     offset = 0;
; 185  :     while (offset < length) 

  00118	e3e021fe	 mvn         r2, #0xFE, 2
  0011c	e3a04000	 mov         r4, #0
  00120	e0050693	 mul         r5, r3, r6
  00124	e2229d7f	 eor         r9, r2, #0x7F, 26
  00128	e3570000	 cmp         r7, #0
  0012c	0a00000b	 beq         |$LN7@BLWriteBoo|
  00130		 |$LL8@BLWriteBoo|

; 186  :     {
; 187  :         // When block read fail, there isn't what we can do more
; 188  :         if (!FMD_ReadSector(sector, pEBOOT + offset, &sectorInfo, 1)) 

  00130	e3a03001	 mov         r3, #1
  00134	e28d2000	 add         r2, sp, #0
  00138	e0441009	 sub         r1, r4, r9
  0013c	e1a00005	 mov         r0, r5
  00140	eb000000	 bl          FMD_ReadSector
  00144	e3500000	 cmp         r0, #0
  00148	0a000014	 beq         |$LN32@BLWriteBoo|

; 192  : 		}
; 193  : 
; 194  :         // Move to next sector
; 195  :         sector++;
; 196  :         offset += flashInfo.wDataBytesPerSector;

  0014c	e1dd31b6	 ldrh        r3, [sp, #0x16]
  00150	e2855001	 add         r5, r5, #1
  00154	e0844003	 add         r4, r4, r3
  00158	e1540007	 cmp         r4, r7
  0015c	3afffff3	 bcc         |$LL8@BLWriteBoo|
  00160		 |$LN7@BLWriteBoo|

; 197  :     }
; 198  :     //  Copy the config info into last sector of saved block in RAM
; 199  :     memcpy(pEBOOT + offset, pBootCfg, sizeof(BOOT_CFG)); 

  00160	e0440009	 sub         r0, r4, r9
  00164	e3a02090	 mov         r2, #0x90
  00168	e1a0100a	 mov         r1, r10
  0016c	eb000000	 bl          memcpy

; 200  : 
; 201  :     // Erase block
; 202  :     if (!FMD_EraseBlock(block))

  00170	e1a00006	 mov         r0, r6
  00174	eb000000	 bl          FMD_EraseBlock
  00178	e3500000	 cmp         r0, #0
  0017c	1a00000f	 bne         |$LN5@BLWriteBoo|

; 203  : 	{
; 204  :         OALMSG(OAL_ERROR, (L"ERROR: EBOOT!BLWriteBootCfg: Flash block %d erase failed\r\n", block));

  00180	e59f30f4	 ldr         r3, [pc, #0xF4]
  00184	e5933440	 ldr         r3, [r3, #0x440]
  00188	e3130001	 tst         r3, #1
  0018c	0a000029	 beq         |$cleanUp$46875|
  00190	e59f00ec	 ldr         r0, [pc, #0xEC]
  00194	e1a01006	 mov         r1, r6
  00198	eb000000	 bl          NKDbgPrintfW
  0019c	ea000025	 b           |$cleanUp$46875|
  001a0		 |$LN32@BLWriteBoo|

; 189  :         {
; 190  : 			OALMSG(OAL_ERROR, (L"\r\nERROR: EBOOT!BLWriteBootCfg: Failed read sector %d from flash\r\n", sector));

  001a0	e59f30d4	 ldr         r3, [pc, #0xD4]
  001a4	e5933440	 ldr         r3, [r3, #0x440]
  001a8	e3130001	 tst         r3, #1
  001ac	0a000021	 beq         |$cleanUp$46875|
  001b0	e59f00c8	 ldr         r0, [pc, #0xC8]
  001b4	e1a01005	 mov         r1, r5
  001b8	eb000000	 bl          NKDbgPrintfW

; 191  :             goto cleanUp;

  001bc	ea00001d	 b           |$cleanUp$46875|
  001c0		 |$LN5@BLWriteBoo|

; 205  :         goto cleanUp;
; 206  : 	}
; 207  : 
; 208  :     // Write contents of the save block + config sector back to flash
; 209  :     pEBOOT = (UINT8*)IMAGE_WINCE_CODE_CA;
; 210  :     length = flashInfo.dwBytesPerBlock;
; 211  : 
; 212  :     sector = block * flashInfo.wSectorsPerBlock;

  001c0	e1dd31b4	 ldrh        r3, [sp, #0x14]
  001c4	e59d7010	 ldr         r7, [sp, #0x10]

; 213  :     offset = 0;

  001c8	e3a05000	 mov         r5, #0
  001cc	e0040693	 mul         r4, r3, r6

; 214  :     while (offset < length)

  001d0	e3570000	 cmp         r7, #0
  001d4	0a000016	 beq         |$LN3@BLWriteBoo|
  001d8	e3e06000	 mvn         r6, #0
  001dc	e3a0a000	 mov         r10, #0
  001e0	e3a0e000	 mov         lr, #0
  001e4		 |$LL4@BLWriteBoo|

; 215  :     {
; 216  :         // Prepare sector info
; 217  :         memset(&sectorInfo, 0xFF, sizeof(sectorInfo));

  001e4	e58d6004	 str         r6, [sp, #4]

; 218  :         sectorInfo.bOEMReserved &= ~(OEM_BLOCK_READONLY|OEM_BLOCK_RESERVED);

  001e8	e5dd3004	 ldrb        r3, [sp, #4]
  001ec	e58d6000	 str         r6, [sp]

; 219  :         sectorInfo.dwReserved1 = 0;
; 220  :         sectorInfo.wReserved2 = 0;
; 221  :         // Write sector        
; 222  :         if (!FMD_WriteSector(sector, pEBOOT + offset, &sectorInfo, 1))

  001f0	e28d2000	 add         r2, sp, #0
  001f4	e20330fc	 and         r3, r3, #0xFC
  001f8	e5cd3004	 strb        r3, [sp, #4]
  001fc	e3a03001	 mov         r3, #1
  00200	e0451009	 sub         r1, r5, r9
  00204	e1a00004	 mov         r0, r4
  00208	e58da000	 str         r10, [sp]
  0020c	e1cde0b6	 strh        lr, [sp, #6]
  00210	eb000000	 bl          FMD_WriteSector
  00214	e3500000	 cmp         r0, #0
  00218	0a00000e	 beq         |$LN33@BLWriteBoo|

; 226  :             goto cleanUp;
; 227  : 		}
; 228  : 
; 229  :         // Move to next sector
; 230  :         sector++;
; 231  :         offset += flashInfo.wDataBytesPerSector;

  0021c	e1dd31b6	 ldrh        r3, [sp, #0x16]
  00220	e2844001	 add         r4, r4, #1
  00224	e3a0e000	 mov         lr, #0
  00228	e0855003	 add         r5, r5, r3
  0022c	e1550007	 cmp         r5, r7
  00230	3affffeb	 bcc         |$LL4@BLWriteBoo|
  00234		 |$LN3@BLWriteBoo|

; 232  :     }
; 233  : 
; 234  :     // Done    
; 235  :     rc = TRUE;

  00234	e3a08001	 mov         r8, #1
  00238		 |$cleanUp$46875|

; 236  : 
; 237  : cleanUp:
; 238  :     if (hFMD != NULL) 
; 239  :     	FMD_Deinit(hFMD);

  00238	e1a0000b	 mov         r0, r11
  0023c	eb000000	 bl          FMD_Deinit
  00240		 |$LN1@BLWriteBoo|

; 240  : #else
; 241  :     UNREFERENCED_PARAMETER(pBootCfg);
; 242  : #endif
; 243  :     return rc;

  00240	e59d0398	 ldr         r0, [sp, #0x398]
  00244	eb000000	 bl          __security_check_cookie

; 244  : }

  00248	e1a00008	 mov         r0, r8
  0024c	e28ddfe7	 add         sp, sp, #0xE7, 30
  00250	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  00254	e12fff1e	 bx          lr
  00258		 |$LN33@BLWriteBoo|

; 223  : 		{
; 224  :             OALMSG(OAL_ERROR, (L"ERROR: EBOOT!BLWriteBootCfg: "
; 225  :                 L"Flash sector %d write failed\r\n", sector));

  00258	e59f301c	 ldr         r3, [pc, #0x1C]
  0025c	e5933440	 ldr         r3, [r3, #0x440]
  00260	e3130001	 tst         r3, #1
  00264	0afffff3	 beq         |$cleanUp$46875|
  00268	e59f0008	 ldr         r0, [pc, #8]
  0026c	e1a01004	 mov         r1, r4
  00270	eb000000	 bl          NKDbgPrintfW
  00274	eaffffef	 b           |$cleanUp$46875|
  00278		 |$LN41@BLWriteBoo|
  00278		 |$LN42@BLWriteBoo|
  00278	00000000	 DCD         |??_C@_1HI@NMGONLPH@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAE?$AAB?$AAO?$AAO?$AAT?$AA?$CB?$AAB?$AAL?$AAW?$AAr?$AAi?$AAt?$AAe?$AAB?$AAo?$AAo?$AAt?$AAC?$AAf?$AAg?$AA?3?$AA?5?$AAF?$AAl?$AAa@|
  0027c		 |$LN43@BLWriteBoo|
  0027c	00000000	 DCD         |dpCurSettings|
  00280		 |$LN44@BLWriteBoo|
  00280	00000000	 DCD         |??_C@_1IE@IPHMEIA@?$AA?$AN?$AA?6?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAE?$AAB?$AAO?$AAO?$AAT?$AA?$CB?$AAB?$AAL?$AAW?$AAr?$AAi?$AAt?$AAe?$AAB?$AAo?$AAo?$AAt?$AAC?$AAf?$AAg?$AA?3?$AA?5?$AAF@|
  00284		 |$LN45@BLWriteBoo|
  00284	00000000	 DCD         |??_C@_1HG@CNPKAHCG@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAE?$AAB?$AAO?$AAO?$AAT?$AA?$CB?$AAB?$AAL?$AAW?$AAr?$AAi?$AAt?$AAe?$AAB?$AAo?$AAo?$AAt?$AAC?$AAf?$AAg?$AA?3?$AA?5?$AAF?$AAl?$AAa@|
  00288		 |$LN46@BLWriteBoo|
  00288	00000000	 DCD         |??_C@_1IG@GHABCEAA@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAF?$AAl?$AAa?$AAs?$AAh?$AA?5?$AAs?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAi?$AAz?$AAe?$AA?5?$AA?$CF?$AAd?$AA?5?$AAb?$AAy?$AAt?$AAe@|
  0028c		 |$LN47@BLWriteBoo|
  0028c	00000000	 DCD         |??_C@_1EE@MHCJNGAF@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAF?$AAM?$AAD?$AA_?$AAG?$AAe?$AAt?$AAI?$AAn?$AAf?$AAo?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?$CB?$AA?$AN@|
  00290		 |$LN48@BLWriteBoo|
  00290	00000000	 DCD         |??_C@_1DO@FFNONGBO@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAF?$AAM?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?$CB?$AA?$AN?$AA?6?$AA?$AA@|
  00294		 |$LN49@BLWriteBoo|
  00294	00000000	 DCD         |g_ulFlashBase|
  00298		 |$LN50@BLWriteBoo|
  00298	00000000	 DCD         |__security_cookie|
  0029c		 |$M47083|

			 ENDP  ; |BLWriteBootCfg|

	EXPORT	|__$ArrayPad$| [ DATA ]
	EXPORT	|BLReserveBootBlocks|
	EXPORT	|??_C@_1FG@GECOJCBP@?$AA?5?$AAO?$AAo?$AAp?$AAs?$AA?0?$AA?5?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAm?$AAa?$AAr?$AAk?$AA?5?$AAb?$AAl?$AAo?$AAc?$AAk?$AA?5?$AA?$CF?$AAd?$AA?5?$AA?9?$AA?5?$AAa?$AAs?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CK@FKCECPDI@?$AA?5?$AAS?$AAk?$AAi?$AAp?$AA?5?$AAb?$AAa?$AAd?$AA?5?$AAb?$AAl?$AAo?$AAc?$AAk?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CG@LKOOCDFP@?$AAf?$AAl?$AAa?$AAs?$AAh?$AAT?$AAy?$AAp?$AAe?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EI@LFGCLBPP@?$AAI?$AAM?$AAA?$AAG?$AAE?$AA_?$AAB?$AAO?$AAO?$AAT?$AAL?$AAO?$AAA?$AAD?$AAE?$AAR?$AA_?$AAN?$AAA?$AAN?$AAD?$AA_?$AAS?$AAI?$AAZ?$AAE?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DK@MDBBDJLC@?$AAw?$AAD?$AAa?$AAt?$AAa?$AAB?$AAy?$AAt?$AAe?$AAs?$AAP?$AAe?$AAr?$AAS?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CK@LDEBLKGK@?$AAd?$AAw?$AAN?$AAu?$AAm?$AAB?$AAl?$AAo?$AAc?$AAk?$AAs?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DE@GHAFOAPE@?$AAw?$AAS?$AAe?$AAc?$AAt?$AAo?$AAr?$AAs?$AAP?$AAe?$AAr?$AAB?$AAl?$AAo?$AAc?$AAk?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DC@EJLCBHJJ@?$AAd?$AAw?$AAB?$AAy?$AAt?$AAe?$AAs?$AAP?$AAe?$AAr?$AAB?$AAl?$AAo?$AAc?$AAk?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HO@MDILHIPB@?$AAC?$AAh?$AAe?$AAc?$AAk?$AAi?$AAn?$AAg?$AA?5?$AAb?$AAo?$AAo?$AAt?$AAl?$AAo?$AAa?$AAd?$AAe?$AAr?$AA?5?$AAb?$AAl?$AAo?$AAc?$AAk?$AAs?$AA?5?$AAa?$AAr?$AAe?$AA?5?$AAm@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DM@FLIEODNJ@?$AAB?$AAL?$AAR?$AAe?$AAs?$AAe?$AAr?$AAv?$AAe?$AAB?$AAo?$AAo?$AAt?$AAB?$AAl?$AAo?$AAc?$AAk?$AAs?$AA?3?$AA?5?$AAs?$AAt?$AAa?$AAr?$AAt?$AA?$CB?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|FMD_SetBlockStatus|
	IMPORT	|__rt_udiv|

  00000			 AREA	 |.pdata|, PDATA
|$T47123| DCD	|$LN23@BLReserveB|
	DCD	0xc0006f02

  00000			 AREA	 |.xdata|, DATA
|$T47119| DCD	0xffffffec

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FG@GECOJCBP@?$AA?5?$AAO?$AAo?$AAp?$AAs?$AA?0?$AA?5?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAm?$AAa?$AAr?$AAk?$AA?5?$AAb?$AAl?$AAo?$AAc?$AAk?$AA?5?$AA?$CF?$AAd?$AA?5?$AA?9?$AA?5?$AAa?$AAs?$AA?5@| DCB " "
	DCB	0x0, "O", 0x0, "o", 0x0, "p", 0x0, "s", 0x0, ",", 0x0, " "
	DCB	0x0, "c", 0x0, "a", 0x0, "n", 0x0, "'", 0x0, "t", 0x0, " "
	DCB	0x0, "m", 0x0, "a", 0x0, "r", 0x0, "k", 0x0, " ", 0x0, "b"
	DCB	0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k", 0x0, " ", 0x0, "%"
	DCB	0x0, "d", 0x0, " ", 0x0, "-", 0x0, " ", 0x0, "a", 0x0, "s"
	DCB	0x0, " ", 0x0, "r", 0x0, "e", 0x0, "s", 0x0, "e", 0x0, "r"
	DCB	0x0, "v", 0x0, "e", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CK@FKCECPDI@?$AA?5?$AAS?$AAk?$AAi?$AAp?$AA?5?$AAb?$AAa?$AAd?$AA?5?$AAb?$AAl?$AAo?$AAc?$AAk?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB " "
	DCB	0x0, "S", 0x0, "k", 0x0, "i", 0x0, "p", 0x0, " ", 0x0, "b"
	DCB	0x0, "a", 0x0, "d", 0x0, " ", 0x0, "b", 0x0, "l", 0x0, "o"
	DCB	0x0, "c", 0x0, "k", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CG@LKOOCDFP@?$AAf?$AAl?$AAa?$AAs?$AAh?$AAT?$AAy?$AAp?$AAe?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB "f"
	DCB	0x0, "l", 0x0, "a", 0x0, "s", 0x0, "h", 0x0, "T", 0x0, "y"
	DCB	0x0, "p", 0x0, "e", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EI@LFGCLBPP@?$AAI?$AAM?$AAA?$AAG?$AAE?$AA_?$AAB?$AAO?$AAO?$AAT?$AAL?$AAO?$AAA?$AAD?$AAE?$AAR?$AA_?$AAN?$AAA?$AAN?$AAD?$AA_?$AAS?$AAI?$AAZ?$AAE?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF@| DCB "I"
	DCB	0x0, "M", 0x0, "A", 0x0, "G", 0x0, "E", 0x0, "_", 0x0, "B"
	DCB	0x0, "O", 0x0, "O", 0x0, "T", 0x0, "L", 0x0, "O", 0x0, "A"
	DCB	0x0, "D", 0x0, "E", 0x0, "R", 0x0, "_", 0x0, "N", 0x0, "A"
	DCB	0x0, "N", 0x0, "D", 0x0, "_", 0x0, "S", 0x0, "I", 0x0, "Z"
	DCB	0x0, "E", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DK@MDBBDJLC@?$AAw?$AAD?$AAa?$AAt?$AAa?$AAB?$AAy?$AAt?$AAe?$AAs?$AAP?$AAe?$AAr?$AAS?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB "w"
	DCB	0x0, "D", 0x0, "a", 0x0, "t", 0x0, "a", 0x0, "B", 0x0, "y"
	DCB	0x0, "t", 0x0, "e", 0x0, "s", 0x0, "P", 0x0, "e", 0x0, "r"
	DCB	0x0, "S", 0x0, "e", 0x0, "c", 0x0, "t", 0x0, "o", 0x0, "r"
	DCB	0x0, " ", 0x0, "=", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CK@LDEBLKGK@?$AAd?$AAw?$AAN?$AAu?$AAm?$AAB?$AAl?$AAo?$AAc?$AAk?$AAs?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB "d"
	DCB	0x0, "w", 0x0, "N", 0x0, "u", 0x0, "m", 0x0, "B", 0x0, "l"
	DCB	0x0, "o", 0x0, "c", 0x0, "k", 0x0, "s", 0x0, " ", 0x0, "="
	DCB	0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DE@GHAFOAPE@?$AAw?$AAS?$AAe?$AAc?$AAt?$AAo?$AAr?$AAs?$AAP?$AAe?$AAr?$AAB?$AAl?$AAo?$AAc?$AAk?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB "w"
	DCB	0x0, "S", 0x0, "e", 0x0, "c", 0x0, "t", 0x0, "o", 0x0, "r"
	DCB	0x0, "s", 0x0, "P", 0x0, "e", 0x0, "r", 0x0, "B", 0x0, "l"
	DCB	0x0, "o", 0x0, "c", 0x0, "k", 0x0, " ", 0x0, "=", 0x0, " "
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DC@EJLCBHJJ@?$AAd?$AAw?$AAB?$AAy?$AAt?$AAe?$AAs?$AAP?$AAe?$AAr?$AAB?$AAl?$AAo?$AAc?$AAk?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB "d"
	DCB	0x0, "w", 0x0, "B", 0x0, "y", 0x0, "t", 0x0, "e", 0x0, "s"
	DCB	0x0, "P", 0x0, "e", 0x0, "r", 0x0, "B", 0x0, "l", 0x0, "o"
	DCB	0x0, "c", 0x0, "k", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HO@MDILHIPB@?$AAC?$AAh?$AAe?$AAc?$AAk?$AAi?$AAn?$AAg?$AA?5?$AAb?$AAo?$AAo?$AAt?$AAl?$AAo?$AAa?$AAd?$AAe?$AAr?$AA?5?$AAb?$AAl?$AAo?$AAc?$AAk?$AAs?$AA?5?$AAa?$AAr?$AAe?$AA?5?$AAm@| DCB "C"
	DCB	0x0, "h", 0x0, "e", 0x0, "c", 0x0, "k", 0x0, "i", 0x0, "n"
	DCB	0x0, "g", 0x0, " ", 0x0, "b", 0x0, "o", 0x0, "o", 0x0, "t"
	DCB	0x0, "l", 0x0, "o", 0x0, "a", 0x0, "d", 0x0, "e", 0x0, "r"
	DCB	0x0, " ", 0x0, "b", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k"
	DCB	0x0, "s", 0x0, " ", 0x0, "a", 0x0, "r", 0x0, "e", 0x0, " "
	DCB	0x0, "m", 0x0, "a", 0x0, "r", 0x0, "k", 0x0, "e", 0x0, "d"
	DCB	0x0, " ", 0x0, "a", 0x0, "s", 0x0, " ", 0x0, "r", 0x0, "e"
	DCB	0x0, "s", 0x0, "e", 0x0, "r", 0x0, "v", 0x0, "e", 0x0, "d"
	DCB	0x0, " ", 0x0, "(", 0x0, "N", 0x0, "u", 0x0, "m", 0x0, " "
	DCB	0x0, "=", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DM@FLIEODNJ@?$AAB?$AAL?$AAR?$AAe?$AAs?$AAe?$AAr?$AAv?$AAe?$AAB?$AAo?$AAo?$AAt?$AAB?$AAl?$AAo?$AAc?$AAk?$AAs?$AA?3?$AA?5?$AAs?$AAt?$AAa?$AAr?$AAt?$AA?$CB?$AA?$AN?$AA?6?$AA?$AA@| DCB "B"
	DCB	0x0, "L", 0x0, "R", 0x0, "e", 0x0, "s", 0x0, "e", 0x0, "r"
	DCB	0x0, "v", 0x0, "e", 0x0, "B", 0x0, "o", 0x0, "o", 0x0, "t"
	DCB	0x0, "B", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k", 0x0, "s"
	DCB	0x0, ":", 0x0, " ", 0x0, "s", 0x0, "t", 0x0, "a", 0x0, "r"
	DCB	0x0, "t", 0x0, "!", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000	00000000	 DCD         |__GSHandlerCheck|
  00004	00000000	 DCD         |$T47119|

  00008		 |BLReserveBootBlocks| PROC

; 248  : {

  00008		 |$LN23@BLReserveB|
  00008	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  0000c	e24ddfe5	 sub         sp, sp, #0xE5, 30
  00010		 |$M47120|
  00010	e59f31a8	 ldr         r3, [pc, #0x1A8]
  00014	e5933000	 ldr         r3, [r3]
  00018	e58d3390	 str         r3, [sp, #0x390]

; 249  : #ifndef BSP_NO_NAND_IN_SDBOOT
; 250  :     BOOL rc = FALSE;
; 251  :     HANDLE hFMD;
; 252  :     PCI_REG_INFO regInfo;
; 253  :     FlashInfo flashInfo;
; 254  :     UINT32 size;
; 255  :     BLOCK_ID firstblock, lastblock;
; 256  :     UINT32 status;
; 257  :     
; 258  :     UNREFERENCED_PARAMETER(pBootCfg);
; 259  : 	OALMSG(OAL_ERROR, (L"BLReserveBootBlocks: start!\r\n"));

  0001c	e59f4198	 ldr         r4, [pc, #0x198]
  00020	e3a05000	 mov         r5, #0
  00024	e5943440	 ldr         r3, [r4, #0x440]
  00028	e3130001	 tst         r3, #1
  0002c	159f0184	 ldrne       r0, [pc, #0x184]
  00030	1b000000	 blne        NKDbgPrintfW

; 260  :     // Automatically mark the bootloader blocks as read-only/reserved
; 261  :     regInfo.MemBase.Reg[0] = g_ulFlashBase; // The device is connected to CS0 mapped to 0x0800-0000

  00034	e59f3178	 ldr         r3, [pc, #0x178]

; 262  :     hFMD = FMD_Init(NULL, &regInfo, NULL);

  00038	e3a02000	 mov         r2, #0
  0003c	e28d1010	 add         r1, sp, #0x10
  00040	e5933000	 ldr         r3, [r3]
  00044	e3a00000	 mov         r0, #0
  00048	e58d3320	 str         r3, [sp, #0x320]
  0004c	eb000000	 bl          FMD_Init
  00050	e1b06000	 movs        r6, r0

; 263  :     if (hFMD == NULL)

  00054	1a000005	 bne         |$LN8@BLReserveB|

; 264  : 	{
; 265  :         OALMSG(OAL_ERROR, (L"ERROR: FMD_Init call failed!\r\n"));

  00058	e5943440	 ldr         r3, [r4, #0x440]
  0005c	e3130001	 tst         r3, #1
  00060	0a000042	 beq         |$LN1@BLReserveB|
  00064	e59f0144	 ldr         r0, [pc, #0x144]
  00068	eb000000	 bl          NKDbgPrintfW

; 266  :         goto cleanUp;

  0006c	ea00003f	 b           |$LN1@BLReserveB|
  00070		 |$LN8@BLReserveB|

; 267  : 	}
; 268  : 
; 269  :     // Get flash info
; 270  :     if (!FMD_GetInfo(&flashInfo))

  00070	e28d0000	 add         r0, sp, #0
  00074	eb000000	 bl          FMD_GetInfo
  00078	e3500000	 cmp         r0, #0
  0007c	1a000005	 bne         |$LN7@BLReserveB|

; 271  : 	{
; 272  :         OALMSG(OAL_ERROR, (L"ERROR: FMD_GetInfo call failed!\r\n"));

  00080	e5943440	 ldr         r3, [r4, #0x440]
  00084	e3130001	 tst         r3, #1
  00088	0a000036	 beq         |$cleanUp$46924|
  0008c	e59f0118	 ldr         r0, [pc, #0x118]
  00090	eb000000	 bl          NKDbgPrintfW

; 273  :         goto cleanUp;

  00094	ea000033	 b           |$cleanUp$46924|
  00098		 |$LN7@BLReserveB|

; 274  : 	}
; 275  : 
; 276  :     //  Loop thru the bootloader blocks to ensure they are marked reserved
; 277  :     firstblock = 0;
; 278  :     size = IMAGE_BOOTLOADER_NAND_SIZE;
; 279  :     lastblock = ((size -1) / flashInfo.dwBytesPerBlock) + 1;

  00098	e59d0008	 ldr         r0, [sp, #8]
  0009c	e3e034ff	 mvn         r3, #0xFF, 8
  000a0	e2231739	 eor         r1, r3, #0x39, 14
  000a4	e3a04000	 mov         r4, #0
  000a8	eb000000	 bl          __rt_udiv

; 280  :     OALLog(L"flashType = 0x%x\r\n", flashInfo.flashType);

  000ac	e59d1000	 ldr         r1, [sp]
  000b0	e1a03000	 mov         r3, r0
  000b4	e59f00ec	 ldr         r0, [pc, #0xEC]
  000b8	e2835001	 add         r5, r3, #1
  000bc	eb000000	 bl          NKDbgPrintfW

; 281  : 	OALLog(L"IMAGE_BOOTLOADER_NAND_SIZE = 0x%x\r\n", IMAGE_BOOTLOADER_NAND_SIZE);

  000c0	e59f00dc	 ldr         r0, [pc, #0xDC]
  000c4	e3a01707	 mov         r1, #7, 14
  000c8	eb000000	 bl          NKDbgPrintfW

; 282  : 	OALLog(L"wDataBytesPerSector = 0x%x\r\n", flashInfo.wDataBytesPerSector);

  000cc	e1dd10be	 ldrh        r1, [sp, #0xE]
  000d0	e59f00c8	 ldr         r0, [pc, #0xC8]
  000d4	eb000000	 bl          NKDbgPrintfW

; 283  : 	OALLog(L"dwNumBlocks = 0x%x\r\n", flashInfo.dwNumBlocks);

  000d8	e59d1004	 ldr         r1, [sp, #4]
  000dc	e59f00b8	 ldr         r0, [pc, #0xB8]
  000e0	eb000000	 bl          NKDbgPrintfW

; 284  : 	OALLog(L"wSectorsPerBlock = 0x%x\r\n", flashInfo.wSectorsPerBlock);

  000e4	e1dd10bc	 ldrh        r1, [sp, #0xC]
  000e8	e59f00a8	 ldr         r0, [pc, #0xA8]
  000ec	eb000000	 bl          NKDbgPrintfW

; 285  : 	OALLog(L"dwBytesPerBlock = 0x%x\r\n", flashInfo.dwBytesPerBlock);

  000f0	e59d1008	 ldr         r1, [sp, #8]
  000f4	e59f0098	 ldr         r0, [pc, #0x98]
  000f8	eb000000	 bl          NKDbgPrintfW

; 286  :     OALLog(L"Checking bootloader blocks are marked as reserved (Num = %d)\r\n", lastblock-firstblock);

  000fc	e59f008c	 ldr         r0, [pc, #0x8C]
  00100	e1a01005	 mov         r1, r5
  00104	eb000000	 bl          NKDbgPrintfW

; 287  : 
; 288  :     while (firstblock < lastblock)

  00108	e3550000	 cmp         r5, #0
  0010c	0a000014	 beq         |$LN5@BLReserveB|
  00110		 |$LL6@BLReserveB|

; 289  : 	{
; 290  :         // If block is bad, we have to offset it
; 291  : 		// #define BLOCK_STATUS_UNKNOWN		0x01
; 292  : 		// #define BLOCK_STATUS_BAD			0x02
; 293  : 		// #define BLOCK_STATUS_READONLY	0x04
; 294  : 		// #define BLOCK_STATUS_RESERVED	0x08
; 295  :         status = FMD_GetBlockStatus(firstblock);

  00110	e1a00004	 mov         r0, r4
  00114	eb000000	 bl          FMD_GetBlockStatus

; 296  : 		//OALLog(L" Block %d status = 0x%x\r\n", firstblock, status);
; 297  :         // Skip bad blocks
; 298  :         if ((status & BLOCK_STATUS_BAD) != 0) 

  00118	e3100002	 tst         r0, #2
  0011c	0a000004	 beq         |$LN4@BLReserveB|

; 299  : 		{
; 300  :             OALLog(L" Skip bad block %d\r\n", firstblock);

  00120	e59f0064	 ldr         r0, [pc, #0x64]
  00124	e1a01004	 mov         r1, r4
  00128	eb000000	 bl          NKDbgPrintfW

; 301  :             // blocks marked bad would not have been written either, so don't include this 
; 302  :             // in the count of blocks that are reserved.
; 303  :             firstblock++;
; 304  :             lastblock++;

  0012c	e2855001	 add         r5, r5, #1

; 305  :             continue;

  00130	ea000008	 b           |$LN2@BLReserveB|
  00134		 |$LN4@BLReserveB|

; 306  : 		}
; 307  :         // Skip already reserved blocks
; 308  :         if ((status & BLOCK_STATUS_RESERVED) != 0) 

  00134	e3100008	 tst         r0, #8

; 309  : 		{
; 310  :             firstblock++;
; 311  :             continue;

  00138	1a000006	 bne         |$LN2@BLReserveB|

; 312  : 		}
; 313  :         // Mark block as read-only & reserved
; 314  :         if (!FMD_SetBlockStatus(firstblock, BLOCK_STATUS_READONLY|BLOCK_STATUS_RESERVED)) 

  0013c	e3a0100c	 mov         r1, #0xC
  00140	e1a00004	 mov         r0, r4
  00144	eb000000	 bl          FMD_SetBlockStatus
  00148	e3500000	 cmp         r0, #0

; 315  : 		{
; 316  :             OALLog(L" Oops, can't mark block %d - as reserved\r\n", firstblock);

  0014c	059f0034	 ldreq       r0, [pc, #0x34]
  00150	01a01004	 moveq       r1, r4
  00154	0b000000	 bleq        NKDbgPrintfW
  00158		 |$LN2@BLReserveB|

; 317  : 		}
; 318  :         firstblock++;

  00158	e2844001	 add         r4, r4, #1
  0015c	e1540005	 cmp         r4, r5
  00160	3affffea	 bcc         |$LL6@BLReserveB|
  00164		 |$LN5@BLReserveB|

; 319  : 	}
; 320  :     // Done    
; 321  :     rc = TRUE;

  00164	e3a05001	 mov         r5, #1
  00168		 |$cleanUp$46924|

; 322  : 	//OALMSG(OAL_ERROR, (L"BLReserveBootBlocks: end!\r\n"));
; 323  :     //OALLog(L"\r\n");
; 324  : 
; 325  : cleanUp:
; 326  :     if (hFMD != NULL) FMD_Deinit(hFMD);

  00168	e1a00006	 mov         r0, r6
  0016c	eb000000	 bl          FMD_Deinit
  00170		 |$LN1@BLReserveB|

; 327  :     return rc;

  00170	e59d0390	 ldr         r0, [sp, #0x390]
  00174	eb000000	 bl          __security_check_cookie

; 328  : #else
; 329  :     UNREFERENCED_PARAMETER(pBootCfg);
; 330  :     // Nothing to do...
; 331  :     return TRUE;
; 332  : 
; 333  : #endif
; 334  : }

  00178	e1a00005	 mov         r0, r5
  0017c	e28ddfe5	 add         sp, sp, #0xE5, 30
  00180	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  00184	e12fff1e	 bx          lr
  00188		 |$LN24@BLReserveB|
  00188		 |$LN25@BLReserveB|
  00188	00000000	 DCD         |??_C@_1FG@GECOJCBP@?$AA?5?$AAO?$AAo?$AAp?$AAs?$AA?0?$AA?5?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAm?$AAa?$AAr?$AAk?$AA?5?$AAb?$AAl?$AAo?$AAc?$AAk?$AA?5?$AA?$CF?$AAd?$AA?5?$AA?9?$AA?5?$AAa?$AAs?$AA?5@|
  0018c		 |$LN26@BLReserveB|
  0018c	00000000	 DCD         |??_C@_1CK@FKCECPDI@?$AA?5?$AAS?$AAk?$AAi?$AAp?$AA?5?$AAb?$AAa?$AAd?$AA?5?$AAb?$AAl?$AAo?$AAc?$AAk?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  00190		 |$LN27@BLReserveB|
  00190	00000000	 DCD         |??_C@_1HO@MDILHIPB@?$AAC?$AAh?$AAe?$AAc?$AAk?$AAi?$AAn?$AAg?$AA?5?$AAb?$AAo?$AAo?$AAt?$AAl?$AAo?$AAa?$AAd?$AAe?$AAr?$AA?5?$AAb?$AAl?$AAo?$AAc?$AAk?$AAs?$AA?5?$AAa?$AAr?$AAe?$AA?5?$AAm@|
  00194		 |$LN28@BLReserveB|
  00194	00000000	 DCD         |??_C@_1DC@EJLCBHJJ@?$AAd?$AAw?$AAB?$AAy?$AAt?$AAe?$AAs?$AAP?$AAe?$AAr?$AAB?$AAl?$AAo?$AAc?$AAk?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  00198		 |$LN29@BLReserveB|
  00198	00000000	 DCD         |??_C@_1DE@GHAFOAPE@?$AAw?$AAS?$AAe?$AAc?$AAt?$AAo?$AAr?$AAs?$AAP?$AAe?$AAr?$AAB?$AAl?$AAo?$AAc?$AAk?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  0019c		 |$LN30@BLReserveB|
  0019c	00000000	 DCD         |??_C@_1CK@LDEBLKGK@?$AAd?$AAw?$AAN?$AAu?$AAm?$AAB?$AAl?$AAo?$AAc?$AAk?$AAs?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  001a0		 |$LN31@BLReserveB|
  001a0	00000000	 DCD         |??_C@_1DK@MDBBDJLC@?$AAw?$AAD?$AAa?$AAt?$AAa?$AAB?$AAy?$AAt?$AAe?$AAs?$AAP?$AAe?$AAr?$AAS?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  001a4		 |$LN32@BLReserveB|
  001a4	00000000	 DCD         |??_C@_1EI@LFGCLBPP@?$AAI?$AAM?$AAA?$AAG?$AAE?$AA_?$AAB?$AAO?$AAO?$AAT?$AAL?$AAO?$AAA?$AAD?$AAE?$AAR?$AA_?$AAN?$AAA?$AAN?$AAD?$AA_?$AAS?$AAI?$AAZ?$AAE?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF@|
  001a8		 |$LN33@BLReserveB|
  001a8	00000000	 DCD         |??_C@_1CG@LKOOCDFP@?$AAf?$AAl?$AAa?$AAs?$AAh?$AAT?$AAy?$AAp?$AAe?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  001ac		 |$LN34@BLReserveB|
  001ac	00000000	 DCD         |??_C@_1EE@MHCJNGAF@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAF?$AAM?$AAD?$AA_?$AAG?$AAe?$AAt?$AAI?$AAn?$AAf?$AAo?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?$CB?$AA?$AN@|
  001b0		 |$LN35@BLReserveB|
  001b0	00000000	 DCD         |??_C@_1DO@FFNONGBO@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAF?$AAM?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?$CB?$AA?$AN?$AA?6?$AA?$AA@|
  001b4		 |$LN36@BLReserveB|
  001b4	00000000	 DCD         |g_ulFlashBase|
  001b8		 |$LN37@BLReserveB|
  001b8	00000000	 DCD         |??_C@_1DM@FLIEODNJ@?$AAB?$AAL?$AAR?$AAe?$AAs?$AAe?$AAr?$AAv?$AAe?$AAB?$AAo?$AAo?$AAt?$AAB?$AAl?$AAo?$AAc?$AAk?$AAs?$AA?3?$AA?5?$AAs?$AAt?$AAa?$AAr?$AAt?$AA?$CB?$AA?$AN?$AA?6?$AA?$AA@|
  001bc		 |$LN38@BLReserveB|
  001bc	00000000	 DCD         |dpCurSettings|
  001c0		 |$LN39@BLReserveB|
  001c0	00000000	 DCD         |__security_cookie|
  001c4		 |$M47121|

			 ENDP  ; |BLReserveBootBlocks|

	EXPORT	|BLShowLogo|
	IMPORT	|ShowLogo|

  00000			 AREA	 |.pdata|, PDATA
|$T47149| DCD	|$LN5@BLShowLogo|
	DCD	0x40000701
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |BLShowLogo| PROC

; 338  : {

  00000		 |$LN5@BLShowLogo|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M47146|

; 339  : 	//  Show the bootloader splashscreen if present on the SDCard
; 340  : 	//if (!ShowSDLogo())
; 341  : 	{
; 342  : 		ShowLogo((UINT32)-1, 0);

  00004	e3a01000	 mov         r1, #0
  00008	e3e00000	 mvn         r0, #0
  0000c	eb000000	 bl          ShowLogo

; 343  : 	}
; 344  : 
; 345  :     return TRUE;

  00010	e3a00001	 mov         r0, #1

; 346  : }

  00014	e49de004	 ldr         lr, [sp], #4
  00018	e12fff1e	 bx          lr
  0001c		 |$M47147|

			 ENDP  ; |BLShowLogo|

	EXPORT	|DisplayShow|
	IMPORT	|ShowTest|

  00000			 AREA	 |.pdata|, PDATA
|$T47158| DCD	|$LN5@DisplaySho|
	DCD	0x40000701
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DisplayShow| PROC

; 350  : {

  00000		 |$LN5@DisplaySho|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M47155|

; 351  :     ShowTest((UINT32)-1, 0/*, board*/);

  00004	e3a01000	 mov         r1, #0
  00008	e3e00000	 mvn         r0, #0
  0000c	eb000000	 bl          ShowTest

; 352  :     return TRUE;

  00010	e3a00001	 mov         r0, #1

; 353  : }

  00014	e49de004	 ldr         lr, [sp], #4
  00018	e12fff1e	 bx          lr
  0001c		 |$M47156|

			 ENDP  ; |DisplayShow|

	EXPORT	|tsc2046Test|
	IMPORT	|detect_TSC2046|

  00000			 AREA	 |.pdata|, PDATA
|$T47165| DCD	|$LN5@tsc2046Tes|
	DCD	0x40000401
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |tsc2046Test| PROC

; 358  : {

  00000		 |$LN5@tsc2046Tes|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M47162|

; 359  :     detect_TSC2046();

  00004	eb000000	 bl          detect_TSC2046

; 360  :     return;
; 361  : }

  00008	e49de004	 ldr         lr, [sp], #4
  0000c	e12fff1e	 bx          lr
  00010		 |$M47163|

			 ENDP  ; |tsc2046Test|

	END
