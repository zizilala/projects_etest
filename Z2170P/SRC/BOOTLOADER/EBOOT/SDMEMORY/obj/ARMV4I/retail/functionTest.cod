; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\Z2170P\SRC\BOOTLOADER\EBOOT\functionTest.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|DisplayTest_Z2000|
	EXPORT	|AllFunctionTest_Z2000|
	EXPORT	|??_C@_1CE@DFLFAFMD@?$AAE?$AAx?$AAi?$AAt?$AA?5?$AAa?$AAn?$AAd?$AA?5?$AAC?$AAo?$AAn?$AAt?$AAi?$AAn?$AAu?$AAe?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|AutoScanFunc|
	EXPORT	|??_C@_1BE@FABONDOI@?$AAA?$AAu?$AAt?$AAo?$AA?5?$AAS?$AAc?$AAa?$AAn?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|RAMAccessTest|
	EXPORT	|??_C@_1DI@GCPLOKAO@?$AAR?$AAA?$AAM?$AA?5?$AAA?$AAc?$AAc?$AAe?$AAs?$AAs?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?$CI?$AAC?$AAo?$AAm?$AAp?$AAl?$AAe?$AAt?$AAe?$AAl?$AAy?$AA?$CJ?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|BurnIn_Z2170P|
	EXPORT	|??_C@_1BA@ECNEDNKA@?$AAB?$AAu?$AAr?$AAn?$AA?9?$AAI?$AAn?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|KeypadFunc_Z2170P|
	EXPORT	|??_C@_1CE@POLGPPDB@?$AAK?$AAe?$AAy?$AAp?$AAa?$AAd?$AA?5?$AAf?$AAu?$AAn?$AAc?$AAt?$AAi?$AAo?$AAn?$AAa?$AAl?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|BarcodeTest_Z2170P|
	EXPORT	|??_C@_1CC@DJCNJJMD@?$AAB?$AAa?$AAr?$AAc?$AAo?$AAd?$AAe?$AA?5?$AAS?$AAc?$AAa?$AAn?$AAn?$AAi?$AAn?$AAg?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|LEDTest_Z2170P|
	EXPORT	|??_C@_1BM@FKKAMPJP@?$AAL?$AAE?$AAD?$AA?5?$AAI?$AAn?$AAd?$AAi?$AAc?$AAa?$AAt?$AAo?$AAr?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|BatteryTest_Z2170P|
	EXPORT	|??_C@_1BK@KIOELMDE@?$AAB?$AAa?$AAt?$AAt?$AAe?$AAr?$AAy?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|TouchPanelTest_Z2170P|
	EXPORT	|??_C@_1CC@BNGFPPEB@?$AAT?$AAo?$AAu?$AAc?$AAh?$AA?5?$AAP?$AAa?$AAn?$AAe?$AAl?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|KeypadBkTest_Z2170P|
	EXPORT	|??_C@_1CM@GFKLDENM@?$AAK?$AAe?$AAy?$AAp?$AAa?$AAd?$AA?5?$AAB?$AAa?$AAc?$AAk?$AAl?$AAi?$AAg?$AAh?$AAt?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|DRAMTest_Z2170P|
	EXPORT	|??_C@_1BE@DFLOJDLG@?$AAD?$AAR?$AAA?$AAM?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|BkTest_Z2170P|
	EXPORT	|??_C@_1CG@MFOPBHMC@?$AAL?$AAC?$AAM?$AA?5?$AAB?$AAa?$AAc?$AAk?$AAl?$AAi?$AAg?$AAh?$AAt?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|DisplayTest_Z2170P|
	EXPORT	|??_C@_1BK@FJOPBKKD@?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|AllFunctionTest_Z2170P|
	EXPORT	|??_C@_1CE@NDBHKBD@?$AAA?$AAl?$AAl?$AA?5?$AAF?$AAu?$AAn?$AAc?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|stall_1Sec| [ DATA ]
	EXPORT	|sleep1Sec| [ DATA ]
	EXPORT	|pUartRegs| [ DATA ]
	EXPORT	|g_menu2170PTest| [ DATA ]
	EXPORT	|g_menuZ2000Test| [ DATA ]

  00000			 AREA	 |.data|, DATA
	 COMMON	|ghTwl|, 0x4

	 COMMON	|gKeypadMatrix|, 0x8


  00000			 AREA	 |.bss|, NOINIT
|pUartRegs| %	0x4
|keyStatus| %	0x68

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CE@DFLFAFMD@?$AAE?$AAx?$AAi?$AAt?$AA?5?$AAa?$AAn?$AAd?$AA?5?$AAC?$AAo?$AAn?$AAt?$AAi?$AAn?$AAu?$AAe?$AA?$AA@| DCB "E"
	DCB	0x0, "x", 0x0, "i", 0x0, "t", 0x0, " ", 0x0, "a", 0x0, "n"
	DCB	0x0, "d", 0x0, " ", 0x0, "C", 0x0, "o", 0x0, "n", 0x0, "t"
	DCB	0x0, "i", 0x0, "n", 0x0, "u", 0x0, "e", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BE@FABONDOI@?$AAA?$AAu?$AAt?$AAo?$AA?5?$AAS?$AAc?$AAa?$AAn?$AA?$AA@| DCB "A"
	DCB	0x0, "u", 0x0, "t", 0x0, "o", 0x0, " ", 0x0, "S", 0x0, "c"
	DCB	0x0, "a", 0x0, "n", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DI@GCPLOKAO@?$AAR?$AAA?$AAM?$AA?5?$AAA?$AAc?$AAc?$AAe?$AAs?$AAs?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?$CI?$AAC?$AAo?$AAm?$AAp?$AAl?$AAe?$AAt?$AAe?$AAl?$AAy?$AA?$CJ?$AA?$AA@| DCB "R"
	DCB	0x0, "A", 0x0, "M", 0x0, " ", 0x0, "A", 0x0, "c", 0x0, "c"
	DCB	0x0, "e", 0x0, "s", 0x0, "s", 0x0, " ", 0x0, "T", 0x0, "e"
	DCB	0x0, "s", 0x0, "t", 0x0, "(", 0x0, "C", 0x0, "o", 0x0, "m"
	DCB	0x0, "p", 0x0, "l", 0x0, "e", 0x0, "t", 0x0, "e", 0x0, "l"
	DCB	0x0, "y", 0x0, ")", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BA@ECNEDNKA@?$AAB?$AAu?$AAr?$AAn?$AA?9?$AAI?$AAn?$AA?$AA@| DCB "B"
	DCB	0x0, "u", 0x0, "r", 0x0, "n", 0x0, "-", 0x0, "I", 0x0, "n"
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CE@POLGPPDB@?$AAK?$AAe?$AAy?$AAp?$AAa?$AAd?$AA?5?$AAf?$AAu?$AAn?$AAc?$AAt?$AAi?$AAo?$AAn?$AAa?$AAl?$AA?$AA@| DCB "K"
	DCB	0x0, "e", 0x0, "y", 0x0, "p", 0x0, "a", 0x0, "d", 0x0, " "
	DCB	0x0, "f", 0x0, "u", 0x0, "n", 0x0, "c", 0x0, "t", 0x0, "i"
	DCB	0x0, "o", 0x0, "n", 0x0, "a", 0x0, "l", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CC@DJCNJJMD@?$AAB?$AAa?$AAr?$AAc?$AAo?$AAd?$AAe?$AA?5?$AAS?$AAc?$AAa?$AAn?$AAn?$AAi?$AAn?$AAg?$AA?$AA@| DCB "B"
	DCB	0x0, "a", 0x0, "r", 0x0, "c", 0x0, "o", 0x0, "d", 0x0, "e"
	DCB	0x0, " ", 0x0, "S", 0x0, "c", 0x0, "a", 0x0, "n", 0x0, "n"
	DCB	0x0, "i", 0x0, "n", 0x0, "g", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BM@FKKAMPJP@?$AAL?$AAE?$AAD?$AA?5?$AAI?$AAn?$AAd?$AAi?$AAc?$AAa?$AAt?$AAo?$AAr?$AA?$AA@| DCB "L"
	DCB	0x0, "E", 0x0, "D", 0x0, " ", 0x0, "I", 0x0, "n", 0x0, "d"
	DCB	0x0, "i", 0x0, "c", 0x0, "a", 0x0, "t", 0x0, "o", 0x0, "r"
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BK@KIOELMDE@?$AAB?$AAa?$AAt?$AAt?$AAe?$AAr?$AAy?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?$AA@| DCB "B"
	DCB	0x0, "a", 0x0, "t", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "y"
	DCB	0x0, " ", 0x0, "T", 0x0, "e", 0x0, "s", 0x0, "t", 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CC@BNGFPPEB@?$AAT?$AAo?$AAu?$AAc?$AAh?$AA?5?$AAP?$AAa?$AAn?$AAe?$AAl?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?$AA@| DCB "T"
	DCB	0x0, "o", 0x0, "u", 0x0, "c", 0x0, "h", 0x0, " ", 0x0, "P"
	DCB	0x0, "a", 0x0, "n", 0x0, "e", 0x0, "l", 0x0, " ", 0x0, "T"
	DCB	0x0, "e", 0x0, "s", 0x0, "t", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CM@GFKLDENM@?$AAK?$AAe?$AAy?$AAp?$AAa?$AAd?$AA?5?$AAB?$AAa?$AAc?$AAk?$AAl?$AAi?$AAg?$AAh?$AAt?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?$AA@| DCB "K"
	DCB	0x0, "e", 0x0, "y", 0x0, "p", 0x0, "a", 0x0, "d", 0x0, " "
	DCB	0x0, "B", 0x0, "a", 0x0, "c", 0x0, "k", 0x0, "l", 0x0, "i"
	DCB	0x0, "g", 0x0, "h", 0x0, "t", 0x0, " ", 0x0, "T", 0x0, "e"
	DCB	0x0, "s", 0x0, "t", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BE@DFLOJDLG@?$AAD?$AAR?$AAA?$AAM?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?$AA@| DCB "D"
	DCB	0x0, "R", 0x0, "A", 0x0, "M", 0x0, " ", 0x0, "T", 0x0, "e"
	DCB	0x0, "s", 0x0, "t", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CG@MFOPBHMC@?$AAL?$AAC?$AAM?$AA?5?$AAB?$AAa?$AAc?$AAk?$AAl?$AAi?$AAg?$AAh?$AAt?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?$AA@| DCB "L"
	DCB	0x0, "C", 0x0, "M", 0x0, " ", 0x0, "B", 0x0, "a", 0x0, "c"
	DCB	0x0, "k", 0x0, "l", 0x0, "i", 0x0, "g", 0x0, "h", 0x0, "t"
	DCB	0x0, " ", 0x0, "T", 0x0, "e", 0x0, "s", 0x0, "t", 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BK@FJOPBKKD@?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?$AA@| DCB "D"
	DCB	0x0, "i", 0x0, "s", 0x0, "p", 0x0, "l", 0x0, "a", 0x0, "y"
	DCB	0x0, " ", 0x0, "T", 0x0, "e", 0x0, "s", 0x0, "t", 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CE@NDBHKBD@?$AAA?$AAl?$AAl?$AA?5?$AAF?$AAu?$AAn?$AAc?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?$AA@| DCB "A"
	DCB	0x0, "l", 0x0, "l", 0x0, " ", 0x0, "F", 0x0, "u", 0x0, "n"
	DCB	0x0, "c", 0x0, "t", 0x0, "i", 0x0, "o", 0x0, "n", 0x0, " "
	DCB	0x0, "T", 0x0, "e", 0x0, "s", 0x0, "t", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.data|, DATA
|stall_1Sec| DCD 0xf4240
|sleep1Sec| DCD	0x3e8
|g_menu2170PTest| DCW 0x31
	%	2
	DCD	|??_C@_1CE@NDBHKBD@?$AAA?$AAl?$AAl?$AA?5?$AAF?$AAu?$AAn?$AAc?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?$AA@|
	DCD	|AllFunctionTest_Z2170P|
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCW	0x32
	%	2
	DCD	|??_C@_1BK@FJOPBKKD@?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?$AA@|
	DCD	|DisplayTest_Z2170P|
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCW	0x33
	%	2
	DCD	|??_C@_1CG@MFOPBHMC@?$AAL?$AAC?$AAM?$AA?5?$AAB?$AAa?$AAc?$AAk?$AAl?$AAi?$AAg?$AAh?$AAt?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?$AA@|
	DCD	|BkTest_Z2170P|
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCW	0x34
	%	2
	DCD	|??_C@_1BE@DFLOJDLG@?$AAD?$AAR?$AAA?$AAM?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?$AA@|
	DCD	|DRAMTest_Z2170P|
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCW	0x35
	%	2
	DCD	|??_C@_1CM@GFKLDENM@?$AAK?$AAe?$AAy?$AAp?$AAa?$AAd?$AA?5?$AAB?$AAa?$AAc?$AAk?$AAl?$AAi?$AAg?$AAh?$AAt?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?$AA@|
	DCD	|KeypadBkTest_Z2170P|
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCW	0x36
	%	2
	DCD	|??_C@_1CC@BNGFPPEB@?$AAT?$AAo?$AAu?$AAc?$AAh?$AA?5?$AAP?$AAa?$AAn?$AAe?$AAl?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?$AA@|
	DCD	|TouchPanelTest_Z2170P|
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCW	0x37
	%	2
	DCD	|??_C@_1BK@KIOELMDE@?$AAB?$AAa?$AAt?$AAt?$AAe?$AAr?$AAy?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?$AA@|
	DCD	|BatteryTest_Z2170P|
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCW	0x38
	%	2
	DCD	|??_C@_1BM@FKKAMPJP@?$AAL?$AAE?$AAD?$AA?5?$AAI?$AAn?$AAd?$AAi?$AAc?$AAa?$AAt?$AAo?$AAr?$AA?$AA@|
	DCD	|LEDTest_Z2170P|
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCW	0x39
	%	2
	DCD	|??_C@_1CC@DJCNJJMD@?$AAB?$AAa?$AAr?$AAc?$AAo?$AAd?$AAe?$AA?5?$AAS?$AAc?$AAa?$AAn?$AAn?$AAi?$AAn?$AAg?$AA?$AA@|
	DCD	|BarcodeTest_Z2170P|
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCW	0x61
	%	2
	DCD	|??_C@_1CE@POLGPPDB@?$AAK?$AAe?$AAy?$AAp?$AAa?$AAd?$AA?5?$AAf?$AAu?$AAn?$AAc?$AAt?$AAi?$AAo?$AAn?$AAa?$AAl?$AA?$AA@|
	DCD	|KeypadFunc_Z2170P|
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCW	0x62
	%	2
	DCD	|??_C@_1BA@ECNEDNKA@?$AAB?$AAu?$AAr?$AAn?$AA?9?$AAI?$AAn?$AA?$AA@|
	DCD	|BurnIn_Z2170P|
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCW	0x63
	%	2
	DCD	|??_C@_1DI@GCPLOKAO@?$AAR?$AAA?$AAM?$AA?5?$AAA?$AAc?$AAc?$AAe?$AAs?$AAs?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?$CI?$AAC?$AAo?$AAm?$AAp?$AAl?$AAe?$AAt?$AAe?$AAl?$AAy?$AA?$CJ?$AA?$AA@|
	DCD	|RAMAccessTest|
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCW	0x64
	%	2
	DCD	|??_C@_1BE@FABONDOI@?$AAA?$AAu?$AAt?$AAo?$AA?5?$AAS?$AAc?$AAa?$AAn?$AA?$AA@|
	DCD	|AutoScanFunc|
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCW	0x30
	%	2
	DCD	|??_C@_1CE@DFLFAFMD@?$AAE?$AAx?$AAi?$AAt?$AA?5?$AAa?$AAn?$AAd?$AA?5?$AAC?$AAo?$AAn?$AAt?$AAi?$AAn?$AAu?$AAe?$AA?$AA@|
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCW	0x0
	%	2
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
|g_menuZ2000Test| DCW 0x31
	%	2
	DCD	|??_C@_1CE@NDBHKBD@?$AAA?$AAl?$AAl?$AA?5?$AAF?$AAu?$AAn?$AAc?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?$AA@|
	DCD	|AllFunctionTest_Z2000|
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCW	0x32
	%	2
	DCD	|??_C@_1BK@FJOPBKKD@?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?$AA@|
	DCD	|DisplayTest_Z2000|
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCW	0x30
	%	2
	DCD	|??_C@_1CE@DFLFAFMD@?$AAE?$AAx?$AAi?$AAt?$AA?5?$AAa?$AAn?$AAd?$AA?5?$AAC?$AAo?$AAn?$AAt?$AAi?$AAn?$AAu?$AAe?$AA?$AA@|
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCW	0x0
	%	2
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
|?count@?1??KeypadFuncMatrix@@9@9| DCD 0x1a		; `KeypadFuncMatrix'::`2'::count

  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
	EXPORT	|??_C@_1CA@IPGENFE@?$AA?$AN?$AA?6?$AA?5?$AAR?$AAu?$AAn?$AAn?$AAi?$AAn?$AAg?$AA?4?$AA?4?$AA?4?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CA@NFDHHLIH@?$AA?$AN?$AAT?$AAe?$AAs?$AAt?$AAe?$AAd?$AA?5?$AAo?$AAk?$AA?$CB?$AA?$CB?$AA?5?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|DisplayShow|
	IMPORT	|NKDbgPrintfW|
	IMPORT	|OALBLMenuHeader|
	IMPORT	|BLShowLogo|
; File c:\wince600\platform\z2170p\src\bootloader\eboot\functiontest.c

  00000			 AREA	 |.pdata|, PDATA
|$T48274| DCD	|$LN5@DisplayTes|
	DCD	0x40000e01

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CA@IPGENFE@?$AA?$AN?$AA?6?$AA?5?$AAR?$AAu?$AAn?$AAn?$AAi?$AAn?$AAg?$AA?4?$AA?4?$AA?4?$AA?$AN?$AA?6?$AA?$AA@| DCB 0xd
	DCB	0x0, 0xa, 0x0, " ", 0x0, "R", 0x0, "u", 0x0, "n", 0x0, "n"
	DCB	0x0, "i", 0x0, "n", 0x0, "g", 0x0, ".", 0x0, ".", 0x0, "."
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CA@NFDHHLIH@?$AA?$AN?$AAT?$AAe?$AAs?$AAt?$AAe?$AAd?$AA?5?$AAo?$AAk?$AA?$CB?$AA?$CB?$AA?5?$AA?$AN?$AA?6?$AA?$AA@| DCB 0xd
	DCB	0x0, "T", 0x0, "e", 0x0, "s", 0x0, "t", 0x0, "e", 0x0, "d"
	DCB	0x0, " ", 0x0, "o", 0x0, "k", 0x0, "!", 0x0, "!", 0x0, " "
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DisplayTest_Z2170P| PROC

; 220  : {

  00000		 |$LN5@DisplayTes|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M48271|

; 221  :     BLShowLogo();

  00004	eb000000	 bl          BLShowLogo

; 222  :     OALBLMenuHeader(L"Display Test");

  00008	e59f0024	 ldr         r0, [pc, #0x24]
  0000c	eb000000	 bl          OALBLMenuHeader

; 223  : 	UNREFERENCED_PARAMETER(pMenu);
; 224  :     OALLog(L"\r\n Running...\r\n");

  00010	e59f0018	 ldr         r0, [pc, #0x18]
  00014	eb000000	 bl          NKDbgPrintfW

; 225  : 	//DisplayShow(BSP_Z2170P);
; 226  : 	DisplayShow();

  00018	eb000000	 bl          DisplayShow

; 227  : 	OALLog(L"\rTested ok!! \r\n");

  0001c	e59f0008	 ldr         r0, [pc, #8]
  00020	eb000000	 bl          NKDbgPrintfW

; 228  : }

  00024	e49de004	 ldr         lr, [sp], #4
  00028	e12fff1e	 bx          lr
  0002c		 |$LN6@DisplayTes|
  0002c		 |$LN7@DisplayTes|
  0002c	00000000	 DCD         |??_C@_1CA@NFDHHLIH@?$AA?$AN?$AAT?$AAe?$AAs?$AAt?$AAe?$AAd?$AA?5?$AAo?$AAk?$AA?$CB?$AA?$CB?$AA?5?$AA?$AN?$AA?6?$AA?$AA@|
  00030		 |$LN8@DisplayTes|
  00030	00000000	 DCD         |??_C@_1CA@IPGENFE@?$AA?$AN?$AA?6?$AA?5?$AAR?$AAu?$AAn?$AAn?$AAi?$AAn?$AAg?$AA?4?$AA?4?$AA?4?$AA?$AN?$AA?6?$AA?$AA@|
  00034		 |$LN9@DisplayTes|
  00034	00000000	 DCD         |??_C@_1BK@FJOPBKKD@?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?$AA@|
  00038		 |$M48272|

			 ENDP  ; |DisplayTest_Z2170P|

	EXPORT	|SetBacklight|
	EXPORT	|??_C@_1FE@PFEMMGFN@?$AA?$AN?$AA?5?$AA?$CB?$AAP?$AAl?$AAu?$AAs?$AA?5?$AAa?$AAf?$AAt?$AAe?$AAr?$AA?5?$AAb?$AAr?$AAi?$AAg?$AAh?$AAt?$AAn?$AAe?$AAs?$AAs?$AA?5?$AAs?$AAc?$AAa?$AAl?$AAe?$AA?5?$AAa@| [ DATA ] ; `string'
	IMPORT	|GPIOClose|
	IMPORT	|GPIOSetBit|
	IMPORT	|LcdStall|
	IMPORT	|GPIOClrBit|
	IMPORT	|GPIOOpen|

  00000			 AREA	 |.pdata|, PDATA
|$T48290| DCD	|$LN12@SetBacklig|
	DCD	0x40004702

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FE@PFEMMGFN@?$AA?$AN?$AA?5?$AA?$CB?$AAP?$AAl?$AAu?$AAs?$AA?5?$AAa?$AAf?$AAt?$AAe?$AAr?$AA?5?$AAb?$AAr?$AAi?$AAg?$AAh?$AAt?$AAn?$AAe?$AAs?$AAs?$AA?5?$AAs?$AAc?$AAa?$AAl?$AAe?$AA?5?$AAa@| DCB 0xd
	DCB	0x0, " ", 0x0, "!", 0x0, "P", 0x0, "l", 0x0, "u", 0x0, "s"
	DCB	0x0, " ", 0x0, "a", 0x0, "f", 0x0, "t", 0x0, "e", 0x0, "r"
	DCB	0x0, " ", 0x0, "b", 0x0, "r", 0x0, "i", 0x0, "g", 0x0, "h"
	DCB	0x0, "t", 0x0, "n", 0x0, "e", 0x0, "s", 0x0, "s", 0x0, " "
	DCB	0x0, "s", 0x0, "c", 0x0, "a", 0x0, "l", 0x0, "e", 0x0, " "
	DCB	0x0, "a", 0x0, "t", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, " "
	DCB	0x0, "%", 0x0, "%", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |SetBacklight| PROC

; 247  : {

  00000		 |$LN12@SetBacklig|
  00000	e92d43f0	 stmdb       sp!, {r4 - r9, lr}
  00004	e24dd02c	 sub         sp, sp, #0x2C
  00008		 |$M48287|

; 248  :     HANDLE hGPIO;
; 249  :     //WCHAR key;
; 250  :     int i, value, k, scale = 0;    
; 251  :     int AAT3123Code[11] = { 1, 4 , 7, 10, 13, 16, 19, 22, 25, 28, 32};

  00008	e3a07019	 mov         r7, #0x19
  0000c	e3a03001	 mov         r3, #1
  00010	e3a02004	 mov         r2, #4
  00014	e3a01007	 mov         r1, #7
  00018	e3a0000a	 mov         r0, #0xA
  0001c	e3a0e00d	 mov         lr, #0xD
  00020	e3a04010	 mov         r4, #0x10
  00024	e3a05013	 mov         r5, #0x13
  00028	e3a06016	 mov         r6, #0x16
  0002c	e3a0801c	 mov         r8, #0x1C
  00030	e3a09020	 mov         r9, #0x20
  00034	e58d7020	 str         r7, [sp, #0x20]
  00038	e3a07000	 mov         r7, #0
  0003c	e58d3000	 str         r3, [sp]
  00040	e58d2004	 str         r2, [sp, #4]
  00044	e58d1008	 str         r1, [sp, #8]
  00048	e58d000c	 str         r0, [sp, #0xC]
  0004c	e58de010	 str         lr, [sp, #0x10]
  00050	e58d4014	 str         r4, [sp, #0x14]
  00054	e58d5018	 str         r5, [sp, #0x18]
  00058	e58d601c	 str         r6, [sp, #0x1C]
  0005c	e58d8024	 str         r8, [sp, #0x24]
  00060	e58d9028	 str         r9, [sp, #0x28]

; 252  :                           //0  10  20  30 40  50  60  70  80  90  100
; 253  :    
; 254  :     hGPIO = GPIOOpen();

  00064	eb000000	 bl          GPIOOpen

; 255  : 
; 256  :     GPIOClrBit(hGPIO, BK_SET_GPIO);

  00068	e3a0103d	 mov         r1, #0x3D
  0006c	e1a05000	 mov         r5, r0
  00070	eb000000	 bl          GPIOClrBit

; 257  :     LcdStall(stall_1Sec); 

  00074	e59f809c	 ldr         r8, [pc, #0x9C]
  00078	e5980000	 ldr         r0, [r8]
  0007c	eb000000	 bl          LcdStall

; 258  :             
; 259  :     for(i=1, k=0; i<=32; i++)

  00080	e3a04001	 mov         r4, #1
  00084	e28d6000	 add         r6, sp, #0
  00088		 |$LL5@SetBacklig|

; 260  :     {
; 261  :         if(i == (value = AAT3123Code[k]))

  00088	e5963000	 ldr         r3, [r6]

; 262  :         {
; 263  :             GPIOClrBit(hGPIO, BK_SET_GPIO);

  0008c	e3a0103d	 mov         r1, #0x3D
  00090	e1a00005	 mov         r0, r5
  00094	e1540003	 cmp         r4, r3
  00098	1a00000d	 bne         |$LN2@SetBacklig|
  0009c	eb000000	 bl          GPIOClrBit

; 264  :             LcdStall(1);

  000a0	e3a00001	 mov         r0, #1
  000a4	eb000000	 bl          LcdStall

; 265  :             GPIOSetBit(hGPIO, BK_SET_GPIO);

  000a8	e3a0103d	 mov         r1, #0x3D
  000ac	e1a00005	 mov         r0, r5
  000b0	eb000000	 bl          GPIOSetBit

; 266  :             LcdStall(stall_1Sec);

  000b4	e5980000	 ldr         r0, [r8]
  000b8	eb000000	 bl          LcdStall

; 267  :             OALLog(L"\r !Plus after brightness scale at %d %%\r\n",scale);

  000bc	e59f0050	 ldr         r0, [pc, #0x50]
  000c0	e1a01007	 mov         r1, r7
  000c4	eb000000	 bl          NKDbgPrintfW

; 268  :             scale+=10;

  000c8	e287700a	 add         r7, r7, #0xA

; 269  :             k++;

  000cc	e2866004	 add         r6, r6, #4

; 270  :         }else{

  000d0	ea000007	 b           |$LN4@SetBacklig|
  000d4		 |$LN2@SetBacklig|

; 271  :             GPIOClrBit(hGPIO, BK_SET_GPIO);

  000d4	eb000000	 bl          GPIOClrBit

; 272  :             LcdStall(1);

  000d8	e3a00001	 mov         r0, #1
  000dc	eb000000	 bl          LcdStall

; 273  :             GPIOSetBit(hGPIO, BK_SET_GPIO);

  000e0	e3a0103d	 mov         r1, #0x3D
  000e4	e1a00005	 mov         r0, r5
  000e8	eb000000	 bl          GPIOSetBit

; 274  :             LcdStall(1);

  000ec	e3a00001	 mov         r0, #1
  000f0	eb000000	 bl          LcdStall
  000f4		 |$LN4@SetBacklig|
  000f4	e2844001	 add         r4, r4, #1
  000f8	e3540020	 cmp         r4, #0x20
  000fc	daffffe1	 ble         |$LL5@SetBacklig|

; 275  :         }
; 276  :     }   
; 277  :     /*for (i=0; i<BK_EXIT; i++)
; 278  :     {
; 279  :         OALLog(L" [%d] %s\r\n", i+1, lcmBacklight[i].bkName);
; 280  : 	}
; 281  :     OALLog(L" [0] Exit and Continue\r\n");*/
; 282  : 
; 283  :     //OALLog(L"\r\n Selection : ");
; 284  : 
; 285  :     /*do{ 
; 286  :         key = OALBLMenuReadKey(TRUE);
; 287  :     }while(key < L'0' || key > L'0' + i);
; 288  :     // Show selection
; 289  : 	OALLog(L"%c\r\n", key);*/
; 290  : 	
; 291  :     /*switch(key)
; 292  :     {
; 293  :          case L'1':
; 294  :              GPIOClrBit(hGPIO, BK_SET_GPIO);
; 295  :              LcdStall(stall_1Sec); 
; 296  :             
; 297  :              for(i=1, k=0; i<=32; i++)
; 298  :              {
; 299  :                 if(i == (value = AAT3123Code[k]))
; 300  :                 {
; 301  :                     GPIOClrBit(hGPIO, BK_SET_GPIO);
; 302  :                     LcdStall(1);
; 303  :                     GPIOSetBit(hGPIO, BK_SET_GPIO);
; 304  :                     LcdStall(stall_1Sec);
; 305  :                     OALLog(L"\r !Plus after brightness scale at %d %%\r\n",scale);
; 306  :                     scale+=10;
; 307  :                     k++;
; 308  :                 }else{
; 309  :                     GPIOClrBit(hGPIO, BK_SET_GPIO);
; 310  :                     LcdStall(1);
; 311  :                     GPIOSetBit(hGPIO, BK_SET_GPIO);
; 312  :                     LcdStall(1);
; 313  :                 }
; 314  :             }
; 315  :             break;
; 316  :          case L'2':
; 317  :              for(i=1; i<=22; i++)
; 318  :              {
; 319  :                  GPIOClrBit(hGPIO, BK_SET_GPIO);
; 320  :                  LcdStall(1);
; 321  :                  GPIOSetBit(hGPIO, BK_SET_GPIO);
; 322  :                  LcdStall(1);
; 323  :              }
; 324  :              OALLog(L"\r !Now Backlight ON,default scale at 70%%\r\n");
; 325  :              break;
; 326  :          case L'3':
; 327  :              GPIOClrBit(hGPIO, BK_SET_GPIO);
; 328  :              LcdStall(1);
; 329  :              OALLog(L"\r !Now Backlight OFF\r\n");
; 330  :              break;
; 331  :     }*/
; 332  :     GPIOClose(hGPIO);

  00100	e1a00005	 mov         r0, r5
  00104	eb000000	 bl          GPIOClose

; 333  :     
; 334  :     //if (key == L'0') return;    
; 335  : }

  00108	e28dd02c	 add         sp, sp, #0x2C
  0010c	e8bd43f0	 ldmia       sp!, {r4 - r9, lr}
  00110	e12fff1e	 bx          lr
  00114		 |$LN13@SetBacklig|
  00114		 |$LN14@SetBacklig|
  00114	00000000	 DCD         |??_C@_1FE@PFEMMGFN@?$AA?$AN?$AA?5?$AA?$CB?$AAP?$AAl?$AAu?$AAs?$AA?5?$AAa?$AAf?$AAt?$AAe?$AAr?$AA?5?$AAb?$AAr?$AAi?$AAg?$AAh?$AAt?$AAn?$AAe?$AAs?$AAs?$AA?5?$AAs?$AAc?$AAa?$AAl?$AAe?$AA?5?$AAa@|
  00118		 |$LN15@SetBacklig|
  00118	00000000	 DCD         |stall_1Sec|
  0011c		 |$M48288|

			 ENDP  ; |SetBacklight|

	EXPORT	|??_C@_15JNBOKNOG@?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CK@KEBMPBOA@?$AA?$AN?$AAS?$AAc?$AAa?$AAn?$AAn?$AAe?$AAd?$AA?5?$AAs?$AAi?$AAz?$AAe?$AA?3?$AA?5?$AA?$CF?$AAd?$AAk?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CO@GBEKHDOH@?$AA?$AN?$AA?6?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?3?$AA?5?$AA0?$AAX?$AA?$CF?$AAX?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DE@LFDKHCLM@?$AA?$AN?$AA?6?$AA?5?$AA?$CB?$AAS?$AAt?$AAa?$AAr?$AAt?$AA?5?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?3?$AA?5?$AA0?$AAX?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DE@KFOFBOBN@?$AA?$AN?$AA?6?$AA?5?$AA?$CB?$AAT?$AAe?$AAs?$AAt?$AA1?$AA?5?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?3?$AA?5?$AA0?$AAX?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DE@FOMMJKGJ@?$AA?$AN?$AA?6?$AA?5?$AA?$CB?$AAE?$AAn?$AAd?$AA?5?$AA?5?$AA?5?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?3?$AA?5?$AA0?$AAX?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FM@GKBCNJJJ@?$AA?$AN?$AA?6?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T48304| DCD	|$LN12@DRAMTest_Z|
	DCD	0x40003d01

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_15JNBOKNOG@?$AA?$AN?$AA?6?$AA?$AA@| DCB 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CK@KEBMPBOA@?$AA?$AN?$AAS?$AAc?$AAa?$AAn?$AAn?$AAe?$AAd?$AA?5?$AAs?$AAi?$AAz?$AAe?$AA?3?$AA?5?$AA?$CF?$AAd?$AAk?$AA?$AN?$AA?6?$AA?$AA@| DCB 0xd
	DCB	0x0, "S", 0x0, "c", 0x0, "a", 0x0, "n", 0x0, "n", 0x0, "e"
	DCB	0x0, "d", 0x0, " ", 0x0, "s", 0x0, "i", 0x0, "z", 0x0, "e"
	DCB	0x0, ":", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, "k", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CO@GBEKHDOH@?$AA?$AN?$AA?6?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?3?$AA?5?$AA0?$AAX?$AA?$CF?$AAX?$AA?$AA@| DCB 0xd
	DCB	0x0, 0xa, 0x0, " ", 0x0, "E", 0x0, "r", 0x0, "r", 0x0, "o"
	DCB	0x0, "r", 0x0, " ", 0x0, "A", 0x0, "d", 0x0, "d", 0x0, "r"
	DCB	0x0, "e", 0x0, "s", 0x0, "s", 0x0, ":", 0x0, " ", 0x0, "0"
	DCB	0x0, "X", 0x0, "%", 0x0, "X", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DE@LFDKHCLM@?$AA?$AN?$AA?6?$AA?5?$AA?$CB?$AAS?$AAt?$AAa?$AAr?$AAt?$AA?5?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?3?$AA?5?$AA0?$AAX?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AA@| DCB 0xd
	DCB	0x0, 0xa, 0x0, " ", 0x0, "!", 0x0, "S", 0x0, "t", 0x0, "a"
	DCB	0x0, "r", 0x0, "t", 0x0, " ", 0x0, "A", 0x0, "d", 0x0, "d"
	DCB	0x0, "r", 0x0, "e", 0x0, "s", 0x0, "s", 0x0, ":", 0x0, " "
	DCB	0x0, "0", 0x0, "X", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "X"
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DE@KFOFBOBN@?$AA?$AN?$AA?6?$AA?5?$AA?$CB?$AAT?$AAe?$AAs?$AAt?$AA1?$AA?5?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?3?$AA?5?$AA0?$AAX?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AA@| DCB 0xd
	DCB	0x0, 0xa, 0x0, " ", 0x0, "!", 0x0, "T", 0x0, "e", 0x0, "s"
	DCB	0x0, "t", 0x0, "1", 0x0, " ", 0x0, "A", 0x0, "d", 0x0, "d"
	DCB	0x0, "r", 0x0, "e", 0x0, "s", 0x0, "s", 0x0, ":", 0x0, " "
	DCB	0x0, "0", 0x0, "X", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "X"
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DE@FOMMJKGJ@?$AA?$AN?$AA?6?$AA?5?$AA?$CB?$AAE?$AAn?$AAd?$AA?5?$AA?5?$AA?5?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?3?$AA?5?$AA0?$AAX?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AA@| DCB 0xd
	DCB	0x0, 0xa, 0x0, " ", 0x0, "!", 0x0, "E", 0x0, "n", 0x0, "d"
	DCB	0x0, " ", 0x0, " ", 0x0, " ", 0x0, "A", 0x0, "d", 0x0, "d"
	DCB	0x0, "r", 0x0, "e", 0x0, "s", 0x0, "s", 0x0, ":", 0x0, " "
	DCB	0x0, "0", 0x0, "X", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "X"
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FM@GKBCNJJJ@?$AA?$AN?$AA?6?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9@| DCB 0xd
	DCB	0x0, 0xa, 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-"
	DCB	0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-"
	DCB	0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-"
	DCB	0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-"
	DCB	0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-"
	DCB	0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-"
	DCB	0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-"
	DCB	0x0, "-", 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DRAMTest_Z2170P| PROC

; 352  : {

  00000		 |$LN12@DRAMTest_Z|
  00000	e92d43f0	 stmdb       sp!, {r4 - r9, lr}
  00004		 |$M48301|

; 353  :     ULONG  startAddress = IMAGE_SHARE_ARGS_CA;
; 354  :     ULONG  endAddress = startAddress|(256 *1024 *1024-1); //endAddress = startAddress + size(256MB) 
; 355  :     ULONG   test1_Address = (startAddress|0x0000FFFF);      //
; 356  :     //ULONG   test2_Address = (startAddress|0x0FFFFF00);
; 357  :     //ULONG   ebootAddress = IMAGE_EBOOT_CODE_CA ;
; 358  :     ULONG   i, testAddress =  0xFFFFFFFF;
; 359  :     BYTE    value, temp, pattern = 0x1A; 
; 360  :     //ULONG   percentRange;
; 361  :     ULONG   percent;        
; 362  :      
; 363  : 	UNREFERENCED_PARAMETER(pMenu);
; 364  : 	OALBLMenuHeader(L"DRAM Test");

  00004	e59f00e4	 ldr         r0, [pc, #0xE4]
  00008	eb000000	 bl          OALBLMenuHeader

; 365  : 
; 366  : 	//percentRange = (endAddress - startAddress)/100;
; 367  :     OALLog(L"\r\n !Start Address: 0X%08X", (startAddress&testAddress));

  0000c	e59f00d8	 ldr         r0, [pc, #0xD8]
  00010	e3a01102	 mov         r1, #2, 2
  00014	eb000000	 bl          NKDbgPrintfW

; 368  :     OALLog(L"\r\n !Test1 Address: 0X%08X", (test1_Address&testAddress));

  00018	e59f00c8	 ldr         r0, [pc, #0xC8]
  0001c	e3e0347f	 mvn         r3, #0x7F, 8
  00020	e22318ff	 eor         r1, r3, #0xFF, 16
  00024	eb000000	 bl          NKDbgPrintfW

; 369  :     //OALLog(L"\r\n !Test2 Address: 0X%08X", (test2_Address&test));
; 370  :     OALLog(L"\r\n !End   Address: 0X%08X", (endAddress&testAddress));

  00028	e59f00b4	 ldr         r0, [pc, #0xB4]
  0002c	e3e01207	 mvn         r1, #7, 4
  00030	eb000000	 bl          NKDbgPrintfW

; 371  :     OALLog(L"\r\n------------------------------------------\n");

  00034	e59f00a4	 ldr         r0, [pc, #0xA4]
  00038	eb000000	 bl          NKDbgPrintfW
  0003c	e3a03cff	 mov         r3, #0xFF, 24
  00040	e38350ff	 orr         r5, r3, #0xFF
  00044	e3a03c03	 mov         r3, #3, 24
  00048	e59f708c	 ldr         r7, [pc, #0x8C]
  0004c	e59f8084	 ldr         r8, [pc, #0x84]
  00050	e38360ff	 orr         r6, r3, #0xFF
  00054	e3a04102	 mov         r4, #2, 2
  00058	e3a0901a	 mov         r9, #0x1A
  0005c		 |$LL5@DRAMTest_Z|

; 372  :   
; 373  : 	/*for(i=0, percent=0; i<(test1_Address - startAddress); i++)
; 374  : 	{
; 375  :         temp = *(volatile BYTE *)(startAddress + i);        //read data     ;temp(0x8000_0000) to get a address 
; 376  :         *(volatile BYTE *)(startAddress + i) = pattern;     //write pattern ;pattern write into address(1A) 
; 377  :         value = *(volatile BYTE *)(startAddress + i);       //read pattern  ;value == 1A, setup value
; 378  :         *(volatile BYTE *)(startAddress + i) = temp;        //store data
; 379  : 
; 380  :         if(value != pattern)                                //check value(in address value) equal pattern
; 381  :         {
; 382  :             OALLog(L"\r\n Error Address: 0X%X", startAddress+i);
; 383  :         }else{
; 384  :             percent++;
; 385  :             OALLog(L"\r\n Decoding Memoey percent: %d >>>  Address: 0X%X",percent, startAddress+i);   
; 386  :             //OALLog(L"\r\n Address: 0X%X", startAddress+i);
; 387  :         }
; 388  : 
; 389  :         if( (percent%10) == 0){
; 390  :             OALLog(L"\r\n-----------------------------------\n");
; 391  :             LcdStall(stall_1Sec); 
; 392  :         }
; 393  : 	}
; 394  :     OALLog(L"\r\n");
; 395  :     LcdStall(stall_1Sec*3);*/
; 396  : 
; 397  :     //OALLog(L"\r\n");
; 398  :     for(i=0, percent=1; i<(test1_Address - startAddress); i++, percent++)
; 399  : 	{
; 400  :         temp = *(volatile BYTE *)(startAddress + i);        //read data     ;temp(0x8000_0000) to get a address 

  0005c	e5d42000	 ldrb        r2, [r4]

; 401  :         *(volatile BYTE *)(startAddress + i) = pattern;     //write pattern ;pattern write into address(1A) 

  00060	e5c49000	 strb        r9, [r4]

; 402  :         value = *(volatile BYTE *)(startAddress + i);       //read pattern  ;value == 1A, setup value

  00064	e5d43000	 ldrb        r3, [r4]

; 403  :         *(volatile BYTE *)(startAddress + i) = temp;        //store data

  00068	e5c42000	 strb        r2, [r4]

; 404  :         
; 405  :         if(value != pattern)                                //check value(in address value) equal pattern

  0006c	e353001a	 cmp         r3, #0x1A

; 406  :         {
; 407  :             OALLog(L"\r\n Error Address: 0X%X", startAddress+i);

  00070	159f005c	 ldrne       r0, [pc, #0x5C]
  00074	11a01004	 movne       r1, r4
  00078	1b000000	 blne        NKDbgPrintfW

; 408  :         }/*else{
; 409  :             OALLog(L"*");
; 410  :             //percent++;
; 411  :             //OALLog(L"\r\n Decoding Memoey percent: %d >>>  Address: 0X%X",percent, test2_Address+i);   
; 412  :             //OALLog(L"\r\n Address: 0X%X", startAddress+i);
; 413  :         }*/
; 414  : 
; 415  :         if( (percent%1024) == 0){   //scan 1kB show tip 

  0007c	e2843106	 add         r3, r4, #6, 2
  00080	e1130006	 tst         r3, r6
  00084	1a000006	 bne         |$LN4@DRAMTest_Z|

; 416  :             OALLog(L"\rScanned size: %dk\r\n",percent/1024);

  00088	e59f0040	 ldr         r0, [pc, #0x40]
  0008c	e1a01523	 mov         r1, r3, lsr #10
  00090	eb000000	 bl          NKDbgPrintfW

; 417  :             LcdStall(stall_1Sec/1000); 

  00094	e5971000	 ldr         r1, [r7]
  00098	e0832891	 umull       r2, r3, r1, r8
  0009c	e1a00323	 mov         r0, r3, lsr #6
  000a0	eb000000	 bl          LcdStall
  000a4		 |$LN4@DRAMTest_Z|
  000a4	e2844001	 add         r4, r4, #1
  000a8	e2555001	 subs        r5, r5, #1
  000ac	1affffea	 bne         |$LL5@DRAMTest_Z|

; 418  :         }
; 419  : 	}
; 420  : 	OALLog(L"\r\n");

  000b0	e59f0014	 ldr         r0, [pc, #0x14]
  000b4	eb000000	 bl          NKDbgPrintfW

; 421  :     OALLog(L"\rTested ok!! \r\n");

  000b8	e59f0008	 ldr         r0, [pc, #8]
  000bc	eb000000	 bl          NKDbgPrintfW

; 422  : 
; 423  :     //LcdStall(stall_1Sec*3); 
; 424  :     
; 425  : 	/*for(i=0, Round=1; i<0xFF; i++)                         //Testing eboot, Ray  131113
; 426  :     {
; 427  :         if(i==65)
; 428  :         {
; 429  :             temp = *(volatile BYTE *)(startAddress + i);        //read data     ;temp(0x8000_0000) to get a address 
; 430  :             *(volatile BYTE *)(startAddress + i) = pattern;     //write pattern ;pattern write into address(1A) 
; 431  :             value = *(volatile BYTE *)(startAddress + i);       //read pattern  ;value == 1A, setup value
; 432  :             *(volatile BYTE *)(startAddress + i) = temp;        //store data   
; 433  :             if(value != pattern)                                //check value(in address value) equal pattern
; 434  :             {
; 435  :                 OALLog(L"\r\n Error Address: 0X%X", (ebootAddress+i));
; 436  :             }
; 437  :         }
; 438  : 
; 439  :         OALLog(L"\r\n Eboot Address: 0x%08x, Value = 0x%08x", (ebootAddress+i),*(volatile BYTE *)(ebootAddress+i));
; 440  :         
; 441  :         if((Round%16)== 0)
; 442  :         {
; 443  :             OALLog(L"\r\n Round %d",Round);
; 444  :             OALLog(L"\r\n---------------------\n"); 
; 445  :             Round++;
; 446  :         }
; 447  :     }*/
; 448  : }

  000c0	e8bd43f0	 ldmia       sp!, {r4 - r9, lr}
  000c4	e12fff1e	 bx          lr
  000c8		 |$LN13@DRAMTest_Z|
  000c8		 |$LN14@DRAMTest_Z|
  000c8	00000000	 DCD         |??_C@_1CA@NFDHHLIH@?$AA?$AN?$AAT?$AAe?$AAs?$AAt?$AAe?$AAd?$AA?5?$AAo?$AAk?$AA?$CB?$AA?$CB?$AA?5?$AA?$AN?$AA?6?$AA?$AA@|
  000cc		 |$LN15@DRAMTest_Z|
  000cc	00000000	 DCD         |??_C@_15JNBOKNOG@?$AA?$AN?$AA?6?$AA?$AA@|
  000d0		 |$LN16@DRAMTest_Z|
  000d0	00000000	 DCD         |??_C@_1CK@KEBMPBOA@?$AA?$AN?$AAS?$AAc?$AAa?$AAn?$AAn?$AAe?$AAd?$AA?5?$AAs?$AAi?$AAz?$AAe?$AA?3?$AA?5?$AA?$CF?$AAd?$AAk?$AA?$AN?$AA?6?$AA?$AA@|
  000d4		 |$LN17@DRAMTest_Z|
  000d4	00000000	 DCD         |??_C@_1CO@GBEKHDOH@?$AA?$AN?$AA?6?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?3?$AA?5?$AA0?$AAX?$AA?$CF?$AAX?$AA?$AA@|
  000d8		 |$LN18@DRAMTest_Z|
  000d8	10624dd3	 DCD         0x10624dd3
  000dc		 |$LN19@DRAMTest_Z|
  000dc	00000000	 DCD         |stall_1Sec|
  000e0		 |$LN20@DRAMTest_Z|
  000e0	00000000	 DCD         |??_C@_1FM@GKBCNJJJ@?$AA?$AN?$AA?6?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9@|
  000e4		 |$LN21@DRAMTest_Z|
  000e4	00000000	 DCD         |??_C@_1DE@FOMMJKGJ@?$AA?$AN?$AA?6?$AA?5?$AA?$CB?$AAE?$AAn?$AAd?$AA?5?$AA?5?$AA?5?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?3?$AA?5?$AA0?$AAX?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AA@|
  000e8		 |$LN22@DRAMTest_Z|
  000e8	00000000	 DCD         |??_C@_1DE@KFOFBOBN@?$AA?$AN?$AA?6?$AA?5?$AA?$CB?$AAT?$AAe?$AAs?$AAt?$AA1?$AA?5?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?3?$AA?5?$AA0?$AAX?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AA@|
  000ec		 |$LN23@DRAMTest_Z|
  000ec	00000000	 DCD         |??_C@_1DE@LFDKHCLM@?$AA?$AN?$AA?6?$AA?5?$AA?$CB?$AAS?$AAt?$AAa?$AAr?$AAt?$AA?5?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?3?$AA?5?$AA0?$AAX?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AA@|
  000f0		 |$LN24@DRAMTest_Z|
  000f0	00000000	 DCD         |??_C@_1BE@DFLOJDLG@?$AAD?$AAR?$AAA?$AAM?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?$AA@|
  000f4		 |$M48302|

			 ENDP  ; |DRAMTest_Z2170P|

	EXPORT	|??_C@_1EC@NLKOKMKL@?$AA?$AN?$AA?5?$AA?$CB?$AAN?$AAo?$AAw?$AA?5?$AAK?$AAe?$AAy?$AAp?$AAa?$AAd?$AA?5?$AAL?$AAE?$AAD?$AA?5?$AAf?$AAi?$AAr?$AAs?$AAt?$AA?5?$AAf?$AAl?$AAa?$AAs?$AAh?$AA?5?$AA?$AN?$AA?6@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EC@MFHKLEP@?$AA?$AN?$AA?5?$AA?$CB?$AAN?$AAo?$AAw?$AA?5?$AAK?$AAe?$AAy?$AAp?$AAa?$AAd?$AA?5?$AAL?$AAE?$AAD?$AA?5?$AAt?$AAw?$AAi?$AAc?$AAe?$AA?5?$AAf?$AAl?$AAa?$AAs?$AAh?$AA?5?$AA?$AN?$AA?6@| [ DATA ] ; `string'
	IMPORT	|LcdSleep|

  00000			 AREA	 |.pdata|, PDATA
|$T48324| DCD	|$LN5@KeypadBkTe|
	DCD	0x40002b01

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EC@NLKOKMKL@?$AA?$AN?$AA?5?$AA?$CB?$AAN?$AAo?$AAw?$AA?5?$AAK?$AAe?$AAy?$AAp?$AAa?$AAd?$AA?5?$AAL?$AAE?$AAD?$AA?5?$AAf?$AAi?$AAr?$AAs?$AAt?$AA?5?$AAf?$AAl?$AAa?$AAs?$AAh?$AA?5?$AA?$AN?$AA?6@| DCB 0xd
	DCB	0x0, " ", 0x0, "!", 0x0, "N", 0x0, "o", 0x0, "w", 0x0, " "
	DCB	0x0, "K", 0x0, "e", 0x0, "y", 0x0, "p", 0x0, "a", 0x0, "d"
	DCB	0x0, " ", 0x0, "L", 0x0, "E", 0x0, "D", 0x0, " ", 0x0, "f"
	DCB	0x0, "i", 0x0, "r", 0x0, "s", 0x0, "t", 0x0, " ", 0x0, "f"
	DCB	0x0, "l", 0x0, "a", 0x0, "s", 0x0, "h", 0x0, " ", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EC@MFHKLEP@?$AA?$AN?$AA?5?$AA?$CB?$AAN?$AAo?$AAw?$AA?5?$AAK?$AAe?$AAy?$AAp?$AAa?$AAd?$AA?5?$AAL?$AAE?$AAD?$AA?5?$AAt?$AAw?$AAi?$AAc?$AAe?$AA?5?$AAf?$AAl?$AAa?$AAs?$AAh?$AA?5?$AA?$AN?$AA?6@| DCB 0xd
	DCB	0x0, " ", 0x0, "!", 0x0, "N", 0x0, "o", 0x0, "w", 0x0, " "
	DCB	0x0, "K", 0x0, "e", 0x0, "y", 0x0, "p", 0x0, "a", 0x0, "d"
	DCB	0x0, " ", 0x0, "L", 0x0, "E", 0x0, "D", 0x0, " ", 0x0, "t"
	DCB	0x0, "w", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, " ", 0x0, "f"
	DCB	0x0, "l", 0x0, "a", 0x0, "s", 0x0, "h", 0x0, " ", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |KeypadBkTest_Z2170P| PROC

; 454  : {

  00000		 |$LN5@KeypadBkTe|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M48321|

; 455  : 	DWORD delay = 1000;
; 456  : 	HANDLE hGPIO;
; 457  : 	UNREFERENCED_PARAMETER(pMenu);
; 458  : 	OALBLMenuHeader(L"Keypad Backlight Test");

  00004	e59f009c	 ldr         r0, [pc, #0x9C]
  00008	eb000000	 bl          OALBLMenuHeader

; 459  : 
; 460  :     hGPIO = GPIOOpen();

  0000c	eb000000	 bl          GPIOOpen

; 461  :        
; 462  :     GPIOSetBit(hGPIO, KP_LED_SET_GPIO);

  00010	e3a0109b	 mov         r1, #0x9B
  00014	e1a04000	 mov         r4, r0
  00018	eb000000	 bl          GPIOSetBit

; 463  :     LcdStall(100);

  0001c	e3a00064	 mov         r0, #0x64
  00020	eb000000	 bl          LcdStall

; 464  :     GPIOClrBit(hGPIO, KP_LED_SET_GPIO);         //Low-active

  00024	e3a0109b	 mov         r1, #0x9B
  00028	e1a00004	 mov         r0, r4
  0002c	eb000000	 bl          GPIOClrBit

; 465  :     OALLog(L"\r !Now Keypad LED first flash \r\n");

  00030	e59f006c	 ldr         r0, [pc, #0x6C]
  00034	eb000000	 bl          NKDbgPrintfW

; 466  :     LcdSleep(delay*2);

  00038	e3a00e7d	 mov         r0, #0x7D, 28
  0003c	eb000000	 bl          LcdSleep

; 467  :   
; 468  :     GPIOSetBit(hGPIO, KP_LED_SET_GPIO);

  00040	e3a0109b	 mov         r1, #0x9B
  00044	e1a00004	 mov         r0, r4
  00048	eb000000	 bl          GPIOSetBit

; 469  :     LcdStall(stall_1Sec);

  0004c	e59f304c	 ldr         r3, [pc, #0x4C]
  00050	e5930000	 ldr         r0, [r3]
  00054	eb000000	 bl          LcdStall

; 470  :     GPIOClrBit(hGPIO, KP_LED_SET_GPIO);

  00058	e3a0109b	 mov         r1, #0x9B
  0005c	e1a00004	 mov         r0, r4
  00060	eb000000	 bl          GPIOClrBit

; 471  :     OALLog(L"\r !Now Keypad LED twice flash \r\n");

  00064	e59f0030	 ldr         r0, [pc, #0x30]
  00068	eb000000	 bl          NKDbgPrintfW

; 472  :     LcdSleep(delay*2);

  0006c	e3a00e7d	 mov         r0, #0x7D, 28
  00070	eb000000	 bl          LcdSleep

; 473  : 
; 474  :     GPIOSetBit(hGPIO, KP_LED_SET_GPIO);         //Keypad LED liht Close 

  00074	e3a0109b	 mov         r1, #0x9B
  00078	e1a00004	 mov         r0, r4
  0007c	eb000000	 bl          GPIOSetBit

; 475  : 
; 476  :     GPIOClose(hGPIO);

  00080	e1a00004	 mov         r0, r4
  00084	eb000000	 bl          GPIOClose

; 477  :     OALLog(L"\rTested ok!! \r\n");

  00088	e59f0008	 ldr         r0, [pc, #8]
  0008c	eb000000	 bl          NKDbgPrintfW

; 478  : }

  00090	e8bd4010	 ldmia       sp!, {r4, lr}
  00094	e12fff1e	 bx          lr
  00098		 |$LN6@KeypadBkTe|
  00098		 |$LN7@KeypadBkTe|
  00098	00000000	 DCD         |??_C@_1CA@NFDHHLIH@?$AA?$AN?$AAT?$AAe?$AAs?$AAt?$AAe?$AAd?$AA?5?$AAo?$AAk?$AA?$CB?$AA?$CB?$AA?5?$AA?$AN?$AA?6?$AA?$AA@|
  0009c		 |$LN8@KeypadBkTe|
  0009c	00000000	 DCD         |??_C@_1EC@MFHKLEP@?$AA?$AN?$AA?5?$AA?$CB?$AAN?$AAo?$AAw?$AA?5?$AAK?$AAe?$AAy?$AAp?$AAa?$AAd?$AA?5?$AAL?$AAE?$AAD?$AA?5?$AAt?$AAw?$AAi?$AAc?$AAe?$AA?5?$AAf?$AAl?$AAa?$AAs?$AAh?$AA?5?$AA?$AN?$AA?6@|
  000a0		 |$LN9@KeypadBkTe|
  000a0	00000000	 DCD         |stall_1Sec|
  000a4		 |$LN10@KeypadBkTe|
  000a4	00000000	 DCD         |??_C@_1EC@NLKOKMKL@?$AA?$AN?$AA?5?$AA?$CB?$AAN?$AAo?$AAw?$AA?5?$AAK?$AAe?$AAy?$AAp?$AAa?$AAd?$AA?5?$AAL?$AAE?$AAD?$AA?5?$AAf?$AAi?$AAr?$AAs?$AAt?$AA?5?$AAf?$AAl?$AAa?$AAs?$AAh?$AA?5?$AA?$AN?$AA?6@|
  000a8		 |$LN11@KeypadBkTe|
  000a8	00000000	 DCD         |??_C@_1CM@GFKLDENM@?$AAK?$AAe?$AAy?$AAp?$AAa?$AAd?$AA?5?$AAB?$AAa?$AAc?$AAk?$AAl?$AAi?$AAg?$AAh?$AAt?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?$AA@|
  000ac		 |$M48322|

			 ENDP  ; |KeypadBkTest_Z2170P|

	EXPORT	|??_C@_1DG@MPNEEBCD@?$AA?$AN?$AA?5?$AAT?$AAo?$AAu?$AAc?$AAh?$AA?5?$AAP?$AAa?$AAn?$AAe?$AAl?$AA?5?$AAR?$AAu?$AAn?$AAn?$AAi?$AAn?$AAg?$AA?4?$AA?4?$AA?4?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|tsc2046Test|

  00000			 AREA	 |.pdata|, PDATA
|$T48337| DCD	|$LN5@TouchPanel|
	DCD	0x40000d01

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DG@MPNEEBCD@?$AA?$AN?$AA?5?$AAT?$AAo?$AAu?$AAc?$AAh?$AA?5?$AAP?$AAa?$AAn?$AAe?$AAl?$AA?5?$AAR?$AAu?$AAn?$AAn?$AAi?$AAn?$AAg?$AA?4?$AA?4?$AA?4?$AA?$AN?$AA?6?$AA?$AA@| DCB 0xd
	DCB	0x0, " ", 0x0, "T", 0x0, "o", 0x0, "u", 0x0, "c", 0x0, "h"
	DCB	0x0, " ", 0x0, "P", 0x0, "a", 0x0, "n", 0x0, "e", 0x0, "l"
	DCB	0x0, " ", 0x0, "R", 0x0, "u", 0x0, "n", 0x0, "n", 0x0, "i"
	DCB	0x0, "n", 0x0, "g", 0x0, ".", 0x0, ".", 0x0, ".", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |TouchPanelTest_Z2170P| PROC

; 484  : {

  00000		 |$LN5@TouchPanel|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M48334|

; 485  :     UNREFERENCED_PARAMETER(pMenu);
; 486  :     OALBLMenuHeader(L"Touch Panel Test");

  00004	e59f0024	 ldr         r0, [pc, #0x24]
  00008	eb000000	 bl          OALBLMenuHeader

; 487  :     
; 488  :     OALLog(L"\r Touch Panel Running...\r\n");  

  0000c	e59f0018	 ldr         r0, [pc, #0x18]
  00010	eb000000	 bl          NKDbgPrintfW

; 489  :     tsc2046Test();

  00014	eb000000	 bl          tsc2046Test

; 490  :     OALLog(L"\rTested ok!! \r\n"); 

  00018	e59f0008	 ldr         r0, [pc, #8]
  0001c	eb000000	 bl          NKDbgPrintfW

; 491  : }

  00020	e49de004	 ldr         lr, [sp], #4
  00024	e12fff1e	 bx          lr
  00028		 |$LN6@TouchPanel|
  00028		 |$LN7@TouchPanel|
  00028	00000000	 DCD         |??_C@_1CA@NFDHHLIH@?$AA?$AN?$AAT?$AAe?$AAs?$AAt?$AAe?$AAd?$AA?5?$AAo?$AAk?$AA?$CB?$AA?$CB?$AA?5?$AA?$AN?$AA?6?$AA?$AA@|
  0002c		 |$LN8@TouchPanel|
  0002c	00000000	 DCD         |??_C@_1DG@MPNEEBCD@?$AA?$AN?$AA?5?$AAT?$AAo?$AAu?$AAc?$AAh?$AA?5?$AAP?$AAa?$AAn?$AAe?$AAl?$AA?5?$AAR?$AAu?$AAn?$AAn?$AAi?$AAn?$AAg?$AA?4?$AA?4?$AA?4?$AA?$AN?$AA?6?$AA?$AA@|
  00030		 |$LN9@TouchPanel|
  00030	00000000	 DCD         |??_C@_1CC@BNGFPPEB@?$AAT?$AAo?$AAu?$AAc?$AAh?$AA?5?$AAP?$AAa?$AAn?$AAe?$AAl?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?$AA@|
  00034		 |$M48335|

			 ENDP  ; |TouchPanelTest_Z2170P|

	EXPORT	|I2C_Clk|

  00000			 AREA	 |.pdata|, PDATA
|$T48349| DCD	|$LN5@I2C_Clk|
	DCD	0x40000b01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |I2C_Clk| PROC

; 499  : {

  00000		 |$LN5@I2C_Clk|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M48346|
  00004	e1a04000	 mov         r4, r0

; 500  :     GPIOSetBit(hGPIO_I2C, I2C3_SCL_GPIO);  

  00008	e3a010b8	 mov         r1, #0xB8
  0000c	eb000000	 bl          GPIOSetBit

; 501  :     LcdStall(50);

  00010	e3a00032	 mov         r0, #0x32
  00014	eb000000	 bl          LcdStall

; 502  :     GPIOClrBit(hGPIO_I2C, I2C3_SCL_GPIO); 

  00018	e3a010b8	 mov         r1, #0xB8
  0001c	e1a00004	 mov         r0, r4
  00020	eb000000	 bl          GPIOClrBit

; 503  :     //LcdStall(50);
; 504  : }

  00024	e8bd4010	 ldmia       sp!, {r4, lr}
  00028	e12fff1e	 bx          lr
  0002c		 |$M48347|

			 ENDP  ; |I2C_Clk|

	EXPORT	|I2C_ACKnowledge|
	IMPORT	|GPIOGetBit|
	IMPORT	|GPIOSetMode|

  00000			 AREA	 |.pdata|, PDATA
|$T48357| DCD	|$LN5@I2C_ACKnow|
	DCD	0x40001c01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |I2C_ACKnowledge| PROC

; 509  : {

  00000		 |$LN5@I2C_ACKnow|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M48354|
  00004	e1a04000	 mov         r4, r0

; 510  : 
; 511  :     GPIOSetMode(hGPIO_I2C, I2C3_SDA_GPIO, GPIO_DIR_INPUT);      //Get slave a ACK value for SDA line  

  00008	e3a02001	 mov         r2, #1
  0000c	e3a010b9	 mov         r1, #0xB9
  00010	eb000000	 bl          GPIOSetMode

; 512  :     LcdStall(50);

  00014	e3a00032	 mov         r0, #0x32
  00018	eb000000	 bl          LcdStall

; 513  :     GPIOSetBit(hGPIO_I2C, I2C3_SCL_GPIO);

  0001c	e3a010b8	 mov         r1, #0xB8
  00020	e1a00004	 mov         r0, r4
  00024	eb000000	 bl          GPIOSetBit

; 514  :     LcdStall(50); 

  00028	e3a00032	 mov         r0, #0x32
  0002c	eb000000	 bl          LcdStall

; 515  :     GPIOGetBit(hGPIO_I2C, I2C3_SDA_GPIO); 

  00030	e3a010b9	 mov         r1, #0xB9
  00034	e1a00004	 mov         r0, r4
  00038	eb000000	 bl          GPIOGetBit

; 516  :     LcdStall(50);

  0003c	e3a00032	 mov         r0, #0x32
  00040	eb000000	 bl          LcdStall

; 517  : 
; 518  :     GPIOSetMode(hGPIO_I2C, I2C3_SDA_GPIO, GPIO_DIR_OUTPUT); 

  00044	e3a02000	 mov         r2, #0
  00048	e3a010b9	 mov         r1, #0xB9
  0004c	e1a00004	 mov         r0, r4
  00050	eb000000	 bl          GPIOSetMode

; 519  :     //LcdStall(50);
; 520  :     GPIOClrBit(hGPIO_I2C, I2C3_SCL_GPIO);   

  00054	e3a010b8	 mov         r1, #0xB8
  00058	e1a00004	 mov         r0, r4
  0005c	eb000000	 bl          GPIOClrBit

; 521  :     LcdStall(50);   

  00060	e3a00032	 mov         r0, #0x32
  00064	eb000000	 bl          LcdStall

; 522  :     //Doesnot Needs SDA Line falling time!!
; 523  :     /*GPIOClrBit(hGPIO_I2C, I2C3_SDA_GPIO); 
; 524  :     LcdStall(50);*/
; 525  : }

  00068	e8bd4010	 ldmia       sp!, {r4, lr}
  0006c	e12fff1e	 bx          lr
  00070		 |$M48355|

			 ENDP  ; |I2C_ACKnowledge|

	EXPORT	|I2C_ACKnowledge_READ|

  00000			 AREA	 |.pdata|, PDATA
|$T48365| DCD	|$LN5@I2C_ACKnow@2|
	DCD	0x40001201
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |I2C_ACKnowledge_READ| PROC

; 530  : {       

  00000		 |$LN5@I2C_ACKnow@2|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M48362|
  00004	e1a04000	 mov         r4, r0

; 531  : 
; 532  :     //GPIOSetMode(hGPIO_I2C, I2C3_SDA_GPIO, GPIO_DIR_INPUT);      //Get slave a ACK value for SDA line  
; 533  :     //LcdStall(50);
; 534  :     GPIOSetBit(hGPIO_I2C, I2C3_SCL_GPIO);

  00008	e3a010b8	 mov         r1, #0xB8
  0000c	eb000000	 bl          GPIOSetBit

; 535  :     LcdStall(50); 

  00010	e3a00032	 mov         r0, #0x32
  00014	eb000000	 bl          LcdStall

; 536  :     GPIOGetBit(hGPIO_I2C, I2C3_SDA_GPIO); 

  00018	e3a010b9	 mov         r1, #0xB9
  0001c	e1a00004	 mov         r0, r4
  00020	eb000000	 bl          GPIOGetBit

; 537  :     LcdStall(50);

  00024	e3a00032	 mov         r0, #0x32
  00028	eb000000	 bl          LcdStall

; 538  :     
; 539  :     //GPIOSetMode(hGPIO_I2C, I2C3_SDA_GPIO, GPIO_DIR_OUTPUT); 
; 540  :     //LcdStall(50);
; 541  :     GPIOClrBit(hGPIO_I2C, I2C3_SCL_GPIO);   

  0002c	e3a010b8	 mov         r1, #0xB8
  00030	e1a00004	 mov         r0, r4
  00034	eb000000	 bl          GPIOClrBit

; 542  :     LcdStall(50);         

  00038	e3a00032	 mov         r0, #0x32
  0003c	eb000000	 bl          LcdStall

; 543  : }

  00040	e8bd4010	 ldmia       sp!, {r4, lr}
  00044	e12fff1e	 bx          lr
  00048		 |$M48363|

			 ENDP  ; |I2C_ACKnowledge_READ|

	EXPORT	|I2C_Clk_READ|

  00000			 AREA	 |.pdata|, PDATA
|$T48376| DCD	|$LN5@I2C_Clk_RE|
	DCD	0x40001401
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |I2C_Clk_READ| PROC

; 548  : {

  00000		 |$LN5@I2C_Clk_RE|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M48373|
  00004	e1a05000	 mov         r5, r0

; 549  :     DWORD data=0;
; 550  :     
; 551  :     GPIOSetBit(hGPIO_I2C, I2C3_SCL_GPIO);

  00008	e3a010b8	 mov         r1, #0xB8
  0000c	eb000000	 bl          GPIOSetBit

; 552  :     LcdStall(50);

  00010	e3a00032	 mov         r0, #0x32
  00014	eb000000	 bl          LcdStall

; 553  :     data = GPIOGetBit(hGPIO_I2C, I2C3_SDA_GPIO); 

  00018	e3a010b9	 mov         r1, #0xB9
  0001c	e1a00005	 mov         r0, r5
  00020	eb000000	 bl          GPIOGetBit
  00024	e1a04000	 mov         r4, r0

; 554  :     LcdStall(10);

  00028	e3a0000a	 mov         r0, #0xA
  0002c	eb000000	 bl          LcdStall

; 555  :     
; 556  :     GPIOClrBit(hGPIO_I2C, I2C3_SCL_GPIO);   

  00030	e3a010b8	 mov         r1, #0xB8
  00034	e1a00005	 mov         r0, r5
  00038	eb000000	 bl          GPIOClrBit

; 557  :     LcdStall(50); 

  0003c	e3a00032	 mov         r0, #0x32
  00040	eb000000	 bl          LcdStall

; 558  :     
; 559  :     return (int)data;
; 560  : }

  00044	e1a00004	 mov         r0, r4
  00048	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  0004c	e12fff1e	 bx          lr
  00050		 |$M48374|

			 ENDP  ; |I2C_Clk_READ|

	EXPORT	|I2C_READ|

  00000			 AREA	 |.pdata|, PDATA
|$T48390| DCD	|$LN10@I2C_READ|
	DCD	0x40001b01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |I2C_READ| PROC

; 565  : {

  00000		 |$LN10@I2C_READ|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004		 |$M48387|
  00004	e1a05000	 mov         r5, r0

; 566  :     int i, rx, value;
; 567  :     
; 568  :     GPIOSetMode(hGPIO_I2C, I2C3_SDA_GPIO, GPIO_DIR_INPUT);      //Get slave a ACK value for SDA line  

  00008	e3a02001	 mov         r2, #1
  0000c	e3a010b9	 mov         r1, #0xB9
  00010	eb000000	 bl          GPIOSetMode

; 569  :     LcdStall(50);

  00014	e3a00032	 mov         r0, #0x32
  00018	eb000000	 bl          LcdStall

; 570  :     for(i=7, value=0; i>=0; i--)

  0001c	e3a04007	 mov         r4, #7
  00020	e3a06000	 mov         r6, #0
  00024		 |$LL3@I2C_READ|

; 571  :     {
; 572  :         rx = I2C_Clk_READ(hGPIO_I2C); 

  00024	e1a00005	 mov         r0, r5
  00028	eb000000	 bl          I2C_Clk_READ

; 573  :         value += (rx<<i);

  0002c	e0866410	 add         r6, r6, r0, lsl r4
  00030	e2544001	 subs        r4, r4, #1
  00034	5afffffa	 bpl         |$LL3@I2C_READ|

; 574  :     }
; 575  :     
; 576  :     GPIOSetMode(hGPIO_I2C, I2C3_SDA_GPIO, GPIO_DIR_OUTPUT);      

  00038	e3a02000	 mov         r2, #0
  0003c	e3a010b9	 mov         r1, #0xB9
  00040	e1a00005	 mov         r0, r5
  00044	eb000000	 bl          GPIOSetMode

; 577  :     GPIOClrBit(hGPIO_I2C, I2C3_SCL_GPIO);    

  00048	e3a010b8	 mov         r1, #0xB8
  0004c	e1a00005	 mov         r0, r5
  00050	eb000000	 bl          GPIOClrBit

; 578  :     GPIOClrBit(hGPIO_I2C, I2C3_SDA_GPIO); 

  00054	e3a010b9	 mov         r1, #0xB9
  00058	e1a00005	 mov         r0, r5
  0005c	eb000000	 bl          GPIOClrBit

; 579  :     //LcdStall(50); 
; 580  :     
; 581  :     return value;
; 582  : }

  00060	e1a00006	 mov         r0, r6
  00064	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  00068	e12fff1e	 bx          lr
  0006c		 |$M48388|

			 ENDP  ; |I2C_READ|

	EXPORT	|I2C_WRITE|

  00000			 AREA	 |.pdata|, PDATA
|$T48409| DCD	|$LN17@I2C_WRITE|
	DCD	0x40001a01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |I2C_WRITE| PROC

; 587  : {

  00000		 |$LN17@I2C_WRITE|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004		 |$M48406|
  00004	e1a06001	 mov         r6, r1
  00008	e1a05000	 mov         r5, r0

; 588  :     int i;
; 589  :     for(i=7; i>=0; i--)

  0000c	e3a04007	 mov         r4, #7
  00010	e3a07001	 mov         r7, #1
  00014		 |$LL5@I2C_WRITE|

; 590  :     {
; 591  :         if( CMD&(1<<i) ){

  00014	e1160417	 tst         r6, r7, lsl r4

; 592  :             GPIOSetBit(hGPIO_I2C, I2C3_SDA_GPIO);  

  00018	e3a010b9	 mov         r1, #0xB9
  0001c	e1a00005	 mov         r0, r5
  00020	0a000001	 beq         |$LN2@I2C_WRITE|
  00024	eb000000	 bl          GPIOSetBit

; 593  :             LcdStall(50);
; 594  :             I2C_Clk(hGPIO_I2C);
; 595  :         }else{

  00028	ea000000	 b           |$LN14@I2C_WRITE|
  0002c		 |$LN2@I2C_WRITE|

; 596  :             GPIOClrBit(hGPIO_I2C, I2C3_SDA_GPIO);   

  0002c	eb000000	 bl          GPIOClrBit
  00030		 |$LN14@I2C_WRITE|

; 597  :             LcdStall(50);

  00030	e3a00032	 mov         r0, #0x32
  00034	eb000000	 bl          LcdStall

; 598  :             I2C_Clk(hGPIO_I2C);

  00038	e3a010b8	 mov         r1, #0xB8
  0003c	e1a00005	 mov         r0, r5
  00040	eb000000	 bl          GPIOSetBit
  00044	e3a00032	 mov         r0, #0x32
  00048	eb000000	 bl          LcdStall
  0004c	e3a010b8	 mov         r1, #0xB8
  00050	e1a00005	 mov         r0, r5
  00054	eb000000	 bl          GPIOClrBit
  00058	e2544001	 subs        r4, r4, #1
  0005c	5affffec	 bpl         |$LL5@I2C_WRITE|

; 599  :         }
; 600  :     }           
; 601  : }

  00060	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  00064	e12fff1e	 bx          lr
  00068		 |$M48407|

			 ENDP  ; |I2C_WRITE|

	EXPORT	|I2C_setSlaveAddress_READ|

  00000			 AREA	 |.pdata|, PDATA
|$T48428| DCD	|$LN17@I2C_setSla|
	DCD	0x40001f01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |I2C_setSlaveAddress_READ| PROC

; 606  : {    

  00000		 |$LN17@I2C_setSla|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004		 |$M48425|
  00004	e1a06001	 mov         r6, r1
  00008	e1a05000	 mov         r5, r0

; 607  :     int i; 
; 608  :     for(i=7; i >=0; i--)

  0000c	e3a04007	 mov         r4, #7
  00010	e3a07001	 mov         r7, #1
  00014		 |$LL5@I2C_setSla|

; 609  :     {         
; 610  :         if( addr&(1<<i) ){

  00014	e1160417	 tst         r6, r7, lsl r4

; 611  :             GPIOSetBit(hGPIO_I2C, I2C3_SDA_GPIO);  

  00018	e3a010b9	 mov         r1, #0xB9
  0001c	e1a00005	 mov         r0, r5
  00020	0a000001	 beq         |$LN2@I2C_setSla|
  00024	eb000000	 bl          GPIOSetBit

; 612  :             LcdStall(50);
; 613  :             I2C_Clk(hGPIO_I2C);
; 614  :         }else{

  00028	ea000000	 b           |$LN14@I2C_setSla|
  0002c		 |$LN2@I2C_setSla|

; 615  :             GPIOClrBit(hGPIO_I2C, I2C3_SDA_GPIO);   

  0002c	eb000000	 bl          GPIOClrBit
  00030		 |$LN14@I2C_setSla|

; 616  :             LcdStall(50);

  00030	e3a00032	 mov         r0, #0x32
  00034	eb000000	 bl          LcdStall

; 617  :             I2C_Clk(hGPIO_I2C);

  00038	e3a010b8	 mov         r1, #0xB8
  0003c	e1a00005	 mov         r0, r5
  00040	eb000000	 bl          GPIOSetBit
  00044	e3a00032	 mov         r0, #0x32
  00048	eb000000	 bl          LcdStall
  0004c	e3a010b8	 mov         r1, #0xB8
  00050	e1a00005	 mov         r0, r5
  00054	eb000000	 bl          GPIOClrBit
  00058	e2544001	 subs        r4, r4, #1
  0005c	5affffec	 bpl         |$LL5@I2C_setSla|

; 618  :         }
; 619  :     }
; 620  :     GPIOClrBit(hGPIO_I2C, I2C3_SDA_GPIO); 

  00060	e3a010b9	 mov         r1, #0xB9
  00064	e1a00005	 mov         r0, r5
  00068	eb000000	 bl          GPIOClrBit

; 621  :     LcdStall(50);

  0006c	e3a00032	 mov         r0, #0x32
  00070	eb000000	 bl          LcdStall

; 622  : }

  00074	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  00078	e12fff1e	 bx          lr
  0007c		 |$M48426|

			 ENDP  ; |I2C_setSlaveAddress_READ|

	EXPORT	|I2C_setSlaveAddress|

  00000			 AREA	 |.pdata|, PDATA
|$T48447| DCD	|$LN17@I2C_setSla@2|
	DCD	0x40001a01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |I2C_setSlaveAddress| PROC

; 627  : {    

  00000		 |$LN17@I2C_setSla@2|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004		 |$M48444|
  00004	e1a06001	 mov         r6, r1
  00008	e1a05000	 mov         r5, r0

; 628  :     int i;  
; 629  :     for(i=7; i >=0; i--)

  0000c	e3a04007	 mov         r4, #7
  00010	e3a07001	 mov         r7, #1
  00014		 |$LL5@I2C_setSla@2|

; 630  :     {         
; 631  :         if( addr&(1<<i) ){

  00014	e1160417	 tst         r6, r7, lsl r4

; 632  :             GPIOSetBit(hGPIO_I2C, I2C3_SDA_GPIO);  

  00018	e3a010b9	 mov         r1, #0xB9
  0001c	e1a00005	 mov         r0, r5
  00020	0a000001	 beq         |$LN2@I2C_setSla@2|
  00024	eb000000	 bl          GPIOSetBit

; 633  :             LcdStall(50);
; 634  :             I2C_Clk(hGPIO_I2C);
; 635  :         }else{

  00028	ea000000	 b           |$LN14@I2C_setSla@2|
  0002c		 |$LN2@I2C_setSla@2|

; 636  :             GPIOClrBit(hGPIO_I2C, I2C3_SDA_GPIO);   

  0002c	eb000000	 bl          GPIOClrBit
  00030		 |$LN14@I2C_setSla@2|

; 637  :             LcdStall(50);

  00030	e3a00032	 mov         r0, #0x32
  00034	eb000000	 bl          LcdStall

; 638  :             I2C_Clk(hGPIO_I2C);

  00038	e3a010b8	 mov         r1, #0xB8
  0003c	e1a00005	 mov         r0, r5
  00040	eb000000	 bl          GPIOSetBit
  00044	e3a00032	 mov         r0, #0x32
  00048	eb000000	 bl          LcdStall
  0004c	e3a010b8	 mov         r1, #0xB8
  00050	e1a00005	 mov         r0, r5
  00054	eb000000	 bl          GPIOClrBit
  00058	e2544001	 subs        r4, r4, #1
  0005c	5affffec	 bpl         |$LL5@I2C_setSla@2|

; 639  :         }
; 640  :     }  
; 641  : }

  00060	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  00064	e12fff1e	 bx          lr
  00068		 |$M48445|

			 ENDP  ; |I2C_setSlaveAddress|

	EXPORT	|I2C_START|

  00000			 AREA	 |.pdata|, PDATA
|$T48455| DCD	|$LN5@I2C_START|
	DCD	0x40001701
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |I2C_START| PROC

; 646  : {

  00000		 |$LN5@I2C_START|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M48452|
  00004	e1a04000	 mov         r4, r0

; 647  :     GPIOSetBit(hGPIO_I2C, I2C3_SDA_GPIO);   //S1, SDA = High

  00008	e3a010b9	 mov         r1, #0xB9
  0000c	eb000000	 bl          GPIOSetBit

; 648  :     LcdStall(100);                          

  00010	e3a00064	 mov         r0, #0x64
  00014	eb000000	 bl          LcdStall

; 649  :     GPIOSetBit(hGPIO_I2C, I2C3_SCL_GPIO);   //S2, SCL = High ; kept high   

  00018	e3a010b8	 mov         r1, #0xB8
  0001c	e1a00004	 mov         r0, r4
  00020	eb000000	 bl          GPIOSetBit

; 650  :     LcdStall(100);

  00024	e3a00064	 mov         r0, #0x64
  00028	eb000000	 bl          LcdStall

; 651  :     
; 652  :     GPIOClrBit(hGPIO_I2C, I2C3_SDA_GPIO);   //S3, When SDA changes High -> Low , start bit generating

  0002c	e3a010b9	 mov         r1, #0xB9
  00030	e1a00004	 mov         r0, r4
  00034	eb000000	 bl          GPIOClrBit

; 653  :     LcdStall(50);                           

  00038	e3a00032	 mov         r0, #0x32
  0003c	eb000000	 bl          LcdStall

; 654  :     GPIOClrBit(hGPIO_I2C, I2C3_SCL_GPIO);   //S4, SCL = Low 

  00040	e3a010b8	 mov         r1, #0xB8
  00044	e1a00004	 mov         r0, r4
  00048	eb000000	 bl          GPIOClrBit

; 655  :     LcdStall(50);                          

  0004c	e3a00032	 mov         r0, #0x32
  00050	eb000000	 bl          LcdStall

; 656  : }

  00054	e8bd4010	 ldmia       sp!, {r4, lr}
  00058	e12fff1e	 bx          lr
  0005c		 |$M48453|

			 ENDP  ; |I2C_START|

	EXPORT	|I2C_STOP|

  00000			 AREA	 |.pdata|, PDATA
|$T48463| DCD	|$LN5@I2C_STOP|
	DCD	0x40001201
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |I2C_STOP| PROC

; 661  : {   

  00000		 |$LN5@I2C_STOP|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M48460|
  00004	e1a04000	 mov         r4, r0

; 662  :     //GPIOClrBit(hGPIO_I2C, I2C3_SCL_GPIO);
; 663  :     GPIOClrBit(hGPIO_I2C, I2C3_SDA_GPIO);   //P1

  00008	e3a010b9	 mov         r1, #0xB9
  0000c	eb000000	 bl          GPIOClrBit

; 664  :     LcdStall(50);

  00010	e3a00032	 mov         r0, #0x32
  00014	eb000000	 bl          LcdStall

; 665  :     GPIOSetBit(hGPIO_I2C, I2C3_SCL_GPIO);   //P2

  00018	e3a010b8	 mov         r1, #0xB8
  0001c	e1a00004	 mov         r0, r4
  00020	eb000000	 bl          GPIOSetBit

; 666  :     LcdStall(50);

  00024	e3a00032	 mov         r0, #0x32
  00028	eb000000	 bl          LcdStall

; 667  :     GPIOSetBit(hGPIO_I2C, I2C3_SDA_GPIO);   //P3

  0002c	e3a010b9	 mov         r1, #0xB9
  00030	e1a00004	 mov         r0, r4
  00034	eb000000	 bl          GPIOSetBit

; 668  :     LcdStall(50);    

  00038	e3a00032	 mov         r0, #0x32
  0003c	eb000000	 bl          LcdStall

; 669  : }

  00040	e8bd4010	 ldmia       sp!, {r4, lr}
  00044	e12fff1e	 bx          lr
  00048		 |$M48461|

			 ENDP  ; |I2C_STOP|

	EXPORT	|gaugeInformation|

  00000			 AREA	 |.pdata|, PDATA
|$T48482| DCD	|$LN13@gaugeInfor|
	DCD	0x40004a02
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |gaugeInformation| PROC

; 674  : {

  00000		 |$LN13@gaugeInfor|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004	e24dd040	 sub         sp, sp, #0x40
  00008		 |$M48479|
  00008	e1a04001	 mov         r4, r1
  0000c	e1a06000	 mov         r6, r0
  00010	e3a03a03	 mov         r3, #3, 20

; 675  :     int LSB = 0, MSB = 0; 
; 676  :     int i, temp, sum, a[16];
; 677  : 
; 678  :     LcdStall(12500);

  00014	e38300d4	 orr         r0, r3, #0xD4
  00018	eb000000	 bl          LcdStall

; 679  :     //*************************
; 680  :     I2C_START(hGPIO_I2C);  

  0001c	e1a00006	 mov         r0, r6
  00020	eb000000	 bl          I2C_START

; 681  :     I2C_setSlaveAddress(hGPIO_I2C, BQ27510_ADDRESS_WRITE);   //ADDR[7:1] + R/W[0] 

  00024	e3a010aa	 mov         r1, #0xAA
  00028	e1a00006	 mov         r0, r6
  0002c	eb000000	 bl          I2C_setSlaveAddress

; 682  :     LcdStall(100);    

  00030	e3a00064	 mov         r0, #0x64
  00034	eb000000	 bl          LcdStall

; 683  :     I2C_ACKnowledge(hGPIO_I2C);

  00038	e1a00006	 mov         r0, r6
  0003c	eb000000	 bl          I2C_ACKnowledge

; 684  :     
; 685  :     I2C_WRITE(hGPIO_I2C,  stdCMD);              //CMD[7:0]

  00040	e1a01004	 mov         r1, r4
  00044	e1a00006	 mov         r0, r6
  00048	eb000000	 bl          I2C_WRITE

; 686  :     //I2C_WRITE(hGPIO_I2C, bq27500CMD_VOLT_LSB);
; 687  :     LcdStall(300);                                          //100 200 500-ok 50, Maybe trouble        

  0004c	e3a00f4b	 mov         r0, #0x4B, 30
  00050	eb000000	 bl          LcdStall

; 688  :     I2C_ACKnowledge(hGPIO_I2C);

  00054	e1a00006	 mov         r0, r6
  00058	eb000000	 bl          I2C_ACKnowledge

; 689  :     //*************************
; 690  :      
; 691  :     //Sr
; 692  :     LcdStall(1000); 

  0005c	e3a00ffa	 mov         r0, #0xFA, 30
  00060	eb000000	 bl          LcdStall

; 693  : 
; 694  :     //*************************    
; 695  :     I2C_START(hGPIO_I2C);

  00064	e1a00006	 mov         r0, r6
  00068	eb000000	 bl          I2C_START

; 696  :     I2C_setSlaveAddress_READ(hGPIO_I2C, BQ27510_ADDRESS_READ);

  0006c	e3a010ab	 mov         r1, #0xAB
  00070	e1a00006	 mov         r0, r6
  00074	eb000000	 bl          I2C_setSlaveAddress_READ

; 697  :     LcdStall(300);  

  00078	e3a00f4b	 mov         r0, #0x4B, 30
  0007c	eb000000	 bl          LcdStall

; 698  :     I2C_ACKnowledge(hGPIO_I2C);

  00080	e1a00006	 mov         r0, r6
  00084	eb000000	 bl          I2C_ACKnowledge

; 699  : 
; 700  :     //prepare get Data LSB
; 701  :     LcdStall(300); 

  00088	e3a00f4b	 mov         r0, #0x4B, 30
  0008c	eb000000	 bl          LcdStall

; 702  :     LSB  = I2C_READ(hGPIO_I2C);

  00090	e1a00006	 mov         r0, r6
  00094	eb000000	 bl          I2C_READ
  00098	e1a05000	 mov         r5, r0

; 703  :     LcdStall(300);

  0009c	e3a00f4b	 mov         r0, #0x4B, 30
  000a0	eb000000	 bl          LcdStall

; 704  :     I2C_ACKnowledge_READ(hGPIO_I2C);

  000a4	e1a00006	 mov         r0, r6
  000a8	eb000000	 bl          I2C_ACKnowledge_READ

; 705  : 
; 706  :     //prepare get Data MSB
; 707  :     LcdStall(1000); 

  000ac	e3a00ffa	 mov         r0, #0xFA, 30
  000b0	eb000000	 bl          LcdStall

; 708  :     MSB = I2C_READ(hGPIO_I2C);

  000b4	e1a00006	 mov         r0, r6
  000b8	eb000000	 bl          I2C_READ
  000bc	e1a04000	 mov         r4, r0

; 709  :     LcdStall(300);

  000c0	e3a00f4b	 mov         r0, #0x4B, 30
  000c4	eb000000	 bl          LcdStall

; 710  :     I2C_ACKnowledge_READ(hGPIO_I2C);

  000c8	e1a00006	 mov         r0, r6
  000cc	eb000000	 bl          I2C_ACKnowledge_READ

; 711  :     LcdStall(500);

  000d0	e3a00f7d	 mov         r0, #0x7D, 30
  000d4	eb000000	 bl          LcdStall

; 712  :     I2C_STOP(hGPIO_I2C);

  000d8	e1a00006	 mov         r0, r6
  000dc	eb000000	 bl          I2C_STOP

; 713  :     //*************************
; 714  :     
; 715  :     //RETAILMSG(1, (L" ~Value = 0x%02x 0x%02x \r\n",MSB ,LSB));
; 716  : 
; 717  :     temp = (MSB<<8);
; 718  :     temp |= LSB;

  000e0	e185e404	 orr         lr, r5, r4, lsl #8

; 719  : 
; 720  :     for(i=0, sum=0; i<16; i++){

  000e4	e3a04001	 mov         r4, #1
  000e8	e3a05001	 mov         r5, #1
  000ec	e3a03000	 mov         r3, #0
  000f0	e3a00000	 mov         r0, #0
  000f4	e28d1000	 add         r1, sp, #0
  000f8		 |$LL5@gaugeInfor|

; 721  : 		if(i<8)

  000f8	e3530008	 cmp         r3, #8

; 722  : 			a[i] = temp & (1<<i);

  000fc	b00e2314	 andlt       r2, lr, r4, lsl r3

; 723  : 		else
; 724  : 			a[i] = temp & (1<<i);

  00100	a00e2315	 andge       r2, lr, r5, lsl r3
  00104	e2833001	 add         r3, r3, #1
  00108	e5812000	 str         r2, [r1]

; 725  : 			
; 726  : 		sum += a[i];

  0010c	e2811004	 add         r1, r1, #4
  00110	e3530010	 cmp         r3, #0x10
  00114	e0800002	 add         r0, r0, r2
  00118	bafffff6	 blt         |$LL5@gaugeInfor|

; 727  : 	}
; 728  :     return sum;
; 729  : }

  0011c	e28dd040	 add         sp, sp, #0x40
  00120	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  00124	e12fff1e	 bx          lr
  00128		 |$M48480|

			 ENDP  ; |gaugeInformation|

	EXPORT	|InitI2CWithBQ27510|
	EXPORT	|??_C@_1FA@JMHKMEFE@?$AA?5?$AA?$HO?$AAR?$AAe?$AAp?$AAo?$AAr?$AAt?$AAs?$AA?5?$AAt?$AAh?$AAe?$AA?5?$AAd?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AAt?$AAy?$AAp?$AAe?$AA?3?$AA0?$AAx?$AA?$CF?$AA0?$AA2?$AAX@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DO@OLEHJPML@?$AA?5?$AA?$HO?$AAB?$AAa?$AAt?$AAt?$AAe?$AAr?$AAy?$AA?5?$AAT?$AAe?$AAm?$AAp?$AAe?$AAr?$AAa?$AAt?$AAu?$AAr?$AAe?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?5?$AAC?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DK@NOEMNDJB@?$AA?5?$AA?$HO?$AAB?$AAa?$AAt?$AAt?$AAe?$AAr?$AAy?$AA?5?$AAV?$AAo?$AAl?$AAt?$AAa?$AAg?$AAe?$AAs?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?5?$AAm?$AAV?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T48494| DCD	|$LN5@InitI2CWit|
	DCD	0x40007d01

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FA@JMHKMEFE@?$AA?5?$AA?$HO?$AAR?$AAe?$AAp?$AAo?$AAr?$AAt?$AAs?$AA?5?$AAt?$AAh?$AAe?$AA?5?$AAd?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AAt?$AAy?$AAp?$AAe?$AA?3?$AA0?$AAx?$AA?$CF?$AA0?$AA2?$AAX@| DCB " "
	DCB	0x0, "~", 0x0, "R", 0x0, "e", 0x0, "p", 0x0, "o", 0x0, "r"
	DCB	0x0, "t", 0x0, "s", 0x0, " ", 0x0, "t", 0x0, "h", 0x0, "e"
	DCB	0x0, " ", 0x0, "d", 0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c"
	DCB	0x0, "e", 0x0, " ", 0x0, "t", 0x0, "y", 0x0, "p", 0x0, "e"
	DCB	0x0, ":", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "2"
	DCB	0x0, "X", 0x0, "%", 0x0, "0", 0x0, "2", 0x0, "X", 0x0, " "
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DO@OLEHJPML@?$AA?5?$AA?$HO?$AAB?$AAa?$AAt?$AAt?$AAe?$AAr?$AAy?$AA?5?$AAT?$AAe?$AAm?$AAp?$AAe?$AAr?$AAa?$AAt?$AAu?$AAr?$AAe?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?5?$AAC?$AA?$AN?$AA?6?$AA?$AA@| DCB " "
	DCB	0x0, "~", 0x0, "B", 0x0, "a", 0x0, "t", 0x0, "t", 0x0, "e"
	DCB	0x0, "r", 0x0, "y", 0x0, " ", 0x0, "T", 0x0, "e", 0x0, "m"
	DCB	0x0, "p", 0x0, "e", 0x0, "r", 0x0, "a", 0x0, "t", 0x0, "u"
	DCB	0x0, "r", 0x0, "e", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "%"
	DCB	0x0, "d", 0x0, " ", 0x0, "C", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DK@NOEMNDJB@?$AA?5?$AA?$HO?$AAB?$AAa?$AAt?$AAt?$AAe?$AAr?$AAy?$AA?5?$AAV?$AAo?$AAl?$AAt?$AAa?$AAg?$AAe?$AAs?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?5?$AAm?$AAV?$AA?$AN?$AA?6?$AA?$AA@| DCB " "
	DCB	0x0, "~", 0x0, "B", 0x0, "a", 0x0, "t", 0x0, "t", 0x0, "e"
	DCB	0x0, "r", 0x0, "y", 0x0, " ", 0x0, "V", 0x0, "o", 0x0, "l"
	DCB	0x0, "t", 0x0, "a", 0x0, "g", 0x0, "e", 0x0, "s", 0x0, " "
	DCB	0x0, "=", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, " ", 0x0, "m"
	DCB	0x0, "V", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |InitI2CWithBQ27510| PROC

; 734  : {

  00000		 |$LN5@InitI2CWit|
  00000	e92d41f0	 stmdb       sp!, {r4 - r8, lr}
  00004		 |$M48491|
  00004	e1a08000	 mov         r8, r0

; 735  :     bq_dataram data;
; 736  :     int LSB = 0, MSB = 0; 
; 737  :     //int i, temp, sum, a[16];
; 738  :     
; 739  :     //*************************
; 740  :     I2C_START(hGPIO_I2C);  

  00008	eb000000	 bl          I2C_START

; 741  :     I2C_setSlaveAddress(hGPIO_I2C, BQ27510_ADDRESS_WRITE);   //ADDR[7:1] + R/W[0] 

  0000c	e3a010aa	 mov         r1, #0xAA
  00010	e1a00008	 mov         r0, r8
  00014	eb000000	 bl          I2C_setSlaveAddress

; 742  :     LcdStall(100);    

  00018	e3a00064	 mov         r0, #0x64
  0001c	eb000000	 bl          LcdStall

; 743  :     I2C_ACKnowledge(hGPIO_I2C);

  00020	e1a00008	 mov         r0, r8
  00024	eb000000	 bl          I2C_ACKnowledge

; 744  :     
; 745  :     I2C_WRITE(hGPIO_I2C,  bq27500CMD_CNTL_LSB);              //CMD[7:0] 

  00028	e3a01000	 mov         r1, #0
  0002c	e1a00008	 mov         r0, r8
  00030	eb000000	 bl          I2C_WRITE

; 746  :     LcdStall(300);                                          

  00034	e3a00f4b	 mov         r0, #0x4B, 30
  00038	eb000000	 bl          LcdStall

; 747  :     I2C_ACKnowledge(hGPIO_I2C);

  0003c	e1a00008	 mov         r0, r8
  00040	eb000000	 bl          I2C_ACKnowledge

; 748  : 
; 749  :     I2C_WRITE(hGPIO_I2C,  0x01);          

  00044	e3a01001	 mov         r1, #1
  00048	e1a00008	 mov         r0, r8
  0004c	eb000000	 bl          I2C_WRITE

; 750  :     LcdStall(300);                                                  

  00050	e3a00f4b	 mov         r0, #0x4B, 30
  00054	eb000000	 bl          LcdStall

; 751  :     I2C_ACKnowledge(hGPIO_I2C);

  00058	e1a00008	 mov         r0, r8
  0005c	eb000000	 bl          I2C_ACKnowledge

; 752  : 
; 753  :     I2C_WRITE(hGPIO_I2C,  0x00);          

  00060	e3a01000	 mov         r1, #0
  00064	e1a00008	 mov         r0, r8
  00068	eb000000	 bl          I2C_WRITE

; 754  :     LcdStall(300);                                                  

  0006c	e3a00f4b	 mov         r0, #0x4B, 30
  00070	eb000000	 bl          LcdStall

; 755  :     I2C_ACKnowledge(hGPIO_I2C);

  00074	e1a00008	 mov         r0, r8
  00078	eb000000	 bl          I2C_ACKnowledge

; 756  :     I2C_STOP(hGPIO_I2C);

  0007c	e1a00008	 mov         r0, r8
  00080	eb000000	 bl          I2C_STOP

; 757  :     //*************************
; 758  :     
; 759  :     LcdStall(1000); 

  00084	e3a00ffa	 mov         r0, #0xFA, 30
  00088	eb000000	 bl          LcdStall

; 760  :     //*************************    
; 761  :     I2C_START(hGPIO_I2C);                                    //Sr 

  0008c	e1a00008	 mov         r0, r8
  00090	eb000000	 bl          I2C_START

; 762  :     I2C_setSlaveAddress(hGPIO_I2C, BQ27510_ADDRESS_WRITE);   //ADDR[7:1] + R/W[0] 

  00094	e3a010aa	 mov         r1, #0xAA
  00098	e1a00008	 mov         r0, r8
  0009c	eb000000	 bl          I2C_setSlaveAddress

; 763  :     LcdStall(100);    

  000a0	e3a00064	 mov         r0, #0x64
  000a4	eb000000	 bl          LcdStall

; 764  :     I2C_ACKnowledge(hGPIO_I2C);

  000a8	e1a00008	 mov         r0, r8
  000ac	eb000000	 bl          I2C_ACKnowledge

; 765  :     
; 766  :     I2C_WRITE(hGPIO_I2C,  bq27500CMD_CNTL_LSB);              //CMD[7:0] 

  000b0	e3a01000	 mov         r1, #0
  000b4	e1a00008	 mov         r0, r8
  000b8	eb000000	 bl          I2C_WRITE

; 767  :     LcdStall(300);                                         

  000bc	e3a00f4b	 mov         r0, #0x4B, 30
  000c0	eb000000	 bl          LcdStall

; 768  :     I2C_ACKnowledge(hGPIO_I2C);

  000c4	e1a00008	 mov         r0, r8
  000c8	eb000000	 bl          I2C_ACKnowledge

; 769  : 
; 770  :     I2C_START(hGPIO_I2C);

  000cc	e1a00008	 mov         r0, r8
  000d0	eb000000	 bl          I2C_START

; 771  :     I2C_setSlaveAddress_READ(hGPIO_I2C, BQ27510_ADDRESS_READ);

  000d4	e3a010ab	 mov         r1, #0xAB
  000d8	e1a00008	 mov         r0, r8
  000dc	eb000000	 bl          I2C_setSlaveAddress_READ

; 772  :     LcdStall(300);  

  000e0	e3a00f4b	 mov         r0, #0x4B, 30
  000e4	eb000000	 bl          LcdStall

; 773  :     I2C_ACKnowledge(hGPIO_I2C);

  000e8	e1a00008	 mov         r0, r8
  000ec	eb000000	 bl          I2C_ACKnowledge

; 774  : 
; 775  :     //prepare get Data LSB
; 776  :     LcdStall(300); 

  000f0	e3a00f4b	 mov         r0, #0x4B, 30
  000f4	eb000000	 bl          LcdStall

; 777  :     LSB  = I2C_READ(hGPIO_I2C);

  000f8	e1a00008	 mov         r0, r8
  000fc	eb000000	 bl          I2C_READ
  00100	e1a07000	 mov         r7, r0

; 778  :     LcdStall(300);

  00104	e3a00f4b	 mov         r0, #0x4B, 30
  00108	eb000000	 bl          LcdStall

; 779  :     I2C_ACKnowledge_READ(hGPIO_I2C);

  0010c	e1a00008	 mov         r0, r8
  00110	eb000000	 bl          I2C_ACKnowledge_READ

; 780  : 
; 781  :     //prepare get Data MSB
; 782  :     LcdStall(1000); 

  00114	e3a00ffa	 mov         r0, #0xFA, 30
  00118	eb000000	 bl          LcdStall

; 783  :     MSB = I2C_READ(hGPIO_I2C);

  0011c	e1a00008	 mov         r0, r8
  00120	eb000000	 bl          I2C_READ
  00124	e1a06000	 mov         r6, r0

; 784  :     LcdStall(300);

  00128	e3a00f4b	 mov         r0, #0x4B, 30
  0012c	eb000000	 bl          LcdStall

; 785  :     I2C_ACKnowledge_READ(hGPIO_I2C);

  00130	e1a00008	 mov         r0, r8
  00134	eb000000	 bl          I2C_ACKnowledge_READ

; 786  :     LcdStall(500);

  00138	e3a00f7d	 mov         r0, #0x7D, 30
  0013c	eb000000	 bl          LcdStall

; 787  :     I2C_STOP(hGPIO_I2C);

  00140	e1a00008	 mov         r0, r8
  00144	eb000000	 bl          I2C_STOP

; 788  :     //*************************
; 789  :     
; 790  :     
; 791  :     I2C_START(hGPIO_I2C);

  00148	e1a00008	 mov         r0, r8
  0014c	eb000000	 bl          I2C_START

; 792  :     I2C_STOP(hGPIO_I2C);

  00150	e1a00008	 mov         r0, r8
  00154	eb000000	 bl          I2C_STOP

; 793  :     gaugeInformation(hGPIO_I2C,  0x00);                 //This opreating means clean register

  00158	e3a01000	 mov         r1, #0
  0015c	e1a00008	 mov         r0, r8
  00160	eb000000	 bl          gaugeInformation

; 794  :     data.Temp =(short) gaugeInformation(hGPIO_I2C,  bq27500CMD_TEMP_LSB);

  00164	e3a01006	 mov         r1, #6
  00168	e1a00008	 mov         r0, r8
  0016c	eb000000	 bl          gaugeInformation
  00170	e1a03000	 mov         r3, r0

; 795  :     /*I2C_START(hGPIO_I2C);
; 796  :     I2C_STOP(hGPIO_I2C);
; 797  :     gaugeInformation(hGPIO_I2C,  0x00);*/
; 798  :     data.Voltage =(short) gaugeInformation(hGPIO_I2C,  bq27500CMD_VOLT_LSB);

  00174	e1a04803	 mov         r4, r3, lsl #16
  00178	e1a00008	 mov         r0, r8
  0017c	e3a01008	 mov         r1, #8
  00180	e1a04844	 mov         r4, r4, asr #16
  00184	eb000000	 bl          gaugeInformation
  00188	e1a05000	 mov         r5, r0

; 799  :     gaugeInformation(hGPIO_I2C,  0x00);        

  0018c	e1a00008	 mov         r0, r8
  00190	e3a01000	 mov         r1, #0
  00194	eb000000	 bl          gaugeInformation

; 800  :     //data.NomAvailCap =(short) gaugeInformation(hGPIO_I2C,  bq27500CMD_NAC_LSB);
; 801  :     //gaugeInformation(hGPIO_I2C,  0x00);
; 802  :     
; 803  :     
; 804  :     OALLog(L" ~Reports the device type:0x%02X%02X \r\n",MSB ,LSB);

  00198	e59f0050	 ldr         r0, [pc, #0x50]
  0019c	e1a02007	 mov         r2, r7
  001a0	e1a01006	 mov         r1, r6
  001a4	eb000000	 bl          NKDbgPrintfW

; 805  :     OALLog(L" ~Battery Temperature = %d C\r\n",(data.Temp/10)-273);

  001a8	e59f303c	 ldr         r3, [pc, #0x3C]
  001ac	e3a02c01	 mov         r2, #1, 24
  001b0	e59f0030	 ldr         r0, [pc, #0x30]
  001b4	e0c3e394	 smull       lr, r3, r4, r3
  001b8	e3822011	 orr         r2, r2, #0x11
  001bc	e1a03143	 mov         r3, r3, asr #2
  001c0	e0833fa3	 add         r3, r3, r3, lsr #31
  001c4	e0431002	 sub         r1, r3, r2
  001c8	eb000000	 bl          NKDbgPrintfW

; 806  :     OALLog(L" ~Battery Voltages = %d mV\r\n",data.Voltage);

  001cc	e1a01805	 mov         r1, r5, lsl #16
  001d0	e59f000c	 ldr         r0, [pc, #0xC]
  001d4	e1a01841	 mov         r1, r1, asr #16
  001d8	eb000000	 bl          NKDbgPrintfW

; 807  :     //OALLog(L" ~Battery Nominal Available Capacity = %d mAh\r\n",data.NomAvailCap);
; 808  : }

  001dc	e8bd41f0	 ldmia       sp!, {r4 - r8, lr}
  001e0	e12fff1e	 bx          lr
  001e4		 |$LN6@InitI2CWit|
  001e4		 |$LN7@InitI2CWit|
  001e4	00000000	 DCD         |??_C@_1DK@NOEMNDJB@?$AA?5?$AA?$HO?$AAB?$AAa?$AAt?$AAt?$AAe?$AAr?$AAy?$AA?5?$AAV?$AAo?$AAl?$AAt?$AAa?$AAg?$AAe?$AAs?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?5?$AAm?$AAV?$AA?$AN?$AA?6?$AA?$AA@|
  001e8		 |$LN8@InitI2CWit|
  001e8	00000000	 DCD         |??_C@_1DO@OLEHJPML@?$AA?5?$AA?$HO?$AAB?$AAa?$AAt?$AAt?$AAe?$AAr?$AAy?$AA?5?$AAT?$AAe?$AAm?$AAp?$AAe?$AAr?$AAa?$AAt?$AAu?$AAr?$AAe?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?5?$AAC?$AA?$AN?$AA?6?$AA?$AA@|
  001ec		 |$LN9@InitI2CWit|
  001ec	66666667	 DCD         0x66666667
  001f0		 |$LN10@InitI2CWit|
  001f0	00000000	 DCD         |??_C@_1FA@JMHKMEFE@?$AA?5?$AA?$HO?$AAR?$AAe?$AAp?$AAo?$AAr?$AAt?$AAs?$AA?5?$AAt?$AAh?$AAe?$AA?5?$AAd?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AAt?$AAy?$AAp?$AAe?$AA?3?$AA0?$AAx?$AA?$CF?$AA0?$AA2?$AAX@|
  001f4		 |$M48492|

			 ENDP  ; |InitI2CWithBQ27510|

	EXPORT	|??_C@_1GC@GBHIDOHO@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAB?$AAQ?$AA2?$AA7?$AA5?$AA1?$AA0?$AA_?$AAi?$AAn?$AAi?$AAt?$AA?5?$AA?9?$AA?5?$AAO?$AAp?$AAe?$AAn?$AA?5?$AAI?$AA2?$AAC?$AA?5?$AAd@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T48507| DCD	|$LN6@BatteryTes|
	DCD	0x40002001

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GC@GBHIDOHO@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAB?$AAQ?$AA2?$AA7?$AA5?$AA1?$AA0?$AA_?$AAi?$AAn?$AAi?$AAt?$AA?5?$AA?9?$AA?5?$AAO?$AAp?$AAe?$AAn?$AA?5?$AAI?$AA2?$AAC?$AA?5?$AAd@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "B", 0x0, "Q", 0x0, "2", 0x0, "7", 0x0, "5", 0x0, "1"
	DCB	0x0, "0", 0x0, "_", 0x0, "i", 0x0, "n", 0x0, "i", 0x0, "t"
	DCB	0x0, " ", 0x0, "-", 0x0, " ", 0x0, "O", 0x0, "p", 0x0, "e"
	DCB	0x0, "n", 0x0, " ", 0x0, "I", 0x0, "2", 0x0, "C", 0x0, " "
	DCB	0x0, "d", 0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e"
	DCB	0x0, " ", 0x0, "F", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e"
	DCB	0x0, "d", 0x0, "!", 0x0, "!", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |BatteryTest_Z2170P| PROC

; 813  : {

  00000		 |$LN6@BatteryTes|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M48504|

; 814  :     HANDLE hGPIO_I2C;
; 815  :     
; 816  :     UNREFERENCED_PARAMETER(pMenu);
; 817  :     OALBLMenuHeader(L"Battery Test");

  00004	e59f0070	 ldr         r0, [pc, #0x70]
  00008	eb000000	 bl          OALBLMenuHeader

; 818  :     
; 819  :     if((hGPIO_I2C = GPIOOpen()) == NULL) 

  0000c	eb000000	 bl          GPIOOpen
  00010	e1b04000	 movs        r4, r0
  00014	1a000003	 bne         |$LN1@BatteryTes|

; 820  : 	{
; 821  :         RETAILMSG(1,(L"ERROR: BQ27510_init - Open I2C device Failed!!\r\n"));

  00018	e59f0058	 ldr         r0, [pc, #0x58]
  0001c	eb000000	 bl          NKDbgPrintfW

; 835  : I2COpenFalse: 
; 836  :     return;    
; 837  : }

  00020	e8bd4010	 ldmia       sp!, {r4, lr}
  00024	e12fff1e	 bx          lr
  00028		 |$LN1@BatteryTes|

; 822  :         goto I2COpenFalse;
; 823  : 	}/*else{
; 824  :         RETAILMSG(1,(L"SUCCESS: BQ27510_init - Open I2C device OK!!\r\n"));
; 825  : 	}*/
; 826  :     //OALLog(L"\r\n >>>Set hGPIO_I2C:%X \r\n",hGPIO_I2C);  
; 827  :     
; 828  :     GPIOClrBit(hGPIO_I2C,  184);  

  00028	e3a010b8	 mov         r1, #0xB8
  0002c	e1a00004	 mov         r0, r4
  00030	eb000000	 bl          GPIOClrBit

; 829  :     GPIOSetMode(hGPIO_I2C, 184, GPIO_DIR_OUTPUT);   //I2C3_CLK, Ray 131129 

  00034	e3a02000	 mov         r2, #0
  00038	e3a010b8	 mov         r1, #0xB8
  0003c	e1a00004	 mov         r0, r4
  00040	eb000000	 bl          GPIOSetMode

; 830  :     GPIOClrBit(hGPIO_I2C,  185);

  00044	e3a010b9	 mov         r1, #0xB9
  00048	e1a00004	 mov         r0, r4
  0004c	eb000000	 bl          GPIOClrBit

; 831  :     GPIOSetMode(hGPIO_I2C, 185, GPIO_DIR_OUTPUT);   //I2C3_SDA, Ray 131129 

  00050	e3a02000	 mov         r2, #0
  00054	e3a010b9	 mov         r1, #0xB9
  00058	e1a00004	 mov         r0, r4
  0005c	eb000000	 bl          GPIOSetMode

; 832  :     
; 833  :     InitI2CWithBQ27510(hGPIO_I2C);                               

  00060	e1a00004	 mov         r0, r4
  00064	eb000000	 bl          InitI2CWithBQ27510

; 834  :     GPIOClose(hGPIO_I2C);

  00068	e1a00004	 mov         r0, r4
  0006c	eb000000	 bl          GPIOClose
  00070		 |$I2COpenFalse$47723|

; 835  : I2COpenFalse: 
; 836  :     return;    
; 837  : }

  00070	e8bd4010	 ldmia       sp!, {r4, lr}
  00074	e12fff1e	 bx          lr
  00078		 |$LN7@BatteryTes|
  00078		 |$LN8@BatteryTes|
  00078	00000000	 DCD         |??_C@_1GC@GBHIDOHO@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAB?$AAQ?$AA2?$AA7?$AA5?$AA1?$AA0?$AA_?$AAi?$AAn?$AAi?$AAt?$AA?5?$AA?9?$AA?5?$AAO?$AAp?$AAe?$AAn?$AA?5?$AAI?$AA2?$AAC?$AA?5?$AAd@|
  0007c		 |$LN9@BatteryTes|
  0007c	00000000	 DCD         |??_C@_1BK@KIOELMDE@?$AAB?$AAa?$AAt?$AAt?$AAe?$AAr?$AAy?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?$AA@|
  00080		 |$M48505|

			 ENDP  ; |BatteryTest_Z2170P|

	EXPORT	|??_C@_1CG@CDBIFFDJ@?$AAL?$AAE?$AAD?$AA?5?$AAI?$AAn?$AAd?$AAi?$AAc?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?$AA@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T48518| DCD	|$LN5@LEDTest_Z2|
	DCD	0x40003b01

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CG@CDBIFFDJ@?$AAL?$AAE?$AAD?$AA?5?$AAI?$AAn?$AAd?$AAi?$AAc?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?$AA@| DCB "L"
	DCB	0x0, "E", 0x0, "D", 0x0, " ", 0x0, "I", 0x0, "n", 0x0, "d"
	DCB	0x0, "i", 0x0, "c", 0x0, "a", 0x0, "t", 0x0, "o", 0x0, "r"
	DCB	0x0, " ", 0x0, "T", 0x0, "e", 0x0, "s", 0x0, "t", 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |LEDTest_Z2170P| PROC

; 844  : {

  00000		 |$LN5@LEDTest_Z2|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M48515|

; 845  :     DWORD stall_1mSec = 1000;
; 846  : //    int i;
; 847  : 	HANDLE hGPIO;
; 848  : 	UNREFERENCED_PARAMETER(pMenu);
; 849  : 	
; 850  : 	OALBLMenuHeader(L"LED Indicator Test");

  00004	e59f00dc	 ldr         r0, [pc, #0xDC]
  00008	eb000000	 bl          OALBLMenuHeader

; 851  :     hGPIO = GPIOOpen();

  0000c	eb000000	 bl          GPIOOpen

; 852  :     
; 853  :     //for(i=0; i<2; i++){       
; 854  :         GPIOClrBit(hGPIO, RED_LED_SET_GPIO);  

  00010	e3a0108c	 mov         r1, #0x8C
  00014	e1a05000	 mov         r5, r0
  00018	eb000000	 bl          GPIOClrBit

; 855  :         LcdStall(stall_1mSec);

  0001c	e3a00ffa	 mov         r0, #0xFA, 30
  00020	eb000000	 bl          LcdStall

; 856  :         GPIOSetBit(hGPIO, RED_LED_SET_GPIO);

  00024	e3a0108c	 mov         r1, #0x8C
  00028	e1a00005	 mov         r0, r5
  0002c	eb000000	 bl          GPIOSetBit

; 857  :         LcdStall(stall_1Sec);

  00030	e59f40ac	 ldr         r4, [pc, #0xAC]
  00034	e5940000	 ldr         r0, [r4]
  00038	eb000000	 bl          LcdStall

; 858  :         GPIOClrBit(hGPIO, RED_LED_SET_GPIO);

  0003c	e3a0108c	 mov         r1, #0x8C
  00040	e1a00005	 mov         r0, r5
  00044	eb000000	 bl          GPIOClrBit

; 859  :         LcdStall(stall_1Sec);

  00048	e5940000	 ldr         r0, [r4]
  0004c	eb000000	 bl          LcdStall

; 860  : 
; 861  :         GPIOClrBit(hGPIO, BARCODE_LED_SET_GPIO);

  00050	e3a010a0	 mov         r1, #0xA0
  00054	e1a00005	 mov         r0, r5
  00058	eb000000	 bl          GPIOClrBit

; 862  :         LcdStall(stall_1mSec);

  0005c	e3a00ffa	 mov         r0, #0xFA, 30
  00060	eb000000	 bl          LcdStall

; 863  :         GPIOSetBit(hGPIO, BARCODE_LED_SET_GPIO);

  00064	e3a010a0	 mov         r1, #0xA0
  00068	e1a00005	 mov         r0, r5
  0006c	eb000000	 bl          GPIOSetBit

; 864  :         LcdStall(stall_1Sec);

  00070	e5940000	 ldr         r0, [r4]
  00074	eb000000	 bl          LcdStall

; 865  :         GPIOClrBit(hGPIO, BARCODE_LED_SET_GPIO);

  00078	e3a010a0	 mov         r1, #0xA0
  0007c	e1a00005	 mov         r0, r5
  00080	eb000000	 bl          GPIOClrBit

; 866  :         LcdStall(stall_1Sec);

  00084	e5940000	 ldr         r0, [r4]
  00088	eb000000	 bl          LcdStall

; 867  : 
; 868  :         GPIOClrBit(hGPIO, GREEN_LED_SET_GPIO);  

  0008c	e3a01022	 mov         r1, #0x22
  00090	e1a00005	 mov         r0, r5
  00094	eb000000	 bl          GPIOClrBit

; 869  :         LcdStall(stall_1mSec);

  00098	e3a00ffa	 mov         r0, #0xFA, 30
  0009c	eb000000	 bl          LcdStall

; 870  :         GPIOSetBit(hGPIO, GREEN_LED_SET_GPIO);

  000a0	e3a01022	 mov         r1, #0x22
  000a4	e1a00005	 mov         r0, r5
  000a8	eb000000	 bl          GPIOSetBit

; 871  :         LcdStall(stall_1Sec);

  000ac	e5940000	 ldr         r0, [r4]
  000b0	eb000000	 bl          LcdStall

; 872  :         GPIOClrBit(hGPIO, GREEN_LED_SET_GPIO);

  000b4	e3a01022	 mov         r1, #0x22
  000b8	e1a00005	 mov         r0, r5
  000bc	eb000000	 bl          GPIOClrBit

; 873  :         LcdStall(stall_1Sec);

  000c0	e5940000	 ldr         r0, [r4]
  000c4	eb000000	 bl          LcdStall

; 874  :     //}
; 875  :     OALLog(L"\rTested ok!! \r\n");

  000c8	e59f0010	 ldr         r0, [pc, #0x10]
  000cc	eb000000	 bl          NKDbgPrintfW

; 876  :     GPIOClose(hGPIO);

  000d0	e1a00005	 mov         r0, r5
  000d4	eb000000	 bl          GPIOClose

; 877  : }

  000d8	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  000dc	e12fff1e	 bx          lr
  000e0		 |$LN6@LEDTest_Z2|
  000e0		 |$LN7@LEDTest_Z2|
  000e0	00000000	 DCD         |??_C@_1CA@NFDHHLIH@?$AA?$AN?$AAT?$AAe?$AAs?$AAt?$AAe?$AAd?$AA?5?$AAo?$AAk?$AA?$CB?$AA?$CB?$AA?5?$AA?$AN?$AA?6?$AA?$AA@|
  000e4		 |$LN8@LEDTest_Z2|
  000e4	00000000	 DCD         |stall_1Sec|
  000e8		 |$LN9@LEDTest_Z2|
  000e8	00000000	 DCD         |??_C@_1CG@CDBIFFDJ@?$AAL?$AAE?$AAD?$AA?5?$AAI?$AAn?$AAd?$AAi?$AAc?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?$AA@|
  000ec		 |$M48516|

			 ENDP  ; |LEDTest_Z2170P|

	EXPORT	|BCRSetRTS|

  00000			 AREA	 |.pdata|, PDATA
|$T48532| DCD	|$LN7@BCRSetRTS|
	DCD	0x40000a00
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |BCRSetRTS| PROC

; 884  : {

  00000		 |$LN7@BCRSetRTS|
  00000		 |$M48529|
  00000	e3500000	 cmp         r0, #0

; 885  :     UINT bData = INREG8(&pUartRegs->MCR);

  00004	e59f3018	 ldr         r3, [pc, #0x18]
  00008	e5932000	 ldr         r2, [r3]
  0000c	e5d23010	 ldrb        r3, [r2, #0x10]

; 886  : 
; 887  :     if(bSet)
; 888  :         bData |= UART_MCR_RTS;

  00010	13833002	 orrne       r3, r3, #2

; 891  : 
; 892  :     OUTREG8(&pUartRegs->MCR, bData);      

  00014	15c23010	 strneb      r3, [r2, #0x10]

; 889  :     else
; 890  :         bData &= ~UART_MCR_RTS;     //

  00018	03c33002	 biceq       r3, r3, #2

; 891  : 
; 892  :     OUTREG8(&pUartRegs->MCR, bData);      

  0001c	05c23010	 streqb      r3, [r2, #0x10]

; 893  : }

  00020	e12fff1e	 bx          lr
  00024		 |$LN8@BCRSetRTS|
  00024		 |$LN9@BCRSetRTS|
  00024	00000000	 DCD         |pUartRegs|
  00028		 |$M48530|

			 ENDP  ; |BCRSetRTS|

	EXPORT	|__$ArrayPad$| [ DATA ]
	EXPORT	|??_C@_1CM@LKJOBAFD@?$AA?$AN?$AAD?$AAi?$AAd?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAa?$AAn?$AAy?$AA?5?$AAs?$AAc?$AAa?$AAn?$AA?5?$AA?$CB?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1O@PBEKMGPM@?$AA?9?$AA?$DO?$AA?$CF?$AAs?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BK@DAODNELG@?$AAB?$AAa?$AAr?$AAc?$AAo?$AAd?$AAe?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|OALPAtoVA|
	IMPORT	|GetAddressByDevice|
	IMPORT	|EnableDeviceClocks|
	IMPORT	|__GSHandlerCheck|
	IMPORT	|__security_cookie|
	IMPORT	|__security_check_cookie|

  00000			 AREA	 |.pdata|, PDATA
|$T48569| DCD	|$LN26@BarcodeTes|
	DCD	0xc0007702

  00000			 AREA	 |.xdata|, DATA
|$T48565| DCD	0xffffffe0

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CM@LKJOBAFD@?$AA?$AN?$AAD?$AAi?$AAd?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAa?$AAn?$AAy?$AA?5?$AAs?$AAc?$AAa?$AAn?$AA?5?$AA?$CB?$AA?$AN?$AA?6?$AA?$AA@| DCB 0xd
	DCB	0x0, "D", 0x0, "i", 0x0, "d", 0x0, " ", 0x0, "n", 0x0, "o"
	DCB	0x0, "t", 0x0, " ", 0x0, "a", 0x0, "n", 0x0, "y", 0x0, " "
	DCB	0x0, "s", 0x0, "c", 0x0, "a", 0x0, "n", 0x0, " ", 0x0, "!"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1O@PBEKMGPM@?$AA?9?$AA?$DO?$AA?$CF?$AAs?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, ">", 0x0, "%", 0x0, "s", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BK@DAODNELG@?$AAB?$AAa?$AAr?$AAc?$AAo?$AAd?$AAe?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?$AA@| DCB "B"
	DCB	0x0, "a", 0x0, "r", 0x0, "c", 0x0, "o", 0x0, "d", 0x0, "e"
	DCB	0x0, " ", 0x0, "T", 0x0, "e", 0x0, "s", 0x0, "t", 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000	00000000	 DCD         |__GSHandlerCheck|
  00004	00000000	 DCD         |$T48565|

  00008		 |BarcodeTest_Z2170P| PROC

; 897  : {

  00008		 |$LN26@BarcodeTes|
  00008	e92d43f0	 stmdb       sp!, {r4 - r9, lr}
  0000c	e24dd068	 sub         sp, sp, #0x68
  00010		 |$M48566|
  00010	e59f31c8	 ldr         r3, [pc, #0x1C8]
  00014	e5933000	 ldr         r3, [r3]
  00018	e58d3064	 str         r3, [sp, #0x64]

; 898  :     HANDLE  hGPIO;
; 899  :     UINT8   status, ch, running = 1;
; 900  :     int     count = 30, inNum = 0;
; 901  :     //int     i = 0;
; 902  :     //WCHAR   key;
; 903  :     WCHAR   scan[50];
; 904  :        
; 905  : 	OALBLMenuHeader(L"Barcode Test");

  0001c	e59f01b8	 ldr         r0, [pc, #0x1B8]
  00020	e3a0601e	 mov         r6, #0x1E
  00024	e3a05000	 mov         r5, #0
  00028	eb000000	 bl          OALBLMenuHeader

; 906  : 	UNREFERENCED_PARAMETER(pMenu);	
; 907  : 	
; 908  :     hGPIO = GPIOOpen();

  0002c	eb000000	 bl          GPIOOpen

; 909  :     GPIOSetMode(hGPIO, BCR_ENG_PWEN, GPIO_DIR_OUTPUT);   

  00030	e3a02000	 mov         r2, #0
  00034	e3a01026	 mov         r1, #0x26
  00038	e1a04000	 mov         r4, r0
  0003c	eb000000	 bl          GPIOSetMode

; 910  :     GPIOSetMode(hGPIO, BCR_ENG_TRIG, GPIO_DIR_OUTPUT);

  00040	e3a02000	 mov         r2, #0
  00044	e3a01024	 mov         r1, #0x24
  00048	e1a00004	 mov         r0, r4
  0004c	eb000000	 bl          GPIOSetMode

; 911  :     
; 912  :     GPIOSetBit(hGPIO, BCR_ENG_PWEN);                    //Power ON

  00050	e3a01026	 mov         r1, #0x26
  00054	e1a00004	 mov         r0, r4
  00058	eb000000	 bl          GPIOSetBit

; 913  :     EnableDeviceClocks(OMAP_DEVICE_UART1, TRUE); 

  0005c	e3a01001	 mov         r1, #1
  00060	e3a0000a	 mov         r0, #0xA
  00064	eb000000	 bl          EnableDeviceClocks

; 914  :     pUartRegs = OALPAtoUA(GetAddressByDevice(OMAP_DEVICE_UART1));

  00068	e3a0000a	 mov         r0, #0xA
  0006c	eb000000	 bl          GetAddressByDevice
  00070	e3a01000	 mov         r1, #0
  00074	eb000000	 bl          OALPAtoVA
  00078	e59f7158	 ldr         r7, [pc, #0x158]

; 915  :        
; 916  :     
; 917  :     // reset uart
; 918  : 	OUTREG8(&pUartRegs->SYSC, UART_SYSC_RST);

  0007c	e3a03002	 mov         r3, #2
  00080	e5870000	 str         r0, [r7]
  00084	e5c03054	 strb        r3, [r0, #0x54]
  00088	e5972000	 ldr         r2, [r7]
  0008c		 |$LL9@BarcodeTes|

; 919  :     while ((INREG8(&pUartRegs->SYSS) & UART_SYSS_RST_DONE) == 0)

  0008c	e5d23058	 ldrb        r3, [r2, #0x58]
  00090	e3130001	 tst         r3, #1
  00094	0afffffc	 beq         |$LL9@BarcodeTes|

; 920  :         ;
; 921  : 
; 922  :     // Set baud rate
; 923  :     OUTREG8(&pUartRegs->LCR, UART_LCR_DLAB);    //Line control register, DIV_EN

  00098	e3a03080	 mov         r3, #0x80
  0009c	e5c2300c	 strb        r3, [r2, #0xC]

; 924  :     OUTREG8(&pUartRegs->DLL, 0x38);             //9.6kbps

  000a0	e5973000	 ldr         r3, [r7]
  000a4	e3a02038	 mov         r2, #0x38

; 925  :     OUTREG8(&pUartRegs->DLH, 0x01);

  000a8	e3a0e001	 mov         lr, #1
  000ac	e5c32000	 strb        r2, [r3]
  000b0	e5973000	 ldr         r3, [r7]

; 926  :     OUTREG8(&pUartRegs->LCR, 0x00);

  000b4	e3a09000	 mov         r9, #0

; 927  : 
; 928  :     // 8 bit, 1 stop bit, no parity
; 929  :     OUTREG8(&pUartRegs->LCR, 0x03);             

  000b8	e3a02003	 mov         r2, #3
  000bc	e5c3e004	 strb        lr, [r3, #4]
  000c0	e5973000	 ldr         r3, [r7]

; 930  :     // Enable FIFO
; 931  :     OUTREG8(&pUartRegs->FCR, UART_FCR_FIFO_EN);
; 932  :     OUTREG8(&pUartRegs->FCR, UART_FCR_FIFO_EN|UART_FCR_RX_FIFO_CLEAR|UART_FCR_TX_FIFO_CLEAR);

  000c4	e3a01007	 mov         r1, #7

; 933  :     // Pool
; 934  :     OUTREG8(&pUartRegs->IER, 0);
; 935  :     // Set DTR/RTS signals
; 936  :     OUTREG8(&pUartRegs->MCR, 0); //UART_MCR_DTR|UART_MCR_RTS);
; 937  :     // Configuration complete so select UART 16x mode
; 938  : 	OUTREG8(&pUartRegs->MDR1, UART_MDR1_UART16);
; 939  :     BCRSetRTS(TRUE);
; 940  :     //OALLog(L"\r Scan Mode key '5', if Cancel '0'.\r\n");
; 941  :     
; 942  :     //OALLog(L"\r The Cancel key are '0'.\r\n");
; 943  :     while(running)
; 944  :     {
; 945  : 		//if(key == L'5')             // SCAN KEY
; 946  : 		//{
; 947  : 		    LcdSleep(500);

  000c8	e3a00f7d	 mov         r0, #0x7D, 30
  000cc	e5c3900c	 strb        r9, [r3, #0xC]
  000d0	e5973000	 ldr         r3, [r7]
  000d4	e5c3200c	 strb        r2, [r3, #0xC]
  000d8	e5973000	 ldr         r3, [r7]
  000dc	e5c3e008	 strb        lr, [r3, #8]
  000e0	e5973000	 ldr         r3, [r7]
  000e4	e5c31008	 strb        r1, [r3, #8]
  000e8	e5973000	 ldr         r3, [r7]
  000ec	e5c39004	 strb        r9, [r3, #4]
  000f0	e5973000	 ldr         r3, [r7]
  000f4	e5c39010	 strb        r9, [r3, #0x10]
  000f8	e5973000	 ldr         r3, [r7]
  000fc	e5c39020	 strb        r9, [r3, #0x20]
  00100	e5972000	 ldr         r2, [r7]
  00104	e5d23010	 ldrb        r3, [r2, #0x10]
  00108	e3833002	 orr         r3, r3, #2
  0010c	e5c23010	 strb        r3, [r2, #0x10]
  00110	eb000000	 bl          LcdSleep

; 948  : 			GPIOClrBit(hGPIO, BCR_ENG_TRIG);

  00114	e3a01024	 mov         r1, #0x24
  00118	e1a00004	 mov         r0, r4
  0011c	eb000000	 bl          GPIOClrBit

; 949  : 			BCRSetRTS(FALSE);

  00120	e5972000	 ldr         r2, [r7]

; 950  : 			LcdSleep(500);

  00124	e3a00f7d	 mov         r0, #0x7D, 30
  00128	e5d23010	 ldrb        r3, [r2, #0x10]
  0012c	e20330fd	 and         r3, r3, #0xFD
  00130	e5c23010	 strb        r3, [r2, #0x10]
  00134	eb000000	 bl          LcdSleep
  00138	e28d8000	 add         r8, sp, #0
  0013c		 |$LL5@BarcodeTes|

; 951  : 			
; 952  : 			while( count-- )
; 953  : 			{
; 954  : 				status = INREG8(&pUartRegs->LSR);

  0013c	e5972000	 ldr         r2, [r7]

; 955  : 				if ((status & UART_LSR_RX_FIFO_E) != 0)
; 956  : 				{
; 957  : 					ch = INREG8(&pUartRegs->RHR);
; 958  : 					scan[inNum++] = ch;
; 959  : 					//OALLog(L" %c\r\n",ch);
; 960  : 				}
; 961  : 				LcdSleep(100);

  00140	e3a00064	 mov         r0, #0x64
  00144	e2466001	 sub         r6, r6, #1
  00148	e5d23014	 ldrb        r3, [r2, #0x14]
  0014c	e3130001	 tst         r3, #1
  00150	15d23000	 ldrneb      r3, [r2]
  00154	12855001	 addne       r5, r5, #1
  00158	10c830b2	 strneh      r3, [r8], #2
  0015c	eb000000	 bl          LcdSleep
  00160	e3560000	 cmp         r6, #0
  00164	1afffff4	 bne         |$LL5@BarcodeTes|

; 962  : 			}
; 963  : 			
; 964  : 			GPIOSetBit(hGPIO, BCR_ENG_TRIG);

  00168	e3a01024	 mov         r1, #0x24
  0016c	e1a00004	 mov         r0, r4
  00170	eb000000	 bl          GPIOSetBit

; 965  : 			if( inNum > 0 )

  00174	e3550000	 cmp         r5, #0
  00178	da000008	 ble         |$LN2@BarcodeTes|

; 966  : 			{
; 967  : 				/*while(scan[i] != L'\0'){
; 968  : 				    OALLog(L"%c ",scan[i]);
; 969  : 				    i++;
; 970  : 				}
; 971  : 				OALLog(L"\r\n");*/
; 972  : 				scan[inNum] = '\0';
; 973  : 				OALLog(L"->%s\r\n",scan);

  0017c	e59f0050	 ldr         r0, [pc, #0x50]
  00180	e28d3000	 add         r3, sp, #0
  00184	e0833085	 add         r3, r3, r5, lsl #1
  00188	e28d1000	 add         r1, sp, #0
  0018c	e1c390b0	 strh        r9, [r3]
  00190	eb000000	 bl          NKDbgPrintfW

; 974  : 				LcdSleep(150);

  00194	e3a00096	 mov         r0, #0x96
  00198	eb000000	 bl          LcdSleep

; 975  : 				break;

  0019c	ea000001	 b           |$LN6@BarcodeTes|
  001a0		 |$LN2@BarcodeTes|

; 976  : 			}else{
; 977  :                 OALLog(L"\rDid not any scan !\r\n");

  001a0	e59f0028	 ldr         r0, [pc, #0x28]
  001a4	eb000000	 bl          NKDbgPrintfW
  001a8		 |$LN6@BarcodeTes|

; 978  : 				break;
; 979  : 			}
; 980  : 			
; 981  : 			/*key = OALBLMenuReadKey(TRUE);
; 982  : 			if(key == L'0')             // ESC KEY
; 983  : 		    {
; 984  : 			    OALLog(L"Cancel \r\n");
; 985  : 			    break;
; 986  : 		    }*/
; 987  : 		//}
; 988  : 		//LcdSleep(150);
; 989  : 	}
; 990  : 	GPIOClrBit(hGPIO, BCR_ENG_PWEN);

  001a8	e3a01026	 mov         r1, #0x26
  001ac	e1a00004	 mov         r0, r4
  001b0	eb000000	 bl          GPIOClrBit

; 991  : 	GPIOClose(hGPIO);

  001b4	e1a00004	 mov         r0, r4
  001b8	eb000000	 bl          GPIOClose
  001bc	e59d0064	 ldr         r0, [sp, #0x64]
  001c0	eb000000	 bl          __security_check_cookie

; 992  : }

  001c4	e28dd068	 add         sp, sp, #0x68
  001c8	e8bd43f0	 ldmia       sp!, {r4 - r9, lr}
  001cc	e12fff1e	 bx          lr
  001d0		 |$LN27@BarcodeTes|
  001d0		 |$LN28@BarcodeTes|
  001d0	00000000	 DCD         |??_C@_1CM@LKJOBAFD@?$AA?$AN?$AAD?$AAi?$AAd?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAa?$AAn?$AAy?$AA?5?$AAs?$AAc?$AAa?$AAn?$AA?5?$AA?$CB?$AA?$AN?$AA?6?$AA?$AA@|
  001d4		 |$LN29@BarcodeTes|
  001d4	00000000	 DCD         |??_C@_1O@PBEKMGPM@?$AA?9?$AA?$DO?$AA?$CF?$AAs?$AA?$AN?$AA?6?$AA?$AA@|
  001d8		 |$LN30@BarcodeTes|
  001d8	00000000	 DCD         |pUartRegs|
  001dc		 |$LN31@BarcodeTes|
  001dc	00000000	 DCD         |??_C@_1BK@DAODNELG@?$AAB?$AAa?$AAr?$AAc?$AAo?$AAd?$AAe?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?$AA@|
  001e0		 |$LN32@BarcodeTes|
  001e0	00000000	 DCD         |__security_cookie|
  001e4		 |$M48567|

			 ENDP  ; |BarcodeTest_Z2170P|

	EXPORT	|AudioAndMIC_Z2170P|
	EXPORT	|??_C@_1BM@NMMNENJO@?$AAA?$AAu?$AAd?$AAi?$AAo?$AA?5?$AAA?$AAn?$AAd?$AA?5?$AAM?$AAI?$AAC?$AA?$AA@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T48583| DCD	|$LN5@AudioAndMI|
	DCD	0x40000601

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BM@NMMNENJO@?$AAA?$AAu?$AAd?$AAi?$AAo?$AA?5?$AAA?$AAn?$AAd?$AA?5?$AAM?$AAI?$AAC?$AA?$AA@| DCB "A"
	DCB	0x0, "u", 0x0, "d", 0x0, "i", 0x0, "o", 0x0, " ", 0x0, "A"
	DCB	0x0, "n", 0x0, "d", 0x0, " ", 0x0, "M", 0x0, "I", 0x0, "C"
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |AudioAndMIC_Z2170P| PROC

; 1024 : {

  00000		 |$LN5@AudioAndMI|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M48580|

; 1025 :     UNREFERENCED_PARAMETER(pMenu);
; 1026 : 	OALBLMenuHeader(L"Audio And MIC");	

  00004	e59f0008	 ldr         r0, [pc, #8]
  00008	eb000000	 bl          OALBLMenuHeader

; 1027 : }

  0000c	e49de004	 ldr         lr, [sp], #4
  00010	e12fff1e	 bx          lr
  00014		 |$LN6@AudioAndMI|
  00014		 |$LN7@AudioAndMI|
  00014	00000000	 DCD         |??_C@_1BM@NMMNENJO@?$AAA?$AAu?$AAd?$AAi?$AAo?$AA?5?$AAA?$AAn?$AAd?$AA?5?$AAM?$AAI?$AAC?$AA?$AA@|
  00018		 |$M48581|

			 ENDP  ; |AudioAndMIC_Z2170P|

	EXPORT	|clear|
	IMPORT	|memset|

  00000			 AREA	 |.pdata|, PDATA
|$T48597| DCD	|$LN12@clear|
	DCD	0x40001302
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |clear| PROC

; 1035 : {

  00000		 |$LN12@clear|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004	e24dd068	 sub         sp, sp, #0x68
  00008		 |$M48594|

; 1036 :     int i;
; 1037 :     int keyClear[KEYPAD_SIZE] = {0};

  00008	e3a03000	 mov         r3, #0
  0000c	e3a02064	 mov         r2, #0x64
  00010	e3a01000	 mov         r1, #0
  00014	e28d0004	 add         r0, sp, #4
  00018	e58d3000	 str         r3, [sp]
  0001c	eb000000	 bl          memset

; 1038 :     
; 1039 :     for(i=0; i<KEYPAD_SIZE; i++)
; 1040 :         keyStatus[i] = keyClear[i];

  00020	e59f2020	 ldr         r2, [pc, #0x20]
  00024	e28d1000	 add         r1, sp, #0
  00028	e2820068	 add         r0, r2, #0x68
  0002c		 |$LN8@clear|
  0002c	e4913004	 ldr         r3, [r1], #4
  00030	e4823004	 str         r3, [r2], #4
  00034	e1520000	 cmp         r2, r0
  00038	1afffffb	 bne         |$LN8@clear|

; 1041 : }

  0003c	e28dd068	 add         sp, sp, #0x68
  00040	e49de004	 ldr         lr, [sp], #4
  00044	e12fff1e	 bx          lr
  00048		 |$LN13@clear|
  00048		 |$LN14@clear|
  00048	00000000	 DCD         |keyStatus|
  0004c		 |$M48595|

			 ENDP  ; |clear|

	EXPORT	|KeypadMatrixStatus|

  00000			 AREA	 |.pdata|, PDATA
|$T48610| DCD	|$LN7@KeypadMatr|
	DCD	0x40000800
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |KeypadMatrixStatus| PROC

; 1045 : {

  00000		 |$LN7@KeypadMatr|
  00000		 |$M48607|

; 1046 :     //UINT8   matrix[8];
; 1047 :     int  temp=0;
; 1048 :     BOOL event = FALSE;
; 1049 :     
; 1050 :     temp = gKeypadMatrix[row] & (1<<col);
; 1051 :  
; 1052 :     if(temp)

  00000	e59f3014	 ldr         r3, [pc, #0x14]
  00004	e3a02001	 mov         r2, #1
  00008	e7d03003	 ldrb        r3, [r0, +r3]
  0000c	e1130112	 tst         r3, r2, lsl r1

; 1053 :         return event = TRUE;

  00010	13a00001	 movne       r0, #1

; 1054 :     else
; 1055 :         return event;

  00014	03a00000	 moveq       r0, #0

; 1056 : }

  00018	e12fff1e	 bx          lr
  0001c		 |$LN8@KeypadMatr|
  0001c		 |$LN9@KeypadMatr|
  0001c	00000000	 DCD         |gKeypadMatrix|
  00020		 |$M48608|

			 ENDP  ; |KeypadMatrixStatus|

	EXPORT	|KeypadFuncMatrix|
	EXPORT	|??_C@_1BO@NGPPIJDB@?$AAD?$AAo?$AAe?$AAs?$AAn?$AAt?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?4?$AA?5?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CA@PPFFLIOL@?$AA?$FL?$AAT?$AAA?$AAB?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CC@BLMOMOED@?$AA?$FL?$AAF?$AAN?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BO@IOBELGJB@?$AA?$FL?$AAS?$AAP?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BO@PDLCCPGE@?$AA?$FL?$AAF?$AA4?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BO@CLHBFEEC@?$AA?$FL?$AAF?$AA3?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BO@MMGMPCNF@?$AA?$FL?$AAF?$AA2?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BO@DODLBPCN@?$AA?$FL?$AAF?$AA1?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1O@DCFMJPNM@?$AA?$FL?$AA?$CL?$AA?9?$AA?$CK?$AA?1?$AA?$FN?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BM@JMJPJKJA@?$AA?$FL?$AA?4?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BM@FMDKDBOF@?$AA?$FL?$AA0?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1O@NNPFLPHL@?$AA?$FL?$AA9?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BO@HMPCCECM@?$AA?$AN?$AA?$FL?$AA8?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BM@IEPJEKMD@?$AA?$FL?$AA7?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BM@GDOEOMFE@?$AA?$FL?$AA6?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BM@JBLDABKM@?$AA?$FL?$AA5?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BM@HGKOKHDL@?$AA?$FL?$AA4?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BM@KOGNNMBN@?$AA?$FL?$AA3?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BM@EJHAHKIK@?$AA?$FL?$AA2?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BM@LLCHJHHC@?$AA?$FL?$AA1?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BM@CHPKNBI@?$AA?$FL?$AAR?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CA@NOOIPFOO@?$AA?$FL?$AAD?$AAO?$AAW?$AAN?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CA@GDCIMGPI@?$AA?$FL?$AAU?$AAP?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1O@GBBMEJJP@?$AA?$FL?$AAL?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CA@KEDIFEOF@?$AA?$FL?$AAB?$AAS?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BA@BDAJLGKP@?$AA?$FL?$AAE?$AAS?$AAC?$AA?$FN?$AA?5?$AA?5?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CA@NFAKNLNP@?$AA?$FL?$AAE?$AAN?$AAT?$AAR?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CA@IFNCPKIB@?$AA?$FL?$AAS?$AAC?$AAA?$AAN?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CA@MIFBMKAM@?$AA?$FL?$AAE?$AAN?$AAT?$AAL?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_13CMNBPIDO@?$AA?$AN?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|TWLReadRegs|

  00000			 AREA	 |.pdata|, PDATA
|$T48897| DCD	|$LN230@KeypadFunc|
	DCD	0x40011d02

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BO@NGPPIJDB@?$AAD?$AAo?$AAe?$AAs?$AAn?$AAt?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?4?$AA?5?$AA?$AA@| DCB "D"
	DCB	0x0, "o", 0x0, "e", 0x0, "s", 0x0, "n", 0x0, "t", 0x0, " "
	DCB	0x0, "r", 0x0, "a", 0x0, "n", 0x0, "g", 0x0, "e", 0x0, "."
	DCB	0x0, " ", 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CA@PPFFLIOL@?$AA?$FL?$AAT?$AAA?$AAB?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@| DCB "["
	DCB	0x0, "T", 0x0, "A", 0x0, "B", 0x0, "]", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CC@BLMOMOED@?$AA?$FL?$AAF?$AAN?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@| DCB "["
	DCB	0x0, "F", 0x0, "N", 0x0, "]", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, " ", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BO@IOBELGJB@?$AA?$FL?$AAS?$AAP?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@| DCB "["
	DCB	0x0, "S", 0x0, "P", 0x0, "]", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BO@PDLCCPGE@?$AA?$FL?$AAF?$AA4?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@| DCB "["
	DCB	0x0, "F", 0x0, "4", 0x0, "]", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BO@CLHBFEEC@?$AA?$FL?$AAF?$AA3?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@| DCB "["
	DCB	0x0, "F", 0x0, "3", 0x0, "]", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BO@MMGMPCNF@?$AA?$FL?$AAF?$AA2?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@| DCB "["
	DCB	0x0, "F", 0x0, "2", 0x0, "]", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BO@DODLBPCN@?$AA?$FL?$AAF?$AA1?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@| DCB "["
	DCB	0x0, "F", 0x0, "1", 0x0, "]", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1O@DCFMJPNM@?$AA?$FL?$AA?$CL?$AA?9?$AA?$CK?$AA?1?$AA?$FN?$AA?$AA@| DCB "["
	DCB	0x0, "+", 0x0, "-", 0x0, "*", 0x0, "/", 0x0, "]", 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BM@JMJPJKJA@?$AA?$FL?$AA?4?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@| DCB "["
	DCB	0x0, ".", 0x0, "]", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BM@FMDKDBOF@?$AA?$FL?$AA0?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@| DCB "["
	DCB	0x0, "0", 0x0, "]", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1O@NNPFLPHL@?$AA?$FL?$AA9?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?$AA@| DCB "["
	DCB	0x0, "9", 0x0, "]", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BO@HMPCCECM@?$AA?$AN?$AA?$FL?$AA8?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@| DCB 0xd
	DCB	0x0, "[", 0x0, "8", 0x0, "]", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BM@IEPJEKMD@?$AA?$FL?$AA7?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@| DCB "["
	DCB	0x0, "7", 0x0, "]", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BM@GDOEOMFE@?$AA?$FL?$AA6?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@| DCB "["
	DCB	0x0, "6", 0x0, "]", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BM@JBLDABKM@?$AA?$FL?$AA5?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@| DCB "["
	DCB	0x0, "5", 0x0, "]", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BM@HGKOKHDL@?$AA?$FL?$AA4?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@| DCB "["
	DCB	0x0, "4", 0x0, "]", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BM@KOGNNMBN@?$AA?$FL?$AA3?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@| DCB "["
	DCB	0x0, "3", 0x0, "]", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BM@EJHAHKIK@?$AA?$FL?$AA2?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@| DCB "["
	DCB	0x0, "2", 0x0, "]", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BM@LLCHJHHC@?$AA?$FL?$AA1?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@| DCB "["
	DCB	0x0, "1", 0x0, "]", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BM@CHPKNBI@?$AA?$FL?$AAR?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@| DCB "["
	DCB	0x0, "R", 0x0, "]", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CA@NOOIPFOO@?$AA?$FL?$AAD?$AAO?$AAW?$AAN?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@| DCB "["
	DCB	0x0, "D", 0x0, "O", 0x0, "W", 0x0, "N", 0x0, "]", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CA@GDCIMGPI@?$AA?$FL?$AAU?$AAP?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@| DCB "["
	DCB	0x0, "U", 0x0, "P", 0x0, "]", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1O@GBBMEJJP@?$AA?$FL?$AAL?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?$AA@| DCB "["
	DCB	0x0, "L", 0x0, "]", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CA@KEDIFEOF@?$AA?$FL?$AAB?$AAS?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@| DCB "["
	DCB	0x0, "B", 0x0, "S", 0x0, "]", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BA@BDAJLGKP@?$AA?$FL?$AAE?$AAS?$AAC?$AA?$FN?$AA?5?$AA?5?$AA?$AA@| DCB "["
	DCB	0x0, "E", 0x0, "S", 0x0, "C", 0x0, "]", 0x0, " ", 0x0, " "
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CA@NFAKNLNP@?$AA?$FL?$AAE?$AAN?$AAT?$AAR?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@| DCB "["
	DCB	0x0, "E", 0x0, "N", 0x0, "T", 0x0, "R", 0x0, "]", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CA@IFNCPKIB@?$AA?$FL?$AAS?$AAC?$AAA?$AAN?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@| DCB "["
	DCB	0x0, "S", 0x0, "C", 0x0, "A", 0x0, "N", 0x0, "]", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CA@MIFBMKAM@?$AA?$FL?$AAE?$AAN?$AAT?$AAL?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@| DCB "["
	DCB	0x0, "E", 0x0, "N", 0x0, "T", 0x0, "L", 0x0, "]", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_13CMNBPIDO@?$AA?$AN?$AA?$AA@| DCB 0xd, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |KeypadFuncMatrix| PROC

; 1060 : {

  00000		 |$LN230@KeypadFunc|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004	e24dd068	 sub         sp, sp, #0x68
  00008		 |$M48894|

; 1061 :     ULONG   ik, ix, row, column;
; 1062 :     USHORT  state=0;
; 1063 :     int     k, entry, keyAction = 0; 
; 1064 :     BOOL    EXIT = FALSE;
; 1065 :     static int count = 26;
; 1066 :     
; 1067 :     /*static int  ENTL=0, SCAN=0, ENTR=0, ESC=0, BS=0, L=0,
; 1068 :                 U=0, D=0, R=0, ONE=0, TWO=0, THREE=0, 
; 1069 :                 FOUR=0, FIVE=0, SIX=0, SEVEN=0, NINE=0, ZERO=0,
; 1070 :                 DOT=0, PLUS=0, F1=0, F2=0, F4=0, SP=0, FN=0, TAB=0;*/
; 1071 :     
; 1072 :     //BOOL    ENTL=FALSE, SCAN=FALSE, ENTR=FALSE, ESC=FALSE;
; 1073 :                  
; 1074 :     //printing matrix array, Ray
; 1075 :     //for(;;){                   
; 1076 :         //for(ik=0; ik<3; ik++)
; 1077 :         //{
; 1078 :         TWLReadRegs(ghTwl, TWL_LOGADDR_FULL_CODE_7_0, gKeypadMatrix, sizeof(gKeypadMatrix));  //it is function read value, Ray 140103   

  00008	e59f3460	 ldr         r3, [pc, #0x460]
  0000c	e59f5458	 ldr         r5, [pc, #0x458]
  00010	e3a010db	 mov         r1, #0xDB
  00014	e5930000	 ldr         r0, [r3]
  00018	e3a03008	 mov         r3, #8
  0001c	e1a02005	 mov         r2, r5
  00020	e24118fe	 sub         r1, r1, #0xFE, 16
  00024	e3a04000	 mov         r4, #0
  00028	eb000000	 bl          TWLReadRegs

; 1079 :         //OALLog(L" %d\r\n",sizeof(gKeypadMatrix));         //8
; 1080 :         
; 1081 :         /*OALLog(L" HotKeyFunction: matrix  ");
; 1082 :             for(ix=0; ix<8; ix++)
; 1083 :                  OALLog(L"[%d]", matrix[ix]);
; 1084 :             OALLog(L"\r\n");      
; 1085 :         }*/
; 1086 :         for(row=0, ik=0; row<8; row++)

  0002c	e3a02000	 mov         r2, #0
  00030	e3a00001	 mov         r0, #1
  00034		 |$LL69@KeypadFunc|

; 1087 :         {
; 1088 :             // Get matrix state 
; 1089 :             ix = row;
; 1090 :             state = gKeypadMatrix[ix] & 0xFF;     

  00034	e7d21005	 ldrb        r1, [r2, +r5]

; 1091 :             //OALLog(L"1%d\n",state);
; 1092 :             // If no-key is pressed continue with new rows
; 1093 :             if(state == 0)

  00038	e3510000	 cmp         r1, #0
  0003c	0a000005	 beq         |$LN68@KeypadFunc|

; 1094 :             {
; 1095 :                 ik += 8;
; 1096 :                 continue;           //if state event desnot 
; 1097 :             }
; 1098 :             
; 1099 :             for(column=0; column<8; column++, ik++)

  00040	e3a03000	 mov         r3, #0
  00044		 |$LL65@KeypadFunc|

; 1100 :             {
; 1101 :                 if((state & (1<<column)) !=0 ){

  00044	e1110310	 tst         r1, r0, lsl r3
  00048	e2833001	 add         r3, r3, #1

; 1102 :                     //RETAILMSG(TRUE, (L" HotKeyFunction: [%d,%d]\r\n",row ,column));
; 1103 :                     keyAction = 1;          //has values active

  0004c	13a04001	 movne       r4, #1
  00050	e3530008	 cmp         r3, #8
  00054	3afffffa	 bcc         |$LL65@KeypadFunc|
  00058		 |$LN68@KeypadFunc|

; 1079 :         //OALLog(L" %d\r\n",sizeof(gKeypadMatrix));         //8
; 1080 :         
; 1081 :         /*OALLog(L" HotKeyFunction: matrix  ");
; 1082 :             for(ix=0; ix<8; ix++)
; 1083 :                  OALLog(L"[%d]", matrix[ix]);
; 1084 :             OALLog(L"\r\n");      
; 1085 :         }*/
; 1086 :         for(row=0, ik=0; row<8; row++)

  00058	e2822001	 add         r2, r2, #1
  0005c	e3520008	 cmp         r2, #8
  00060	3afffff3	 bcc         |$LL69@KeypadFunc|

; 1104 :                     //OALLog(L"2%d\n",state);
; 1105 :                 }
; 1106 :             }
; 1107 :         }
; 1108 :     //}   
; 1109 :      
; 1110 :     if(keyAction){

  00064	e3540000	 cmp         r4, #0
  00068	0a0000dc	 beq         |$LN1@KeypadFunc|

; 1111 :         //OALLog(L"keyAction:%d\n",keyAction);
; 1112 :         OALLog(L"\r");

  0006c	e59f03f4	 ldr         r0, [pc, #0x3F4]
  00070	eb000000	 bl          NKDbgPrintfW
  00074	e5d53000	 ldrb        r3, [r5]

; 1113 :         if( KeypadMatrixStatus(0, 5)){

  00078	e59f43e4	 ldr         r4, [pc, #0x3E4]
  0007c	e3130020	 tst         r3, #0x20
  00080	0a000004	 beq         |$LN60@KeypadFunc|

; 1114 :             OALLog(L"[ENTL]         ");

  00084	e59f03d4	 ldr         r0, [pc, #0x3D4]
  00088	eb000000	 bl          NKDbgPrintfW

; 1115 :             keyStatus[0]=1;

  0008c	e3a03001	 mov         r3, #1
  00090	e5843000	 str         r3, [r4]
  00094	ea0000ba	 b           |$LN5@KeypadFunc|
  00098		 |$LN60@KeypadFunc|

; 1116 :             //count = count++;
; 1117 :             //ENTL = 1;
; 1118 :         }else if( KeypadMatrixStatus(0, 4)){    //trouble

  00098	e3130010	 tst         r3, #0x10
  0009c	0a000004	 beq         |$LN58@KeypadFunc|

; 1119 :             OALLog(L"[SCAN]         ");

  000a0	e59f03b4	 ldr         r0, [pc, #0x3B4]
  000a4	eb000000	 bl          NKDbgPrintfW

; 1120 :             keyStatus[1]=1;

  000a8	e3a03001	 mov         r3, #1
  000ac	e5843004	 str         r3, [r4, #4]
  000b0	ea0000b3	 b           |$LN5@KeypadFunc|
  000b4		 |$LN58@KeypadFunc|

; 1121 :             //count = count-1;
; 1122 :             //SCAN = 1;
; 1123 :         }else if( KeypadMatrixStatus(0, 2)){

  000b4	e3130004	 tst         r3, #4
  000b8	0a000004	 beq         |$LN56@KeypadFunc|

; 1124 :             OALLog(L"[ENTR]         ");

  000bc	e59f0394	 ldr         r0, [pc, #0x394]
  000c0	eb000000	 bl          NKDbgPrintfW

; 1125 :             keyStatus[2]=1;

  000c4	e3a03001	 mov         r3, #1
  000c8	e5843008	 str         r3, [r4, #8]
  000cc	ea0000ac	 b           |$LN5@KeypadFunc|
  000d0		 |$LN56@KeypadFunc|

; 1126 :             //count = count-1;
; 1127 :             //ENTR = 1;
; 1128 :         }else if( KeypadMatrixStatus(0, 1)){

  000d0	e3130002	 tst         r3, #2
  000d4	0a000004	 beq         |$LN54@KeypadFunc|

; 1129 :             OALLog(L"[ESC]  ");

  000d8	e59f0374	 ldr         r0, [pc, #0x374]
  000dc	eb000000	 bl          NKDbgPrintfW

; 1130 :             keyStatus[3]=1;

  000e0	e3a03001	 mov         r3, #1
  000e4	e584300c	 str         r3, [r4, #0xC]
  000e8	ea0000a5	 b           |$LN5@KeypadFunc|
  000ec		 |$LN54@KeypadFunc|

; 1131 :            //ESC = 1;
; 1132 :         }else if( KeypadMatrixStatus(0, 3)){

  000ec	e3130008	 tst         r3, #8
  000f0	0a000004	 beq         |$LN52@KeypadFunc|

; 1133 :             OALLog(L"[BS]           ");

  000f4	e59f0354	 ldr         r0, [pc, #0x354]
  000f8	eb000000	 bl          NKDbgPrintfW

; 1134 :             keyStatus[4]=1;

  000fc	e3a03001	 mov         r3, #1
  00100	e5843010	 str         r3, [r4, #0x10]
  00104	ea00009e	 b           |$LN5@KeypadFunc|
  00108		 |$LN52@KeypadFunc|
  00108	e5d53001	 ldrb        r3, [r5, #1]

; 1135 :             //BS = 1;
; 1136 :         }else if( KeypadMatrixStatus(1, 5)){

  0010c	e3130020	 tst         r3, #0x20
  00110	0a000004	 beq         |$LN50@KeypadFunc|

; 1137 :             OALLog(L"[L]   ");

  00114	e59f0330	 ldr         r0, [pc, #0x330]
  00118	eb000000	 bl          NKDbgPrintfW

; 1138 :             keyStatus[5]=1;

  0011c	e3a03001	 mov         r3, #1
  00120	e5843014	 str         r3, [r4, #0x14]
  00124	ea000096	 b           |$LN5@KeypadFunc|
  00128		 |$LN50@KeypadFunc|

; 1139 :             //L = 1;
; 1140 :         }else if( KeypadMatrixStatus(1, 4)){

  00128	e3130010	 tst         r3, #0x10
  0012c	0a000004	 beq         |$LN48@KeypadFunc|

; 1141 :             OALLog(L"[UP]           ");

  00130	e59f0310	 ldr         r0, [pc, #0x310]
  00134	eb000000	 bl          NKDbgPrintfW

; 1142 :             keyStatus[6]=1;

  00138	e3a03001	 mov         r3, #1
  0013c	e5843018	 str         r3, [r4, #0x18]
  00140	ea00008f	 b           |$LN5@KeypadFunc|
  00144		 |$LN48@KeypadFunc|

; 1143 :             //U = 1;
; 1144 :         }else if( KeypadMatrixStatus(1, 0)){

  00144	e3130001	 tst         r3, #1
  00148	0a000004	 beq         |$LN46@KeypadFunc|

; 1145 :             OALLog(L"[DOWN]         ");

  0014c	e59f02f0	 ldr         r0, [pc, #0x2F0]
  00150	eb000000	 bl          NKDbgPrintfW

; 1146 :             keyStatus[7]=1;

  00154	e3a03001	 mov         r3, #1
  00158	e584301c	 str         r3, [r4, #0x1C]
  0015c	ea000088	 b           |$LN5@KeypadFunc|
  00160		 |$LN46@KeypadFunc|

; 1147 :             //D = 1;
; 1148 :         }else if( KeypadMatrixStatus(1, 2)){

  00160	e3130004	 tst         r3, #4
  00164	0a000004	 beq         |$LN44@KeypadFunc|

; 1149 :             OALLog(L"[R]          ");

  00168	e59f02d0	 ldr         r0, [pc, #0x2D0]
  0016c	eb000000	 bl          NKDbgPrintfW

; 1150 :             keyStatus[8]=1;

  00170	e3a03001	 mov         r3, #1
  00174	e5843020	 str         r3, [r4, #0x20]
  00178	ea000081	 b           |$LN5@KeypadFunc|
  0017c		 |$LN44@KeypadFunc|
  0017c	e5d52002	 ldrb        r2, [r5, #2]

; 1151 :             //R = 1;
; 1152 :         }else if( KeypadMatrixStatus(2, 5)){

  00180	e3120020	 tst         r2, #0x20
  00184	0a000004	 beq         |$LN42@KeypadFunc|

; 1153 :             OALLog(L"[1]          ");

  00188	e59f02ac	 ldr         r0, [pc, #0x2AC]
  0018c	eb000000	 bl          NKDbgPrintfW

; 1154 :             keyStatus[9]=1;

  00190	e3a03001	 mov         r3, #1
  00194	e5843024	 str         r3, [r4, #0x24]
  00198	ea000079	 b           |$LN5@KeypadFunc|
  0019c		 |$LN42@KeypadFunc|

; 1155 :             //ONE = 1;
; 1156 :         }else if( KeypadMatrixStatus(1, 1)){

  0019c	e3130002	 tst         r3, #2
  001a0	0a000004	 beq         |$LN40@KeypadFunc|

; 1157 :             OALLog(L"[2]          ");

  001a4	e59f028c	 ldr         r0, [pc, #0x28C]
  001a8	eb000000	 bl          NKDbgPrintfW

; 1158 :             keyStatus[10]=1;

  001ac	e3a03001	 mov         r3, #1
  001b0	e5843028	 str         r3, [r4, #0x28]
  001b4	ea000072	 b           |$LN5@KeypadFunc|
  001b8		 |$LN40@KeypadFunc|

; 1159 :             //TWO = 1;
; 1160 :         }else if( KeypadMatrixStatus(1, 3)){

  001b8	e3130008	 tst         r3, #8
  001bc	0a000004	 beq         |$LN38@KeypadFunc|

; 1161 :             OALLog(L"[3]          ");

  001c0	e59f026c	 ldr         r0, [pc, #0x26C]
  001c4	eb000000	 bl          NKDbgPrintfW

; 1162 :             keyStatus[11]=1;

  001c8	e3a03001	 mov         r3, #1
  001cc	e584302c	 str         r3, [r4, #0x2C]
  001d0	ea00006b	 b           |$LN5@KeypadFunc|
  001d4		 |$LN38@KeypadFunc|

; 1163 :             //THREE = 1;
; 1164 :         }else if( KeypadMatrixStatus(2, 1)){

  001d4	e3120002	 tst         r2, #2
  001d8	0a000004	 beq         |$LN36@KeypadFunc|

; 1165 :             OALLog(L"[4]          ");

  001dc	e59f024c	 ldr         r0, [pc, #0x24C]
  001e0	eb000000	 bl          NKDbgPrintfW

; 1166 :             keyStatus[12]=1;

  001e4	e3a03001	 mov         r3, #1
  001e8	e5843030	 str         r3, [r4, #0x30]
  001ec	ea000064	 b           |$LN5@KeypadFunc|
  001f0		 |$LN36@KeypadFunc|

; 1167 :             //FOUR = 1;
; 1168 :         }else if( KeypadMatrixStatus(2, 4)){

  001f0	e3120010	 tst         r2, #0x10
  001f4	0a000004	 beq         |$LN34@KeypadFunc|

; 1169 :             OALLog(L"[5]          ");

  001f8	e59f022c	 ldr         r0, [pc, #0x22C]
  001fc	eb000000	 bl          NKDbgPrintfW

; 1170 :             keyStatus[13]=1;

  00200	e3a03001	 mov         r3, #1
  00204	e5843034	 str         r3, [r4, #0x34]
  00208	ea00005d	 b           |$LN5@KeypadFunc|
  0020c		 |$LN34@KeypadFunc|

; 1171 :             //FIVE = 1;
; 1172 :         }else if( KeypadMatrixStatus(2, 3)){

  0020c	e3120008	 tst         r2, #8
  00210	0a000004	 beq         |$LN32@KeypadFunc|

; 1173 :             OALLog(L"[6]          ");

  00214	e59f020c	 ldr         r0, [pc, #0x20C]
  00218	eb000000	 bl          NKDbgPrintfW

; 1174 :             keyStatus[14]=1;

  0021c	e3a03001	 mov         r3, #1
  00220	e5843038	 str         r3, [r4, #0x38]
  00224	ea000056	 b           |$LN5@KeypadFunc|
  00228		 |$LN32@KeypadFunc|
  00228	e5d53003	 ldrb        r3, [r5, #3]

; 1175 :             //SIX = 1;
; 1176 :         }else if( KeypadMatrixStatus(3, 5)){

  0022c	e3130020	 tst         r3, #0x20
  00230	0a000004	 beq         |$LN30@KeypadFunc|

; 1177 :             OALLog(L"[7]          ");

  00234	e59f01e8	 ldr         r0, [pc, #0x1E8]
  00238	eb000000	 bl          NKDbgPrintfW

; 1178 :             keyStatus[15]=1;

  0023c	e3a03001	 mov         r3, #1
  00240	e584303c	 str         r3, [r4, #0x3C]
  00244	ea00004e	 b           |$LN5@KeypadFunc|
  00248		 |$LN30@KeypadFunc|

; 1179 :             //SEVEN = 1;
; 1180 :         }else if( KeypadMatrixStatus(2, 0))

  00248	e3120001	 tst         r2, #1

; 1181 :             OALLog(L"\r[8]          ");

  0024c	159f01cc	 ldrne       r0, [pc, #0x1CC]
  00250	1a00004a	 bne         |$LN227@KeypadFunc|

; 1182 :             //EIGHT = 1
; 1183 :         else if( KeypadMatrixStatus(2, 2)){

  00254	e3120004	 tst         r2, #4
  00258	0a000004	 beq         |$LN26@KeypadFunc|

; 1184 :             OALLog(L"[9]   ");

  0025c	e59f01b8	 ldr         r0, [pc, #0x1B8]
  00260	eb000000	 bl          NKDbgPrintfW

; 1185 :             keyStatus[16]=1;

  00264	e3a03001	 mov         r3, #1
  00268	e5843040	 str         r3, [r4, #0x40]
  0026c	ea000044	 b           |$LN5@KeypadFunc|
  00270		 |$LN26@KeypadFunc|

; 1186 :             //NINE = 1;
; 1187 :         }else if( KeypadMatrixStatus(3, 4)){

  00270	e3130010	 tst         r3, #0x10
  00274	0a000004	 beq         |$LN24@KeypadFunc|

; 1188 :             OALLog(L"[0]          ");

  00278	e59f0198	 ldr         r0, [pc, #0x198]
  0027c	eb000000	 bl          NKDbgPrintfW

; 1189 :             keyStatus[17]=1;

  00280	e3a03001	 mov         r3, #1
  00284	e5843044	 str         r3, [r4, #0x44]
  00288	ea00003d	 b           |$LN5@KeypadFunc|
  0028c		 |$LN24@KeypadFunc|

; 1190 :             //ZERO = 1;
; 1191 :         }else if( KeypadMatrixStatus(3, 1)){

  0028c	e3130002	 tst         r3, #2
  00290	0a000004	 beq         |$LN22@KeypadFunc|

; 1192 :             OALLog(L"[.]          ");

  00294	e59f0178	 ldr         r0, [pc, #0x178]
  00298	eb000000	 bl          NKDbgPrintfW

; 1193 :             keyStatus[18]=1;

  0029c	e3a03001	 mov         r3, #1
  002a0	e5843048	 str         r3, [r4, #0x48]
  002a4	ea000036	 b           |$LN5@KeypadFunc|
  002a8		 |$LN22@KeypadFunc|
  002a8	e5d52004	 ldrb        r2, [r5, #4]

; 1194 :             //DOT = 1;
; 1195 :         }else if( KeypadMatrixStatus(4, 1)){

  002ac	e3120002	 tst         r2, #2
  002b0	0a000004	 beq         |$LN20@KeypadFunc|

; 1196 :             OALLog(L"[+-*/]");

  002b4	e59f0154	 ldr         r0, [pc, #0x154]
  002b8	eb000000	 bl          NKDbgPrintfW

; 1197 :             keyStatus[19]=1;

  002bc	e3a03001	 mov         r3, #1
  002c0	e584304c	 str         r3, [r4, #0x4C]
  002c4	ea00002e	 b           |$LN5@KeypadFunc|
  002c8		 |$LN20@KeypadFunc|

; 1198 :             //PLUS = 1;
; 1199 :         }else if( KeypadMatrixStatus(3, 3)){

  002c8	e3130008	 tst         r3, #8
  002cc	0a000004	 beq         |$LN18@KeypadFunc|

; 1200 :             OALLog(L"[F1]          ");

  002d0	e59f0134	 ldr         r0, [pc, #0x134]
  002d4	eb000000	 bl          NKDbgPrintfW

; 1201 :             keyStatus[20]=1;

  002d8	e3a03001	 mov         r3, #1
  002dc	e5843050	 str         r3, [r4, #0x50]
  002e0	ea000027	 b           |$LN5@KeypadFunc|
  002e4		 |$LN18@KeypadFunc|

; 1202 :             //F1 = 1;
; 1203 :         }else if( KeypadMatrixStatus(4, 3)){

  002e4	e3120008	 tst         r2, #8
  002e8	0a000004	 beq         |$LN16@KeypadFunc|

; 1204 :             OALLog(L"[F2]          ");

  002ec	e59f0114	 ldr         r0, [pc, #0x114]
  002f0	eb000000	 bl          NKDbgPrintfW

; 1205 :             keyStatus[21]=1;

  002f4	e3a03001	 mov         r3, #1
  002f8	e5843054	 str         r3, [r4, #0x54]
  002fc	ea000020	 b           |$LN5@KeypadFunc|
  00300		 |$LN16@KeypadFunc|

; 1206 :             //F2 = 1;
; 1207 :         }else if( KeypadMatrixStatus(3, 0)){

  00300	e3130001	 tst         r3, #1

; 1208 :             OALLog(L"[F3]          ");

  00304	159f00f8	 ldrne       r0, [pc, #0xF8]
  00308	1a00001c	 bne         |$LN227@KeypadFunc|

; 1209 :             //F3 = 1;
; 1210 :         }else if( KeypadMatrixStatus(3, 2)){

  0030c	e3130004	 tst         r3, #4
  00310	0a000004	 beq         |$LN12@KeypadFunc|

; 1211 :             OALLog(L"[F4]          ");

  00314	e59f00e4	 ldr         r0, [pc, #0xE4]
  00318	eb000000	 bl          NKDbgPrintfW

; 1212 :             keyStatus[22]=1;

  0031c	e3a03001	 mov         r3, #1
  00320	e5843058	 str         r3, [r4, #0x58]
  00324	ea000016	 b           |$LN5@KeypadFunc|
  00328		 |$LN12@KeypadFunc|

; 1213 :             //F4 = 1;
; 1214 :         }else if( KeypadMatrixStatus(4, 2)){

  00328	e3120004	 tst         r2, #4
  0032c	0a000004	 beq         |$LN10@KeypadFunc|

; 1215 :             OALLog(L"[SP]          ");

  00330	e59f00c4	 ldr         r0, [pc, #0xC4]
  00334	eb000000	 bl          NKDbgPrintfW

; 1216 :             keyStatus[23]=1;

  00338	e3a03001	 mov         r3, #1
  0033c	e584305c	 str         r3, [r4, #0x5C]
  00340	ea00000f	 b           |$LN5@KeypadFunc|
  00344		 |$LN10@KeypadFunc|

; 1217 :             //SP = 1;
; 1218 :         }else if( KeypadMatrixStatus(4, 4)){

  00344	e3120010	 tst         r2, #0x10
  00348	0a000004	 beq         |$LN8@KeypadFunc|

; 1219 :             OALLog(L"[FN]            ");

  0034c	e59f00a4	 ldr         r0, [pc, #0xA4]
  00350	eb000000	 bl          NKDbgPrintfW

; 1220 :             keyStatus[24]=1;

  00354	e3a03001	 mov         r3, #1
  00358	e5843060	 str         r3, [r4, #0x60]
  0035c	ea000008	 b           |$LN5@KeypadFunc|
  00360		 |$LN8@KeypadFunc|

; 1221 :             //FN = 1;
; 1222 :         }else if( KeypadMatrixStatus(4, 5)){    //KeypadMatrixStatus(4, 5)

  00360	e3120020	 tst         r2, #0x20
  00364	0a000004	 beq         |$LN6@KeypadFunc|

; 1223 :             OALLog(L"[TAB]          ");

  00368	e59f0084	 ldr         r0, [pc, #0x84]
  0036c	eb000000	 bl          NKDbgPrintfW

; 1224 :             keyStatus[25]=1;

  00370	e3a03001	 mov         r3, #1
  00374	e5843064	 str         r3, [r4, #0x64]

; 1225 :             //TAB = 1;
; 1226 :         }else{

  00378	ea000001	 b           |$LN5@KeypadFunc|
  0037c		 |$LN6@KeypadFunc|

; 1227 :             OALLog(L"Doesnt range. ");

  0037c	e59f006c	 ldr         r0, [pc, #0x6C]
  00380		 |$LN227@KeypadFunc|
  00380	eb000000	 bl          NKDbgPrintfW
  00384		 |$LN5@KeypadFunc|

; 1228 :         }
; 1229 :       
; 1230 :         for(k=0, entry=1; k<KEYPAD_SIZE; k++){

  00384	e3a02001	 mov         r2, #1
  00388	e1a01004	 mov         r1, r4
  0038c	e3a0001a	 mov         r0, #0x1A
  00390		 |$LL4@KeypadFunc|

; 1231 :             entry &= keyStatus[k];         

  00390	e4913004	 ldr         r3, [r1], #4
  00394	e2500001	 subs        r0, r0, #1
  00398	e0022003	 and         r2, r2, r3
  0039c	1afffffb	 bne         |$LL4@KeypadFunc|

; 1232 :         }
; 1233 : 
; 1234 :         if(entry){

  003a0	e3520000	 cmp         r2, #0
  003a4	0a00000d	 beq         |$LN1@KeypadFunc|

; 1235 :             clear();

  003a8	e3a03000	 mov         r3, #0
  003ac	e3a02064	 mov         r2, #0x64
  003b0	e3a01000	 mov         r1, #0
  003b4	e28d0004	 add         r0, sp, #4
  003b8	e58d3000	 str         r3, [sp]
  003bc	eb000000	 bl          memset
  003c0	e28d2000	 add         r2, sp, #0
  003c4	e2841068	 add         r1, r4, #0x68
  003c8		 |$LN225@KeypadFunc|
  003c8	e4923004	 ldr         r3, [r2], #4
  003cc	e4843004	 str         r3, [r4], #4
  003d0	e1540001	 cmp         r4, r1
  003d4	1afffffb	 bne         |$LN225@KeypadFunc|

; 1236 :             return EXIT = TRUE;

  003d8	e3a00001	 mov         r0, #1
  003dc	ea000000	 b           |$LN70@KeypadFunc|
  003e0		 |$LN1@KeypadFunc|

; 1237 :         }      
; 1238 :     }
; 1239 : 
; 1240 :     /*count--;
; 1241 :     if(count == 0)
; 1242 :         count = 26;*/
; 1243 : 
; 1244 :     /*OALLog(L"%d\n",keyStatus[0]);
; 1245 :     OALLog(L"%d\n",*(keyStatus+1));
; 1246 :     OALLog(L"%d\n",*(keyStatus+2));
; 1247 :     OALLog(L"%d\n",*(keyStatus+3));*/
; 1248 :       
; 1249 :     return EXIT;

  003e0	e3a00000	 mov         r0, #0
  003e4		 |$LN70@KeypadFunc|

; 1250 : }

  003e4	e28dd068	 add         sp, sp, #0x68
  003e8	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  003ec	e12fff1e	 bx          lr
  003f0		 |$LN231@KeypadFunc|
  003f0		 |$LN232@KeypadFunc|
  003f0	00000000	 DCD         |??_C@_1BO@NGPPIJDB@?$AAD?$AAo?$AAe?$AAs?$AAn?$AAt?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?4?$AA?5?$AA?$AA@|
  003f4		 |$LN233@KeypadFunc|
  003f4	00000000	 DCD         |??_C@_1CA@PPFFLIOL@?$AA?$FL?$AAT?$AAA?$AAB?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@|
  003f8		 |$LN234@KeypadFunc|
  003f8	00000000	 DCD         |??_C@_1CC@BLMOMOED@?$AA?$FL?$AAF?$AAN?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@|
  003fc		 |$LN235@KeypadFunc|
  003fc	00000000	 DCD         |??_C@_1BO@IOBELGJB@?$AA?$FL?$AAS?$AAP?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@|
  00400		 |$LN236@KeypadFunc|
  00400	00000000	 DCD         |??_C@_1BO@PDLCCPGE@?$AA?$FL?$AAF?$AA4?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@|
  00404		 |$LN237@KeypadFunc|
  00404	00000000	 DCD         |??_C@_1BO@CLHBFEEC@?$AA?$FL?$AAF?$AA3?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@|
  00408		 |$LN238@KeypadFunc|
  00408	00000000	 DCD         |??_C@_1BO@MMGMPCNF@?$AA?$FL?$AAF?$AA2?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@|
  0040c		 |$LN239@KeypadFunc|
  0040c	00000000	 DCD         |??_C@_1BO@DODLBPCN@?$AA?$FL?$AAF?$AA1?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@|
  00410		 |$LN240@KeypadFunc|
  00410	00000000	 DCD         |??_C@_1O@DCFMJPNM@?$AA?$FL?$AA?$CL?$AA?9?$AA?$CK?$AA?1?$AA?$FN?$AA?$AA@|
  00414		 |$LN241@KeypadFunc|
  00414	00000000	 DCD         |??_C@_1BM@JMJPJKJA@?$AA?$FL?$AA?4?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@|
  00418		 |$LN242@KeypadFunc|
  00418	00000000	 DCD         |??_C@_1BM@FMDKDBOF@?$AA?$FL?$AA0?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@|
  0041c		 |$LN243@KeypadFunc|
  0041c	00000000	 DCD         |??_C@_1O@NNPFLPHL@?$AA?$FL?$AA9?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?$AA@|
  00420		 |$LN244@KeypadFunc|
  00420	00000000	 DCD         |??_C@_1BO@HMPCCECM@?$AA?$AN?$AA?$FL?$AA8?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@|
  00424		 |$LN245@KeypadFunc|
  00424	00000000	 DCD         |??_C@_1BM@IEPJEKMD@?$AA?$FL?$AA7?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@|
  00428		 |$LN246@KeypadFunc|
  00428	00000000	 DCD         |??_C@_1BM@GDOEOMFE@?$AA?$FL?$AA6?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@|
  0042c		 |$LN247@KeypadFunc|
  0042c	00000000	 DCD         |??_C@_1BM@JBLDABKM@?$AA?$FL?$AA5?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@|
  00430		 |$LN248@KeypadFunc|
  00430	00000000	 DCD         |??_C@_1BM@HGKOKHDL@?$AA?$FL?$AA4?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@|
  00434		 |$LN249@KeypadFunc|
  00434	00000000	 DCD         |??_C@_1BM@KOGNNMBN@?$AA?$FL?$AA3?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@|
  00438		 |$LN250@KeypadFunc|
  00438	00000000	 DCD         |??_C@_1BM@EJHAHKIK@?$AA?$FL?$AA2?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@|
  0043c		 |$LN251@KeypadFunc|
  0043c	00000000	 DCD         |??_C@_1BM@LLCHJHHC@?$AA?$FL?$AA1?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@|
  00440		 |$LN252@KeypadFunc|
  00440	00000000	 DCD         |??_C@_1BM@CHPKNBI@?$AA?$FL?$AAR?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@|
  00444		 |$LN253@KeypadFunc|
  00444	00000000	 DCD         |??_C@_1CA@NOOIPFOO@?$AA?$FL?$AAD?$AAO?$AAW?$AAN?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@|
  00448		 |$LN254@KeypadFunc|
  00448	00000000	 DCD         |??_C@_1CA@GDCIMGPI@?$AA?$FL?$AAU?$AAP?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@|
  0044c		 |$LN255@KeypadFunc|
  0044c	00000000	 DCD         |??_C@_1O@GBBMEJJP@?$AA?$FL?$AAL?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?$AA@|
  00450		 |$LN256@KeypadFunc|
  00450	00000000	 DCD         |??_C@_1CA@KEDIFEOF@?$AA?$FL?$AAB?$AAS?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@|
  00454		 |$LN257@KeypadFunc|
  00454	00000000	 DCD         |??_C@_1BA@BDAJLGKP@?$AA?$FL?$AAE?$AAS?$AAC?$AA?$FN?$AA?5?$AA?5?$AA?$AA@|
  00458		 |$LN258@KeypadFunc|
  00458	00000000	 DCD         |??_C@_1CA@NFAKNLNP@?$AA?$FL?$AAE?$AAN?$AAT?$AAR?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@|
  0045c		 |$LN259@KeypadFunc|
  0045c	00000000	 DCD         |??_C@_1CA@IFNCPKIB@?$AA?$FL?$AAS?$AAC?$AAA?$AAN?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@|
  00460		 |$LN260@KeypadFunc|
  00460	00000000	 DCD         |??_C@_1CA@MIFBMKAM@?$AA?$FL?$AAE?$AAN?$AAT?$AAL?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@|
  00464		 |$LN261@KeypadFunc|
  00464	00000000	 DCD         |keyStatus|
  00468		 |$LN262@KeypadFunc|
  00468	00000000	 DCD         |??_C@_13CMNBPIDO@?$AA?$AN?$AA?$AA@|
  0046c		 |$LN263@KeypadFunc|
  0046c	00000000	 DCD         |gKeypadMatrix|
  00470		 |$LN264@KeypadFunc|
  00470	00000000	 DCD         |ghTwl|
  00474		 |$M48895|

			 ENDP  ; |KeypadFuncMatrix|

	EXPORT	|??_C@_1CE@OGAGBDBI@?$AA?$AN?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?5?$AAB?$AAr?$AAe?$AAa?$AAk?$AA?$CB?$AA?$CB?$AA?5?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CC@JNFCCOBJ@?$AA?$AN?$AA?5?$AAT?$AAe?$AAs?$AAt?$AAe?$AAd?$AA?5?$AAo?$AAk?$AA?$CB?$AA?$CB?$AA?5?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_13LBAGMAIH@?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DA@HKDIMIAG@?$AA?$AN?$AA?5?$AA?$FL?$AAP?$AAW?$AAR?$AA?$FN?$AA?$FL?$AAT?$AAA?$AAB?$AA?$FN?$AA?$FL?$AAF?$AAN?$AA?$FN?$AA?$FL?$AAS?$AAP?$AA?$FN?$AA?5?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HO@EOHCFJB@?$AA?$AN?$AA?5?$AAP?$AAr?$AAe?$AAs?$AAs?$AA?5?$AAa?$AAn?$AAy?$AA?5?$AAk?$AAe?$AAy?$AA?5?$AAt?$AAh?$AAe?$AA?5?$AAk?$AAe?$AAy?$AAp?$AAa?$AAd?$AA?5?$AAt?$AAe?$AAs?$AAt?$AAi@| [ DATA ] ; `string'
	EXPORT	|??_C@_15OJKDPEFE@?$AA?5?$AA?5?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1M@EBPDEGHE@?$AA?$FL?$AAF?$AA?$CF?$AAd?$AA?$FN?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CO@MODKIPFA@?$AA?$AN?$AA?5?$AA?$FL?$AA?5?$AA?4?$AA?5?$AA?$FN?$AA?5?$AA?$FL?$AA?5?$AA0?$AA?5?$AA?$FN?$AA?5?$AA?$FL?$AA?$CL?$AA?9?$AA?$CK?$AA?1?$AA?$FN?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_13HOIJIPNN@?$AA?5?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BA@ILEOOHEJ@?$AA?5?$AA?5?$AA?5?$AA?$FL?$AA?$CF?$AAd?$AA?$FN?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CO@IJDKLNIK@?$AAK?$AAe?$AAy?$AAp?$AAa?$AAd?$AA?5?$AAF?$AAu?$AAn?$AAc?$AAt?$AAi?$AAo?$AAn?$AAa?$AAl?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CO@IOKPGCGC@?$AA?$AN?$AA?5?$AA?$FL?$AAE?$AAN?$AAT?$AA?$FN?$AA?5?$AA?$FL?$AAS?$AAC?$AAA?$AAN?$AA?$FN?$AA?5?$AA?$FL?$AAE?$AAN?$AAT?$AA?$FN?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CO@IPBDPNGH@?$AA?$AN?$AA?5?$AA?$FL?$AAE?$AAS?$AAC?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$FL?$AAB?$AAS?$AA?$FN?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CO@EGBJCCJE@?$AA?$AN?$AA?5?$AA?$FL?$AAL?$AA?$FN?$AA?5?$AA?$FL?$AAU?$AAP?$AA?$FN?$AA?$FL?$AAD?$AAO?$AAW?$AAN?$AA?$FN?$AA?5?$AA?$FL?$AAR?$AA?$FN?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T48967| DCD	|$LN33@KeypadFunc@2|
	DCD	0x40005a01

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CE@OGAGBDBI@?$AA?$AN?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?5?$AAB?$AAr?$AAe?$AAa?$AAk?$AA?$CB?$AA?$CB?$AA?5?$AA?$AN?$AA?6?$AA?$AA@| DCB 0xd
	DCB	0x0, " ", 0x0, "T", 0x0, "e", 0x0, "s", 0x0, "t", 0x0, " "
	DCB	0x0, "B", 0x0, "r", 0x0, "e", 0x0, "a", 0x0, "k", 0x0, "!"
	DCB	0x0, "!", 0x0, " ", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CC@JNFCCOBJ@?$AA?$AN?$AA?5?$AAT?$AAe?$AAs?$AAt?$AAe?$AAd?$AA?5?$AAo?$AAk?$AA?$CB?$AA?$CB?$AA?5?$AA?$AN?$AA?6?$AA?$AA@| DCB 0xd
	DCB	0x0, " ", 0x0, "T", 0x0, "e", 0x0, "s", 0x0, "t", 0x0, "e"
	DCB	0x0, "d", 0x0, " ", 0x0, "o", 0x0, "k", 0x0, "!", 0x0, "!"
	DCB	0x0, " ", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_13LBAGMAIH@?$AA?6?$AA?$AA@| DCB 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DA@HKDIMIAG@?$AA?$AN?$AA?5?$AA?$FL?$AAP?$AAW?$AAR?$AA?$FN?$AA?$FL?$AAT?$AAA?$AAB?$AA?$FN?$AA?$FL?$AAF?$AAN?$AA?$FN?$AA?$FL?$AAS?$AAP?$AA?$FN?$AA?5?$AA?$AN?$AA?6?$AA?$AA@| DCB 0xd
	DCB	0x0, " ", 0x0, "[", 0x0, "P", 0x0, "W", 0x0, "R", 0x0, "]"
	DCB	0x0, "[", 0x0, "T", 0x0, "A", 0x0, "B", 0x0, "]", 0x0, "["
	DCB	0x0, "F", 0x0, "N", 0x0, "]", 0x0, "[", 0x0, "S", 0x0, "P"
	DCB	0x0, "]", 0x0, " ", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HO@EOHCFJB@?$AA?$AN?$AA?5?$AAP?$AAr?$AAe?$AAs?$AAs?$AA?5?$AAa?$AAn?$AAy?$AA?5?$AAk?$AAe?$AAy?$AA?5?$AAt?$AAh?$AAe?$AA?5?$AAk?$AAe?$AAy?$AAp?$AAa?$AAd?$AA?5?$AAt?$AAe?$AAs?$AAt?$AAi@| DCB 0xd
	DCB	0x0, " ", 0x0, "P", 0x0, "r", 0x0, "e", 0x0, "s", 0x0, "s"
	DCB	0x0, " ", 0x0, "a", 0x0, "n", 0x0, "y", 0x0, " ", 0x0, "k"
	DCB	0x0, "e", 0x0, "y", 0x0, " ", 0x0, "t", 0x0, "h", 0x0, "e"
	DCB	0x0, " ", 0x0, "k", 0x0, "e", 0x0, "y", 0x0, "p", 0x0, "a"
	DCB	0x0, "d", 0x0, " ", 0x0, "t", 0x0, "e", 0x0, "s", 0x0, "t"
	DCB	0x0, "i", 0x0, "n", 0x0, "g", 0x0, ",", 0x0, " ", 0x0, "["
	DCB	0x0, "E", 0x0, "S", 0x0, "C", 0x0, "]", 0x0, "+", 0x0, "["
	DCB	0x0, "B", 0x0, "S", 0x0, "]", 0x0, " ", 0x0, "a", 0x0, "r"
	DCB	0x0, "e", 0x0, " ", 0x0, "c", 0x0, "a", 0x0, "n", 0x0, "c"
	DCB	0x0, "e", 0x0, "l", 0x0, ">", 0x0, ">", 0x0, ">", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_15OJKDPEFE@?$AA?5?$AA?5?$AA?$AA@| DCB " ", 0x0, " ", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1M@EBPDEGHE@?$AA?$FL?$AAF?$AA?$CF?$AAd?$AA?$FN?$AA?$AA@| DCB "[", 0x0
	DCB	"F", 0x0, "%", 0x0, "d", 0x0, "]", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CO@MODKIPFA@?$AA?$AN?$AA?5?$AA?$FL?$AA?5?$AA?4?$AA?5?$AA?$FN?$AA?5?$AA?$FL?$AA?5?$AA0?$AA?5?$AA?$FN?$AA?5?$AA?$FL?$AA?$CL?$AA?9?$AA?$CK?$AA?1?$AA?$FN?$AA?$AN?$AA?6?$AA?$AA@| DCB 0xd
	DCB	0x0, " ", 0x0, "[", 0x0, " ", 0x0, ".", 0x0, " ", 0x0, "]"
	DCB	0x0, " ", 0x0, "[", 0x0, " ", 0x0, "0", 0x0, " ", 0x0, "]"
	DCB	0x0, " ", 0x0, "[", 0x0, "+", 0x0, "-", 0x0, "*", 0x0, "/"
	DCB	0x0, "]", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_13HOIJIPNN@?$AA?5?$AA?$AA@| DCB " ", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BA@ILEOOHEJ@?$AA?5?$AA?5?$AA?5?$AA?$FL?$AA?$CF?$AAd?$AA?$FN?$AA?$AA@| DCB " "
	DCB	0x0, " ", 0x0, " ", 0x0, "[", 0x0, "%", 0x0, "d", 0x0, "]"
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CO@IJDKLNIK@?$AAK?$AAe?$AAy?$AAp?$AAa?$AAd?$AA?5?$AAF?$AAu?$AAn?$AAc?$AAt?$AAi?$AAo?$AAn?$AAa?$AAl?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?$AA@| DCB "K"
	DCB	0x0, "e", 0x0, "y", 0x0, "p", 0x0, "a", 0x0, "d", 0x0, " "
	DCB	0x0, "F", 0x0, "u", 0x0, "n", 0x0, "c", 0x0, "t", 0x0, "i"
	DCB	0x0, "o", 0x0, "n", 0x0, "a", 0x0, "l", 0x0, " ", 0x0, "T"
	DCB	0x0, "e", 0x0, "s", 0x0, "t", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CO@IOKPGCGC@?$AA?$AN?$AA?5?$AA?$FL?$AAE?$AAN?$AAT?$AA?$FN?$AA?5?$AA?$FL?$AAS?$AAC?$AAA?$AAN?$AA?$FN?$AA?5?$AA?$FL?$AAE?$AAN?$AAT?$AA?$FN?$AA?$AN?$AA?6?$AA?$AA@| DCB 0xd
	DCB	0x0, " ", 0x0, "[", 0x0, "E", 0x0, "N", 0x0, "T", 0x0, "]"
	DCB	0x0, " ", 0x0, "[", 0x0, "S", 0x0, "C", 0x0, "A", 0x0, "N"
	DCB	0x0, "]", 0x0, " ", 0x0, "[", 0x0, "E", 0x0, "N", 0x0, "T"
	DCB	0x0, "]", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CO@IPBDPNGH@?$AA?$AN?$AA?5?$AA?$FL?$AAE?$AAS?$AAC?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$FL?$AAB?$AAS?$AA?$FN?$AA?$AN?$AA?6?$AA?$AA@| DCB 0xd
	DCB	0x0, " ", 0x0, "[", 0x0, "E", 0x0, "S", 0x0, "C", 0x0, "]"
	DCB	0x0, " ", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, " ", 0x0, "[", 0x0, "B", 0x0, "S"
	DCB	0x0, "]", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CO@EGBJCCJE@?$AA?$AN?$AA?5?$AA?$FL?$AAL?$AA?$FN?$AA?5?$AA?$FL?$AAU?$AAP?$AA?$FN?$AA?$FL?$AAD?$AAO?$AAW?$AAN?$AA?$FN?$AA?5?$AA?$FL?$AAR?$AA?$FN?$AA?$AN?$AA?6?$AA?$AA@| DCB 0xd
	DCB	0x0, " ", 0x0, "[", 0x0, "L", 0x0, "]", 0x0, " ", 0x0, "["
	DCB	0x0, "U", 0x0, "P", 0x0, "]", 0x0, "[", 0x0, "D", 0x0, "O"
	DCB	0x0, "W", 0x0, "N", 0x0, "]", 0x0, " ", 0x0, "[", 0x0, "R"
	DCB	0x0, "]", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |KeypadFunc_Z2170P| PROC

; 1254 : {

  00000		 |$LN33@KeypadFunc@2|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004		 |$M48964|

; 1255 :     int     num;
; 1256 :     //BOOL    LOOP = TRUE;
; 1257 :     //WCHAR   key;
; 1258 :     BOOL    EXIT;
; 1259 :     
; 1260 :     UNREFERENCED_PARAMETER(pMenu);
; 1261 : 	OALBLMenuHeader(L"Keypad Functional Test");

  00004	e59f0158	 ldr         r0, [pc, #0x158]
  00008	eb000000	 bl          OALBLMenuHeader

; 1262 : 	//OALLog(L"!!!!!!hTwl: %X....\r\n", ghTwl);
; 1263 :     
; 1264 : 	//printing keypad 
; 1265 : 	OALLog(L"\r [ENT] [SCAN] [ENT]\r\n");

  0000c	e59f014c	 ldr         r0, [pc, #0x14C]
  00010	eb000000	 bl          NKDbgPrintfW

; 1266 : 	OALLog(L"\r [ESC]         [BS]\r\n");

  00014	e59f0140	 ldr         r0, [pc, #0x140]
  00018	eb000000	 bl          NKDbgPrintfW

; 1267 : 	OALLog(L"\r [L] [UP][DOWN] [R]\r\n");

  0001c	e59f0134	 ldr         r0, [pc, #0x134]
  00020	eb000000	 bl          NKDbgPrintfW

; 1268 : 		
; 1269 : 	for(num=1; num<10; num++){

  00024	e59f5128	 ldr         r5, [pc, #0x128]
  00028	e3a04001	 mov         r4, #1
  0002c		 |$LL12@KeypadFunc@2|

; 1270 :         OALLog(L"   [%d]",num);

  0002c	e59f011c	 ldr         r0, [pc, #0x11C]
  00030	e1a01004	 mov         r1, r4
  00034	eb000000	 bl          NKDbgPrintfW

; 1271 :         if((num%3) == 0)

  00038	e0c32594	 smull       r2, r3, r4, r5
  0003c	e0833fa3	 add         r3, r3, r3, lsr #31
  00040	e0833083	 add         r3, r3, r3, lsl #1
  00044	e0543003	 subs        r3, r4, r3

; 1272 :             OALLog(L"\r\n");

  00048	059f00e4	 ldreq       r0, [pc, #0xE4]
  0004c	0b000000	 bleq        NKDbgPrintfW
  00050	e2844001	 add         r4, r4, #1
  00054	e354000a	 cmp         r4, #0xA
  00058	bafffff3	 blt         |$LL12@KeypadFunc@2|

; 1273 :     }
; 1274 : 	OALLog(L"\r [ . ] [ 0 ] [+-*/]\r\n");

  0005c	e59f00e8	 ldr         r0, [pc, #0xE8]
  00060	eb000000	 bl          NKDbgPrintfW

; 1275 : 	OALLog(L" "); 

  00064	e59f00dc	 ldr         r0, [pc, #0xDC]
  00068	eb000000	 bl          NKDbgPrintfW

; 1276 : 	for(num=1; num<5; num++){

  0006c	e3a04001	 mov         r4, #1
  00070		 |$LL8@KeypadFunc@2|

; 1277 :         OALLog(L"[F%d]",num);

  00070	e59f00cc	 ldr         r0, [pc, #0xCC]
  00074	e1a01004	 mov         r1, r4
  00078	eb000000	 bl          NKDbgPrintfW

; 1278 :         if((num%2) == 0)

  0007c	e0843fa4	 add         r3, r4, r4, lsr #31
  00080	e1a030c3	 mov         r3, r3, asr #1
  00084	e0543083	 subs        r3, r4, r3, lsl #1

; 1279 :             OALLog(L"  ");

  00088	059f00b0	 ldreq       r0, [pc, #0xB0]
  0008c	0b000000	 bleq        NKDbgPrintfW
  00090	e2844001	 add         r4, r4, #1
  00094	e3540005	 cmp         r4, #5
  00098	bafffff4	 blt         |$LL8@KeypadFunc@2|

; 1280 :     }
; 1281 : 	OALLog(L"\n");   

  0009c	e59f0098	 ldr         r0, [pc, #0x98]
  000a0	eb000000	 bl          NKDbgPrintfW

; 1282 :     OALLog(L"\r [PWR][TAB][FN][SP] \r\n");

  000a4	e59f008c	 ldr         r0, [pc, #0x8C]
  000a8	eb000000	 bl          NKDbgPrintfW

; 1283 : 	OALLog(L"\r\n");

  000ac	e59f0080	 ldr         r0, [pc, #0x80]
  000b0	eb000000	 bl          NKDbgPrintfW

; 1284 :     OALLog(L"\r Press any key the keypad testing, [ESC]+[BS] are cancel>>>\r\n");

  000b4	e59f0074	 ldr         r0, [pc, #0x74]
  000b8	eb000000	 bl          NKDbgPrintfW
  000bc	e59f5068	 ldr         r5, [pc, #0x68]
  000c0	e59f6060	 ldr         r6, [pc, #0x60]
  000c4		 |$LL4@KeypadFunc@2|

; 1285 :     
; 1286 : 	//while(){
; 1287 :     do{
; 1288 : 	    EXIT = KeypadFuncMatrix();

  000c4	eb000000	 bl          KeypadFuncMatrix

; 1289 :         LcdStall(stall_1Sec/2); 

  000c8	e5963000	 ldr         r3, [r6]
  000cc	e1a04000	 mov         r4, r0
  000d0	e1a000a3	 mov         r0, r3, lsr #1
  000d4	eb000000	 bl          LcdStall

; 1290 :         if(EXIT){

  000d8	e3540000	 cmp         r4, #0
  000dc	1a00000b	 bne         |$LN26@KeypadFunc@2|
  000e0	e5d53000	 ldrb        r3, [r5]

; 1292 :             return;
; 1293 : 	    }	    
; 1294 : 	    /*if( (key = OALBLMenuReadKey(TRUE)) == L'0')
; 1295 :             goto BREAK;*/
; 1296 :     }while((KeypadMatrixStatus(0, 1) & KeypadMatrixStatus(0, 3)) != TRUE);//??

  000e4	e3130002	 tst         r3, #2
  000e8	13a02001	 movne       r2, #1
  000ec	03a02000	 moveq       r2, #0
  000f0	e3130008	 tst         r3, #8
  000f4	13a03001	 movne       r3, #1
  000f8	03a03000	 moveq       r3, #0
  000fc	e0033002	 and         r3, r3, r2
  00100	e3530001	 cmp         r3, #1
  00104	1affffee	 bne         |$LL4@KeypadFunc@2|

; 1297 :     //}
; 1298 : //BREAK:
; 1299 : 
; 1300 :     OALLog(L"\r Test Break!! \r\n");

  00108	e59f0014	 ldr         r0, [pc, #0x14]
  0010c	ea000000	 b           |$LN30@KeypadFunc@2|
  00110		 |$LN26@KeypadFunc@2|

; 1291 :             OALLog(L"\r Tested ok!! \r\n");

  00110	e59f0008	 ldr         r0, [pc, #8]
  00114		 |$LN30@KeypadFunc@2|
  00114	eb000000	 bl          NKDbgPrintfW

; 1301 :     return;
; 1302 : }

  00118	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  0011c	e12fff1e	 bx          lr
  00120		 |$LN34@KeypadFunc@2|
  00120		 |$LN35@KeypadFunc@2|
  00120	00000000	 DCD         |??_C@_1CC@JNFCCOBJ@?$AA?$AN?$AA?5?$AAT?$AAe?$AAs?$AAt?$AAe?$AAd?$AA?5?$AAo?$AAk?$AA?$CB?$AA?$CB?$AA?5?$AA?$AN?$AA?6?$AA?$AA@|
  00124		 |$LN36@KeypadFunc@2|
  00124	00000000	 DCD         |??_C@_1CE@OGAGBDBI@?$AA?$AN?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?5?$AAB?$AAr?$AAe?$AAa?$AAk?$AA?$CB?$AA?$CB?$AA?5?$AA?$AN?$AA?6?$AA?$AA@|
  00128		 |$LN37@KeypadFunc@2|
  00128	00000000	 DCD         |stall_1Sec|
  0012c		 |$LN38@KeypadFunc@2|
  0012c	00000000	 DCD         |gKeypadMatrix|
  00130		 |$LN39@KeypadFunc@2|
  00130	00000000	 DCD         |??_C@_1HO@EOHCFJB@?$AA?$AN?$AA?5?$AAP?$AAr?$AAe?$AAs?$AAs?$AA?5?$AAa?$AAn?$AAy?$AA?5?$AAk?$AAe?$AAy?$AA?5?$AAt?$AAh?$AAe?$AA?5?$AAk?$AAe?$AAy?$AAp?$AAa?$AAd?$AA?5?$AAt?$AAe?$AAs?$AAt?$AAi@|
  00134		 |$LN40@KeypadFunc@2|
  00134	00000000	 DCD         |??_C@_15JNBOKNOG@?$AA?$AN?$AA?6?$AA?$AA@|
  00138		 |$LN41@KeypadFunc@2|
  00138	00000000	 DCD         |??_C@_1DA@HKDIMIAG@?$AA?$AN?$AA?5?$AA?$FL?$AAP?$AAW?$AAR?$AA?$FN?$AA?$FL?$AAT?$AAA?$AAB?$AA?$FN?$AA?$FL?$AAF?$AAN?$AA?$FN?$AA?$FL?$AAS?$AAP?$AA?$FN?$AA?5?$AA?$AN?$AA?6?$AA?$AA@|
  0013c		 |$LN42@KeypadFunc@2|
  0013c	00000000	 DCD         |??_C@_13LBAGMAIH@?$AA?6?$AA?$AA@|
  00140		 |$LN43@KeypadFunc@2|
  00140	00000000	 DCD         |??_C@_15OJKDPEFE@?$AA?5?$AA?5?$AA?$AA@|
  00144		 |$LN44@KeypadFunc@2|
  00144	00000000	 DCD         |??_C@_1M@EBPDEGHE@?$AA?$FL?$AAF?$AA?$CF?$AAd?$AA?$FN?$AA?$AA@|
  00148		 |$LN45@KeypadFunc@2|
  00148	00000000	 DCD         |??_C@_13HOIJIPNN@?$AA?5?$AA?$AA@|
  0014c		 |$LN46@KeypadFunc@2|
  0014c	00000000	 DCD         |??_C@_1CO@MODKIPFA@?$AA?$AN?$AA?5?$AA?$FL?$AA?5?$AA?4?$AA?5?$AA?$FN?$AA?5?$AA?$FL?$AA?5?$AA0?$AA?5?$AA?$FN?$AA?5?$AA?$FL?$AA?$CL?$AA?9?$AA?$CK?$AA?1?$AA?$FN?$AA?$AN?$AA?6?$AA?$AA@|
  00150		 |$LN47@KeypadFunc@2|
  00150	00000000	 DCD         |??_C@_1BA@ILEOOHEJ@?$AA?5?$AA?5?$AA?5?$AA?$FL?$AA?$CF?$AAd?$AA?$FN?$AA?$AA@|
  00154		 |$LN48@KeypadFunc@2|
  00154	55555556	 DCD         0x55555556
  00158		 |$LN49@KeypadFunc@2|
  00158	00000000	 DCD         |??_C@_1CO@EGBJCCJE@?$AA?$AN?$AA?5?$AA?$FL?$AAL?$AA?$FN?$AA?5?$AA?$FL?$AAU?$AAP?$AA?$FN?$AA?$FL?$AAD?$AAO?$AAW?$AAN?$AA?$FN?$AA?5?$AA?$FL?$AAR?$AA?$FN?$AA?$AN?$AA?6?$AA?$AA@|
  0015c		 |$LN50@KeypadFunc@2|
  0015c	00000000	 DCD         |??_C@_1CO@IPBDPNGH@?$AA?$AN?$AA?5?$AA?$FL?$AAE?$AAS?$AAC?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$FL?$AAB?$AAS?$AA?$FN?$AA?$AN?$AA?6?$AA?$AA@|
  00160		 |$LN51@KeypadFunc@2|
  00160	00000000	 DCD         |??_C@_1CO@IOKPGCGC@?$AA?$AN?$AA?5?$AA?$FL?$AAE?$AAN?$AAT?$AA?$FN?$AA?5?$AA?$FL?$AAS?$AAC?$AAA?$AAN?$AA?$FN?$AA?5?$AA?$FL?$AAE?$AAN?$AAT?$AA?$FN?$AA?$AN?$AA?6?$AA?$AA@|
  00164		 |$LN52@KeypadFunc@2|
  00164	00000000	 DCD         |??_C@_1CO@IJDKLNIK@?$AAK?$AAe?$AAy?$AAp?$AAa?$AAd?$AA?5?$AAF?$AAu?$AAn?$AAc?$AAt?$AAi?$AAo?$AAn?$AAa?$AAl?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?$AA@|
  00168		 |$M48965|

			 ENDP  ; |KeypadFunc_Z2170P|

	EXPORT	|??_C@_1DI@MMJKGDGA@?$AA?$AN?$AA?6?$AAT?$AAe?$AAs?$AAt?$AA?5?$AAp?$AAa?$AAt?$AAt?$AAe?$AAr?$AAn?$AA?3?$AA0?$AAx?$AA5?$AA5?$AA?5?$AAo?$AAk?$AA?$CB?$AA?$CB?$AA?5?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DI@PKDCLLEE@?$AA?$AN?$AA?6?$AAT?$AAe?$AAs?$AAt?$AA?5?$AAp?$AAa?$AAt?$AAt?$AAe?$AAr?$AAn?$AA?3?$AA0?$AAx?$AAA?$AAA?$AA?5?$AAo?$AAk?$AA?$CB?$AA?$CB?$AA?5?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_13JOFGPIOO@?$AA?4?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DC@EIEFAGNL@?$AA?$AN?$AA?6?$AA?5?$AAS?$AAt?$AAa?$AAr?$AAt?$AA?5?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?3?$AA?5?$AA0?$AAX?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DC@KDLDOOAO@?$AA?$AN?$AA?6?$AA?5?$AAE?$AAn?$AAd?$AA?5?$AA?5?$AA?5?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?3?$AA?5?$AA0?$AAX?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CM@LADFLEDP@?$AA?$AN?$AA?6?$AA?5?$AAs?$AAc?$AAa?$AAn?$AA?5?$AA1?$AA0?$AA0?$AAk?$AAB?$AA?5?$AAt?$AAi?$AAp?$AA?5?$AA?$CC?$AA?4?$AA?$CC?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FO@CNDEOBON@?$AA?$AN?$AA?6?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T49007| DCD	|$LN25@RAMAccessT|
	DCD	0x40005701

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DI@MMJKGDGA@?$AA?$AN?$AA?6?$AAT?$AAe?$AAs?$AAt?$AA?5?$AAp?$AAa?$AAt?$AAt?$AAe?$AAr?$AAn?$AA?3?$AA0?$AAx?$AA5?$AA5?$AA?5?$AAo?$AAk?$AA?$CB?$AA?$CB?$AA?5?$AA?$AN?$AA?6?$AA?$AA@| DCB 0xd
	DCB	0x0, 0xa, 0x0, "T", 0x0, "e", 0x0, "s", 0x0, "t", 0x0, " "
	DCB	0x0, "p", 0x0, "a", 0x0, "t", 0x0, "t", 0x0, "e", 0x0, "r"
	DCB	0x0, "n", 0x0, ":", 0x0, "0", 0x0, "x", 0x0, "5", 0x0, "5"
	DCB	0x0, " ", 0x0, "o", 0x0, "k", 0x0, "!", 0x0, "!", 0x0, " "
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DI@PKDCLLEE@?$AA?$AN?$AA?6?$AAT?$AAe?$AAs?$AAt?$AA?5?$AAp?$AAa?$AAt?$AAt?$AAe?$AAr?$AAn?$AA?3?$AA0?$AAx?$AAA?$AAA?$AA?5?$AAo?$AAk?$AA?$CB?$AA?$CB?$AA?5?$AA?$AN?$AA?6?$AA?$AA@| DCB 0xd
	DCB	0x0, 0xa, 0x0, "T", 0x0, "e", 0x0, "s", 0x0, "t", 0x0, " "
	DCB	0x0, "p", 0x0, "a", 0x0, "t", 0x0, "t", 0x0, "e", 0x0, "r"
	DCB	0x0, "n", 0x0, ":", 0x0, "0", 0x0, "x", 0x0, "A", 0x0, "A"
	DCB	0x0, " ", 0x0, "o", 0x0, "k", 0x0, "!", 0x0, "!", 0x0, " "
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_13JOFGPIOO@?$AA?4?$AA?$AA@| DCB ".", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DC@EIEFAGNL@?$AA?$AN?$AA?6?$AA?5?$AAS?$AAt?$AAa?$AAr?$AAt?$AA?5?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?3?$AA?5?$AA0?$AAX?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AA@| DCB 0xd
	DCB	0x0, 0xa, 0x0, " ", 0x0, "S", 0x0, "t", 0x0, "a", 0x0, "r"
	DCB	0x0, "t", 0x0, " ", 0x0, "A", 0x0, "d", 0x0, "d", 0x0, "r"
	DCB	0x0, "e", 0x0, "s", 0x0, "s", 0x0, ":", 0x0, " ", 0x0, "0"
	DCB	0x0, "X", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "X", 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DC@KDLDOOAO@?$AA?$AN?$AA?6?$AA?5?$AAE?$AAn?$AAd?$AA?5?$AA?5?$AA?5?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?3?$AA?5?$AA0?$AAX?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AA@| DCB 0xd
	DCB	0x0, 0xa, 0x0, " ", 0x0, "E", 0x0, "n", 0x0, "d", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, "A", 0x0, "d", 0x0, "d", 0x0, "r"
	DCB	0x0, "e", 0x0, "s", 0x0, "s", 0x0, ":", 0x0, " ", 0x0, "0"
	DCB	0x0, "X", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "X", 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CM@LADFLEDP@?$AA?$AN?$AA?6?$AA?5?$AAs?$AAc?$AAa?$AAn?$AA?5?$AA1?$AA0?$AA0?$AAk?$AAB?$AA?5?$AAt?$AAi?$AAp?$AA?5?$AA?$CC?$AA?4?$AA?$CC?$AA?$AA@| DCB 0xd
	DCB	0x0, 0xa, 0x0, " ", 0x0, "s", 0x0, "c", 0x0, "a", 0x0, "n"
	DCB	0x0, " ", 0x0, "1", 0x0, "0", 0x0, "0", 0x0, "k", 0x0, "B"
	DCB	0x0, " ", 0x0, "t", 0x0, "i", 0x0, "p", 0x0, " ", 0x0, """"
	DCB	0x0, ".", 0x0, """", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FO@CNDEOBON@?$AA?$AN?$AA?6?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9@| DCB 0xd
	DCB	0x0, 0xa, 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-"
	DCB	0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-"
	DCB	0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-"
	DCB	0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-"
	DCB	0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-"
	DCB	0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-"
	DCB	0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-"
	DCB	0x0, "-", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |RAMAccessTest| PROC

; 1349 : {

  00000		 |$LN25@RAMAccessT|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004		 |$M49004|

; 1350 :     ULONG  startAddress = IMAGE_SHARE_ARGS_CA;
; 1351 :     ULONG  endAddress = startAddress|(256 *1024 *1024-1); //endAddress = startAddress + size(256MB) 
; 1352 :     ULONG  i, checkAddress =  0xFFFFFFFF;
; 1353 :     BYTE   value, temp, pattern = 0xAA, pattern2 = 0x55;
; 1354 :     BOOL   DOING = TRUE;
; 1355 :     ULONG  percent;        
; 1356 :      
; 1357 : 	UNREFERENCED_PARAMETER(pMenu);
; 1358 : 	OALBLMenuHeader(L"RAM Access Test(Completely)");

  00004	e59f014c	 ldr         r0, [pc, #0x14C]
  00008	eb000000	 bl          OALBLMenuHeader

; 1359 : 
; 1360 :     OALLog(L"\r\n Start Address: 0X%08X", startAddress&checkAddress );

  0000c	e59f0140	 ldr         r0, [pc, #0x140]
  00010	e3a01102	 mov         r1, #2, 2
  00014	eb000000	 bl          NKDbgPrintfW

; 1361 :     OALLog(L"\r\n End   Address: 0X%08X", endAddress&checkAddress );

  00018	e59f0130	 ldr         r0, [pc, #0x130]
  0001c	e3e01207	 mvn         r1, #7, 4
  00020	eb000000	 bl          NKDbgPrintfW

; 1362 :     OALLog(L"\r\n scan 100kB tip \".\""); 

  00024	e59f0120	 ldr         r0, [pc, #0x120]
  00028	eb000000	 bl          NKDbgPrintfW

; 1363 :     OALLog(L"\r\n------------------------------------------\r\n");

  0002c	e59f0114	 ldr         r0, [pc, #0x114]
  00030	eb000000	 bl          NKDbgPrintfW
  00034	e59f6108	 ldr         r6, [pc, #0x108]
  00038	e59f7100	 ldr         r7, [pc, #0x100]
  0003c	e3a080aa	 mov         r8, #0xAA
  00040	e3a0aa19	 mov         r10, #0x19, 20
  00044	e3a09055	 mov         r9, #0x55
  00048	e3a0ba19	 mov         r11, #0x19, 20
  0004c		 |$LL12@RAMAccessT|

; 1364 :     
; 1365 :     while(DOING){
; 1366 :         for(i=0, percent=1; i<(endAddress - startAddress); i++, percent++)

  0004c	e3a05000	 mov         r5, #0
  00050	e3a04102	 mov         r4, #2, 2
  00054		 |$LL10@RAMAccessT|

; 1367 : 	    {
; 1368 :             temp = *(volatile BYTE *)(startAddress + i);        //read data     ;temp(0x8000_0000) to get a address 

  00054	e5d42000	 ldrb        r2, [r4]

; 1369 :             *(volatile BYTE *)(startAddress + i) = pattern;     //write pattern ;pattern write into address(if is AA) 

  00058	e5c48000	 strb        r8, [r4]

; 1370 :             value = *(volatile BYTE *)(startAddress + i);       //read pattern  ;value == AA, setup value

  0005c	e5d43000	 ldrb        r3, [r4]

; 1371 :             *(volatile BYTE *)(startAddress + i) = temp;        //store data

  00060	e5c42000	 strb        r2, [r4]

; 1372 :         
; 1373 :             if(value != pattern)                                //check value(in address value) equal pattern

  00064	e35300aa	 cmp         r3, #0xAA
  00068	1a00000b	 bne         |$LN18@RAMAccessT|
  0006c	e2840106	 add         r0, r4, #6, 2

; 1376 :                 break;
; 1377 :             }
; 1378 : 
; 1379 :             if( (percent%(1024*100)) == 0){   //scan 100kB show tip 

  00070	e0831790	 umull       r1, r3, r0, r7
  00074	e1a037a3	 mov         r3, r3, lsr #15
  00078	e0020a93	 mul         r2, r3, r10
  0007c	e0503002	 subs        r3, r0, r2

; 1380 :                 //OALLog(L"\rScanned size: %dk\r\n", percent/1024); 
; 1381 :                 OALLog(L"."); 

  00080	059f00b0	 ldreq       r0, [pc, #0xB0]
  00084	0b000000	 bleq        NKDbgPrintfW
  00088	e2844001	 add         r4, r4, #1
  0008c	e3740217	 cmn         r4, #0x17, 4
  00090	e2855001	 add         r5, r5, #1
  00094	3affffee	 bcc         |$LL10@RAMAccessT|

; 1394 :         
; 1395 :             if(value != pattern2)                                //check value(in address value) equal pattern

  00098	ea000002	 b           |$LN8@RAMAccessT|
  0009c		 |$LN18@RAMAccessT|

; 1374 :             {
; 1375 :                 OALLog(L"\r\n Error Address: 0X%X", startAddress+i);

  0009c	e59f0090	 ldr         r0, [pc, #0x90]
  000a0	e2851102	 add         r1, r5, #2, 2
  000a4	eb000000	 bl          NKDbgPrintfW
  000a8		 |$LN8@RAMAccessT|

; 1382 :             }
; 1383 :         }
; 1384 :         OALLog(L"\r\nTest pattern:0xAA ok!! \r\n");

  000a8	e59f008c	 ldr         r0, [pc, #0x8C]
  000ac	eb000000	 bl          NKDbgPrintfW

; 1385 :         //OALLog(L"--------------------------------------------------\r\n");
; 1386 :         LcdStall(stall_1Sec*3);

  000b0	e5963000	 ldr         r3, [r6]
  000b4	e0830083	 add         r0, r3, r3, lsl #1
  000b8	eb000000	 bl          LcdStall

; 1387 :         
; 1388 :         for(i=0, percent=1; i<(endAddress - startAddress); i++, percent++)

  000bc	e3a05000	 mov         r5, #0
  000c0	e3a04102	 mov         r4, #2, 2
  000c4		 |$LL5@RAMAccessT|

; 1389 : 	    {
; 1390 :             temp = *(volatile BYTE *)(startAddress + i);        //read data     ;temp(0x8000_0000) to get a address 

  000c4	e5d42000	 ldrb        r2, [r4]

; 1391 :             *(volatile BYTE *)(startAddress + i) = pattern2;     //write pattern ;pattern write into address(if is AA) 

  000c8	e5c49000	 strb        r9, [r4]

; 1392 :             value = *(volatile BYTE *)(startAddress + i);       //read pattern  ;value == 1A, setup value

  000cc	e5d43000	 ldrb        r3, [r4]

; 1393 :             *(volatile BYTE *)(startAddress + i) = temp;        //store data

  000d0	e5c42000	 strb        r2, [r4]

; 1394 :         
; 1395 :             if(value != pattern2)                                //check value(in address value) equal pattern

  000d4	e3530055	 cmp         r3, #0x55
  000d8	1a00000b	 bne         |$LN19@RAMAccessT|
  000dc	e2840106	 add         r0, r4, #6, 2

; 1398 :                 break;
; 1399 :             }
; 1400 : 
; 1401 :             if( (percent%(1024*100)) == 0){   //scan 100kB show tip 

  000e0	e0831790	 umull       r1, r3, r0, r7
  000e4	e1a037a3	 mov         r3, r3, lsr #15
  000e8	e0020b93	 mul         r2, r3, r11
  000ec	e0503002	 subs        r3, r0, r2

; 1402 :                 //OALLog(L"\rScanned size: %dk\r\n", percent/1024);
; 1403 :                 OALLog(L"."); 

  000f0	059f0040	 ldreq       r0, [pc, #0x40]
  000f4	0b000000	 bleq        NKDbgPrintfW
  000f8	e2844001	 add         r4, r4, #1
  000fc	e3740217	 cmn         r4, #0x17, 4
  00100	e2855001	 add         r5, r5, #1
  00104	3affffee	 bcc         |$LL5@RAMAccessT|

; 1394 :         
; 1395 :             if(value != pattern2)                                //check value(in address value) equal pattern

  00108	ea000002	 b           |$LN3@RAMAccessT|
  0010c		 |$LN19@RAMAccessT|

; 1396 :             {
; 1397 :                 OALLog(L"\r\n Error Address: 0X%X", startAddress+i);

  0010c	e59f0020	 ldr         r0, [pc, #0x20]
  00110	e2851102	 add         r1, r5, #2, 2
  00114	eb000000	 bl          NKDbgPrintfW
  00118		 |$LN3@RAMAccessT|

; 1404 :             }         
; 1405 :         }
; 1406 :         OALLog(L"\r\nTest pattern:0x55 ok!! \r\n");

  00118	e59f0010	 ldr         r0, [pc, #0x10]
  0011c	eb000000	 bl          NKDbgPrintfW

; 1407 :         //OALLog(L"--------------------------------------------------\r\n");
; 1408 :         LcdStall(stall_1Sec*3);

  00120	e5963000	 ldr         r3, [r6]
  00124	e0830083	 add         r0, r3, r3, lsl #1
  00128	eb000000	 bl          LcdStall
  0012c	eaffffc6	 b           |$LL12@RAMAccessT|
  00130		 |$LN26@RAMAccessT|
  00130		 |$LN27@RAMAccessT|
  00130	00000000	 DCD         |??_C@_1DI@MMJKGDGA@?$AA?$AN?$AA?6?$AAT?$AAe?$AAs?$AAt?$AA?5?$AAp?$AAa?$AAt?$AAt?$AAe?$AAr?$AAn?$AA?3?$AA0?$AAx?$AA5?$AA5?$AA?5?$AAo?$AAk?$AA?$CB?$AA?$CB?$AA?5?$AA?$AN?$AA?6?$AA?$AA@|
  00134		 |$LN28@RAMAccessT|
  00134	00000000	 DCD         |??_C@_1CO@GBEKHDOH@?$AA?$AN?$AA?6?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?3?$AA?5?$AA0?$AAX?$AA?$CF?$AAX?$AA?$AA@|
  00138		 |$LN29@RAMAccessT|
  00138	00000000	 DCD         |??_C@_13JOFGPIOO@?$AA?4?$AA?$AA@|
  0013c		 |$LN30@RAMAccessT|
  0013c	00000000	 DCD         |??_C@_1DI@PKDCLLEE@?$AA?$AN?$AA?6?$AAT?$AAe?$AAs?$AAt?$AA?5?$AAp?$AAa?$AAt?$AAt?$AAe?$AAr?$AAn?$AA?3?$AA0?$AAx?$AAA?$AAA?$AA?5?$AAo?$AAk?$AA?$CB?$AA?$CB?$AA?5?$AA?$AN?$AA?6?$AA?$AA@|
  00140		 |$LN31@RAMAccessT|
  00140	51eb851f	 DCD         0x51eb851f
  00144		 |$LN32@RAMAccessT|
  00144	00000000	 DCD         |stall_1Sec|
  00148		 |$LN33@RAMAccessT|
  00148	00000000	 DCD         |??_C@_1FO@CNDEOBON@?$AA?$AN?$AA?6?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9@|
  0014c		 |$LN34@RAMAccessT|
  0014c	00000000	 DCD         |??_C@_1CM@LADFLEDP@?$AA?$AN?$AA?6?$AA?5?$AAs?$AAc?$AAa?$AAn?$AA?5?$AA1?$AA0?$AA0?$AAk?$AAB?$AA?5?$AAt?$AAi?$AAp?$AA?5?$AA?$CC?$AA?4?$AA?$CC?$AA?$AA@|
  00150		 |$LN35@RAMAccessT|
  00150	00000000	 DCD         |??_C@_1DC@KDLDOOAO@?$AA?$AN?$AA?6?$AA?5?$AAE?$AAn?$AAd?$AA?5?$AA?5?$AA?5?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?3?$AA?5?$AA0?$AAX?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AA@|
  00154		 |$LN36@RAMAccessT|
  00154	00000000	 DCD         |??_C@_1DC@EIEFAGNL@?$AA?$AN?$AA?6?$AA?5?$AAS?$AAt?$AAa?$AAr?$AAt?$AA?5?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?3?$AA?5?$AA0?$AAX?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AA@|
  00158		 |$LN37@RAMAccessT|
  00158	00000000	 DCD         |??_C@_1DI@GCPLOKAO@?$AAR?$AAA?$AAM?$AA?5?$AAA?$AAc?$AAc?$AAe?$AAs?$AAs?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?$CI?$AAC?$AAo?$AAm?$AAp?$AAl?$AAe?$AAt?$AAe?$AAl?$AAy?$AA?$CJ?$AA?$AA@|
  0015c		 |$M49005|

			 ENDP  ; |RAMAccessTest|

	EXPORT	|??_C@_1CI@EDLOHMLH@?$AA?$AN?$AAS?$AAc?$AAa?$AAn?$AA?5?$AA?$CF?$AAd?$AA?5?$AAt?$AAi?$AAm?$AAe?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T49053| DCD	|$LN30@AutoScanFu|
	DCD	0x40006d02

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@EDLOHMLH@?$AA?$AN?$AAS?$AAc?$AAa?$AAn?$AA?5?$AA?$CF?$AAd?$AA?5?$AAt?$AAi?$AAm?$AAe?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?$AN?$AA?6?$AA?$AA@| DCB 0xd
	DCB	0x0, "S", 0x0, "c", 0x0, "a", 0x0, "n", 0x0, " ", 0x0, "%"
	DCB	0x0, "d", 0x0, " ", 0x0, "t", 0x0, "i", 0x0, "m", 0x0, "e"
	DCB	0x0, ":", 0x0, " ", 0x0, "%", 0x0, "s", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |AutoScanFunc| PROC

; 1417 : {

  00000		 |$LN30@AutoScanFu|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd064	 sub         sp, sp, #0x64
  00008		 |$M49050|

; 1418 : 	HANDLE  hGPIO;
; 1419 :     UINT8   status, ch, DOING = 1;
; 1420 :     int     count, inNum, data = 1;
; 1421 :     //int     i = 0;
; 1422 :     //WCHAR   key;
; 1423 :     WCHAR   scan[50];
; 1424 :        	
; 1425 : 	OALBLMenuHeader(L"Auto Scan");

  00008	e59f01a0	 ldr         r0, [pc, #0x1A0]
  0000c	e3a08001	 mov         r8, #1
  00010	eb000000	 bl          OALBLMenuHeader

; 1426 : 	UNREFERENCED_PARAMETER(pMenu);	
; 1427 : 	
; 1428 :     hGPIO = GPIOOpen();

  00014	eb000000	 bl          GPIOOpen

; 1429 :     GPIOSetMode(hGPIO, BCR_ENG_PWEN, GPIO_DIR_OUTPUT);   

  00018	e3a02000	 mov         r2, #0
  0001c	e3a01026	 mov         r1, #0x26
  00020	e1a06000	 mov         r6, r0
  00024	eb000000	 bl          GPIOSetMode

; 1430 :     GPIOSetMode(hGPIO, BCR_ENG_TRIG, GPIO_DIR_OUTPUT);

  00028	e3a02000	 mov         r2, #0
  0002c	e3a01024	 mov         r1, #0x24
  00030	e1a00006	 mov         r0, r6
  00034	eb000000	 bl          GPIOSetMode

; 1431 :     
; 1432 :     GPIOSetBit(hGPIO, BCR_ENG_PWEN);                    //Power ON

  00038	e3a01026	 mov         r1, #0x26
  0003c	e1a00006	 mov         r0, r6
  00040	eb000000	 bl          GPIOSetBit

; 1433 :     EnableDeviceClocks(OMAP_DEVICE_UART1, TRUE); 

  00044	e3a01001	 mov         r1, #1
  00048	e3a0000a	 mov         r0, #0xA
  0004c	eb000000	 bl          EnableDeviceClocks

; 1434 :     pUartRegs = OALPAtoUA(GetAddressByDevice(OMAP_DEVICE_UART1));

  00050	e3a0000a	 mov         r0, #0xA
  00054	eb000000	 bl          GetAddressByDevice
  00058	e3a01000	 mov         r1, #0
  0005c	eb000000	 bl          OALPAtoVA
  00060	e59f7144	 ldr         r7, [pc, #0x144]

; 1435 :         
; 1436 :     // reset uart
; 1437 : 	OUTREG8(&pUartRegs->SYSC, UART_SYSC_RST);

  00064	e3a03002	 mov         r3, #2
  00068	e5870000	 str         r0, [r7]
  0006c	e5c03054	 strb        r3, [r0, #0x54]
  00070	e5972000	 ldr         r2, [r7]
  00074		 |$LL10@AutoScanFu|

; 1438 :     while ((INREG8(&pUartRegs->SYSS) & UART_SYSS_RST_DONE) == 0)

  00074	e5d23058	 ldrb        r3, [r2, #0x58]
  00078	e3130001	 tst         r3, #1
  0007c	0afffffc	 beq         |$LL10@AutoScanFu|

; 1439 :         ;
; 1440 : 
; 1441 :     // Set baud rate
; 1442 :     OUTREG8(&pUartRegs->LCR, UART_LCR_DLAB);    //Line control register, DIV_EN

  00080	e3a03080	 mov         r3, #0x80
  00084	e5c2300c	 strb        r3, [r2, #0xC]

; 1443 :     OUTREG8(&pUartRegs->DLL, 0x38);             //9.6kbps

  00088	e5973000	 ldr         r3, [r7]
  0008c	e3a02038	 mov         r2, #0x38

; 1444 :     OUTREG8(&pUartRegs->DLH, 0x01);

  00090	e3a00001	 mov         r0, #1
  00094	e5c32000	 strb        r2, [r3]
  00098	e5973000	 ldr         r3, [r7]

; 1445 :     OUTREG8(&pUartRegs->LCR, 0x00);

  0009c	e3a0b000	 mov         r11, #0

; 1446 : 
; 1447 :     // 8 bit, 1 stop bit, no parity
; 1448 :     OUTREG8(&pUartRegs->LCR, 0x03);             

  000a0	e3a02003	 mov         r2, #3
  000a4	e5c30004	 strb        r0, [r3, #4]
  000a8	e5973000	 ldr         r3, [r7]

; 1449 :     // Enable FIFO
; 1450 :     OUTREG8(&pUartRegs->FCR, UART_FCR_FIFO_EN);
; 1451 :     OUTREG8(&pUartRegs->FCR, UART_FCR_FIFO_EN|UART_FCR_RX_FIFO_CLEAR|UART_FCR_TX_FIFO_CLEAR);

  000ac	e3a01007	 mov         r1, #7

; 1452 :     // Pool
; 1453 :     OUTREG8(&pUartRegs->IER, 0);
; 1454 :     // Set DTR/RTS signals
; 1455 :     OUTREG8(&pUartRegs->MCR, 0); //UART_MCR_DTR|UART_MCR_RTS);
; 1456 :     // Configuration complete so select UART 16x mode
; 1457 : 	OUTREG8(&pUartRegs->MDR1, UART_MDR1_UART16);
; 1458 :     BCRSetRTS(TRUE);

  000b0	e28da000	 add         r10, sp, #0
  000b4	e5c3b00c	 strb        r11, [r3, #0xC]
  000b8	e5973000	 ldr         r3, [r7]
  000bc	e5c3200c	 strb        r2, [r3, #0xC]
  000c0	e5973000	 ldr         r3, [r7]
  000c4	e5c30008	 strb        r0, [r3, #8]
  000c8	e5973000	 ldr         r3, [r7]
  000cc	e5c31008	 strb        r1, [r3, #8]
  000d0	e5973000	 ldr         r3, [r7]
  000d4	e5c3b004	 strb        r11, [r3, #4]
  000d8	e5973000	 ldr         r3, [r7]
  000dc	e5c3b010	 strb        r11, [r3, #0x10]
  000e0	e5973000	 ldr         r3, [r7]
  000e4	e5c3b020	 strb        r11, [r3, #0x20]
  000e8	e5972000	 ldr         r2, [r7]
  000ec	e5d23010	 ldrb        r3, [r2, #0x10]
  000f0	e3833002	 orr         r3, r3, #2
  000f4	e5c23010	 strb        r3, [r2, #0x10]
  000f8		 |$LL8@AutoScanFu|

; 1459 :     
; 1460 :     while(DOING)
; 1461 :     {
; 1462 :         inNum = 0;
; 1463 :         count = 30;
; 1464 :         LcdSleep(500);

  000f8	e3a00f7d	 mov         r0, #0x7D, 30
  000fc	e3a04000	 mov         r4, #0
  00100	e3a0501e	 mov         r5, #0x1E
  00104	eb000000	 bl          LcdSleep

; 1465 : 		GPIOClrBit(hGPIO, BCR_ENG_TRIG);

  00108	e3a01024	 mov         r1, #0x24
  0010c	e1a00006	 mov         r0, r6
  00110	eb000000	 bl          GPIOClrBit

; 1466 : 		BCRSetRTS(FALSE);

  00114	e5972000	 ldr         r2, [r7]

; 1467 : 		LcdSleep(500);

  00118	e3a00f7d	 mov         r0, #0x7D, 30
  0011c	e5d23010	 ldrb        r3, [r2, #0x10]
  00120	e20330fd	 and         r3, r3, #0xFD
  00124	e5c23010	 strb        r3, [r2, #0x10]
  00128	eb000000	 bl          LcdSleep
  0012c	e28d9000	 add         r9, sp, #0
  00130		 |$LL6@AutoScanFu|

; 1468 : 		
; 1469 : 		//OALLog(L"count %d\r\n",count);	
; 1470 : 		while( count-- )
; 1471 : 		{
; 1472 : 		    status = INREG8(&pUartRegs->LSR);

  00130	e5972000	 ldr         r2, [r7]

; 1473 : 		    if ((status & UART_LSR_RX_FIFO_E) != 0)
; 1474 : 			{
; 1475 : 			    ch = INREG8(&pUartRegs->RHR);
; 1476 : 			    scan[inNum++] = ch;
; 1477 : 				//OALLog(L" %c\r\n",ch);
; 1478 : 			}
; 1479 : 			LcdSleep(100);

  00134	e3a00064	 mov         r0, #0x64
  00138	e2455001	 sub         r5, r5, #1
  0013c	e5d23014	 ldrb        r3, [r2, #0x14]
  00140	e3130001	 tst         r3, #1
  00144	15d23000	 ldrneb      r3, [r2]
  00148	12844001	 addne       r4, r4, #1
  0014c	10c930b2	 strneh      r3, [r9], #2
  00150	eb000000	 bl          LcdSleep
  00154	e3550000	 cmp         r5, #0
  00158	1afffff4	 bne         |$LL6@AutoScanFu|

; 1480 : 			//OALLog(L"count %d\r\n",count);	
; 1481 : 	    }
; 1482 : 			
; 1483 : 		GPIOSetBit(hGPIO, BCR_ENG_TRIG);

  0015c	e3a01024	 mov         r1, #0x24
  00160	e1a00006	 mov         r0, r6
  00164	eb000000	 bl          GPIOSetBit

; 1484 : 		if( inNum > 0 )

  00168	e3540000	 cmp         r4, #0
  0016c	da000007	 ble         |$LN27@AutoScanFu|

; 1485 : 		{
; 1486 : 		    scan[inNum] = '\0';
; 1487 : 			OALLog(L"\rScan %d time: %s\r\n",data++, scan);

  00170	e59f0030	 ldr         r0, [pc, #0x30]
  00174	e08a3084	 add         r3, r10, r4, lsl #1
  00178	e28d2000	 add         r2, sp, #0
  0017c	e1a01008	 mov         r1, r8
  00180	e1c3b0b0	 strh        r11, [r3]
  00184	eb000000	 bl          NKDbgPrintfW
  00188	e2888001	 add         r8, r8, #1
  0018c	ea000001	 b           |$LN1@AutoScanFu|
  00190		 |$LN27@AutoScanFu|

; 1488 : 			//break;
; 1489 : 		}else if(inNum == 0){
; 1490 :             OALLog(L"\rDid not any scan !\r\n");

  00190	059f000c	 ldreq       r0, [pc, #0xC]
  00194	0b000000	 bleq        NKDbgPrintfW
  00198		 |$LN1@AutoScanFu|

; 1491 : 		}			
; 1492 : 		LcdSleep(300);

  00198	e3a00f4b	 mov         r0, #0x4B, 30
  0019c	eb000000	 bl          LcdSleep
  001a0	eaffffd4	 b           |$LL8@AutoScanFu|
  001a4		 |$LN31@AutoScanFu|
  001a4		 |$LN32@AutoScanFu|
  001a4	00000000	 DCD         |??_C@_1CM@LKJOBAFD@?$AA?$AN?$AAD?$AAi?$AAd?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAa?$AAn?$AAy?$AA?5?$AAs?$AAc?$AAa?$AAn?$AA?5?$AA?$CB?$AA?$AN?$AA?6?$AA?$AA@|
  001a8		 |$LN33@AutoScanFu|
  001a8	00000000	 DCD         |??_C@_1CI@EDLOHMLH@?$AA?$AN?$AAS?$AAc?$AAa?$AAn?$AA?5?$AA?$CF?$AAd?$AA?5?$AAt?$AAi?$AAm?$AAe?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?$AN?$AA?6?$AA?$AA@|
  001ac		 |$LN34@AutoScanFu|
  001ac	00000000	 DCD         |pUartRegs|
  001b0		 |$LN35@AutoScanFu|
  001b0	00000000	 DCD         |??_C@_1BE@FABONDOI@?$AAA?$AAu?$AAt?$AAo?$AA?5?$AAS?$AAc?$AAa?$AAn?$AA?$AA@|
  001b4		 |$M49051|

			 ENDP  ; |AutoScanFunc|

	EXPORT	|__$ArrayPad$| [ DATA ]
	EXPORT	|RTCFunc|
	EXPORT	|??_C@_0N@FFBFFMEL@RTC?5Testing?4?$AA@| [ DATA ] ; `string'
	IMPORT	|ReadRTC|
	IMPORT	|printString|
	IMPORT	|ReadBBVoltage|
	IMPORT	|DoADCRTC|
	IMPORT	|DisplayShowBackground|

  00000			 AREA	 |.pdata|, PDATA
|$T49067| DCD	|$LN5@RTCFunc|
	DCD	0xc0002f02

  00000			 AREA	 |.xdata|, DATA
|$T49063| DCD	0xfffffff4

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0N@FFBFFMEL@RTC?5Testing?4?$AA@| DCB "RTC Testing.", 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000	00000000	 DCD         |__GSHandlerCheck|
  00004	00000000	 DCD         |$T49063|

  00008		 |RTCFunc| PROC

; 1503 : {

  00008		 |$LN5@RTCFunc|
  00008	e92d4010	 stmdb       sp!, {r4, lr}
  0000c	e24dd028	 sub         sp, sp, #0x28
  00010		 |$M49064|
  00010	e59f30a8	 ldr         r3, [pc, #0xA8]
  00014	e5933000	 ldr         r3, [r3]
  00018	e58d3024	 str         r3, [sp, #0x24]

; 1504 :     char showChar[][30] = { "RTC Testing."};

  0001c	e59f4098	 ldr         r4, [pc, #0x98]
  00020	e3a02011	 mov         r2, #0x11
  00024	e3a01000	 mov         r1, #0
  00028	e5940004	 ldr         r0, [r4, #4]
  0002c	e5943000	 ldr         r3, [r4]
  00030	e594e008	 ldr         lr, [r4, #8]
  00034	e5d4400c	 ldrb        r4, [r4, #0xC]
  00038	e58d0008	 str         r0, [sp, #8]
  0003c	e28d0011	 add         r0, sp, #0x11
  00040	e58d3004	 str         r3, [sp, #4]
  00044	e58de00c	 str         lr, [sp, #0xC]
  00048	e5cd4010	 strb        r4, [sp, #0x10]
  0004c	eb000000	 bl          memset

; 1505 : 
; 1506 :     /*HANDLE hTwl 
; 1507 :     HANDLE hGPIO;
; 1508 :     UCHAR  status;   
; 1509 : 
; 1510 :     hGPIO = GPIOopen();
; 1511 :     hTwl = TWLOpen();*/
; 1512 :     
; 1513 :     OALLog(L"\r\n Running...\r\n"); 

  00050	e59f0060	 ldr         r0, [pc, #0x60]
  00054	eb000000	 bl          NKDbgPrintfW

; 1514 :     UNREFERENCED_PARAMETER(pMenu);  
; 1515 : 
; 1516 :     //GPIOSetBit(hGPIO, EN_SB_CHARGE);             // Backup battery charge
; 1517 :     //TWLReadByteReg(void * hTWL,DWORD address,BYTE * data)
; 1518 :     DisplayShowBackground(0xFF);

  00058	e3a000ff	 mov         r0, #0xFF
  0005c	eb000000	 bl          DisplayShowBackground

; 1519 :     DoADCRTC();

  00060	eb000000	 bl          DoADCRTC

; 1520 :     ReadBBVoltage();

  00064	eb000000	 bl          ReadBBVoltage

; 1521 :     
; 1522 :     printString(6, 9, RED_COLOR, GREEN_COLOR, showChar);   //y, x

  00068	e28d3004	 add         r3, sp, #4
  0006c	e58d3000	 str         r3, [sp]
  00070	e3a03001	 mov         r3, #1
  00074	e3a02000	 mov         r2, #0
  00078	e3a01009	 mov         r1, #9
  0007c	e3a00006	 mov         r0, #6
  00080	eb000000	 bl          printString

; 1523 :     //BLShowMenu();   
; 1524 :     ReadRTC();

  00084	eb000000	 bl          ReadRTC

; 1525 :     LcdStall(stall_1Sec*5);

  00088	e59f3024	 ldr         r3, [pc, #0x24]
  0008c	e5933000	 ldr         r3, [r3]
  00090	e0830103	 add         r0, r3, r3, lsl #2
  00094	eb000000	 bl          LcdStall

; 1526 :     DisplayShowBackground(0x00);

  00098	e3a00000	 mov         r0, #0
  0009c	eb000000	 bl          DisplayShowBackground
  000a0	e59d0024	 ldr         r0, [sp, #0x24]
  000a4	eb000000	 bl          __security_check_cookie

; 1527 :      
; 1528 : }

  000a8	e28dd028	 add         sp, sp, #0x28
  000ac	e8bd4010	 ldmia       sp!, {r4, lr}
  000b0	e12fff1e	 bx          lr
  000b4		 |$LN6@RTCFunc|
  000b4		 |$LN7@RTCFunc|
  000b4	00000000	 DCD         |stall_1Sec|
  000b8		 |$LN8@RTCFunc|
  000b8	00000000	 DCD         |??_C@_1CA@IPGENFE@?$AA?$AN?$AA?6?$AA?5?$AAR?$AAu?$AAn?$AAn?$AAi?$AAn?$AAg?$AA?4?$AA?4?$AA?4?$AA?$AN?$AA?6?$AA?$AA@|
  000bc		 |$LN9@RTCFunc|
  000bc	00000000	 DCD         |??_C@_0N@FFBFFMEL@RTC?5Testing?4?$AA@|
  000c0		 |$LN10@RTCFunc|
  000c0	00000000	 DCD         |__security_cookie|
  000c4		 |$M49065|

			 ENDP  ; |RTCFunc|

	EXPORT	|??_C@_1EA@NHFEEJFC@?$AA?$AN?$AA?6?$AA?5?$AA?$DO?$AA?$DO?$AA?$DO?$AAA?$AAl?$AAl?$AA?5?$AAf?$AAu?$AAn?$AAc?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAt?$AAe?$AAs?$AAt?$AAi?$AAn?$AAg?$AA?4?$AA?4?$AA?4?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DO@BGFONFOF@?$AA?$AN?$AA?6?$AA?5?$AA?$DO?$AA?$DO?$AA?$DO?$AAA?$AAl?$AAl?$AA?5?$AAf?$AAu?$AAn?$AAc?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAt?$AAe?$AAs?$AAt?$AAe?$AAd?$AA?4?$AA?4?$AA?4?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T49080| DCD	|$LN5@AllFunctio|
	DCD	0x40000c01

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EA@NHFEEJFC@?$AA?$AN?$AA?6?$AA?5?$AA?$DO?$AA?$DO?$AA?$DO?$AAA?$AAl?$AAl?$AA?5?$AAf?$AAu?$AAn?$AAc?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAt?$AAe?$AAs?$AAt?$AAi?$AAn?$AAg?$AA?4?$AA?4?$AA?4?$AA?$AN?$AA?6?$AA?$AA@| DCB 0xd
	DCB	0x0, 0xa, 0x0, " ", 0x0, ">", 0x0, ">", 0x0, ">", 0x0, "A"
	DCB	0x0, "l", 0x0, "l", 0x0, " ", 0x0, "f", 0x0, "u", 0x0, "n"
	DCB	0x0, "c", 0x0, "t", 0x0, "i", 0x0, "o", 0x0, "n", 0x0, " "
	DCB	0x0, "t", 0x0, "e", 0x0, "s", 0x0, "t", 0x0, "i", 0x0, "n"
	DCB	0x0, "g", 0x0, ".", 0x0, ".", 0x0, ".", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DO@BGFONFOF@?$AA?$AN?$AA?6?$AA?5?$AA?$DO?$AA?$DO?$AA?$DO?$AAA?$AAl?$AAl?$AA?5?$AAf?$AAu?$AAn?$AAc?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAt?$AAe?$AAs?$AAt?$AAe?$AAd?$AA?4?$AA?4?$AA?4?$AA?$AN?$AA?6?$AA?$AA@| DCB 0xd
	DCB	0x0, 0xa, 0x0, " ", 0x0, ">", 0x0, ">", 0x0, ">", 0x0, "A"
	DCB	0x0, "l", 0x0, "l", 0x0, " ", 0x0, "f", 0x0, "u", 0x0, "n"
	DCB	0x0, "c", 0x0, "t", 0x0, "i", 0x0, "o", 0x0, "n", 0x0, " "
	DCB	0x0, "t", 0x0, "e", 0x0, "s", 0x0, "t", 0x0, "e", 0x0, "d"
	DCB	0x0, ".", 0x0, ".", 0x0, ".", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |AllFunctionTest_Z2000| PROC

; 1534 : {

  00000		 |$LN5@AllFunctio|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M49077|

; 1535 :     //OAL_BLMENU_ITEM *ptr = NULL;
; 1536 : 	//ALL Test
; 1537 : 	UNREFERENCED_PARAMETER(pMenu);
; 1538 : 	OALBLMenuHeader(L"All Function Test");

  00004	e59f0020	 ldr         r0, [pc, #0x20]
  00008	eb000000	 bl          OALBLMenuHeader

; 1539 :     
; 1540 :     OALLog(L"\r\n >>>All function testing...\r\n");    

  0000c	e59f0014	 ldr         r0, [pc, #0x14]
  00010	eb000000	 bl          NKDbgPrintfW

; 1541 : 
; 1542 : 	/*DisplayTest_Z2170P(ptr);
; 1543 : 	LcdStall(stall_1Sec*3);                         //2
; 1544 :   
; 1545 : 	BkTest_Z2170P(ptr);
; 1546 : 	LcdStall(stall_1Sec*3);                         //3
; 1547 :          
; 1548 : 	DRAMTest_Z2170P(ptr);                                  
; 1549 : 	LcdStall(stall_1Sec*3);                         //4 
; 1550 : 	   
; 1551 : 	KeypadBkTest_Z2170P(ptr);                              
; 1552 : 	LcdStall(stall_1Sec*3);                         //5 */
; 1553 : 	OALLog(L"\r\n >>>All function tested...\r\n");

  00014	e59f0008	 ldr         r0, [pc, #8]
  00018	eb000000	 bl          NKDbgPrintfW

; 1554 : }

  0001c	e49de004	 ldr         lr, [sp], #4
  00020	e12fff1e	 bx          lr
  00024		 |$LN6@AllFunctio|
  00024		 |$LN7@AllFunctio|
  00024	00000000	 DCD         |??_C@_1DO@BGFONFOF@?$AA?$AN?$AA?6?$AA?5?$AA?$DO?$AA?$DO?$AA?$DO?$AAA?$AAl?$AAl?$AA?5?$AAf?$AAu?$AAn?$AAc?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAt?$AAe?$AAs?$AAt?$AAe?$AAd?$AA?4?$AA?4?$AA?4?$AA?$AN?$AA?6?$AA?$AA@|
  00028		 |$LN8@AllFunctio|
  00028	00000000	 DCD         |??_C@_1EA@NHFEEJFC@?$AA?$AN?$AA?6?$AA?5?$AA?$DO?$AA?$DO?$AA?$DO?$AAA?$AAl?$AAl?$AA?5?$AAf?$AAu?$AAn?$AAc?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAt?$AAe?$AAs?$AAt?$AAi?$AAn?$AAg?$AA?4?$AA?4?$AA?4?$AA?$AN?$AA?6?$AA?$AA@|
  0002c		 |$LN9@AllFunctio|
  0002c	00000000	 DCD         |??_C@_1CE@NDBHKBD@?$AAA?$AAl?$AAl?$AA?5?$AAF?$AAu?$AAn?$AAc?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?$AA@|
  00030		 |$M49078|

			 ENDP  ; |AllFunctionTest_Z2000|


  00000			 AREA	 |.pdata|, PDATA
|$T49091| DCD	|$LN5@DisplayTes@2|
	DCD	0x40000b01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DisplayTest_Z2000| PROC

; 1560 : {

  00000		 |$LN5@DisplayTes@2|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M49088|

; 1561 :     BLShowLogo();

  00004	eb000000	 bl          BLShowLogo

; 1562 :     OALBLMenuHeader(L"Display Test");

  00008	e59f0018	 ldr         r0, [pc, #0x18]
  0000c	eb000000	 bl          OALBLMenuHeader

; 1563 : 	UNREFERENCED_PARAMETER(pMenu);
; 1564 :     OALLog(L"\r\n Running...\r\n");

  00010	e59f000c	 ldr         r0, [pc, #0xC]
  00014	eb000000	 bl          NKDbgPrintfW

; 1565 : 	//DisplayShow(BSP_Z2000);
; 1566 : 	DisplayShow();

  00018	eb000000	 bl          DisplayShow

; 1567 : }

  0001c	e49de004	 ldr         lr, [sp], #4
  00020	e12fff1e	 bx          lr
  00024		 |$LN6@DisplayTes@2|
  00024		 |$LN7@DisplayTes@2|
  00024	00000000	 DCD         |??_C@_1CA@IPGENFE@?$AA?$AN?$AA?6?$AA?5?$AAR?$AAu?$AAn?$AAn?$AAi?$AAn?$AAg?$AA?4?$AA?4?$AA?4?$AA?$AN?$AA?6?$AA?$AA@|
  00028		 |$LN8@DisplayTes@2|
  00028	00000000	 DCD         |??_C@_1BK@FJOPBKKD@?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?$AA@|
  0002c		 |$M49089|

			 ENDP  ; |DisplayTest_Z2000|


  00000			 AREA	 |.pdata|, PDATA
|$T49101| DCD	|$LN5@BkTest_Z21|
	DCD	0x40000d01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |BkTest_Z2170P| PROC

; 234  : {

  00000		 |$LN5@BkTest_Z21|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M49098|

; 235  : 	OALBLMenuHeader(L"LCM Backlight Test");

  00004	e59f0024	 ldr         r0, [pc, #0x24]
  00008	eb000000	 bl          OALBLMenuHeader

; 236  : 	UNREFERENCED_PARAMETER(pMenu);
; 237  : 	
; 238  : 	DisplayShowBackground(0xFF);

  0000c	e3a000ff	 mov         r0, #0xFF
  00010	eb000000	 bl          DisplayShowBackground

; 239  :     SetBacklight();

  00014	eb000000	 bl          SetBacklight

; 240  :     BLShowLogo();

  00018	eb000000	 bl          BLShowLogo

; 241  :     
; 242  :     OALLog(L"\rTested ok!! \r\n");

  0001c	e59f0008	 ldr         r0, [pc, #8]
  00020	eb000000	 bl          NKDbgPrintfW

; 243  : }

  00024	e49de004	 ldr         lr, [sp], #4
  00028	e12fff1e	 bx          lr
  0002c		 |$LN6@BkTest_Z21|
  0002c		 |$LN7@BkTest_Z21|
  0002c	00000000	 DCD         |??_C@_1CA@NFDHHLIH@?$AA?$AN?$AAT?$AAe?$AAs?$AAt?$AAe?$AAd?$AA?5?$AAo?$AAk?$AA?$CB?$AA?$CB?$AA?5?$AA?$AN?$AA?6?$AA?$AA@|
  00030		 |$LN8@BkTest_Z21|
  00030	00000000	 DCD         |??_C@_1CG@MFOPBHMC@?$AAL?$AAC?$AAM?$AA?5?$AAB?$AAa?$AAc?$AAk?$AAl?$AAi?$AAg?$AAh?$AAt?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?$AA@|
  00034		 |$M49099|

			 ENDP  ; |BkTest_Z2170P|

	EXPORT	|??_C@_1BK@HOMLCKFD@?$AAB?$AAu?$AAr?$AAn?$AA?9?$AAI?$AAn?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?$AA@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T49112| DCD	|$LN8@BurnIn_Z21|
	DCD	0x40001b01

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BK@HOMLCKFD@?$AAB?$AAu?$AAr?$AAn?$AA?9?$AAI?$AAn?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?$AA@| DCB "B"
	DCB	0x0, "u", 0x0, "r", 0x0, "n", 0x0, "-", 0x0, "I", 0x0, "n"
	DCB	0x0, " ", 0x0, "T", 0x0, "e", 0x0, "s", 0x0, "t", 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |BurnIn_Z2170P| PROC

; 1308 : {

  00000		 |$LN8@BurnIn_Z21|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M49109|

; 1309 :     OAL_BLMENU_ITEM *ptr = NULL;
; 1310 :     
; 1311 :     UNREFERENCED_PARAMETER(pMenu);
; 1312 : 	OALBLMenuHeader(L"Burn-In Test");

  00004	e59f005c	 ldr         r0, [pc, #0x5C]
  00008	eb000000	 bl          OALBLMenuHeader
  0000c	e59f4050	 ldr         r4, [pc, #0x50]
  00010		 |$LL2@BurnIn_Z21|

; 1313 : 	
; 1314 : 	for(;;){
; 1315 : 	    //OALLog(L"\r\n >>>Display Testing...\r\n");
; 1316 : 	    DisplayTest_Z2170P(ptr);

  00010	e3a00000	 mov         r0, #0
  00014	eb000000	 bl          DisplayTest_Z2170P

; 1317 :         LcdStall(stall_1Sec*1); 

  00018	e5940000	 ldr         r0, [r4]
  0001c	eb000000	 bl          LcdStall

; 1318 : 
; 1319 :         //OALLog(L"\r\n >>>LCM Backlight Testing...\r\n");
; 1320 : 	    BkTest_Z2170P(ptr);

  00020	e3a00000	 mov         r0, #0
  00024	eb000000	 bl          BkTest_Z2170P

; 1321 :         LcdStall(stall_1Sec*1); 

  00028	e5940000	 ldr         r0, [r4]
  0002c	eb000000	 bl          LcdStall

; 1322 : 
; 1323 :         //OALLog(L"\r\n >>>DRAM Testing...\r\n");
; 1324 :         DRAMTest_Z2170P(ptr);

  00030	e3a00000	 mov         r0, #0
  00034	eb000000	 bl          DRAMTest_Z2170P

; 1325 :         LcdStall(stall_1Sec*1); 

  00038	e5940000	 ldr         r0, [r4]
  0003c	eb000000	 bl          LcdStall

; 1326 : 
; 1327 :         //OALLog(L"\r\n >>>Keypad Backlight Testing...\r\n");
; 1328 :         KeypadBkTest_Z2170P(ptr);

  00040	e3a00000	 mov         r0, #0
  00044	eb000000	 bl          KeypadBkTest_Z2170P

; 1329 :         LcdStall(stall_1Sec*1); 

  00048	e5940000	 ldr         r0, [r4]
  0004c	eb000000	 bl          LcdStall

; 1330 : 
; 1331 :         LEDTest_Z2170P(ptr); 

  00050	e3a00000	 mov         r0, #0
  00054	eb000000	 bl          LEDTest_Z2170P

; 1332 :         LcdStall(stall_1Sec*1);

  00058	e5940000	 ldr         r0, [r4]
  0005c	eb000000	 bl          LcdStall

; 1333 : 	}

  00060	eaffffea	 b           |$LL2@BurnIn_Z21|
  00064		 |$LN9@BurnIn_Z21|
  00064		 |$LN10@BurnIn_Z21|
  00064	00000000	 DCD         |stall_1Sec|
  00068		 |$LN11@BurnIn_Z21|
  00068	00000000	 DCD         |??_C@_1BK@HOMLCKFD@?$AAB?$AAu?$AAr?$AAn?$AA?9?$AAI?$AAn?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?$AA@|
  0006c		 |$M49110|

			 ENDP  ; |BurnIn_Z2170P|


  00000			 AREA	 |.pdata|, PDATA
|$T49122| DCD	|$LN5@AllFunctio@2|
	DCD	0x40003b01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |AllFunctionTest_Z2170P| PROC

; 172  : {

  00000		 |$LN5@AllFunctio@2|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M49119|

; 173  :     OAL_BLMENU_ITEM *ptr = NULL;
; 174  : 	//ALL Test
; 175  : 	UNREFERENCED_PARAMETER(pMenu);
; 176  : 	OALBLMenuHeader(L"All Function Test");

  00004	e59f00dc	 ldr         r0, [pc, #0xDC]
  00008	eb000000	 bl          OALBLMenuHeader

; 177  :     
; 178  :     OALLog(L"\r\n >>>All function testing...\r\n");    

  0000c	e59f00d0	 ldr         r0, [pc, #0xD0]
  00010	eb000000	 bl          NKDbgPrintfW

; 179  : 
; 180  : 	DisplayTest_Z2170P(ptr);

  00014	e3a00000	 mov         r0, #0
  00018	eb000000	 bl          DisplayTest_Z2170P

; 181  : 	LcdStall(stall_1Sec*2);                     //2

  0001c	e59f40bc	 ldr         r4, [pc, #0xBC]
  00020	e5943000	 ldr         r3, [r4]
  00024	e1a00083	 mov         r0, r3, lsl #1
  00028	eb000000	 bl          LcdStall

; 182  :   
; 183  : 	BkTest_Z2170P(ptr);

  0002c	e3a00000	 mov         r0, #0
  00030	eb000000	 bl          BkTest_Z2170P

; 184  : 	LcdStall(stall_1Sec*2);                     //3

  00034	e5943000	 ldr         r3, [r4]
  00038	e1a00083	 mov         r0, r3, lsl #1
  0003c	eb000000	 bl          LcdStall

; 185  :          
; 186  : 	DRAMTest_Z2170P(ptr);                                  

  00040	e3a00000	 mov         r0, #0
  00044	eb000000	 bl          DRAMTest_Z2170P

; 187  : 	LcdStall(stall_1Sec*2);                     //4 

  00048	e5943000	 ldr         r3, [r4]
  0004c	e1a00083	 mov         r0, r3, lsl #1
  00050	eb000000	 bl          LcdStall

; 188  : 	   
; 189  : 	KeypadBkTest_Z2170P(ptr);                              

  00054	e3a00000	 mov         r0, #0
  00058	eb000000	 bl          KeypadBkTest_Z2170P

; 190  : 	LcdStall(stall_1Sec*2);                     //5 

  0005c	e5943000	 ldr         r3, [r4]
  00060	e1a00083	 mov         r0, r3, lsl #1
  00064	eb000000	 bl          LcdStall

; 191  : 
; 192  : 	TouchPanelTest_Z2170P(ptr);                 //6 

  00068	e3a00000	 mov         r0, #0
  0006c	eb000000	 bl          TouchPanelTest_Z2170P

; 193  :     LcdStall(stall_1Sec*2);

  00070	e5943000	 ldr         r3, [r4]
  00074	e1a00083	 mov         r0, r3, lsl #1
  00078	eb000000	 bl          LcdStall

; 194  :     
; 195  :     BatteryTest_Z2170P(ptr);                    //7 

  0007c	e3a00000	 mov         r0, #0
  00080	eb000000	 bl          BatteryTest_Z2170P

; 196  :     LcdStall(stall_1Sec*2);

  00084	e5943000	 ldr         r3, [r4]
  00088	e1a00083	 mov         r0, r3, lsl #1
  0008c	eb000000	 bl          LcdStall

; 197  :     
; 198  :     LEDTest_Z2170P(ptr);                        //8

  00090	e3a00000	 mov         r0, #0
  00094	eb000000	 bl          LEDTest_Z2170P

; 199  :     LcdStall(stall_1Sec*2);

  00098	e5943000	 ldr         r3, [r4]
  0009c	e1a00083	 mov         r0, r3, lsl #1
  000a0	eb000000	 bl          LcdStall

; 200  :     
; 201  :     BarcodeTest_Z2170P(ptr);                    //9 

  000a4	e3a00000	 mov         r0, #0
  000a8	eb000000	 bl          BarcodeTest_Z2170P

; 202  :     LcdStall(stall_1Sec*2);

  000ac	e5943000	 ldr         r3, [r4]
  000b0	e1a00083	 mov         r0, r3, lsl #1
  000b4	eb000000	 bl          LcdStall

; 203  :     
; 204  :     /*AudioAndMIC_Z2170P(ptr);                  //
; 205  :     LcdStall(stall_1Sec*2);*/
; 206  :     
; 207  :     KeypadFunc_Z2170P(ptr);                     //a

  000b8	e3a00000	 mov         r0, #0
  000bc	eb000000	 bl          KeypadFunc_Z2170P

; 208  :     LcdStall(stall_1Sec*2);

  000c0	e5943000	 ldr         r3, [r4]
  000c4	e1a00083	 mov         r0, r3, lsl #1
  000c8	eb000000	 bl          LcdStall

; 209  :     
; 210  :     /*BurnIn_Z2170P(ptr);                       //b
; 211  :     LcdStall(stall_1Sec*2);*/
; 212  : 	
; 213  : 	OALLog(L"\r\n >>>All function tested...\r\n");

  000cc	e59f0008	 ldr         r0, [pc, #8]
  000d0	eb000000	 bl          NKDbgPrintfW

; 214  : }

  000d4	e8bd4010	 ldmia       sp!, {r4, lr}
  000d8	e12fff1e	 bx          lr
  000dc		 |$LN6@AllFunctio@2|
  000dc		 |$LN7@AllFunctio@2|
  000dc	00000000	 DCD         |??_C@_1DO@BGFONFOF@?$AA?$AN?$AA?6?$AA?5?$AA?$DO?$AA?$DO?$AA?$DO?$AAA?$AAl?$AAl?$AA?5?$AAf?$AAu?$AAn?$AAc?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAt?$AAe?$AAs?$AAt?$AAe?$AAd?$AA?4?$AA?4?$AA?4?$AA?$AN?$AA?6?$AA?$AA@|
  000e0		 |$LN8@AllFunctio@2|
  000e0	00000000	 DCD         |stall_1Sec|
  000e4		 |$LN9@AllFunctio@2|
  000e4	00000000	 DCD         |??_C@_1EA@NHFEEJFC@?$AA?$AN?$AA?6?$AA?5?$AA?$DO?$AA?$DO?$AA?$DO?$AAA?$AAl?$AAl?$AA?5?$AAf?$AAu?$AAn?$AAc?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAt?$AAe?$AAs?$AAt?$AAi?$AAn?$AAg?$AA?4?$AA?4?$AA?4?$AA?$AN?$AA?6?$AA?$AA@|
  000e8		 |$LN10@AllFunctio@2|
  000e8	00000000	 DCD         |??_C@_1CE@NDBHKBD@?$AAA?$AAl?$AAl?$AA?5?$AAF?$AAu?$AAn?$AAc?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?$AA@|
  000ec		 |$M49120|

			 ENDP  ; |AllFunctionTest_Z2170P|

	END
