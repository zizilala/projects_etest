; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\Z2170P\SRC\BOOTLOADER\EBOOT\functionTest.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|DisplayTest_Z2000|
	EXPORT	|AllFunctionTest_Z2000|
	EXPORT	|??_C@_1CE@DFLFAFMD@?$AAE?$AAx?$AAi?$AAt?$AA?5?$AAa?$AAn?$AAd?$AA?5?$AAC?$AAo?$AAn?$AAt?$AAi?$AAn?$AAu?$AAe?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|AutoScanFunc|
	EXPORT	|??_C@_1BE@FABONDOI@?$AAA?$AAu?$AAt?$AAo?$AA?5?$AAS?$AAc?$AAa?$AAn?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|RAMAccessTest|
	EXPORT	|??_C@_1DI@GCPLOKAO@?$AAR?$AAA?$AAM?$AA?5?$AAA?$AAc?$AAc?$AAe?$AAs?$AAs?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?$CI?$AAC?$AAo?$AAm?$AAp?$AAl?$AAe?$AAt?$AAe?$AAl?$AAy?$AA?$CJ?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|BurnIn_Z2170P|
	EXPORT	|??_C@_1BA@ECNEDNKA@?$AAB?$AAu?$AAr?$AAn?$AA?9?$AAI?$AAn?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|KeypadFunc_Z2170P|
	EXPORT	|??_C@_1CE@POLGPPDB@?$AAK?$AAe?$AAy?$AAp?$AAa?$AAd?$AA?5?$AAf?$AAu?$AAn?$AAc?$AAt?$AAi?$AAo?$AAn?$AAa?$AAl?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|BarcodeTest_Z2170P|
	EXPORT	|??_C@_1CC@DJCNJJMD@?$AAB?$AAa?$AAr?$AAc?$AAo?$AAd?$AAe?$AA?5?$AAS?$AAc?$AAa?$AAn?$AAn?$AAi?$AAn?$AAg?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|LEDTest_Z2170P|
	EXPORT	|??_C@_1BM@FKKAMPJP@?$AAL?$AAE?$AAD?$AA?5?$AAI?$AAn?$AAd?$AAi?$AAc?$AAa?$AAt?$AAo?$AAr?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|BatteryTest_Z2170P|
	EXPORT	|??_C@_1BK@KIOELMDE@?$AAB?$AAa?$AAt?$AAt?$AAe?$AAr?$AAy?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|TouchPanelTest_Z2170P|
	EXPORT	|??_C@_1CC@BNGFPPEB@?$AAT?$AAo?$AAu?$AAc?$AAh?$AA?5?$AAP?$AAa?$AAn?$AAe?$AAl?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|KeypadBkTest_Z2170P|
	EXPORT	|??_C@_1CM@GFKLDENM@?$AAK?$AAe?$AAy?$AAp?$AAa?$AAd?$AA?5?$AAB?$AAa?$AAc?$AAk?$AAl?$AAi?$AAg?$AAh?$AAt?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|DRAMTest_Z2170P|
	EXPORT	|??_C@_1BE@DFLOJDLG@?$AAD?$AAR?$AAA?$AAM?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|BkTest_Z2170P|
	EXPORT	|??_C@_1CG@MFOPBHMC@?$AAL?$AAC?$AAM?$AA?5?$AAB?$AAa?$AAc?$AAk?$AAl?$AAi?$AAg?$AAh?$AAt?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|DisplayTest_Z2170P|
	EXPORT	|??_C@_1BK@FJOPBKKD@?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|AllFunctionTest_Z2170P|
	EXPORT	|??_C@_1CE@NDBHKBD@?$AAA?$AAl?$AAl?$AA?5?$AAF?$AAu?$AAn?$AAc?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|sleep1Sec| [ DATA ]
	EXPORT	|pUartRegs| [ DATA ]
	EXPORT	|g_menu2170PTest| [ DATA ]
	EXPORT	|g_menuZ2000Test| [ DATA ]

  00000			 AREA	 |.data|, DATA
	 COMMON	|ghTwl|, 0x4

	 COMMON	|gKeypadMatrix|, 0x8


  00000			 AREA	 |.bss|, NOINIT
|pUartRegs| %	0x4
|keyStatus| %	0x68

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CE@DFLFAFMD@?$AAE?$AAx?$AAi?$AAt?$AA?5?$AAa?$AAn?$AAd?$AA?5?$AAC?$AAo?$AAn?$AAt?$AAi?$AAn?$AAu?$AAe?$AA?$AA@| DCB "E"
	DCB	0x0, "x", 0x0, "i", 0x0, "t", 0x0, " ", 0x0, "a", 0x0, "n"
	DCB	0x0, "d", 0x0, " ", 0x0, "C", 0x0, "o", 0x0, "n", 0x0, "t"
	DCB	0x0, "i", 0x0, "n", 0x0, "u", 0x0, "e", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BE@FABONDOI@?$AAA?$AAu?$AAt?$AAo?$AA?5?$AAS?$AAc?$AAa?$AAn?$AA?$AA@| DCB "A"
	DCB	0x0, "u", 0x0, "t", 0x0, "o", 0x0, " ", 0x0, "S", 0x0, "c"
	DCB	0x0, "a", 0x0, "n", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DI@GCPLOKAO@?$AAR?$AAA?$AAM?$AA?5?$AAA?$AAc?$AAc?$AAe?$AAs?$AAs?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?$CI?$AAC?$AAo?$AAm?$AAp?$AAl?$AAe?$AAt?$AAe?$AAl?$AAy?$AA?$CJ?$AA?$AA@| DCB "R"
	DCB	0x0, "A", 0x0, "M", 0x0, " ", 0x0, "A", 0x0, "c", 0x0, "c"
	DCB	0x0, "e", 0x0, "s", 0x0, "s", 0x0, " ", 0x0, "T", 0x0, "e"
	DCB	0x0, "s", 0x0, "t", 0x0, "(", 0x0, "C", 0x0, "o", 0x0, "m"
	DCB	0x0, "p", 0x0, "l", 0x0, "e", 0x0, "t", 0x0, "e", 0x0, "l"
	DCB	0x0, "y", 0x0, ")", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BA@ECNEDNKA@?$AAB?$AAu?$AAr?$AAn?$AA?9?$AAI?$AAn?$AA?$AA@| DCB "B"
	DCB	0x0, "u", 0x0, "r", 0x0, "n", 0x0, "-", 0x0, "I", 0x0, "n"
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CE@POLGPPDB@?$AAK?$AAe?$AAy?$AAp?$AAa?$AAd?$AA?5?$AAf?$AAu?$AAn?$AAc?$AAt?$AAi?$AAo?$AAn?$AAa?$AAl?$AA?$AA@| DCB "K"
	DCB	0x0, "e", 0x0, "y", 0x0, "p", 0x0, "a", 0x0, "d", 0x0, " "
	DCB	0x0, "f", 0x0, "u", 0x0, "n", 0x0, "c", 0x0, "t", 0x0, "i"
	DCB	0x0, "o", 0x0, "n", 0x0, "a", 0x0, "l", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CC@DJCNJJMD@?$AAB?$AAa?$AAr?$AAc?$AAo?$AAd?$AAe?$AA?5?$AAS?$AAc?$AAa?$AAn?$AAn?$AAi?$AAn?$AAg?$AA?$AA@| DCB "B"
	DCB	0x0, "a", 0x0, "r", 0x0, "c", 0x0, "o", 0x0, "d", 0x0, "e"
	DCB	0x0, " ", 0x0, "S", 0x0, "c", 0x0, "a", 0x0, "n", 0x0, "n"
	DCB	0x0, "i", 0x0, "n", 0x0, "g", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BM@FKKAMPJP@?$AAL?$AAE?$AAD?$AA?5?$AAI?$AAn?$AAd?$AAi?$AAc?$AAa?$AAt?$AAo?$AAr?$AA?$AA@| DCB "L"
	DCB	0x0, "E", 0x0, "D", 0x0, " ", 0x0, "I", 0x0, "n", 0x0, "d"
	DCB	0x0, "i", 0x0, "c", 0x0, "a", 0x0, "t", 0x0, "o", 0x0, "r"
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BK@KIOELMDE@?$AAB?$AAa?$AAt?$AAt?$AAe?$AAr?$AAy?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?$AA@| DCB "B"
	DCB	0x0, "a", 0x0, "t", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "y"
	DCB	0x0, " ", 0x0, "T", 0x0, "e", 0x0, "s", 0x0, "t", 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CC@BNGFPPEB@?$AAT?$AAo?$AAu?$AAc?$AAh?$AA?5?$AAP?$AAa?$AAn?$AAe?$AAl?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?$AA@| DCB "T"
	DCB	0x0, "o", 0x0, "u", 0x0, "c", 0x0, "h", 0x0, " ", 0x0, "P"
	DCB	0x0, "a", 0x0, "n", 0x0, "e", 0x0, "l", 0x0, " ", 0x0, "T"
	DCB	0x0, "e", 0x0, "s", 0x0, "t", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CM@GFKLDENM@?$AAK?$AAe?$AAy?$AAp?$AAa?$AAd?$AA?5?$AAB?$AAa?$AAc?$AAk?$AAl?$AAi?$AAg?$AAh?$AAt?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?$AA@| DCB "K"
	DCB	0x0, "e", 0x0, "y", 0x0, "p", 0x0, "a", 0x0, "d", 0x0, " "
	DCB	0x0, "B", 0x0, "a", 0x0, "c", 0x0, "k", 0x0, "l", 0x0, "i"
	DCB	0x0, "g", 0x0, "h", 0x0, "t", 0x0, " ", 0x0, "T", 0x0, "e"
	DCB	0x0, "s", 0x0, "t", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BE@DFLOJDLG@?$AAD?$AAR?$AAA?$AAM?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?$AA@| DCB "D"
	DCB	0x0, "R", 0x0, "A", 0x0, "M", 0x0, " ", 0x0, "T", 0x0, "e"
	DCB	0x0, "s", 0x0, "t", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CG@MFOPBHMC@?$AAL?$AAC?$AAM?$AA?5?$AAB?$AAa?$AAc?$AAk?$AAl?$AAi?$AAg?$AAh?$AAt?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?$AA@| DCB "L"
	DCB	0x0, "C", 0x0, "M", 0x0, " ", 0x0, "B", 0x0, "a", 0x0, "c"
	DCB	0x0, "k", 0x0, "l", 0x0, "i", 0x0, "g", 0x0, "h", 0x0, "t"
	DCB	0x0, " ", 0x0, "T", 0x0, "e", 0x0, "s", 0x0, "t", 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BK@FJOPBKKD@?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?$AA@| DCB "D"
	DCB	0x0, "i", 0x0, "s", 0x0, "p", 0x0, "l", 0x0, "a", 0x0, "y"
	DCB	0x0, " ", 0x0, "T", 0x0, "e", 0x0, "s", 0x0, "t", 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CE@NDBHKBD@?$AAA?$AAl?$AAl?$AA?5?$AAF?$AAu?$AAn?$AAc?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?$AA@| DCB "A"
	DCB	0x0, "l", 0x0, "l", 0x0, " ", 0x0, "F", 0x0, "u", 0x0, "n"
	DCB	0x0, "c", 0x0, "t", 0x0, "i", 0x0, "o", 0x0, "n", 0x0, " "
	DCB	0x0, "T", 0x0, "e", 0x0, "s", 0x0, "t", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.data|, DATA
|sleep1Sec| DCD	0x3e8
|?count@?1??KeypadFuncMatrix@@9@9| DCD 0x1a		; `KeypadFuncMatrix'::`2'::count
|g_menu2170PTest| DCW 0x31
	%	2
	DCD	|??_C@_1CE@NDBHKBD@?$AAA?$AAl?$AAl?$AA?5?$AAF?$AAu?$AAn?$AAc?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?$AA@|
	DCD	|AllFunctionTest_Z2170P|
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCW	0x32
	%	2
	DCD	|??_C@_1BK@FJOPBKKD@?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?$AA@|
	DCD	|DisplayTest_Z2170P|
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCW	0x33
	%	2
	DCD	|??_C@_1CG@MFOPBHMC@?$AAL?$AAC?$AAM?$AA?5?$AAB?$AAa?$AAc?$AAk?$AAl?$AAi?$AAg?$AAh?$AAt?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?$AA@|
	DCD	|BkTest_Z2170P|
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCW	0x34
	%	2
	DCD	|??_C@_1BE@DFLOJDLG@?$AAD?$AAR?$AAA?$AAM?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?$AA@|
	DCD	|DRAMTest_Z2170P|
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCW	0x35
	%	2
	DCD	|??_C@_1CM@GFKLDENM@?$AAK?$AAe?$AAy?$AAp?$AAa?$AAd?$AA?5?$AAB?$AAa?$AAc?$AAk?$AAl?$AAi?$AAg?$AAh?$AAt?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?$AA@|
	DCD	|KeypadBkTest_Z2170P|
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCW	0x36
	%	2
	DCD	|??_C@_1CC@BNGFPPEB@?$AAT?$AAo?$AAu?$AAc?$AAh?$AA?5?$AAP?$AAa?$AAn?$AAe?$AAl?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?$AA@|
	DCD	|TouchPanelTest_Z2170P|
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCW	0x37
	%	2
	DCD	|??_C@_1BK@KIOELMDE@?$AAB?$AAa?$AAt?$AAt?$AAe?$AAr?$AAy?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?$AA@|
	DCD	|BatteryTest_Z2170P|
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCW	0x38
	%	2
	DCD	|??_C@_1BM@FKKAMPJP@?$AAL?$AAE?$AAD?$AA?5?$AAI?$AAn?$AAd?$AAi?$AAc?$AAa?$AAt?$AAo?$AAr?$AA?$AA@|
	DCD	|LEDTest_Z2170P|
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCW	0x39
	%	2
	DCD	|??_C@_1CC@DJCNJJMD@?$AAB?$AAa?$AAr?$AAc?$AAo?$AAd?$AAe?$AA?5?$AAS?$AAc?$AAa?$AAn?$AAn?$AAi?$AAn?$AAg?$AA?$AA@|
	DCD	|BarcodeTest_Z2170P|
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCW	0x61
	%	2
	DCD	|??_C@_1CE@POLGPPDB@?$AAK?$AAe?$AAy?$AAp?$AAa?$AAd?$AA?5?$AAf?$AAu?$AAn?$AAc?$AAt?$AAi?$AAo?$AAn?$AAa?$AAl?$AA?$AA@|
	DCD	|KeypadFunc_Z2170P|
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCW	0x62
	%	2
	DCD	|??_C@_1BA@ECNEDNKA@?$AAB?$AAu?$AAr?$AAn?$AA?9?$AAI?$AAn?$AA?$AA@|
	DCD	|BurnIn_Z2170P|
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCW	0x63
	%	2
	DCD	|??_C@_1DI@GCPLOKAO@?$AAR?$AAA?$AAM?$AA?5?$AAA?$AAc?$AAc?$AAe?$AAs?$AAs?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?$CI?$AAC?$AAo?$AAm?$AAp?$AAl?$AAe?$AAt?$AAe?$AAl?$AAy?$AA?$CJ?$AA?$AA@|
	DCD	|RAMAccessTest|
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCW	0x64
	%	2
	DCD	|??_C@_1BE@FABONDOI@?$AAA?$AAu?$AAt?$AAo?$AA?5?$AAS?$AAc?$AAa?$AAn?$AA?$AA@|
	DCD	|AutoScanFunc|
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCW	0x30
	%	2
	DCD	|??_C@_1CE@DFLFAFMD@?$AAE?$AAx?$AAi?$AAt?$AA?5?$AAa?$AAn?$AAd?$AA?5?$AAC?$AAo?$AAn?$AAt?$AAi?$AAn?$AAu?$AAe?$AA?$AA@|
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCW	0x0
	%	2
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
|g_menuZ2000Test| DCW 0x31
	%	2
	DCD	|??_C@_1CE@NDBHKBD@?$AAA?$AAl?$AAl?$AA?5?$AAF?$AAu?$AAn?$AAc?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?$AA@|
	DCD	|AllFunctionTest_Z2000|
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCW	0x32
	%	2
	DCD	|??_C@_1BK@FJOPBKKD@?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?$AA@|
	DCD	|DisplayTest_Z2000|
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCW	0x30
	%	2
	DCD	|??_C@_1CE@DFLFAFMD@?$AAE?$AAx?$AAi?$AAt?$AA?5?$AAa?$AAn?$AAd?$AA?5?$AAC?$AAo?$AAn?$AAt?$AAi?$AAn?$AAu?$AAe?$AA?$AA@|
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCW	0x0
	%	2
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0

  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
	EXPORT	|??_C@_1CA@IPGENFE@?$AA?$AN?$AA?6?$AA?5?$AAR?$AAu?$AAn?$AAn?$AAi?$AAn?$AAg?$AA?4?$AA?4?$AA?4?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CA@NFDHHLIH@?$AA?$AN?$AAT?$AAe?$AAs?$AAt?$AAe?$AAd?$AA?5?$AAo?$AAk?$AA?$CB?$AA?$CB?$AA?5?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|DisplayShow|
	IMPORT	|NKDbgPrintfW|
	IMPORT	|OALBLMenuHeader|
; File c:\wince600\platform\z2170p\src\bootloader\eboot\functiontest.c

  00000			 AREA	 |.pdata|, PDATA
|$T48382| DCD	|$LN5@DisplayTes|
	DCD	0x40000d01

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CA@IPGENFE@?$AA?$AN?$AA?6?$AA?5?$AAR?$AAu?$AAn?$AAn?$AAi?$AAn?$AAg?$AA?4?$AA?4?$AA?4?$AA?$AN?$AA?6?$AA?$AA@| DCB 0xd
	DCB	0x0, 0xa, 0x0, " ", 0x0, "R", 0x0, "u", 0x0, "n", 0x0, "n"
	DCB	0x0, "i", 0x0, "n", 0x0, "g", 0x0, ".", 0x0, ".", 0x0, "."
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CA@NFDHHLIH@?$AA?$AN?$AAT?$AAe?$AAs?$AAt?$AAe?$AAd?$AA?5?$AAo?$AAk?$AA?$CB?$AA?$CB?$AA?5?$AA?$AN?$AA?6?$AA?$AA@| DCB 0xd
	DCB	0x0, "T", 0x0, "e", 0x0, "s", 0x0, "t", 0x0, "e", 0x0, "d"
	DCB	0x0, " ", 0x0, "o", 0x0, "k", 0x0, "!", 0x0, "!", 0x0, " "
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DisplayTest_Z2170P| PROC

; 223  : {

  00000		 |$LN5@DisplayTes|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M48379|

; 224  :     //BLShowLogo();
; 225  :     OALBLMenuHeader(L"Display Test");

  00004	e59f0024	 ldr         r0, [pc, #0x24]
  00008	eb000000	 bl          OALBLMenuHeader

; 226  : 	UNREFERENCED_PARAMETER(pMenu);
; 227  :     OALLog(L"\r\n Running...\r\n");

  0000c	e59f0018	 ldr         r0, [pc, #0x18]
  00010	eb000000	 bl          NKDbgPrintfW

; 228  : 	DisplayShow();

  00014	eb000000	 bl          DisplayShow

; 229  : 	
; 230  : 	OALLog(L"\rTested ok!! \r\n");

  00018	e59f0008	 ldr         r0, [pc, #8]
  0001c	eb000000	 bl          NKDbgPrintfW

; 231  : }

  00020	e49de004	 ldr         lr, [sp], #4
  00024	e12fff1e	 bx          lr
  00028		 |$LN6@DisplayTes|
  00028		 |$LN7@DisplayTes|
  00028	00000000	 DCD         |??_C@_1CA@NFDHHLIH@?$AA?$AN?$AAT?$AAe?$AAs?$AAt?$AAe?$AAd?$AA?5?$AAo?$AAk?$AA?$CB?$AA?$CB?$AA?5?$AA?$AN?$AA?6?$AA?$AA@|
  0002c		 |$LN8@DisplayTes|
  0002c	00000000	 DCD         |??_C@_1CA@IPGENFE@?$AA?$AN?$AA?6?$AA?5?$AAR?$AAu?$AAn?$AAn?$AAi?$AAn?$AAg?$AA?4?$AA?4?$AA?4?$AA?$AN?$AA?6?$AA?$AA@|
  00030		 |$LN9@DisplayTes|
  00030	00000000	 DCD         |??_C@_1BK@FJOPBKKD@?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?$AA@|
  00034		 |$M48380|

			 ENDP  ; |DisplayTest_Z2170P|

	EXPORT	|SetBacklight|
	EXPORT	|??_C@_1FE@PFEMMGFN@?$AA?$AN?$AA?5?$AA?$CB?$AAP?$AAl?$AAu?$AAs?$AA?5?$AAa?$AAf?$AAt?$AAe?$AAr?$AA?5?$AAb?$AAr?$AAi?$AAg?$AAh?$AAt?$AAn?$AAe?$AAs?$AAs?$AA?5?$AAs?$AAc?$AAa?$AAl?$AAe?$AA?5?$AAa@| [ DATA ] ; `string'
	IMPORT	|GPIOClose|
	IMPORT	|printInt|
	IMPORT	|DisplayShowBackground|
	IMPORT	|GPIOSetBit|
	IMPORT	|LcdStall|
	IMPORT	|gd1Sec|
	IMPORT	|GPIOClrBit|
	IMPORT	|GPIOOpen|

  00000			 AREA	 |.pdata|, PDATA
|$T48398| DCD	|$LN12@SetBacklig|
	DCD	0x40004f02

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FE@PFEMMGFN@?$AA?$AN?$AA?5?$AA?$CB?$AAP?$AAl?$AAu?$AAs?$AA?5?$AAa?$AAf?$AAt?$AAe?$AAr?$AA?5?$AAb?$AAr?$AAi?$AAg?$AAh?$AAt?$AAn?$AAe?$AAs?$AAs?$AA?5?$AAs?$AAc?$AAa?$AAl?$AAe?$AA?5?$AAa@| DCB 0xd
	DCB	0x0, " ", 0x0, "!", 0x0, "P", 0x0, "l", 0x0, "u", 0x0, "s"
	DCB	0x0, " ", 0x0, "a", 0x0, "f", 0x0, "t", 0x0, "e", 0x0, "r"
	DCB	0x0, " ", 0x0, "b", 0x0, "r", 0x0, "i", 0x0, "g", 0x0, "h"
	DCB	0x0, "t", 0x0, "n", 0x0, "e", 0x0, "s", 0x0, "s", 0x0, " "
	DCB	0x0, "s", 0x0, "c", 0x0, "a", 0x0, "l", 0x0, "e", 0x0, " "
	DCB	0x0, "a", 0x0, "t", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, " "
	DCB	0x0, "%", 0x0, "%", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |SetBacklight| PROC

; 254  : {

  00000		 |$LN12@SetBacklig|
  00000	e92d43f0	 stmdb       sp!, {r4 - r9, lr}
  00004	e24dd030	 sub         sp, sp, #0x30
  00008		 |$M48395|

; 255  :     HANDLE hGPIO;
; 256  :     //WCHAR key;
; 257  :     int i, value, k, scale = 0;    
; 258  :     int AAT3123Code[11] = { 1, 4 , 7, 10, 13, 16, 19, 22, 25, 28, 32};

  00008	e3a07019	 mov         r7, #0x19
  0000c	e3a03001	 mov         r3, #1
  00010	e3a02004	 mov         r2, #4
  00014	e3a01007	 mov         r1, #7
  00018	e3a0000a	 mov         r0, #0xA
  0001c	e3a0e00d	 mov         lr, #0xD
  00020	e3a04010	 mov         r4, #0x10
  00024	e3a05013	 mov         r5, #0x13
  00028	e3a06016	 mov         r6, #0x16
  0002c	e3a0801c	 mov         r8, #0x1C
  00030	e3a09020	 mov         r9, #0x20
  00034	e58d7024	 str         r7, [sp, #0x24]
  00038	e3a07000	 mov         r7, #0
  0003c	e58d3004	 str         r3, [sp, #4]
  00040	e58d2008	 str         r2, [sp, #8]
  00044	e58d100c	 str         r1, [sp, #0xC]
  00048	e58d0010	 str         r0, [sp, #0x10]
  0004c	e58de014	 str         lr, [sp, #0x14]
  00050	e58d4018	 str         r4, [sp, #0x18]
  00054	e58d501c	 str         r5, [sp, #0x1C]
  00058	e58d6020	 str         r6, [sp, #0x20]
  0005c	e58d8028	 str         r8, [sp, #0x28]
  00060	e58d902c	 str         r9, [sp, #0x2C]

; 259  :                           //0  10  20  30 40  50  60  70  80  90  100
; 260  :    
; 261  :     hGPIO = GPIOOpen();

  00064	eb000000	 bl          GPIOOpen

; 262  : 
; 263  :     GPIOClrBit(hGPIO, BK_SET_GPIO);

  00068	e3a0103d	 mov         r1, #0x3D
  0006c	e1a05000	 mov         r5, r0
  00070	eb000000	 bl          GPIOClrBit

; 264  :     LcdStall(gd1Sec); 

  00074	e59f80bc	 ldr         r8, [pc, #0xBC]
  00078	e5980000	 ldr         r0, [r8]
  0007c	eb000000	 bl          LcdStall

; 265  :             
; 266  :     for(i=1, k=0; i<=32; i++)

  00080	e3a04001	 mov         r4, #1
  00084	e28d6004	 add         r6, sp, #4
  00088		 |$LL5@SetBacklig|

; 267  :     {
; 268  :         if(i == (value = AAT3123Code[k]))

  00088	e5963000	 ldr         r3, [r6]

; 269  :         {
; 270  :             GPIOClrBit(hGPIO, BK_SET_GPIO);

  0008c	e3a0103d	 mov         r1, #0x3D
  00090	e1a00005	 mov         r0, r5
  00094	e1540003	 cmp         r4, r3
  00098	1a000015	 bne         |$LN2@SetBacklig|
  0009c	eb000000	 bl          GPIOClrBit

; 271  :             LcdStall(1);

  000a0	e3a00001	 mov         r0, #1
  000a4	eb000000	 bl          LcdStall

; 272  :             GPIOSetBit(hGPIO, BK_SET_GPIO);

  000a8	e3a0103d	 mov         r1, #0x3D
  000ac	e1a00005	 mov         r0, r5
  000b0	eb000000	 bl          GPIOSetBit

; 273  :             //
; 274  :             DisplayShowBackground(0xFF);

  000b4	e3a000ff	 mov         r0, #0xFF
  000b8	eb000000	 bl          DisplayShowBackground

; 275  :             printInt(9, 14, BLUE_COLOR, TRANSPARENT_COLOR, scale);

  000bc	e3a03009	 mov         r3, #9
  000c0	e3a02002	 mov         r2, #2
  000c4	e3a0100e	 mov         r1, #0xE
  000c8	e3a00009	 mov         r0, #9
  000cc	e58d7000	 str         r7, [sp]
  000d0	eb000000	 bl          printInt

; 276  :             LcdStall(gd1Sec);

  000d4	e5980000	 ldr         r0, [r8]
  000d8	eb000000	 bl          LcdStall

; 277  :             OALLog(L"\r !Plus after brightness scale at %d %%\r\n",scale);

  000dc	e59f0050	 ldr         r0, [pc, #0x50]
  000e0	e1a01007	 mov         r1, r7
  000e4	eb000000	 bl          NKDbgPrintfW

; 278  :             scale+=10;

  000e8	e287700a	 add         r7, r7, #0xA

; 279  :             k++;

  000ec	e2866004	 add         r6, r6, #4

; 280  :         }else{

  000f0	ea000007	 b           |$LN4@SetBacklig|
  000f4		 |$LN2@SetBacklig|

; 281  :             GPIOClrBit(hGPIO, BK_SET_GPIO);

  000f4	eb000000	 bl          GPIOClrBit

; 282  :             LcdStall(1);

  000f8	e3a00001	 mov         r0, #1
  000fc	eb000000	 bl          LcdStall

; 283  :             GPIOSetBit(hGPIO, BK_SET_GPIO);

  00100	e3a0103d	 mov         r1, #0x3D
  00104	e1a00005	 mov         r0, r5
  00108	eb000000	 bl          GPIOSetBit

; 284  :             LcdStall(1);

  0010c	e3a00001	 mov         r0, #1
  00110	eb000000	 bl          LcdStall
  00114		 |$LN4@SetBacklig|
  00114	e2844001	 add         r4, r4, #1
  00118	e3540020	 cmp         r4, #0x20
  0011c	daffffd9	 ble         |$LL5@SetBacklig|

; 285  :         }
; 286  :     }   
; 287  :     GPIOClose(hGPIO);  

  00120	e1a00005	 mov         r0, r5
  00124	eb000000	 bl          GPIOClose

; 288  : }

  00128	e28dd030	 add         sp, sp, #0x30
  0012c	e8bd43f0	 ldmia       sp!, {r4 - r9, lr}
  00130	e12fff1e	 bx          lr
  00134		 |$LN13@SetBacklig|
  00134		 |$LN14@SetBacklig|
  00134	00000000	 DCD         |??_C@_1FE@PFEMMGFN@?$AA?$AN?$AA?5?$AA?$CB?$AAP?$AAl?$AAu?$AAs?$AA?5?$AAa?$AAf?$AAt?$AAe?$AAr?$AA?5?$AAb?$AAr?$AAi?$AAg?$AAh?$AAt?$AAn?$AAe?$AAs?$AAs?$AA?5?$AAs?$AAc?$AAa?$AAl?$AAe?$AA?5?$AAa@|
  00138		 |$LN15@SetBacklig|
  00138	00000000	 DCD         |gd1Sec|
  0013c		 |$M48396|

			 ENDP  ; |SetBacklight|

	EXPORT	|__$ArrayPad$| [ DATA ]
	EXPORT	|??_C@_15JNBOKNOG@?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CK@KEBMPBOA@?$AA?$AN?$AAS?$AAc?$AAa?$AAn?$AAn?$AAe?$AAd?$AA?5?$AAs?$AAi?$AAz?$AAe?$AA?3?$AA?5?$AA?$CF?$AAd?$AAk?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CO@GBEKHDOH@?$AA?$AN?$AA?6?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?3?$AA?5?$AA0?$AAX?$AA?$CF?$AAX?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_0BL@LOOKLKHN@Scanning?5size?5per?51KB?5tip?3?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_07DIMJBLAB@Failure?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DE@LFDKHCLM@?$AA?$AN?$AA?6?$AA?5?$AA?$CB?$AAS?$AAt?$AAa?$AAr?$AAt?$AA?5?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?3?$AA?5?$AA0?$AAX?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DE@KFOFBOBN@?$AA?$AN?$AA?6?$AA?5?$AA?$CB?$AAT?$AAe?$AAs?$AAt?$AA1?$AA?5?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?3?$AA?5?$AA0?$AAX?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DE@FOMMJKGJ@?$AA?$AN?$AA?6?$AA?5?$AA?$CB?$AAE?$AAn?$AAd?$AA?5?$AA?5?$AA?5?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?3?$AA?5?$AA0?$AAX?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FM@GKBCNJJJ@?$AA?$AN?$AA?6?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9@| [ DATA ] ; `string'
	IMPORT	|printStringMode|
	IMPORT	|__GSHandlerCheck|
	IMPORT	|gTestPass|
	IMPORT	|__security_cookie|
	IMPORT	|memset|
	IMPORT	|memcpy|
	IMPORT	|__security_check_cookie|

  00000			 AREA	 |.pdata|, PDATA
|$T48421| DCD	|$LN13@DRAMTest_Z|
	DCD	0xc0009f02

  00000			 AREA	 |.xdata|, DATA
|$T48417| DCD	0xffffffd8

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_15JNBOKNOG@?$AA?$AN?$AA?6?$AA?$AA@| DCB 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CK@KEBMPBOA@?$AA?$AN?$AAS?$AAc?$AAa?$AAn?$AAn?$AAe?$AAd?$AA?5?$AAs?$AAi?$AAz?$AAe?$AA?3?$AA?5?$AA?$CF?$AAd?$AAk?$AA?$AN?$AA?6?$AA?$AA@| DCB 0xd
	DCB	0x0, "S", 0x0, "c", 0x0, "a", 0x0, "n", 0x0, "n", 0x0, "e"
	DCB	0x0, "d", 0x0, " ", 0x0, "s", 0x0, "i", 0x0, "z", 0x0, "e"
	DCB	0x0, ":", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, "k", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CO@GBEKHDOH@?$AA?$AN?$AA?6?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?3?$AA?5?$AA0?$AAX?$AA?$CF?$AAX?$AA?$AA@| DCB 0xd
	DCB	0x0, 0xa, 0x0, " ", 0x0, "E", 0x0, "r", 0x0, "r", 0x0, "o"
	DCB	0x0, "r", 0x0, " ", 0x0, "A", 0x0, "d", 0x0, "d", 0x0, "r"
	DCB	0x0, "e", 0x0, "s", 0x0, "s", 0x0, ":", 0x0, " ", 0x0, "0"
	DCB	0x0, "X", 0x0, "%", 0x0, "X", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0BL@LOOKLKHN@Scanning?5size?5per?51KB?5tip?3?$AA@| DCB "Scanning s"
	DCB	"ize per 1KB tip:", 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_07DIMJBLAB@Failure?$AA@| DCB "Failure", 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DE@LFDKHCLM@?$AA?$AN?$AA?6?$AA?5?$AA?$CB?$AAS?$AAt?$AAa?$AAr?$AAt?$AA?5?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?3?$AA?5?$AA0?$AAX?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AA@| DCB 0xd
	DCB	0x0, 0xa, 0x0, " ", 0x0, "!", 0x0, "S", 0x0, "t", 0x0, "a"
	DCB	0x0, "r", 0x0, "t", 0x0, " ", 0x0, "A", 0x0, "d", 0x0, "d"
	DCB	0x0, "r", 0x0, "e", 0x0, "s", 0x0, "s", 0x0, ":", 0x0, " "
	DCB	0x0, "0", 0x0, "X", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "X"
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DE@KFOFBOBN@?$AA?$AN?$AA?6?$AA?5?$AA?$CB?$AAT?$AAe?$AAs?$AAt?$AA1?$AA?5?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?3?$AA?5?$AA0?$AAX?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AA@| DCB 0xd
	DCB	0x0, 0xa, 0x0, " ", 0x0, "!", 0x0, "T", 0x0, "e", 0x0, "s"
	DCB	0x0, "t", 0x0, "1", 0x0, " ", 0x0, "A", 0x0, "d", 0x0, "d"
	DCB	0x0, "r", 0x0, "e", 0x0, "s", 0x0, "s", 0x0, ":", 0x0, " "
	DCB	0x0, "0", 0x0, "X", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "X"
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DE@FOMMJKGJ@?$AA?$AN?$AA?6?$AA?5?$AA?$CB?$AAE?$AAn?$AAd?$AA?5?$AA?5?$AA?5?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?3?$AA?5?$AA0?$AAX?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AA@| DCB 0xd
	DCB	0x0, 0xa, 0x0, " ", 0x0, "!", 0x0, "E", 0x0, "n", 0x0, "d"
	DCB	0x0, " ", 0x0, " ", 0x0, " ", 0x0, "A", 0x0, "d", 0x0, "d"
	DCB	0x0, "r", 0x0, "e", 0x0, "s", 0x0, "s", 0x0, ":", 0x0, " "
	DCB	0x0, "0", 0x0, "X", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "X"
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FM@GKBCNJJJ@?$AA?$AN?$AA?6?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9@| DCB 0xd
	DCB	0x0, 0xa, 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-"
	DCB	0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-"
	DCB	0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-"
	DCB	0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-"
	DCB	0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-"
	DCB	0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-"
	DCB	0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-"
	DCB	0x0, "-", 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000	00000000	 DCD         |__GSHandlerCheck|
  00004	00000000	 DCD         |$T48417|

  00008		 |DRAMTest_Z2170P| PROC

; 305  : {

  00008		 |$LN13@DRAMTest_Z|
  00008	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  0000c	e24dd068	 sub         sp, sp, #0x68
  00010		 |$M48418|
  00010	e59f3268	 ldr         r3, [pc, #0x268]
  00014	e5933000	 ldr         r3, [r3]
  00018	e58d3064	 str         r3, [sp, #0x64]

; 306  :     ULONG  startAddress = IMAGE_SHARE_ARGS_CA;
; 307  :     ULONG  endAddress = startAddress|(256 *1024 *1024-1); //endAddress = startAddress + size(256MB) 
; 308  :     ULONG   test1_Address = (startAddress|0x0000FFFF);      //
; 309  :     //ULONG   test2_Address = (startAddress|0x0FFFFF00);
; 310  :     //ULONG   ebootAddress = IMAGE_EBOOT_CODE_CA ;
; 311  :     ULONG   i, testAddress =  0xFFFFFFFF;
; 312  :     BYTE    value, temp, y=0, pattern = 0x1A; 
; 313  :     //ULONG   percentRange;
; 314  :     ULONG   percent, tip;        
; 315  :     char    result[][30] = { "Scanning size per 1KB tip:",

  0001c	e59f1258	 ldr         r1, [pc, #0x258]
  00020	e28d0008	 add         r0, sp, #8
  00024	e3a0201b	 mov         r2, #0x1B
  00028	e3a06000	 mov         r6, #0
  0002c	eb000000	 bl          memcpy
  00030	e3a03000	 mov         r3, #0
  00034	e5cd3023	 strb        r3, [sp, #0x23]
  00038	e5cd3024	 strb        r3, [sp, #0x24]
  0003c	e5cd3025	 strb        r3, [sp, #0x25]

; 316  :                              "*",

  00040	e3a0302a	 mov         r3, #0x2A
  00044	e3a0201c	 mov         r2, #0x1C
  00048	e3a01000	 mov         r1, #0
  0004c	e28d0028	 add         r0, sp, #0x28
  00050	e1cd32b6	 strh        r3, [sp, #0x26]
  00054	eb000000	 bl          memset

; 317  :                              "Failure"
; 318  :                            };

  00058	e59f0218	 ldr         r0, [pc, #0x218]
  0005c	e3a02016	 mov         r2, #0x16
  00060	e3a01000	 mov         r1, #0
  00064	e5903000	 ldr         r3, [r0]
  00068	e590e004	 ldr         lr, [r0, #4]
  0006c	e28d004c	 add         r0, sp, #0x4C
  00070	e58d3044	 str         r3, [sp, #0x44]
  00074	e58de048	 str         lr, [sp, #0x48]
  00078	eb000000	 bl          memset

; 319  :     
; 320  : 	UNREFERENCED_PARAMETER(pMenu);
; 321  : 	OALBLMenuHeader(L"DRAM Test");

  0007c	e59f01f0	 ldr         r0, [pc, #0x1F0]
  00080	eb000000	 bl          OALBLMenuHeader

; 322  : 
; 323  : 	//percentRange = (endAddress - startAddress)/100;
; 324  :     OALLog(L"\r\n !Start Address: 0X%08X", (startAddress&testAddress));

  00084	e59f01e4	 ldr         r0, [pc, #0x1E4]
  00088	e3a01102	 mov         r1, #2, 2
  0008c	eb000000	 bl          NKDbgPrintfW

; 325  :     OALLog(L"\r\n !Test1 Address: 0X%08X", (test1_Address&testAddress));

  00090	e59f01d4	 ldr         r0, [pc, #0x1D4]
  00094	e3e0347f	 mvn         r3, #0x7F, 8
  00098	e22318ff	 eor         r1, r3, #0xFF, 16
  0009c	eb000000	 bl          NKDbgPrintfW

; 326  :     //OALLog(L"\r\n !Test2 Address: 0X%08X", (test2_Address&test));
; 327  :     OALLog(L"\r\n !End   Address: 0X%08X", (endAddress&testAddress));

  000a0	e59f01c0	 ldr         r0, [pc, #0x1C0]
  000a4	e3e01207	 mvn         r1, #7, 4
  000a8	eb000000	 bl          NKDbgPrintfW

; 328  :     OALLog(L"\r\n------------------------------------------\n");

  000ac	e59f01b0	 ldr         r0, [pc, #0x1B0]
  000b0	eb000000	 bl          NKDbgPrintfW

; 329  :     //
; 330  :     DisplayShowBackground(0xFF);

  000b4	e3a000ff	 mov         r0, #0xFF
  000b8	eb000000	 bl          DisplayShowBackground

; 331  :     printStringMode(y, 0, RED_COLOR, TRANSPARENT_COLOR, result, 0);

  000bc	e28d3008	 add         r3, sp, #8
  000c0	e58d3000	 str         r3, [sp]
  000c4	e3a0e000	 mov         lr, #0
  000c8	e3a03009	 mov         r3, #9
  000cc	e3a02000	 mov         r2, #0
  000d0	e3a01000	 mov         r1, #0
  000d4	e3a00000	 mov         r0, #0
  000d8	e58de004	 str         lr, [sp, #4]
  000dc	eb000000	 bl          printStringMode
  000e0	e3a03cff	 mov         r3, #0xFF, 24
  000e4	e38380ff	 orr         r8, r3, #0xFF
  000e8	e3a03c03	 mov         r3, #3, 24
  000ec	e59f716c	 ldr         r7, [pc, #0x16C]
  000f0	e59f4158	 ldr         r4, [pc, #0x158]
  000f4	e59fb160	 ldr         r11, [pc, #0x160]
  000f8	e38390ff	 orr         r9, r3, #0xFF
  000fc	e3a05102	 mov         r5, #2, 2
  00100	e3a0101a	 mov         r1, #0x1A
  00104	e28da008	 add         r10, sp, #8
  00108		 |$LL6@DRAMTest_Z|

; 332  : 	/*for(i=0, percent=0; i<(test1_Address - startAddress); i++)
; 333  : 	{
; 334  :         temp = *(volatile BYTE *)(startAddress + i);        //read data     ;temp(0x8000_0000) to get a address 
; 335  :         *(volatile BYTE *)(startAddress + i) = pattern;     //write pattern ;pattern write into address(1A) 
; 336  :         value = *(volatile BYTE *)(startAddress + i);       //read pattern  ;value == 1A, setup value
; 337  :         *(volatile BYTE *)(startAddress + i) = temp;        //store data
; 338  : 
; 339  :         if(value != pattern)                                //check value(in address value) equal pattern
; 340  :         {
; 341  :             OALLog(L"\r\n Error Address: 0X%X", startAddress+i);
; 342  :         }else{
; 343  :             percent++;
; 344  :             OALLog(L"\r\n Decoding Memoey percent: %d >>>  Address: 0X%X",percent, startAddress+i);   
; 345  :             //OALLog(L"\r\n Address: 0X%X", startAddress+i);
; 346  :         }
; 347  : 
; 348  :         if( (percent%10) == 0){
; 349  :             OALLog(L"\r\n-----------------------------------\n");
; 350  :             LcdStall(gd1Sec); 
; 351  :         }
; 352  : 	}
; 353  :     OALLog(L"\r\n");
; 354  :     LcdStall(gd1Sec*3);*/
; 355  : 
; 356  :     //OALLog(L"\r\n");
; 357  :     for(i=0, percent=1; i<(test1_Address - startAddress); i++, percent++)
; 358  : 	{
; 359  :         temp = *(volatile BYTE *)(startAddress + i);        //read data     ;temp(0x8000_0000) to get a address 

  00108	e5d52000	 ldrb        r2, [r5]

; 360  :         *(volatile BYTE *)(startAddress + i) = pattern;     //write pattern ;pattern write into address(1A) 

  0010c	e5c51000	 strb        r1, [r5]

; 361  :         value = *(volatile BYTE *)(startAddress + i);       //read pattern  ;value == 1A, setup value

  00110	e5d53000	 ldrb        r3, [r5]

; 362  :         *(volatile BYTE *)(startAddress + i) = temp;        //store data

  00114	e5c52000	 strb        r2, [r5]

; 363  :         
; 364  :         if(value != pattern)                                //check value(in address value) equal pattern

  00118	e353001a	 cmp         r3, #0x1A
  0011c	0a000011	 beq         |$LN3@DRAMTest_Z|

; 365  :         {
; 366  :             OALLog(L"\r\n Error Address: 0X%X", startAddress+i);

  00120	e59f0130	 ldr         r0, [pc, #0x130]
  00124	e1a01005	 mov         r1, r5
  00128	eb000000	 bl          NKDbgPrintfW

; 367  :             DisplayShowBackground(0xFF);

  0012c	e3a000ff	 mov         r0, #0xFF
  00130	eb000000	 bl          DisplayShowBackground

; 368  :             printStringMode(0, 0, RED_COLOR, GREEN_COLOR, result,2);

  00134	e3a0e002	 mov         lr, #2
  00138	e58de004	 str         lr, [sp, #4]
  0013c	e28de008	 add         lr, sp, #8
  00140	e3a03001	 mov         r3, #1
  00144	e3a02000	 mov         r2, #0
  00148	e3a01000	 mov         r1, #0
  0014c	e3a00000	 mov         r0, #0
  00150	e58de000	 str         lr, [sp]
  00154	eb000000	 bl          printStringMode

; 369  :             LcdStall(gd1Sec/1000);

  00158	e5971000	 ldr         r1, [r7]
  0015c	e0832491	 umull       r2, r3, r1, r4
  00160	e1a00323	 mov         r0, r3, lsr #6
  00164	eb000000	 bl          LcdStall
  00168		 |$LN3@DRAMTest_Z|

; 370  :         }/*else{
; 371  :             OALLog(L"*");
; 372  :             //percent++;
; 373  :             //OALLog(L"\r\n Decoding Memoey percent: %d >>>  Address: 0X%X",percent, test2_Address+i);   
; 374  :             //OALLog(L"\r\n Address: 0X%X", startAddress+i);
; 375  :         }*/
; 376  : 
; 377  :         if( (percent%1024) == 0){   //scan 1kB show tip 

  00168	e2853106	 add         r3, r5, #6, 2
  0016c	e1130009	 tst         r3, r9
  00170	1a000016	 bne         |$LN5@DRAMTest_Z|

; 378  :             OALLog(L"\rScanned size: %dk\r\n",percent/1024);

  00174	e59f00d8	 ldr         r0, [pc, #0xD8]
  00178	e1a04523	 mov         r4, r3, lsr #10
  0017c	e1a01004	 mov         r1, r4
  00180	eb000000	 bl          NKDbgPrintfW

; 379  :             //
; 380  :             tip = (percent/1024-1);

  00184	e2444001	 sub         r4, r4, #1

; 381  : 
; 382  :             if((tip%30) == 0) ++y;

  00188	e0832b94	 umull       r2, r3, r4, r11
  0018c	e1a03223	 mov         r3, r3, lsr #4
  00190	e0633203	 rsb         r3, r3, r3, lsl #4
  00194	e0543083	 subs        r3, r4, r3, lsl #1
  00198	02863001	 addeq       r3, r6, #1
  0019c	020360ff	 andeq       r6, r3, #0xFF

; 383  :             LcdStall(gd1Sec/2);

  001a0	e5973000	 ldr         r3, [r7]
  001a4	e1a000a3	 mov         r0, r3, lsr #1
  001a8	eb000000	 bl          LcdStall

; 384  :             printStringMode(y, 0+tip, RED_COLOR, TRANSPARENT_COLOR, result, 1);

  001ac	e3a0e001	 mov         lr, #1
  001b0	e3a03009	 mov         r3, #9
  001b4	e3a02000	 mov         r2, #0
  001b8	e1a01004	 mov         r1, r4
  001bc	e1a00006	 mov         r0, r6
  001c0	e58de004	 str         lr, [sp, #4]
  001c4	e58da000	 str         r10, [sp]
  001c8	eb000000	 bl          printStringMode
  001cc	e59f407c	 ldr         r4, [pc, #0x7C]
  001d0		 |$LN5@DRAMTest_Z|
  001d0	e2855001	 add         r5, r5, #1
  001d4	e2588001	 subs        r8, r8, #1
  001d8	e3a0101a	 mov         r1, #0x1A
  001dc	1affffc9	 bne         |$LL6@DRAMTest_Z|

; 385  :             /*else
; 386  :                 printStringMode(y+1, 0+tip, RED_COLOR, TRANSPARENT_COLOR, result, 1);*/ 
; 387  :         }
; 388  : 
; 389  :         /*if(i == ((test1_Address - startAddress)-1)){   //scan 1kB show tip 
; 390  :             result[i][30] = "Scanned size: 64KB...";
; 391  :             DisplayShowBackground(0xFF);
; 392  :             printStringMode(19, 1, RED_COLOR, GREEN_COLOR, result, i);
; 393  :             LcdStall(gd1Sec/1000); 
; 394  :         }*/
; 395  : 	}
; 396  : 	OALLog(L"\r\n");

  001e0	e59f0064	 ldr         r0, [pc, #0x64]
  001e4	eb000000	 bl          NKDbgPrintfW

; 397  :     OALLog(L"\rTested ok!! \r\n");

  001e8	e59f0058	 ldr         r0, [pc, #0x58]
  001ec	eb000000	 bl          NKDbgPrintfW

; 398  :     
; 399  :     //
; 400  :     DisplayShowBackground(0xFF);

  001f0	e3a000ff	 mov         r0, #0xFF
  001f4	eb000000	 bl          DisplayShowBackground

; 401  :     printStringMode(9, 9, RED_COLOR, GREEN_COLOR, gTestPass, 0);

  001f8	e59f1044	 ldr         r1, [pc, #0x44]
  001fc	e3a0e000	 mov         lr, #0
  00200	e3a03001	 mov         r3, #1
  00204	e58d1000	 str         r1, [sp]
  00208	e3a01009	 mov         r1, #9
  0020c	e3a02000	 mov         r2, #0
  00210	e3a00009	 mov         r0, #9
  00214	e58de004	 str         lr, [sp, #4]
  00218	eb000000	 bl          printStringMode

; 402  :     LcdStall(gd1Sec*2);

  0021c	e5973000	 ldr         r3, [r7]
  00220	e1a00083	 mov         r0, r3, lsl #1
  00224	eb000000	 bl          LcdStall

; 403  :     DisplayShowBackground(0xFF);

  00228	e3a000ff	 mov         r0, #0xFF
  0022c	eb000000	 bl          DisplayShowBackground
  00230	e59d0064	 ldr         r0, [sp, #0x64]
  00234	eb000000	 bl          __security_check_cookie

; 404  : 	/*for(i=0, Round=1; i<0xFF; i++)                         //Testing eboot, Ray  131113
; 405  :     {
; 406  :         if(i==65)
; 407  :         {
; 408  :             temp = *(volatile BYTE *)(startAddress + i);        //read data     ;temp(0x8000_0000) to get a address 
; 409  :             *(volatile BYTE *)(startAddress + i) = pattern;     //write pattern ;pattern write into address(1A) 
; 410  :             value = *(volatile BYTE *)(startAddress + i);       //read pattern  ;value == 1A, setup value
; 411  :             *(volatile BYTE *)(startAddress + i) = temp;        //store data   
; 412  :             if(value != pattern)                                //check value(in address value) equal pattern
; 413  :             {
; 414  :                 OALLog(L"\r\n Error Address: 0X%X", (ebootAddress+i));
; 415  :             }
; 416  :         }
; 417  : 
; 418  :         OALLog(L"\r\n Eboot Address: 0x%08x, Value = 0x%08x", (ebootAddress+i),*(volatile BYTE *)(ebootAddress+i));
; 419  :         
; 420  :         if((Round%16)== 0)
; 421  :         {
; 422  :             OALLog(L"\r\n Round %d",Round);
; 423  :             OALLog(L"\r\n---------------------\n"); 
; 424  :             Round++;
; 425  :         }
; 426  :     }*/
; 427  : }

  00238	e28dd068	 add         sp, sp, #0x68
  0023c	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  00240	e12fff1e	 bx          lr
  00244		 |$LN14@DRAMTest_Z|
  00244		 |$LN15@DRAMTest_Z|
  00244	00000000	 DCD         |gTestPass|
  00248		 |$LN16@DRAMTest_Z|
  00248	00000000	 DCD         |??_C@_1CA@NFDHHLIH@?$AA?$AN?$AAT?$AAe?$AAs?$AAt?$AAe?$AAd?$AA?5?$AAo?$AAk?$AA?$CB?$AA?$CB?$AA?5?$AA?$AN?$AA?6?$AA?$AA@|
  0024c		 |$LN17@DRAMTest_Z|
  0024c	00000000	 DCD         |??_C@_15JNBOKNOG@?$AA?$AN?$AA?6?$AA?$AA@|
  00250		 |$LN18@DRAMTest_Z|
  00250	10624dd3	 DCD         0x10624dd3
  00254		 |$LN19@DRAMTest_Z|
  00254	00000000	 DCD         |??_C@_1CK@KEBMPBOA@?$AA?$AN?$AAS?$AAc?$AAa?$AAn?$AAn?$AAe?$AAd?$AA?5?$AAs?$AAi?$AAz?$AAe?$AA?3?$AA?5?$AA?$CF?$AAd?$AAk?$AA?$AN?$AA?6?$AA?$AA@|
  00258		 |$LN20@DRAMTest_Z|
  00258	00000000	 DCD         |??_C@_1CO@GBEKHDOH@?$AA?$AN?$AA?6?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?3?$AA?5?$AA0?$AAX?$AA?$CF?$AAX?$AA?$AA@|
  0025c		 |$LN21@DRAMTest_Z|
  0025c	88888889	 DCD         0x88888889
  00260		 |$LN22@DRAMTest_Z|
  00260	00000000	 DCD         |gd1Sec|
  00264		 |$LN23@DRAMTest_Z|
  00264	00000000	 DCD         |??_C@_1FM@GKBCNJJJ@?$AA?$AN?$AA?6?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9@|
  00268		 |$LN24@DRAMTest_Z|
  00268	00000000	 DCD         |??_C@_1DE@FOMMJKGJ@?$AA?$AN?$AA?6?$AA?5?$AA?$CB?$AAE?$AAn?$AAd?$AA?5?$AA?5?$AA?5?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?3?$AA?5?$AA0?$AAX?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AA@|
  0026c		 |$LN25@DRAMTest_Z|
  0026c	00000000	 DCD         |??_C@_1DE@KFOFBOBN@?$AA?$AN?$AA?6?$AA?5?$AA?$CB?$AAT?$AAe?$AAs?$AAt?$AA1?$AA?5?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?3?$AA?5?$AA0?$AAX?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AA@|
  00270		 |$LN26@DRAMTest_Z|
  00270	00000000	 DCD         |??_C@_1DE@LFDKHCLM@?$AA?$AN?$AA?6?$AA?5?$AA?$CB?$AAS?$AAt?$AAa?$AAr?$AAt?$AA?5?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?3?$AA?5?$AA0?$AAX?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AA@|
  00274		 |$LN27@DRAMTest_Z|
  00274	00000000	 DCD         |??_C@_1BE@DFLOJDLG@?$AAD?$AAR?$AAA?$AAM?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?$AA@|
  00278		 |$LN28@DRAMTest_Z|
  00278	00000000	 DCD         |??_C@_07DIMJBLAB@Failure?$AA@|
  0027c		 |$LN29@DRAMTest_Z|
  0027c	00000000	 DCD         |??_C@_0BL@LOOKLKHN@Scanning?5size?5per?51KB?5tip?3?$AA@|
  00280		 |$LN30@DRAMTest_Z|
  00280	00000000	 DCD         |__security_cookie|
  00284		 |$M48419|

			 ENDP  ; |DRAMTest_Z2170P|

	EXPORT	|??_C@_1EC@NLKOKMKL@?$AA?$AN?$AA?5?$AA?$CB?$AAN?$AAo?$AAw?$AA?5?$AAK?$AAe?$AAy?$AAp?$AAa?$AAd?$AA?5?$AAL?$AAE?$AAD?$AA?5?$AAf?$AAi?$AAr?$AAs?$AAt?$AA?5?$AAf?$AAl?$AAa?$AAs?$AAh?$AA?5?$AA?$AN?$AA?6@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EC@MFHKLEP@?$AA?$AN?$AA?5?$AA?$CB?$AAN?$AAo?$AAw?$AA?5?$AAK?$AAe?$AAy?$AAp?$AAa?$AAd?$AA?5?$AAL?$AAE?$AAD?$AA?5?$AAt?$AAw?$AAi?$AAc?$AAe?$AA?5?$AAf?$AAl?$AAa?$AAs?$AAh?$AA?5?$AA?$AN?$AA?6@| [ DATA ] ; `string'
	IMPORT	|LcdSleep|

  00000			 AREA	 |.pdata|, PDATA
|$T48447| DCD	|$LN5@KeypadBkTe|
	DCD	0x40003e02

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EC@NLKOKMKL@?$AA?$AN?$AA?5?$AA?$CB?$AAN?$AAo?$AAw?$AA?5?$AAK?$AAe?$AAy?$AAp?$AAa?$AAd?$AA?5?$AAL?$AAE?$AAD?$AA?5?$AAf?$AAi?$AAr?$AAs?$AAt?$AA?5?$AAf?$AAl?$AAa?$AAs?$AAh?$AA?5?$AA?$AN?$AA?6@| DCB 0xd
	DCB	0x0, " ", 0x0, "!", 0x0, "N", 0x0, "o", 0x0, "w", 0x0, " "
	DCB	0x0, "K", 0x0, "e", 0x0, "y", 0x0, "p", 0x0, "a", 0x0, "d"
	DCB	0x0, " ", 0x0, "L", 0x0, "E", 0x0, "D", 0x0, " ", 0x0, "f"
	DCB	0x0, "i", 0x0, "r", 0x0, "s", 0x0, "t", 0x0, " ", 0x0, "f"
	DCB	0x0, "l", 0x0, "a", 0x0, "s", 0x0, "h", 0x0, " ", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EC@MFHKLEP@?$AA?$AN?$AA?5?$AA?$CB?$AAN?$AAo?$AAw?$AA?5?$AAK?$AAe?$AAy?$AAp?$AAa?$AAd?$AA?5?$AAL?$AAE?$AAD?$AA?5?$AAt?$AAw?$AAi?$AAc?$AAe?$AA?5?$AAf?$AAl?$AAa?$AAs?$AAh?$AA?5?$AA?$AN?$AA?6@| DCB 0xd
	DCB	0x0, " ", 0x0, "!", 0x0, "N", 0x0, "o", 0x0, "w", 0x0, " "
	DCB	0x0, "K", 0x0, "e", 0x0, "y", 0x0, "p", 0x0, "a", 0x0, "d"
	DCB	0x0, " ", 0x0, "L", 0x0, "E", 0x0, "D", 0x0, " ", 0x0, "t"
	DCB	0x0, "w", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, " ", 0x0, "f"
	DCB	0x0, "l", 0x0, "a", 0x0, "s", 0x0, "h", 0x0, " ", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |KeypadBkTest_Z2170P| PROC

; 433  : {

  00000		 |$LN5@KeypadBkTe|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004	e24dd008	 sub         sp, sp, #8
  00008		 |$M48444|

; 434  : 	DWORD delay = 1000;
; 435  : 	HANDLE hGPIO;
; 436  : 	UNREFERENCED_PARAMETER(pMenu);
; 437  : 	OALBLMenuHeader(L"Keypad Backlight Test");

  00008	e59f00e4	 ldr         r0, [pc, #0xE4]
  0000c	eb000000	 bl          OALBLMenuHeader

; 438  : 
; 439  :     hGPIO = GPIOOpen();

  00010	eb000000	 bl          GPIOOpen

; 440  :        
; 441  :     GPIOSetBit(hGPIO, KP_LED_SET_GPIO);

  00014	e3a0109b	 mov         r1, #0x9B
  00018	e1a05000	 mov         r5, r0
  0001c	eb000000	 bl          GPIOSetBit

; 442  :     LcdStall(100);

  00020	e3a00064	 mov         r0, #0x64
  00024	eb000000	 bl          LcdStall

; 443  :     GPIOClrBit(hGPIO, KP_LED_SET_GPIO);         //Low-active

  00028	e3a0109b	 mov         r1, #0x9B
  0002c	e1a00005	 mov         r0, r5
  00030	eb000000	 bl          GPIOClrBit

; 444  :     OALLog(L"\r !Now Keypad LED first flash \r\n");

  00034	e59f00b4	 ldr         r0, [pc, #0xB4]
  00038	eb000000	 bl          NKDbgPrintfW

; 445  :     LcdSleep(delay*2);

  0003c	e3a00e7d	 mov         r0, #0x7D, 28
  00040	eb000000	 bl          LcdSleep

; 446  :   
; 447  :     GPIOSetBit(hGPIO, KP_LED_SET_GPIO);

  00044	e3a0109b	 mov         r1, #0x9B
  00048	e1a00005	 mov         r0, r5
  0004c	eb000000	 bl          GPIOSetBit

; 448  :     LcdStall(gd1Sec);

  00050	e59f4094	 ldr         r4, [pc, #0x94]
  00054	e5940000	 ldr         r0, [r4]
  00058	eb000000	 bl          LcdStall

; 449  :     GPIOClrBit(hGPIO, KP_LED_SET_GPIO);

  0005c	e3a0109b	 mov         r1, #0x9B
  00060	e1a00005	 mov         r0, r5
  00064	eb000000	 bl          GPIOClrBit

; 450  :     OALLog(L"\r !Now Keypad LED twice flash \r\n");

  00068	e59f0078	 ldr         r0, [pc, #0x78]
  0006c	eb000000	 bl          NKDbgPrintfW

; 451  :     LcdSleep(delay*2);

  00070	e3a00e7d	 mov         r0, #0x7D, 28
  00074	eb000000	 bl          LcdSleep

; 452  : 
; 453  :     GPIOSetBit(hGPIO, KP_LED_SET_GPIO);         //Keypad LED liht Close 

  00078	e3a0109b	 mov         r1, #0x9B
  0007c	e1a00005	 mov         r0, r5
  00080	eb000000	 bl          GPIOSetBit

; 454  : 
; 455  :     GPIOClose(hGPIO);

  00084	e1a00005	 mov         r0, r5
  00088	eb000000	 bl          GPIOClose

; 456  :     DisplayShowBackground(0xFF);

  0008c	e3a000ff	 mov         r0, #0xFF
  00090	eb000000	 bl          DisplayShowBackground

; 457  :     printStringMode(9, 9, RED_COLOR, GREEN_COLOR, gTestPass, 0);

  00094	e59f2048	 ldr         r2, [pc, #0x48]
  00098	e3a0e000	 mov         lr, #0
  0009c	e3a03001	 mov         r3, #1
  000a0	e58d2000	 str         r2, [sp]
  000a4	e3a02000	 mov         r2, #0
  000a8	e3a01009	 mov         r1, #9
  000ac	e3a00009	 mov         r0, #9
  000b0	e58de004	 str         lr, [sp, #4]
  000b4	eb000000	 bl          printStringMode

; 458  :     LcdStall(gd1Sec*2);

  000b8	e5943000	 ldr         r3, [r4]
  000bc	e1a00083	 mov         r0, r3, lsl #1
  000c0	eb000000	 bl          LcdStall

; 459  :     DisplayShowBackground(0xFF);

  000c4	e3a000ff	 mov         r0, #0xFF
  000c8	eb000000	 bl          DisplayShowBackground

; 460  :     OALLog(L"\rTested ok!! \r\n");

  000cc	e59f000c	 ldr         r0, [pc, #0xC]
  000d0	eb000000	 bl          NKDbgPrintfW

; 461  : }

  000d4	e28dd008	 add         sp, sp, #8
  000d8	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  000dc	e12fff1e	 bx          lr
  000e0		 |$LN6@KeypadBkTe|
  000e0		 |$LN7@KeypadBkTe|
  000e0	00000000	 DCD         |??_C@_1CA@NFDHHLIH@?$AA?$AN?$AAT?$AAe?$AAs?$AAt?$AAe?$AAd?$AA?5?$AAo?$AAk?$AA?$CB?$AA?$CB?$AA?5?$AA?$AN?$AA?6?$AA?$AA@|
  000e4		 |$LN8@KeypadBkTe|
  000e4	00000000	 DCD         |gTestPass|
  000e8		 |$LN9@KeypadBkTe|
  000e8	00000000	 DCD         |??_C@_1EC@MFHKLEP@?$AA?$AN?$AA?5?$AA?$CB?$AAN?$AAo?$AAw?$AA?5?$AAK?$AAe?$AAy?$AAp?$AAa?$AAd?$AA?5?$AAL?$AAE?$AAD?$AA?5?$AAt?$AAw?$AAi?$AAc?$AAe?$AA?5?$AAf?$AAl?$AAa?$AAs?$AAh?$AA?5?$AA?$AN?$AA?6@|
  000ec		 |$LN10@KeypadBkTe|
  000ec	00000000	 DCD         |gd1Sec|
  000f0		 |$LN11@KeypadBkTe|
  000f0	00000000	 DCD         |??_C@_1EC@NLKOKMKL@?$AA?$AN?$AA?5?$AA?$CB?$AAN?$AAo?$AAw?$AA?5?$AAK?$AAe?$AAy?$AAp?$AAa?$AAd?$AA?5?$AAL?$AAE?$AAD?$AA?5?$AAf?$AAi?$AAr?$AAs?$AAt?$AA?5?$AAf?$AAl?$AAa?$AAs?$AAh?$AA?5?$AA?$AN?$AA?6@|
  000f4		 |$LN12@KeypadBkTe|
  000f4	00000000	 DCD         |??_C@_1CM@GFKLDENM@?$AAK?$AAe?$AAy?$AAp?$AAa?$AAd?$AA?5?$AAB?$AAa?$AAc?$AAk?$AAl?$AAi?$AAg?$AAh?$AAt?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?$AA@|
  000f8		 |$M48445|

			 ENDP  ; |KeypadBkTest_Z2170P|

	EXPORT	|??_C@_1DG@MPNEEBCD@?$AA?$AN?$AA?5?$AAT?$AAo?$AAu?$AAc?$AAh?$AA?5?$AAP?$AAa?$AAn?$AAe?$AAl?$AA?5?$AAR?$AAu?$AAn?$AAn?$AAi?$AAn?$AAg?$AA?4?$AA?4?$AA?4?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|tsc2046Test|

  00000			 AREA	 |.pdata|, PDATA
|$T48461| DCD	|$LN5@TouchPanel|
	DCD	0x40002202

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DG@MPNEEBCD@?$AA?$AN?$AA?5?$AAT?$AAo?$AAu?$AAc?$AAh?$AA?5?$AAP?$AAa?$AAn?$AAe?$AAl?$AA?5?$AAR?$AAu?$AAn?$AAn?$AAi?$AAn?$AAg?$AA?4?$AA?4?$AA?4?$AA?$AN?$AA?6?$AA?$AA@| DCB 0xd
	DCB	0x0, " ", 0x0, "T", 0x0, "o", 0x0, "u", 0x0, "c", 0x0, "h"
	DCB	0x0, " ", 0x0, "P", 0x0, "a", 0x0, "n", 0x0, "e", 0x0, "l"
	DCB	0x0, " ", 0x0, "R", 0x0, "u", 0x0, "n", 0x0, "n", 0x0, "i"
	DCB	0x0, "n", 0x0, "g", 0x0, ".", 0x0, ".", 0x0, ".", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |TouchPanelTest_Z2170P| PROC

; 467  : {

  00000		 |$LN5@TouchPanel|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004	e24dd008	 sub         sp, sp, #8
  00008		 |$M48458|

; 468  :     UNREFERENCED_PARAMETER(pMenu);
; 469  :     OALBLMenuHeader(L"Touch Panel Test");

  00008	e59f0074	 ldr         r0, [pc, #0x74]
  0000c	eb000000	 bl          OALBLMenuHeader

; 470  :     
; 471  :     OALLog(L"\r Touch Panel Running...\r\n");  

  00010	e59f0068	 ldr         r0, [pc, #0x68]
  00014	eb000000	 bl          NKDbgPrintfW

; 472  :     tsc2046Test();

  00018	eb000000	 bl          tsc2046Test

; 473  :     DisplayShowBackground(0xFF);

  0001c	e3a000ff	 mov         r0, #0xFF
  00020	eb000000	 bl          DisplayShowBackground

; 474  :     printStringMode(9, 9, RED_COLOR, GREEN_COLOR, gTestPass, 0);

  00024	e59f2050	 ldr         r2, [pc, #0x50]
  00028	e3a0e000	 mov         lr, #0
  0002c	e3a03001	 mov         r3, #1
  00030	e58d2000	 str         r2, [sp]
  00034	e3a02000	 mov         r2, #0
  00038	e3a01009	 mov         r1, #9
  0003c	e3a00009	 mov         r0, #9
  00040	e58de004	 str         lr, [sp, #4]
  00044	eb000000	 bl          printStringMode

; 475  :     LcdStall(gd1Sec*2);

  00048	e59f3028	 ldr         r3, [pc, #0x28]
  0004c	e5933000	 ldr         r3, [r3]
  00050	e1a00083	 mov         r0, r3, lsl #1
  00054	eb000000	 bl          LcdStall

; 476  :     DisplayShowBackground(0xFF);

  00058	e3a000ff	 mov         r0, #0xFF
  0005c	eb000000	 bl          DisplayShowBackground

; 477  :     OALLog(L"\rTested ok!! \r\n"); 

  00060	e59f000c	 ldr         r0, [pc, #0xC]
  00064	eb000000	 bl          NKDbgPrintfW

; 478  : }

  00068	e28dd008	 add         sp, sp, #8
  0006c	e49de004	 ldr         lr, [sp], #4
  00070	e12fff1e	 bx          lr
  00074		 |$LN6@TouchPanel|
  00074		 |$LN7@TouchPanel|
  00074	00000000	 DCD         |??_C@_1CA@NFDHHLIH@?$AA?$AN?$AAT?$AAe?$AAs?$AAt?$AAe?$AAd?$AA?5?$AAo?$AAk?$AA?$CB?$AA?$CB?$AA?5?$AA?$AN?$AA?6?$AA?$AA@|
  00078		 |$LN8@TouchPanel|
  00078	00000000	 DCD         |gd1Sec|
  0007c		 |$LN9@TouchPanel|
  0007c	00000000	 DCD         |gTestPass|
  00080		 |$LN10@TouchPanel|
  00080	00000000	 DCD         |??_C@_1DG@MPNEEBCD@?$AA?$AN?$AA?5?$AAT?$AAo?$AAu?$AAc?$AAh?$AA?5?$AAP?$AAa?$AAn?$AAe?$AAl?$AA?5?$AAR?$AAu?$AAn?$AAn?$AAi?$AAn?$AAg?$AA?4?$AA?4?$AA?4?$AA?$AN?$AA?6?$AA?$AA@|
  00084		 |$LN11@TouchPanel|
  00084	00000000	 DCD         |??_C@_1CC@BNGFPPEB@?$AAT?$AAo?$AAu?$AAc?$AAh?$AA?5?$AAP?$AAa?$AAn?$AAe?$AAl?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?$AA@|
  00088		 |$M48459|

			 ENDP  ; |TouchPanelTest_Z2170P|

	EXPORT	|I2C_Clk|

  00000			 AREA	 |.pdata|, PDATA
|$T48475| DCD	|$LN5@I2C_Clk|
	DCD	0x40000b01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |I2C_Clk| PROC

; 486  : {

  00000		 |$LN5@I2C_Clk|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M48472|
  00004	e1a04000	 mov         r4, r0

; 487  :     GPIOSetBit(hGPIO_I2C, I2C3_SCL_GPIO);  

  00008	e3a010b8	 mov         r1, #0xB8
  0000c	eb000000	 bl          GPIOSetBit

; 488  :     LcdStall(50);

  00010	e3a00032	 mov         r0, #0x32
  00014	eb000000	 bl          LcdStall

; 489  :     GPIOClrBit(hGPIO_I2C, I2C3_SCL_GPIO); 

  00018	e3a010b8	 mov         r1, #0xB8
  0001c	e1a00004	 mov         r0, r4
  00020	eb000000	 bl          GPIOClrBit

; 490  :     //LcdStall(50);
; 491  : }

  00024	e8bd4010	 ldmia       sp!, {r4, lr}
  00028	e12fff1e	 bx          lr
  0002c		 |$M48473|

			 ENDP  ; |I2C_Clk|

	EXPORT	|I2C_ACKnowledge|
	IMPORT	|GPIOGetBit|
	IMPORT	|GPIOSetMode|

  00000			 AREA	 |.pdata|, PDATA
|$T48483| DCD	|$LN5@I2C_ACKnow|
	DCD	0x40001c01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |I2C_ACKnowledge| PROC

; 496  : {

  00000		 |$LN5@I2C_ACKnow|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M48480|
  00004	e1a04000	 mov         r4, r0

; 497  : 
; 498  :     GPIOSetMode(hGPIO_I2C, I2C3_SDA_GPIO, GPIO_DIR_INPUT);      //Get slave a ACK value for SDA line  

  00008	e3a02001	 mov         r2, #1
  0000c	e3a010b9	 mov         r1, #0xB9
  00010	eb000000	 bl          GPIOSetMode

; 499  :     LcdStall(50);

  00014	e3a00032	 mov         r0, #0x32
  00018	eb000000	 bl          LcdStall

; 500  :     GPIOSetBit(hGPIO_I2C, I2C3_SCL_GPIO);

  0001c	e3a010b8	 mov         r1, #0xB8
  00020	e1a00004	 mov         r0, r4
  00024	eb000000	 bl          GPIOSetBit

; 501  :     LcdStall(50); 

  00028	e3a00032	 mov         r0, #0x32
  0002c	eb000000	 bl          LcdStall

; 502  :     GPIOGetBit(hGPIO_I2C, I2C3_SDA_GPIO); 

  00030	e3a010b9	 mov         r1, #0xB9
  00034	e1a00004	 mov         r0, r4
  00038	eb000000	 bl          GPIOGetBit

; 503  :     LcdStall(50);

  0003c	e3a00032	 mov         r0, #0x32
  00040	eb000000	 bl          LcdStall

; 504  : 
; 505  :     GPIOSetMode(hGPIO_I2C, I2C3_SDA_GPIO, GPIO_DIR_OUTPUT); 

  00044	e3a02000	 mov         r2, #0
  00048	e3a010b9	 mov         r1, #0xB9
  0004c	e1a00004	 mov         r0, r4
  00050	eb000000	 bl          GPIOSetMode

; 506  :     //LcdStall(50);
; 507  :     GPIOClrBit(hGPIO_I2C, I2C3_SCL_GPIO);   

  00054	e3a010b8	 mov         r1, #0xB8
  00058	e1a00004	 mov         r0, r4
  0005c	eb000000	 bl          GPIOClrBit

; 508  :     LcdStall(50);   

  00060	e3a00032	 mov         r0, #0x32
  00064	eb000000	 bl          LcdStall

; 509  :     //Doesnot Needs SDA Line falling time!!
; 510  :     /*GPIOClrBit(hGPIO_I2C, I2C3_SDA_GPIO); 
; 511  :     LcdStall(50);*/
; 512  : }

  00068	e8bd4010	 ldmia       sp!, {r4, lr}
  0006c	e12fff1e	 bx          lr
  00070		 |$M48481|

			 ENDP  ; |I2C_ACKnowledge|

	EXPORT	|I2C_ACKnowledge_READ|

  00000			 AREA	 |.pdata|, PDATA
|$T48491| DCD	|$LN5@I2C_ACKnow@2|
	DCD	0x40001201
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |I2C_ACKnowledge_READ| PROC

; 517  : {       

  00000		 |$LN5@I2C_ACKnow@2|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M48488|
  00004	e1a04000	 mov         r4, r0

; 518  : 
; 519  :     //GPIOSetMode(hGPIO_I2C, I2C3_SDA_GPIO, GPIO_DIR_INPUT);      //Get slave a ACK value for SDA line  
; 520  :     //LcdStall(50);
; 521  :     GPIOSetBit(hGPIO_I2C, I2C3_SCL_GPIO);

  00008	e3a010b8	 mov         r1, #0xB8
  0000c	eb000000	 bl          GPIOSetBit

; 522  :     LcdStall(50); 

  00010	e3a00032	 mov         r0, #0x32
  00014	eb000000	 bl          LcdStall

; 523  :     GPIOGetBit(hGPIO_I2C, I2C3_SDA_GPIO); 

  00018	e3a010b9	 mov         r1, #0xB9
  0001c	e1a00004	 mov         r0, r4
  00020	eb000000	 bl          GPIOGetBit

; 524  :     LcdStall(50);

  00024	e3a00032	 mov         r0, #0x32
  00028	eb000000	 bl          LcdStall

; 525  :     
; 526  :     //GPIOSetMode(hGPIO_I2C, I2C3_SDA_GPIO, GPIO_DIR_OUTPUT); 
; 527  :     //LcdStall(50);
; 528  :     GPIOClrBit(hGPIO_I2C, I2C3_SCL_GPIO);   

  0002c	e3a010b8	 mov         r1, #0xB8
  00030	e1a00004	 mov         r0, r4
  00034	eb000000	 bl          GPIOClrBit

; 529  :     LcdStall(50);         

  00038	e3a00032	 mov         r0, #0x32
  0003c	eb000000	 bl          LcdStall

; 530  : }

  00040	e8bd4010	 ldmia       sp!, {r4, lr}
  00044	e12fff1e	 bx          lr
  00048		 |$M48489|

			 ENDP  ; |I2C_ACKnowledge_READ|

	EXPORT	|I2C_Clk_READ|

  00000			 AREA	 |.pdata|, PDATA
|$T48502| DCD	|$LN5@I2C_Clk_RE|
	DCD	0x40001401
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |I2C_Clk_READ| PROC

; 535  : {

  00000		 |$LN5@I2C_Clk_RE|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M48499|
  00004	e1a05000	 mov         r5, r0

; 536  :     DWORD data=0;
; 537  :     
; 538  :     GPIOSetBit(hGPIO_I2C, I2C3_SCL_GPIO);

  00008	e3a010b8	 mov         r1, #0xB8
  0000c	eb000000	 bl          GPIOSetBit

; 539  :     LcdStall(50);

  00010	e3a00032	 mov         r0, #0x32
  00014	eb000000	 bl          LcdStall

; 540  :     data = GPIOGetBit(hGPIO_I2C, I2C3_SDA_GPIO); 

  00018	e3a010b9	 mov         r1, #0xB9
  0001c	e1a00005	 mov         r0, r5
  00020	eb000000	 bl          GPIOGetBit
  00024	e1a04000	 mov         r4, r0

; 541  :     LcdStall(10);

  00028	e3a0000a	 mov         r0, #0xA
  0002c	eb000000	 bl          LcdStall

; 542  :     
; 543  :     GPIOClrBit(hGPIO_I2C, I2C3_SCL_GPIO);   

  00030	e3a010b8	 mov         r1, #0xB8
  00034	e1a00005	 mov         r0, r5
  00038	eb000000	 bl          GPIOClrBit

; 544  :     LcdStall(50); 

  0003c	e3a00032	 mov         r0, #0x32
  00040	eb000000	 bl          LcdStall

; 545  :     
; 546  :     return (int)data;
; 547  : }

  00044	e1a00004	 mov         r0, r4
  00048	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  0004c	e12fff1e	 bx          lr
  00050		 |$M48500|

			 ENDP  ; |I2C_Clk_READ|

	EXPORT	|I2C_READ|

  00000			 AREA	 |.pdata|, PDATA
|$T48516| DCD	|$LN10@I2C_READ|
	DCD	0x40001b01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |I2C_READ| PROC

; 552  : {

  00000		 |$LN10@I2C_READ|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004		 |$M48513|
  00004	e1a05000	 mov         r5, r0

; 553  :     int i, rx, value;
; 554  :     
; 555  :     GPIOSetMode(hGPIO_I2C, I2C3_SDA_GPIO, GPIO_DIR_INPUT);      //Get slave a ACK value for SDA line  

  00008	e3a02001	 mov         r2, #1
  0000c	e3a010b9	 mov         r1, #0xB9
  00010	eb000000	 bl          GPIOSetMode

; 556  :     LcdStall(50);

  00014	e3a00032	 mov         r0, #0x32
  00018	eb000000	 bl          LcdStall

; 557  :     for(i=7, value=0; i>=0; i--)

  0001c	e3a04007	 mov         r4, #7
  00020	e3a06000	 mov         r6, #0
  00024		 |$LL3@I2C_READ|

; 558  :     {
; 559  :         rx = I2C_Clk_READ(hGPIO_I2C); 

  00024	e1a00005	 mov         r0, r5
  00028	eb000000	 bl          I2C_Clk_READ

; 560  :         value += (rx<<i);

  0002c	e0866410	 add         r6, r6, r0, lsl r4
  00030	e2544001	 subs        r4, r4, #1
  00034	5afffffa	 bpl         |$LL3@I2C_READ|

; 561  :     }
; 562  :     
; 563  :     GPIOSetMode(hGPIO_I2C, I2C3_SDA_GPIO, GPIO_DIR_OUTPUT);      

  00038	e3a02000	 mov         r2, #0
  0003c	e3a010b9	 mov         r1, #0xB9
  00040	e1a00005	 mov         r0, r5
  00044	eb000000	 bl          GPIOSetMode

; 564  :     GPIOClrBit(hGPIO_I2C, I2C3_SCL_GPIO);    

  00048	e3a010b8	 mov         r1, #0xB8
  0004c	e1a00005	 mov         r0, r5
  00050	eb000000	 bl          GPIOClrBit

; 565  :     GPIOClrBit(hGPIO_I2C, I2C3_SDA_GPIO); 

  00054	e3a010b9	 mov         r1, #0xB9
  00058	e1a00005	 mov         r0, r5
  0005c	eb000000	 bl          GPIOClrBit

; 566  :     //LcdStall(50); 
; 567  :     
; 568  :     return value;
; 569  : }

  00060	e1a00006	 mov         r0, r6
  00064	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  00068	e12fff1e	 bx          lr
  0006c		 |$M48514|

			 ENDP  ; |I2C_READ|

	EXPORT	|I2C_WRITE|

  00000			 AREA	 |.pdata|, PDATA
|$T48535| DCD	|$LN17@I2C_WRITE|
	DCD	0x40001a01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |I2C_WRITE| PROC

; 574  : {

  00000		 |$LN17@I2C_WRITE|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004		 |$M48532|
  00004	e1a06001	 mov         r6, r1
  00008	e1a05000	 mov         r5, r0

; 575  :     int i;
; 576  :     for(i=7; i>=0; i--)

  0000c	e3a04007	 mov         r4, #7
  00010	e3a07001	 mov         r7, #1
  00014		 |$LL5@I2C_WRITE|

; 577  :     {
; 578  :         if( CMD&(1<<i) ){

  00014	e1160417	 tst         r6, r7, lsl r4

; 579  :             GPIOSetBit(hGPIO_I2C, I2C3_SDA_GPIO);  

  00018	e3a010b9	 mov         r1, #0xB9
  0001c	e1a00005	 mov         r0, r5
  00020	0a000001	 beq         |$LN2@I2C_WRITE|
  00024	eb000000	 bl          GPIOSetBit

; 580  :             LcdStall(50);
; 581  :             I2C_Clk(hGPIO_I2C);
; 582  :         }else{

  00028	ea000000	 b           |$LN14@I2C_WRITE|
  0002c		 |$LN2@I2C_WRITE|

; 583  :             GPIOClrBit(hGPIO_I2C, I2C3_SDA_GPIO);   

  0002c	eb000000	 bl          GPIOClrBit
  00030		 |$LN14@I2C_WRITE|

; 584  :             LcdStall(50);

  00030	e3a00032	 mov         r0, #0x32
  00034	eb000000	 bl          LcdStall

; 585  :             I2C_Clk(hGPIO_I2C);

  00038	e3a010b8	 mov         r1, #0xB8
  0003c	e1a00005	 mov         r0, r5
  00040	eb000000	 bl          GPIOSetBit
  00044	e3a00032	 mov         r0, #0x32
  00048	eb000000	 bl          LcdStall
  0004c	e3a010b8	 mov         r1, #0xB8
  00050	e1a00005	 mov         r0, r5
  00054	eb000000	 bl          GPIOClrBit
  00058	e2544001	 subs        r4, r4, #1
  0005c	5affffec	 bpl         |$LL5@I2C_WRITE|

; 586  :         }
; 587  :     }           
; 588  : }

  00060	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  00064	e12fff1e	 bx          lr
  00068		 |$M48533|

			 ENDP  ; |I2C_WRITE|

	EXPORT	|I2C_setSlaveAddress_READ|

  00000			 AREA	 |.pdata|, PDATA
|$T48554| DCD	|$LN17@I2C_setSla|
	DCD	0x40001f01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |I2C_setSlaveAddress_READ| PROC

; 593  : {    

  00000		 |$LN17@I2C_setSla|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004		 |$M48551|
  00004	e1a06001	 mov         r6, r1
  00008	e1a05000	 mov         r5, r0

; 594  :     int i; 
; 595  :     for(i=7; i >=0; i--)

  0000c	e3a04007	 mov         r4, #7
  00010	e3a07001	 mov         r7, #1
  00014		 |$LL5@I2C_setSla|

; 596  :     {         
; 597  :         if( addr&(1<<i) ){

  00014	e1160417	 tst         r6, r7, lsl r4

; 598  :             GPIOSetBit(hGPIO_I2C, I2C3_SDA_GPIO);  

  00018	e3a010b9	 mov         r1, #0xB9
  0001c	e1a00005	 mov         r0, r5
  00020	0a000001	 beq         |$LN2@I2C_setSla|
  00024	eb000000	 bl          GPIOSetBit

; 599  :             LcdStall(50);
; 600  :             I2C_Clk(hGPIO_I2C);
; 601  :         }else{

  00028	ea000000	 b           |$LN14@I2C_setSla|
  0002c		 |$LN2@I2C_setSla|

; 602  :             GPIOClrBit(hGPIO_I2C, I2C3_SDA_GPIO);   

  0002c	eb000000	 bl          GPIOClrBit
  00030		 |$LN14@I2C_setSla|

; 603  :             LcdStall(50);

  00030	e3a00032	 mov         r0, #0x32
  00034	eb000000	 bl          LcdStall

; 604  :             I2C_Clk(hGPIO_I2C);

  00038	e3a010b8	 mov         r1, #0xB8
  0003c	e1a00005	 mov         r0, r5
  00040	eb000000	 bl          GPIOSetBit
  00044	e3a00032	 mov         r0, #0x32
  00048	eb000000	 bl          LcdStall
  0004c	e3a010b8	 mov         r1, #0xB8
  00050	e1a00005	 mov         r0, r5
  00054	eb000000	 bl          GPIOClrBit
  00058	e2544001	 subs        r4, r4, #1
  0005c	5affffec	 bpl         |$LL5@I2C_setSla|

; 605  :         }
; 606  :     }
; 607  :     GPIOClrBit(hGPIO_I2C, I2C3_SDA_GPIO); 

  00060	e3a010b9	 mov         r1, #0xB9
  00064	e1a00005	 mov         r0, r5
  00068	eb000000	 bl          GPIOClrBit

; 608  :     LcdStall(50);

  0006c	e3a00032	 mov         r0, #0x32
  00070	eb000000	 bl          LcdStall

; 609  : }

  00074	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  00078	e12fff1e	 bx          lr
  0007c		 |$M48552|

			 ENDP  ; |I2C_setSlaveAddress_READ|

	EXPORT	|I2C_setSlaveAddress|

  00000			 AREA	 |.pdata|, PDATA
|$T48573| DCD	|$LN17@I2C_setSla@2|
	DCD	0x40001a01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |I2C_setSlaveAddress| PROC

; 614  : {    

  00000		 |$LN17@I2C_setSla@2|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004		 |$M48570|
  00004	e1a06001	 mov         r6, r1
  00008	e1a05000	 mov         r5, r0

; 615  :     int i;  
; 616  :     for(i=7; i >=0; i--)

  0000c	e3a04007	 mov         r4, #7
  00010	e3a07001	 mov         r7, #1
  00014		 |$LL5@I2C_setSla@2|

; 617  :     {         
; 618  :         if( addr&(1<<i) ){

  00014	e1160417	 tst         r6, r7, lsl r4

; 619  :             GPIOSetBit(hGPIO_I2C, I2C3_SDA_GPIO);  

  00018	e3a010b9	 mov         r1, #0xB9
  0001c	e1a00005	 mov         r0, r5
  00020	0a000001	 beq         |$LN2@I2C_setSla@2|
  00024	eb000000	 bl          GPIOSetBit

; 620  :             LcdStall(50);
; 621  :             I2C_Clk(hGPIO_I2C);
; 622  :         }else{

  00028	ea000000	 b           |$LN14@I2C_setSla@2|
  0002c		 |$LN2@I2C_setSla@2|

; 623  :             GPIOClrBit(hGPIO_I2C, I2C3_SDA_GPIO);   

  0002c	eb000000	 bl          GPIOClrBit
  00030		 |$LN14@I2C_setSla@2|

; 624  :             LcdStall(50);

  00030	e3a00032	 mov         r0, #0x32
  00034	eb000000	 bl          LcdStall

; 625  :             I2C_Clk(hGPIO_I2C);

  00038	e3a010b8	 mov         r1, #0xB8
  0003c	e1a00005	 mov         r0, r5
  00040	eb000000	 bl          GPIOSetBit
  00044	e3a00032	 mov         r0, #0x32
  00048	eb000000	 bl          LcdStall
  0004c	e3a010b8	 mov         r1, #0xB8
  00050	e1a00005	 mov         r0, r5
  00054	eb000000	 bl          GPIOClrBit
  00058	e2544001	 subs        r4, r4, #1
  0005c	5affffec	 bpl         |$LL5@I2C_setSla@2|

; 626  :         }
; 627  :     }  
; 628  : }

  00060	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  00064	e12fff1e	 bx          lr
  00068		 |$M48571|

			 ENDP  ; |I2C_setSlaveAddress|

	EXPORT	|I2C_START|

  00000			 AREA	 |.pdata|, PDATA
|$T48581| DCD	|$LN5@I2C_START|
	DCD	0x40001701
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |I2C_START| PROC

; 633  : {

  00000		 |$LN5@I2C_START|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M48578|
  00004	e1a04000	 mov         r4, r0

; 634  :     GPIOSetBit(hGPIO_I2C, I2C3_SDA_GPIO);   //S1, SDA = High

  00008	e3a010b9	 mov         r1, #0xB9
  0000c	eb000000	 bl          GPIOSetBit

; 635  :     LcdStall(100);                          

  00010	e3a00064	 mov         r0, #0x64
  00014	eb000000	 bl          LcdStall

; 636  :     GPIOSetBit(hGPIO_I2C, I2C3_SCL_GPIO);   //S2, SCL = High ; kept high   

  00018	e3a010b8	 mov         r1, #0xB8
  0001c	e1a00004	 mov         r0, r4
  00020	eb000000	 bl          GPIOSetBit

; 637  :     LcdStall(100);

  00024	e3a00064	 mov         r0, #0x64
  00028	eb000000	 bl          LcdStall

; 638  :     
; 639  :     GPIOClrBit(hGPIO_I2C, I2C3_SDA_GPIO);   //S3, When SDA changes High -> Low , start bit generating

  0002c	e3a010b9	 mov         r1, #0xB9
  00030	e1a00004	 mov         r0, r4
  00034	eb000000	 bl          GPIOClrBit

; 640  :     LcdStall(50);                           

  00038	e3a00032	 mov         r0, #0x32
  0003c	eb000000	 bl          LcdStall

; 641  :     GPIOClrBit(hGPIO_I2C, I2C3_SCL_GPIO);   //S4, SCL = Low 

  00040	e3a010b8	 mov         r1, #0xB8
  00044	e1a00004	 mov         r0, r4
  00048	eb000000	 bl          GPIOClrBit

; 642  :     LcdStall(50);                          

  0004c	e3a00032	 mov         r0, #0x32
  00050	eb000000	 bl          LcdStall

; 643  : }

  00054	e8bd4010	 ldmia       sp!, {r4, lr}
  00058	e12fff1e	 bx          lr
  0005c		 |$M48579|

			 ENDP  ; |I2C_START|

	EXPORT	|I2C_STOP|

  00000			 AREA	 |.pdata|, PDATA
|$T48589| DCD	|$LN5@I2C_STOP|
	DCD	0x40001201
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |I2C_STOP| PROC

; 648  : {   

  00000		 |$LN5@I2C_STOP|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M48586|
  00004	e1a04000	 mov         r4, r0

; 649  :     //GPIOClrBit(hGPIO_I2C, I2C3_SCL_GPIO);
; 650  :     GPIOClrBit(hGPIO_I2C, I2C3_SDA_GPIO);   //P1

  00008	e3a010b9	 mov         r1, #0xB9
  0000c	eb000000	 bl          GPIOClrBit

; 651  :     LcdStall(50);

  00010	e3a00032	 mov         r0, #0x32
  00014	eb000000	 bl          LcdStall

; 652  :     GPIOSetBit(hGPIO_I2C, I2C3_SCL_GPIO);   //P2

  00018	e3a010b8	 mov         r1, #0xB8
  0001c	e1a00004	 mov         r0, r4
  00020	eb000000	 bl          GPIOSetBit

; 653  :     LcdStall(50);

  00024	e3a00032	 mov         r0, #0x32
  00028	eb000000	 bl          LcdStall

; 654  :     GPIOSetBit(hGPIO_I2C, I2C3_SDA_GPIO);   //P3

  0002c	e3a010b9	 mov         r1, #0xB9
  00030	e1a00004	 mov         r0, r4
  00034	eb000000	 bl          GPIOSetBit

; 655  :     LcdStall(50);    

  00038	e3a00032	 mov         r0, #0x32
  0003c	eb000000	 bl          LcdStall

; 656  : }

  00040	e8bd4010	 ldmia       sp!, {r4, lr}
  00044	e12fff1e	 bx          lr
  00048		 |$M48587|

			 ENDP  ; |I2C_STOP|

	EXPORT	|gaugeInformation|

  00000			 AREA	 |.pdata|, PDATA
|$T48608| DCD	|$LN13@gaugeInfor|
	DCD	0x40004a02
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |gaugeInformation| PROC

; 661  : {

  00000		 |$LN13@gaugeInfor|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004	e24dd040	 sub         sp, sp, #0x40
  00008		 |$M48605|
  00008	e1a04001	 mov         r4, r1
  0000c	e1a06000	 mov         r6, r0
  00010	e3a03a03	 mov         r3, #3, 20

; 662  :     int LSB = 0, MSB = 0; 
; 663  :     int i, temp, sum, a[16];
; 664  : 
; 665  :     LcdStall(12500);

  00014	e38300d4	 orr         r0, r3, #0xD4
  00018	eb000000	 bl          LcdStall

; 666  :     //*************************
; 667  :     I2C_START(hGPIO_I2C);  

  0001c	e1a00006	 mov         r0, r6
  00020	eb000000	 bl          I2C_START

; 668  :     I2C_setSlaveAddress(hGPIO_I2C, BQ27510_ADDRESS_WRITE);   //ADDR[7:1] + R/W[0] 

  00024	e3a010aa	 mov         r1, #0xAA
  00028	e1a00006	 mov         r0, r6
  0002c	eb000000	 bl          I2C_setSlaveAddress

; 669  :     LcdStall(100);    

  00030	e3a00064	 mov         r0, #0x64
  00034	eb000000	 bl          LcdStall

; 670  :     I2C_ACKnowledge(hGPIO_I2C);

  00038	e1a00006	 mov         r0, r6
  0003c	eb000000	 bl          I2C_ACKnowledge

; 671  :     
; 672  :     I2C_WRITE(hGPIO_I2C,  stdCMD);              //CMD[7:0]

  00040	e1a01004	 mov         r1, r4
  00044	e1a00006	 mov         r0, r6
  00048	eb000000	 bl          I2C_WRITE

; 673  :     //I2C_WRITE(hGPIO_I2C, bq27500CMD_VOLT_LSB);
; 674  :     LcdStall(300);                                          //100 200 500-ok 50, Maybe trouble        

  0004c	e3a00f4b	 mov         r0, #0x4B, 30
  00050	eb000000	 bl          LcdStall

; 675  :     I2C_ACKnowledge(hGPIO_I2C);

  00054	e1a00006	 mov         r0, r6
  00058	eb000000	 bl          I2C_ACKnowledge

; 676  :     //*************************
; 677  :      
; 678  :     //Sr
; 679  :     LcdStall(1000); 

  0005c	e3a00ffa	 mov         r0, #0xFA, 30
  00060	eb000000	 bl          LcdStall

; 680  : 
; 681  :     //*************************    
; 682  :     I2C_START(hGPIO_I2C);

  00064	e1a00006	 mov         r0, r6
  00068	eb000000	 bl          I2C_START

; 683  :     I2C_setSlaveAddress_READ(hGPIO_I2C, BQ27510_ADDRESS_READ);

  0006c	e3a010ab	 mov         r1, #0xAB
  00070	e1a00006	 mov         r0, r6
  00074	eb000000	 bl          I2C_setSlaveAddress_READ

; 684  :     LcdStall(300);  

  00078	e3a00f4b	 mov         r0, #0x4B, 30
  0007c	eb000000	 bl          LcdStall

; 685  :     I2C_ACKnowledge(hGPIO_I2C);

  00080	e1a00006	 mov         r0, r6
  00084	eb000000	 bl          I2C_ACKnowledge

; 686  : 
; 687  :     //prepare get Data LSB
; 688  :     LcdStall(300); 

  00088	e3a00f4b	 mov         r0, #0x4B, 30
  0008c	eb000000	 bl          LcdStall

; 689  :     LSB  = I2C_READ(hGPIO_I2C);

  00090	e1a00006	 mov         r0, r6
  00094	eb000000	 bl          I2C_READ
  00098	e1a05000	 mov         r5, r0

; 690  :     LcdStall(300);

  0009c	e3a00f4b	 mov         r0, #0x4B, 30
  000a0	eb000000	 bl          LcdStall

; 691  :     I2C_ACKnowledge_READ(hGPIO_I2C);

  000a4	e1a00006	 mov         r0, r6
  000a8	eb000000	 bl          I2C_ACKnowledge_READ

; 692  : 
; 693  :     //prepare get Data MSB
; 694  :     LcdStall(1000); 

  000ac	e3a00ffa	 mov         r0, #0xFA, 30
  000b0	eb000000	 bl          LcdStall

; 695  :     MSB = I2C_READ(hGPIO_I2C);

  000b4	e1a00006	 mov         r0, r6
  000b8	eb000000	 bl          I2C_READ
  000bc	e1a04000	 mov         r4, r0

; 696  :     LcdStall(300);

  000c0	e3a00f4b	 mov         r0, #0x4B, 30
  000c4	eb000000	 bl          LcdStall

; 697  :     I2C_ACKnowledge_READ(hGPIO_I2C);

  000c8	e1a00006	 mov         r0, r6
  000cc	eb000000	 bl          I2C_ACKnowledge_READ

; 698  :     LcdStall(500);

  000d0	e3a00f7d	 mov         r0, #0x7D, 30
  000d4	eb000000	 bl          LcdStall

; 699  :     I2C_STOP(hGPIO_I2C);

  000d8	e1a00006	 mov         r0, r6
  000dc	eb000000	 bl          I2C_STOP

; 700  :     //*************************
; 701  :     
; 702  :     //RETAILMSG(1, (L" ~Value = 0x%02x 0x%02x \r\n",MSB ,LSB));
; 703  : 
; 704  :     temp = (MSB<<8);
; 705  :     temp |= LSB;

  000e0	e185e404	 orr         lr, r5, r4, lsl #8

; 706  : 
; 707  :     for(i=0, sum=0; i<16; i++){

  000e4	e3a04001	 mov         r4, #1
  000e8	e3a05001	 mov         r5, #1
  000ec	e3a03000	 mov         r3, #0
  000f0	e3a00000	 mov         r0, #0
  000f4	e28d1000	 add         r1, sp, #0
  000f8		 |$LL5@gaugeInfor|

; 708  : 		if(i<8)

  000f8	e3530008	 cmp         r3, #8

; 709  : 			a[i] = temp & (1<<i);

  000fc	b00e2314	 andlt       r2, lr, r4, lsl r3

; 710  : 		else
; 711  : 			a[i] = temp & (1<<i);

  00100	a00e2315	 andge       r2, lr, r5, lsl r3
  00104	e2833001	 add         r3, r3, #1
  00108	e5812000	 str         r2, [r1]

; 712  : 			
; 713  : 		sum += a[i];

  0010c	e2811004	 add         r1, r1, #4
  00110	e3530010	 cmp         r3, #0x10
  00114	e0800002	 add         r0, r0, r2
  00118	bafffff6	 blt         |$LL5@gaugeInfor|

; 714  : 	}
; 715  :     return sum;
; 716  : }

  0011c	e28dd040	 add         sp, sp, #0x40
  00120	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  00124	e12fff1e	 bx          lr
  00128		 |$M48606|

			 ENDP  ; |gaugeInformation|

	EXPORT	|__$ArrayPad$| [ DATA ]
	EXPORT	|InitI2CWithBQ27510|
	EXPORT	|??_C@_0BD@NJGLPLJG@Battery?5Voltages?3?5?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_0P@EJINIIPM@Battery?5Temp?3?5?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_02KMFAIEEM@mV?$AA@| [ DATA ]	; `string'
	EXPORT	|??_C@_1FA@JMHKMEFE@?$AA?5?$AA?$HO?$AAR?$AAe?$AAp?$AAo?$AAr?$AAt?$AAs?$AA?5?$AAt?$AAh?$AAe?$AA?5?$AAd?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AAt?$AAy?$AAp?$AAe?$AA?3?$AA0?$AAx?$AA?$CF?$AA0?$AA2?$AAX@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DO@OLEHJPML@?$AA?5?$AA?$HO?$AAB?$AAa?$AAt?$AAt?$AAe?$AAr?$AAy?$AA?5?$AAT?$AAe?$AAm?$AAp?$AAe?$AAr?$AAa?$AAt?$AAu?$AAr?$AAe?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?5?$AAC?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DK@NOEMNDJB@?$AA?5?$AA?$HO?$AAB?$AAa?$AAt?$AAt?$AAe?$AAr?$AAy?$AA?5?$AAV?$AAo?$AAl?$AAt?$AAa?$AAg?$AAe?$AAs?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?5?$AAm?$AAV?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T48624| DCD	|$LN5@InitI2CWit|
	DCD	0xc000e702

  00000			 AREA	 |.xdata|, DATA
|$T48620| DCD	0xffffffe4

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0BD@NJGLPLJG@Battery?5Voltages?3?5?$AA@| DCB "Battery Voltages: ", 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0P@EJINIIPM@Battery?5Temp?3?5?$AA@| DCB "Battery Temp: ", 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_02KMFAIEEM@mV?$AA@| DCB "mV", 0x0		; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FA@JMHKMEFE@?$AA?5?$AA?$HO?$AAR?$AAe?$AAp?$AAo?$AAr?$AAt?$AAs?$AA?5?$AAt?$AAh?$AAe?$AA?5?$AAd?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AAt?$AAy?$AAp?$AAe?$AA?3?$AA0?$AAx?$AA?$CF?$AA0?$AA2?$AAX@| DCB " "
	DCB	0x0, "~", 0x0, "R", 0x0, "e", 0x0, "p", 0x0, "o", 0x0, "r"
	DCB	0x0, "t", 0x0, "s", 0x0, " ", 0x0, "t", 0x0, "h", 0x0, "e"
	DCB	0x0, " ", 0x0, "d", 0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c"
	DCB	0x0, "e", 0x0, " ", 0x0, "t", 0x0, "y", 0x0, "p", 0x0, "e"
	DCB	0x0, ":", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "2"
	DCB	0x0, "X", 0x0, "%", 0x0, "0", 0x0, "2", 0x0, "X", 0x0, " "
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DO@OLEHJPML@?$AA?5?$AA?$HO?$AAB?$AAa?$AAt?$AAt?$AAe?$AAr?$AAy?$AA?5?$AAT?$AAe?$AAm?$AAp?$AAe?$AAr?$AAa?$AAt?$AAu?$AAr?$AAe?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?5?$AAC?$AA?$AN?$AA?6?$AA?$AA@| DCB " "
	DCB	0x0, "~", 0x0, "B", 0x0, "a", 0x0, "t", 0x0, "t", 0x0, "e"
	DCB	0x0, "r", 0x0, "y", 0x0, " ", 0x0, "T", 0x0, "e", 0x0, "m"
	DCB	0x0, "p", 0x0, "e", 0x0, "r", 0x0, "a", 0x0, "t", 0x0, "u"
	DCB	0x0, "r", 0x0, "e", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "%"
	DCB	0x0, "d", 0x0, " ", 0x0, "C", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DK@NOEMNDJB@?$AA?5?$AA?$HO?$AAB?$AAa?$AAt?$AAt?$AAe?$AAr?$AAy?$AA?5?$AAV?$AAo?$AAl?$AAt?$AAa?$AAg?$AAe?$AAs?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?5?$AAm?$AAV?$AA?$AN?$AA?6?$AA?$AA@| DCB " "
	DCB	0x0, "~", 0x0, "B", 0x0, "a", 0x0, "t", 0x0, "t", 0x0, "e"
	DCB	0x0, "r", 0x0, "y", 0x0, " ", 0x0, "V", 0x0, "o", 0x0, "l"
	DCB	0x0, "t", 0x0, "a", 0x0, "g", 0x0, "e", 0x0, "s", 0x0, " "
	DCB	0x0, "=", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, " ", 0x0, "m"
	DCB	0x0, "V", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000	00000000	 DCD         |__GSHandlerCheck|
  00004	00000000	 DCD         |$T48620|

  00008		 |InitI2CWithBQ27510| PROC

; 721  : {

  00008		 |$LN5@InitI2CWit|
  00008	e92d41f0	 stmdb       sp!, {r4 - r8, lr}
  0000c	e24ddf4e	 sub         sp, sp, #0x4E, 30
  00010		 |$M48621|
  00010	e1a04000	 mov         r4, r0
  00014	e59f3384	 ldr         r3, [pc, #0x384]
  00018	e5933000	 ldr         r3, [r3]
  0001c	e58d3134	 str         r3, [sp, #0x134]

; 722  :     bq_dataram data;
; 723  :     int  LSB = 0, MSB = 0;
; 724  :     int  row = 1, col = 3;
; 725  :     char unit[10][30] = {"Battery Voltages: ",

  00020	e59f1374	 ldr         r1, [pc, #0x374]
  00024	e28d0008	 add         r0, sp, #8
  00028	e3a02013	 mov         r2, #0x13
  0002c	eb000000	 bl          memcpy
  00030	e3a0200b	 mov         r2, #0xB
  00034	e3a01000	 mov         r1, #0
  00038	e28d001b	 add         r0, sp, #0x1B
  0003c	eb000000	 bl          memset

; 726  :                          "Battery Temp: ",

  00040	e59f1350	 ldr         r1, [pc, #0x350]
  00044	e28d0026	 add         r0, sp, #0x26
  00048	e3a0200f	 mov         r2, #0xF
  0004c	eb000000	 bl          memcpy
  00050	e3a0200f	 mov         r2, #0xF
  00054	e3a01000	 mov         r1, #0
  00058	e28d0035	 add         r0, sp, #0x35
  0005c	eb000000	 bl          memset

; 727  :                          "C",

  00060	e3a03043	 mov         r3, #0x43
  00064	e3a0201c	 mov         r2, #0x1C
  00068	e3a01000	 mov         r1, #0
  0006c	e28d0046	 add         r0, sp, #0x46
  00070	e1cd34b4	 strh        r3, [sp, #0x44]
  00074	eb000000	 bl          memset

; 728  :                          "mV"
; 729  :                          };

  00078	e59f0314	 ldr         r0, [pc, #0x314]
  0007c	e3a0201b	 mov         r2, #0x1B
  00080	e3a01000	 mov         r1, #0
  00084	e1d030b0	 ldrh        r3, [r0]
  00088	e5d0e002	 ldrb        lr, [r0, #2]
  0008c	e28d0065	 add         r0, sp, #0x65
  00090	e1cd36b2	 strh        r3, [sp, #0x62]
  00094	e5cde064	 strb        lr, [sp, #0x64]
  00098	eb000000	 bl          memset
  0009c	e3a020b4	 mov         r2, #0xB4
  000a0	e3a01000	 mov         r1, #0
  000a4	e28d0080	 add         r0, sp, #0x80
  000a8	eb000000	 bl          memset

; 730  :     //int i, temp, sum, a[16];
; 731  :     
; 732  :     //*************************
; 733  :     I2C_START(hGPIO_I2C);  

  000ac	e1a00004	 mov         r0, r4
  000b0	eb000000	 bl          I2C_START

; 734  :     I2C_setSlaveAddress(hGPIO_I2C, BQ27510_ADDRESS_WRITE);   //ADDR[7:1] + R/W[0] 

  000b4	e3a010aa	 mov         r1, #0xAA
  000b8	e1a00004	 mov         r0, r4
  000bc	eb000000	 bl          I2C_setSlaveAddress

; 735  :     LcdStall(100);    

  000c0	e3a00064	 mov         r0, #0x64
  000c4	eb000000	 bl          LcdStall

; 736  :     I2C_ACKnowledge(hGPIO_I2C);

  000c8	e1a00004	 mov         r0, r4
  000cc	eb000000	 bl          I2C_ACKnowledge

; 737  :     
; 738  :     I2C_WRITE(hGPIO_I2C,  bq27500CMD_CNTL_LSB);              //CMD[7:0] 

  000d0	e3a01000	 mov         r1, #0
  000d4	e1a00004	 mov         r0, r4
  000d8	eb000000	 bl          I2C_WRITE

; 739  :     LcdStall(300);                                          

  000dc	e3a00f4b	 mov         r0, #0x4B, 30
  000e0	eb000000	 bl          LcdStall

; 740  :     I2C_ACKnowledge(hGPIO_I2C);

  000e4	e1a00004	 mov         r0, r4
  000e8	eb000000	 bl          I2C_ACKnowledge

; 741  : 
; 742  :     I2C_WRITE(hGPIO_I2C,  0x01);          

  000ec	e3a01001	 mov         r1, #1
  000f0	e1a00004	 mov         r0, r4
  000f4	eb000000	 bl          I2C_WRITE

; 743  :     LcdStall(300);                                                  

  000f8	e3a00f4b	 mov         r0, #0x4B, 30
  000fc	eb000000	 bl          LcdStall

; 744  :     I2C_ACKnowledge(hGPIO_I2C);

  00100	e1a00004	 mov         r0, r4
  00104	eb000000	 bl          I2C_ACKnowledge

; 745  : 
; 746  :     I2C_WRITE(hGPIO_I2C,  0x00);          

  00108	e3a01000	 mov         r1, #0
  0010c	e1a00004	 mov         r0, r4
  00110	eb000000	 bl          I2C_WRITE

; 747  :     LcdStall(300);                                                  

  00114	e3a00f4b	 mov         r0, #0x4B, 30
  00118	eb000000	 bl          LcdStall

; 748  :     I2C_ACKnowledge(hGPIO_I2C);

  0011c	e1a00004	 mov         r0, r4
  00120	eb000000	 bl          I2C_ACKnowledge

; 749  :     I2C_STOP(hGPIO_I2C);

  00124	e1a00004	 mov         r0, r4
  00128	eb000000	 bl          I2C_STOP

; 750  :     //*************************
; 751  :     
; 752  :     LcdStall(1000); 

  0012c	e3a00ffa	 mov         r0, #0xFA, 30
  00130	eb000000	 bl          LcdStall

; 753  :     //*************************    
; 754  :     I2C_START(hGPIO_I2C);                                    //Sr 

  00134	e1a00004	 mov         r0, r4
  00138	eb000000	 bl          I2C_START

; 755  :     I2C_setSlaveAddress(hGPIO_I2C, BQ27510_ADDRESS_WRITE);   //ADDR[7:1] + R/W[0] 

  0013c	e3a010aa	 mov         r1, #0xAA
  00140	e1a00004	 mov         r0, r4
  00144	eb000000	 bl          I2C_setSlaveAddress

; 756  :     LcdStall(100);    

  00148	e3a00064	 mov         r0, #0x64
  0014c	eb000000	 bl          LcdStall

; 757  :     I2C_ACKnowledge(hGPIO_I2C);

  00150	e1a00004	 mov         r0, r4
  00154	eb000000	 bl          I2C_ACKnowledge

; 758  :     
; 759  :     I2C_WRITE(hGPIO_I2C,  bq27500CMD_CNTL_LSB);              //CMD[7:0] 

  00158	e3a01000	 mov         r1, #0
  0015c	e1a00004	 mov         r0, r4
  00160	eb000000	 bl          I2C_WRITE

; 760  :     LcdStall(300);                                         

  00164	e3a00f4b	 mov         r0, #0x4B, 30
  00168	eb000000	 bl          LcdStall

; 761  :     I2C_ACKnowledge(hGPIO_I2C);

  0016c	e1a00004	 mov         r0, r4
  00170	eb000000	 bl          I2C_ACKnowledge

; 762  : 
; 763  :     I2C_START(hGPIO_I2C);

  00174	e1a00004	 mov         r0, r4
  00178	eb000000	 bl          I2C_START

; 764  :     I2C_setSlaveAddress_READ(hGPIO_I2C, BQ27510_ADDRESS_READ);

  0017c	e3a010ab	 mov         r1, #0xAB
  00180	e1a00004	 mov         r0, r4
  00184	eb000000	 bl          I2C_setSlaveAddress_READ

; 765  :     LcdStall(300);  

  00188	e3a00f4b	 mov         r0, #0x4B, 30
  0018c	eb000000	 bl          LcdStall

; 766  :     I2C_ACKnowledge(hGPIO_I2C);

  00190	e1a00004	 mov         r0, r4
  00194	eb000000	 bl          I2C_ACKnowledge

; 767  : 
; 768  :     //prepare get Data LSB
; 769  :     LcdStall(300); 

  00198	e3a00f4b	 mov         r0, #0x4B, 30
  0019c	eb000000	 bl          LcdStall

; 770  :     LSB  = I2C_READ(hGPIO_I2C);

  001a0	e1a00004	 mov         r0, r4
  001a4	eb000000	 bl          I2C_READ
  001a8	e1a08000	 mov         r8, r0

; 771  :     LcdStall(300);

  001ac	e3a00f4b	 mov         r0, #0x4B, 30
  001b0	eb000000	 bl          LcdStall

; 772  :     I2C_ACKnowledge_READ(hGPIO_I2C);

  001b4	e1a00004	 mov         r0, r4
  001b8	eb000000	 bl          I2C_ACKnowledge_READ

; 773  : 
; 774  :     //prepare get Data MSB
; 775  :     LcdStall(1000); 

  001bc	e3a00ffa	 mov         r0, #0xFA, 30
  001c0	eb000000	 bl          LcdStall

; 776  :     MSB = I2C_READ(hGPIO_I2C);

  001c4	e1a00004	 mov         r0, r4
  001c8	eb000000	 bl          I2C_READ
  001cc	e1a07000	 mov         r7, r0

; 777  :     LcdStall(300);

  001d0	e3a00f4b	 mov         r0, #0x4B, 30
  001d4	eb000000	 bl          LcdStall

; 778  :     I2C_ACKnowledge_READ(hGPIO_I2C);

  001d8	e1a00004	 mov         r0, r4
  001dc	eb000000	 bl          I2C_ACKnowledge_READ

; 779  :     LcdStall(500);

  001e0	e3a00f7d	 mov         r0, #0x7D, 30
  001e4	eb000000	 bl          LcdStall

; 780  :     I2C_STOP(hGPIO_I2C);

  001e8	e1a00004	 mov         r0, r4
  001ec	eb000000	 bl          I2C_STOP

; 781  :     //*************************
; 782  :     
; 783  :     
; 784  :     I2C_START(hGPIO_I2C);

  001f0	e1a00004	 mov         r0, r4
  001f4	eb000000	 bl          I2C_START

; 785  :     I2C_STOP(hGPIO_I2C);

  001f8	e1a00004	 mov         r0, r4
  001fc	eb000000	 bl          I2C_STOP

; 786  :     gaugeInformation(hGPIO_I2C,  0x00);                 //This opreating means clean register

  00200	e3a01000	 mov         r1, #0
  00204	e1a00004	 mov         r0, r4
  00208	eb000000	 bl          gaugeInformation

; 787  :     data.Temp =(short) gaugeInformation(hGPIO_I2C,  bq27500CMD_TEMP_LSB);

  0020c	e3a01006	 mov         r1, #6
  00210	e1a00004	 mov         r0, r4
  00214	eb000000	 bl          gaugeInformation
  00218	e1a03000	 mov         r3, r0

; 788  :     /*I2C_START(hGPIO_I2C);
; 789  :     I2C_STOP(hGPIO_I2C);
; 790  :     gaugeInformation(hGPIO_I2C,  0x00);*/
; 791  :     data.Voltage =(short) gaugeInformation(hGPIO_I2C,  bq27500CMD_VOLT_LSB);

  0021c	e1a05803	 mov         r5, r3, lsl #16
  00220	e1a00004	 mov         r0, r4
  00224	e3a01008	 mov         r1, #8
  00228	e1a05845	 mov         r5, r5, asr #16
  0022c	eb000000	 bl          gaugeInformation
  00230	e1a03000	 mov         r3, r0

; 792  :     gaugeInformation(hGPIO_I2C,  0x00);        

  00234	e1a06803	 mov         r6, r3, lsl #16
  00238	e1a00004	 mov         r0, r4
  0023c	e3a01000	 mov         r1, #0
  00240	e1a06846	 mov         r6, r6, asr #16
  00244	eb000000	 bl          gaugeInformation

; 793  :     //data.NomAvailCap =(short) gaugeInformation(hGPIO_I2C,  bq27500CMD_NAC_LSB);
; 794  :     //gaugeInformation(hGPIO_I2C,  0x00);
; 795  : 
; 796  :     DisplayShowBackground(0xFF);

  00248	e3a000ff	 mov         r0, #0xFF
  0024c	eb000000	 bl          DisplayShowBackground

; 797  :     printStringMode(row, col, BLUE_COLOR, TRANSPARENT_COLOR, unit, 0); 

  00250	e3a02000	 mov         r2, #0
  00254	e28d3008	 add         r3, sp, #8
  00258	e58d2004	 str         r2, [sp, #4]
  0025c	e58d3000	 str         r3, [sp]
  00260	e3a03009	 mov         r3, #9
  00264	e3a02002	 mov         r2, #2
  00268	e3a01003	 mov         r1, #3
  0026c	e3a00001	 mov         r0, #1
  00270	eb000000	 bl          printStringMode

; 798  :     printInt(row, col+=18, RED_COLOR, TRANSPARENT_COLOR,  ((int)data.Voltage) );

  00274	e3a03009	 mov         r3, #9
  00278	e3a02000	 mov         r2, #0
  0027c	e3a01015	 mov         r1, #0x15
  00280	e3a00001	 mov         r0, #1
  00284	e58d6000	 str         r6, [sp]
  00288	eb000000	 bl          printInt

; 799  :     printStringMode(row, col+=5, BLUE_COLOR, TRANSPARENT_COLOR, unit, 3);

  0028c	e3a03003	 mov         r3, #3
  00290	e58d3004	 str         r3, [sp, #4]
  00294	e28de008	 add         lr, sp, #8
  00298	e3a03009	 mov         r3, #9
  0029c	e3a02002	 mov         r2, #2
  002a0	e3a0101a	 mov         r1, #0x1A
  002a4	e3a00001	 mov         r0, #1
  002a8	e58de000	 str         lr, [sp]
  002ac	eb000000	 bl          printStringMode

; 800  :     //
; 801  :     col = 3;
; 802  :     printStringMode(++row, col, BLUE_COLOR, TRANSPARENT_COLOR, unit, 1);

  002b0	e3a02001	 mov         r2, #1
  002b4	e28d3008	 add         r3, sp, #8
  002b8	e58d2004	 str         r2, [sp, #4]
  002bc	e58d3000	 str         r3, [sp]
  002c0	e3a03009	 mov         r3, #9
  002c4	e3a02002	 mov         r2, #2
  002c8	e3a01003	 mov         r1, #3
  002cc	e3a00002	 mov         r0, #2
  002d0	eb000000	 bl          printStringMode

; 803  :     printInt(row, col+=14, RED_COLOR, TRANSPARENT_COLOR,  ((int)(data.Temp/10-273)) );

  002d4	e59f30b4	 ldr         r3, [pc, #0xB4]
  002d8	e3a02c01	 mov         r2, #1, 24
  002dc	e3821011	 orr         r1, r2, #0x11
  002e0	e0c2e395	 smull       lr, r2, r5, r3
  002e4	e3a03009	 mov         r3, #9
  002e8	e1a02142	 mov         r2, r2, asr #2
  002ec	e0822fa2	 add         r2, r2, r2, lsr #31
  002f0	e0424001	 sub         r4, r2, r1
  002f4	e3a02000	 mov         r2, #0
  002f8	e3a01011	 mov         r1, #0x11
  002fc	e3a00002	 mov         r0, #2
  00300	e58d4000	 str         r4, [sp]
  00304	eb000000	 bl          printInt

; 804  :     printStringMode(row, col+=3, BLUE_COLOR, TRANSPARENT_COLOR, unit, 2);

  00308	e3a02002	 mov         r2, #2
  0030c	e28d3008	 add         r3, sp, #8
  00310	e58d2004	 str         r2, [sp, #4]
  00314	e58d3000	 str         r3, [sp]
  00318	e3a03009	 mov         r3, #9
  0031c	e3a02002	 mov         r2, #2
  00320	e3a01014	 mov         r1, #0x14
  00324	e3a00002	 mov         r0, #2
  00328	eb000000	 bl          printStringMode

; 805  :     LcdStall(gd1Sec*3);  

  0032c	e59f3058	 ldr         r3, [pc, #0x58]
  00330	e5933000	 ldr         r3, [r3]
  00334	e0830083	 add         r0, r3, r3, lsl #1
  00338	eb000000	 bl          LcdStall

; 806  :     DisplayShowBackground(0xFF);  

  0033c	e3a000ff	 mov         r0, #0xFF
  00340	eb000000	 bl          DisplayShowBackground

; 807  :     
; 808  :     OALLog(L" ~Reports the device type:0x%02X%02X \r\n",MSB ,LSB);

  00344	e59f003c	 ldr         r0, [pc, #0x3C]
  00348	e1a02008	 mov         r2, r8
  0034c	e1a01007	 mov         r1, r7
  00350	eb000000	 bl          NKDbgPrintfW

; 809  :     OALLog(L" ~Battery Temperature = %d C\r\n",(data.Temp/10)-273);

  00354	e59f0028	 ldr         r0, [pc, #0x28]
  00358	e1a01004	 mov         r1, r4
  0035c	eb000000	 bl          NKDbgPrintfW

; 810  :     OALLog(L" ~Battery Voltages = %d mV\r\n",data.Voltage);

  00360	e59f0018	 ldr         r0, [pc, #0x18]
  00364	e1a01006	 mov         r1, r6
  00368	eb000000	 bl          NKDbgPrintfW
  0036c	e59d0134	 ldr         r0, [sp, #0x134]
  00370	eb000000	 bl          __security_check_cookie

; 811  :     //OALLog(L" ~Battery Nominal Available Capacity = %d mAh\r\n",data.NomAvailCap);
; 812  : }

  00374	e28ddf4e	 add         sp, sp, #0x4E, 30
  00378	e8bd41f0	 ldmia       sp!, {r4 - r8, lr}
  0037c	e12fff1e	 bx          lr
  00380		 |$LN6@InitI2CWit|
  00380		 |$LN7@InitI2CWit|
  00380	00000000	 DCD         |??_C@_1DK@NOEMNDJB@?$AA?5?$AA?$HO?$AAB?$AAa?$AAt?$AAt?$AAe?$AAr?$AAy?$AA?5?$AAV?$AAo?$AAl?$AAt?$AAa?$AAg?$AAe?$AAs?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?5?$AAm?$AAV?$AA?$AN?$AA?6?$AA?$AA@|
  00384		 |$LN8@InitI2CWit|
  00384	00000000	 DCD         |??_C@_1DO@OLEHJPML@?$AA?5?$AA?$HO?$AAB?$AAa?$AAt?$AAt?$AAe?$AAr?$AAy?$AA?5?$AAT?$AAe?$AAm?$AAp?$AAe?$AAr?$AAa?$AAt?$AAu?$AAr?$AAe?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?5?$AAC?$AA?$AN?$AA?6?$AA?$AA@|
  00388		 |$LN9@InitI2CWit|
  00388	00000000	 DCD         |??_C@_1FA@JMHKMEFE@?$AA?5?$AA?$HO?$AAR?$AAe?$AAp?$AAo?$AAr?$AAt?$AAs?$AA?5?$AAt?$AAh?$AAe?$AA?5?$AAd?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AAt?$AAy?$AAp?$AAe?$AA?3?$AA0?$AAx?$AA?$CF?$AA0?$AA2?$AAX@|
  0038c		 |$LN10@InitI2CWit|
  0038c	00000000	 DCD         |gd1Sec|
  00390		 |$LN11@InitI2CWit|
  00390	66666667	 DCD         0x66666667
  00394		 |$LN12@InitI2CWit|
  00394	00000000	 DCD         |??_C@_02KMFAIEEM@mV?$AA@|
  00398		 |$LN13@InitI2CWit|
  00398	00000000	 DCD         |??_C@_0P@EJINIIPM@Battery?5Temp?3?5?$AA@|
  0039c		 |$LN14@InitI2CWit|
  0039c	00000000	 DCD         |??_C@_0BD@NJGLPLJG@Battery?5Voltages?3?5?$AA@|
  003a0		 |$LN15@InitI2CWit|
  003a0	00000000	 DCD         |__security_cookie|
  003a4		 |$M48622|

			 ENDP  ; |InitI2CWithBQ27510|

	EXPORT	|??_C@_1GC@GBHIDOHO@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAB?$AAQ?$AA2?$AA7?$AA5?$AA1?$AA0?$AA_?$AAi?$AAn?$AAi?$AAt?$AA?5?$AA?9?$AA?5?$AAO?$AAp?$AAe?$AAn?$AA?5?$AAI?$AA2?$AAC?$AA?5?$AAd@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T48643| DCD	|$LN6@BatteryTes|
	DCD	0x40002001

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GC@GBHIDOHO@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAB?$AAQ?$AA2?$AA7?$AA5?$AA1?$AA0?$AA_?$AAi?$AAn?$AAi?$AAt?$AA?5?$AA?9?$AA?5?$AAO?$AAp?$AAe?$AAn?$AA?5?$AAI?$AA2?$AAC?$AA?5?$AAd@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "B", 0x0, "Q", 0x0, "2", 0x0, "7", 0x0, "5", 0x0, "1"
	DCB	0x0, "0", 0x0, "_", 0x0, "i", 0x0, "n", 0x0, "i", 0x0, "t"
	DCB	0x0, " ", 0x0, "-", 0x0, " ", 0x0, "O", 0x0, "p", 0x0, "e"
	DCB	0x0, "n", 0x0, " ", 0x0, "I", 0x0, "2", 0x0, "C", 0x0, " "
	DCB	0x0, "d", 0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e"
	DCB	0x0, " ", 0x0, "F", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e"
	DCB	0x0, "d", 0x0, "!", 0x0, "!", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |BatteryTest_Z2170P| PROC

; 817  : {

  00000		 |$LN6@BatteryTes|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M48640|

; 818  :     HANDLE hGPIO_I2C;
; 819  :     
; 820  :     UNREFERENCED_PARAMETER(pMenu);
; 821  :     OALBLMenuHeader(L"Battery Test");

  00004	e59f0070	 ldr         r0, [pc, #0x70]
  00008	eb000000	 bl          OALBLMenuHeader

; 822  :     
; 823  :     if((hGPIO_I2C = GPIOOpen()) == NULL) 

  0000c	eb000000	 bl          GPIOOpen
  00010	e1b04000	 movs        r4, r0
  00014	1a000003	 bne         |$LN1@BatteryTes|

; 824  : 	{
; 825  :         RETAILMSG(1,(L"ERROR: BQ27510_init - Open I2C device Failed!!\r\n"));

  00018	e59f0058	 ldr         r0, [pc, #0x58]
  0001c	eb000000	 bl          NKDbgPrintfW

; 839  : I2COpenFalse: 
; 840  :     return;    
; 841  : }

  00020	e8bd4010	 ldmia       sp!, {r4, lr}
  00024	e12fff1e	 bx          lr
  00028		 |$LN1@BatteryTes|

; 826  :         goto I2COpenFalse;
; 827  : 	}/*else{
; 828  :         RETAILMSG(1,(L"SUCCESS: BQ27510_init - Open I2C device OK!!\r\n"));
; 829  : 	}*/
; 830  :     //OALLog(L"\r\n >>>Set hGPIO_I2C:%X \r\n",hGPIO_I2C);  
; 831  :     
; 832  :     GPIOClrBit(hGPIO_I2C,  184);  

  00028	e3a010b8	 mov         r1, #0xB8
  0002c	e1a00004	 mov         r0, r4
  00030	eb000000	 bl          GPIOClrBit

; 833  :     GPIOSetMode(hGPIO_I2C, 184, GPIO_DIR_OUTPUT);   //I2C3_CLK, Ray 131129 

  00034	e3a02000	 mov         r2, #0
  00038	e3a010b8	 mov         r1, #0xB8
  0003c	e1a00004	 mov         r0, r4
  00040	eb000000	 bl          GPIOSetMode

; 834  :     GPIOClrBit(hGPIO_I2C,  185);

  00044	e3a010b9	 mov         r1, #0xB9
  00048	e1a00004	 mov         r0, r4
  0004c	eb000000	 bl          GPIOClrBit

; 835  :     GPIOSetMode(hGPIO_I2C, 185, GPIO_DIR_OUTPUT);   //I2C3_SDA, Ray 131129 

  00050	e3a02000	 mov         r2, #0
  00054	e3a010b9	 mov         r1, #0xB9
  00058	e1a00004	 mov         r0, r4
  0005c	eb000000	 bl          GPIOSetMode

; 836  :     
; 837  :     InitI2CWithBQ27510(hGPIO_I2C);                               

  00060	e1a00004	 mov         r0, r4
  00064	eb000000	 bl          InitI2CWithBQ27510

; 838  :     GPIOClose(hGPIO_I2C);

  00068	e1a00004	 mov         r0, r4
  0006c	eb000000	 bl          GPIOClose
  00070		 |$I2COpenFalse$47740|

; 839  : I2COpenFalse: 
; 840  :     return;    
; 841  : }

  00070	e8bd4010	 ldmia       sp!, {r4, lr}
  00074	e12fff1e	 bx          lr
  00078		 |$LN7@BatteryTes|
  00078		 |$LN8@BatteryTes|
  00078	00000000	 DCD         |??_C@_1GC@GBHIDOHO@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAB?$AAQ?$AA2?$AA7?$AA5?$AA1?$AA0?$AA_?$AAi?$AAn?$AAi?$AAt?$AA?5?$AA?9?$AA?5?$AAO?$AAp?$AAe?$AAn?$AA?5?$AAI?$AA2?$AAC?$AA?5?$AAd@|
  0007c		 |$LN9@BatteryTes|
  0007c	00000000	 DCD         |??_C@_1BK@KIOELMDE@?$AAB?$AAa?$AAt?$AAt?$AAe?$AAr?$AAy?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?$AA@|
  00080		 |$M48641|

			 ENDP  ; |BatteryTest_Z2170P|

	EXPORT	|??_C@_1CG@CDBIFFDJ@?$AAL?$AAE?$AAD?$AA?5?$AAI?$AAn?$AAd?$AAi?$AAc?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?$AA@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T48654| DCD	|$LN5@LEDTest_Z2|
	DCD	0x40004e02

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CG@CDBIFFDJ@?$AAL?$AAE?$AAD?$AA?5?$AAI?$AAn?$AAd?$AAi?$AAc?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?$AA@| DCB "L"
	DCB	0x0, "E", 0x0, "D", 0x0, " ", 0x0, "I", 0x0, "n", 0x0, "d"
	DCB	0x0, "i", 0x0, "c", 0x0, "a", 0x0, "t", 0x0, "o", 0x0, "r"
	DCB	0x0, " ", 0x0, "T", 0x0, "e", 0x0, "s", 0x0, "t", 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |LEDTest_Z2170P| PROC

; 848  : {

  00000		 |$LN5@LEDTest_Z2|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004	e24dd008	 sub         sp, sp, #8
  00008		 |$M48651|

; 849  :     DWORD stall_1mSec = 1000;
; 850  : //    int i;
; 851  : 	HANDLE hGPIO;
; 852  : 	UNREFERENCED_PARAMETER(pMenu);
; 853  : 	
; 854  : 	OALBLMenuHeader(L"LED Indicator Test");

  00008	e59f0124	 ldr         r0, [pc, #0x124]
  0000c	eb000000	 bl          OALBLMenuHeader

; 855  :     hGPIO = GPIOOpen();

  00010	eb000000	 bl          GPIOOpen

; 856  :     
; 857  :     //for(i=0; i<2; i++){
; 858  :         GPIOClrBit(hGPIO, GREEN_LED_SET_GPIO);  

  00014	e3a01022	 mov         r1, #0x22
  00018	e1a05000	 mov         r5, r0
  0001c	eb000000	 bl          GPIOClrBit

; 859  :         LcdStall(stall_1mSec);

  00020	e3a00ffa	 mov         r0, #0xFA, 30
  00024	eb000000	 bl          LcdStall

; 860  :         GPIOSetBit(hGPIO, GREEN_LED_SET_GPIO);

  00028	e3a01022	 mov         r1, #0x22
  0002c	e1a00005	 mov         r0, r5
  00030	eb000000	 bl          GPIOSetBit

; 861  :         LcdStall(gd1Sec);

  00034	e59f40f4	 ldr         r4, [pc, #0xF4]
  00038	e5940000	 ldr         r0, [r4]
  0003c	eb000000	 bl          LcdStall

; 862  :         GPIOClrBit(hGPIO, GREEN_LED_SET_GPIO);

  00040	e3a01022	 mov         r1, #0x22
  00044	e1a00005	 mov         r0, r5
  00048	eb000000	 bl          GPIOClrBit

; 863  :         LcdStall(gd1Sec);

  0004c	e5940000	 ldr         r0, [r4]
  00050	eb000000	 bl          LcdStall

; 864  :         
; 865  :         GPIOClrBit(hGPIO, RED_LED_SET_GPIO);  

  00054	e3a0108c	 mov         r1, #0x8C
  00058	e1a00005	 mov         r0, r5
  0005c	eb000000	 bl          GPIOClrBit

; 866  :         LcdStall(stall_1mSec);

  00060	e3a00ffa	 mov         r0, #0xFA, 30
  00064	eb000000	 bl          LcdStall

; 867  :         GPIOSetBit(hGPIO, RED_LED_SET_GPIO);

  00068	e3a0108c	 mov         r1, #0x8C
  0006c	e1a00005	 mov         r0, r5
  00070	eb000000	 bl          GPIOSetBit

; 868  :         LcdStall(gd1Sec);

  00074	e5940000	 ldr         r0, [r4]
  00078	eb000000	 bl          LcdStall

; 869  :         GPIOClrBit(hGPIO, RED_LED_SET_GPIO);

  0007c	e3a0108c	 mov         r1, #0x8C
  00080	e1a00005	 mov         r0, r5
  00084	eb000000	 bl          GPIOClrBit

; 870  :         LcdStall(gd1Sec);

  00088	e5940000	 ldr         r0, [r4]
  0008c	eb000000	 bl          LcdStall

; 871  : 
; 872  :         GPIOClrBit(hGPIO, BARCODE_LED_SET_GPIO);

  00090	e3a010a0	 mov         r1, #0xA0
  00094	e1a00005	 mov         r0, r5
  00098	eb000000	 bl          GPIOClrBit

; 873  :         LcdStall(stall_1mSec);

  0009c	e3a00ffa	 mov         r0, #0xFA, 30
  000a0	eb000000	 bl          LcdStall

; 874  :         GPIOSetBit(hGPIO, BARCODE_LED_SET_GPIO);

  000a4	e3a010a0	 mov         r1, #0xA0
  000a8	e1a00005	 mov         r0, r5
  000ac	eb000000	 bl          GPIOSetBit

; 875  :         LcdStall(gd1Sec);

  000b0	e5940000	 ldr         r0, [r4]
  000b4	eb000000	 bl          LcdStall

; 876  :         GPIOClrBit(hGPIO, BARCODE_LED_SET_GPIO);

  000b8	e3a010a0	 mov         r1, #0xA0
  000bc	e1a00005	 mov         r0, r5
  000c0	eb000000	 bl          GPIOClrBit

; 877  :         LcdStall(gd1Sec);

  000c4	e5940000	 ldr         r0, [r4]
  000c8	eb000000	 bl          LcdStall

; 878  :     //}
; 879  :     DisplayShowBackground(0xFF);

  000cc	e3a000ff	 mov         r0, #0xFF
  000d0	eb000000	 bl          DisplayShowBackground

; 880  :     printStringMode(9, 9, RED_COLOR, GREEN_COLOR, gTestPass, 0);

  000d4	e59f2050	 ldr         r2, [pc, #0x50]
  000d8	e3a0e000	 mov         lr, #0
  000dc	e3a03001	 mov         r3, #1
  000e0	e58d2000	 str         r2, [sp]
  000e4	e3a02000	 mov         r2, #0
  000e8	e3a01009	 mov         r1, #9
  000ec	e3a00009	 mov         r0, #9
  000f0	e58de004	 str         lr, [sp, #4]
  000f4	eb000000	 bl          printStringMode

; 881  :     LcdStall(gd1Sec*2);

  000f8	e5943000	 ldr         r3, [r4]
  000fc	e1a00083	 mov         r0, r3, lsl #1
  00100	eb000000	 bl          LcdStall

; 882  :     DisplayShowBackground(0xFF);

  00104	e3a000ff	 mov         r0, #0xFF
  00108	eb000000	 bl          DisplayShowBackground

; 883  :     GPIOClose(hGPIO);

  0010c	e1a00005	 mov         r0, r5
  00110	eb000000	 bl          GPIOClose

; 884  :     
; 885  :     OALLog(L"\rTested ok!! \r\n");    

  00114	e59f000c	 ldr         r0, [pc, #0xC]
  00118	eb000000	 bl          NKDbgPrintfW

; 886  : }

  0011c	e28dd008	 add         sp, sp, #8
  00120	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00124	e12fff1e	 bx          lr
  00128		 |$LN6@LEDTest_Z2|
  00128		 |$LN7@LEDTest_Z2|
  00128	00000000	 DCD         |??_C@_1CA@NFDHHLIH@?$AA?$AN?$AAT?$AAe?$AAs?$AAt?$AAe?$AAd?$AA?5?$AAo?$AAk?$AA?$CB?$AA?$CB?$AA?5?$AA?$AN?$AA?6?$AA?$AA@|
  0012c		 |$LN8@LEDTest_Z2|
  0012c	00000000	 DCD         |gTestPass|
  00130		 |$LN9@LEDTest_Z2|
  00130	00000000	 DCD         |gd1Sec|
  00134		 |$LN10@LEDTest_Z2|
  00134	00000000	 DCD         |??_C@_1CG@CDBIFFDJ@?$AAL?$AAE?$AAD?$AA?5?$AAI?$AAn?$AAd?$AAi?$AAc?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?$AA@|
  00138		 |$M48652|

			 ENDP  ; |LEDTest_Z2170P|

	EXPORT	|BCRSetRTS|

  00000			 AREA	 |.pdata|, PDATA
|$T48669| DCD	|$LN7@BCRSetRTS|
	DCD	0x40000a00
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |BCRSetRTS| PROC

; 893  : {

  00000		 |$LN7@BCRSetRTS|
  00000		 |$M48666|
  00000	e3500000	 cmp         r0, #0

; 894  :     UINT bData = INREG8(&pUartRegs->MCR);

  00004	e59f3018	 ldr         r3, [pc, #0x18]
  00008	e5932000	 ldr         r2, [r3]
  0000c	e5d23010	 ldrb        r3, [r2, #0x10]

; 895  : 
; 896  :     if(bSet)
; 897  :         bData |= UART_MCR_RTS;

  00010	13833002	 orrne       r3, r3, #2

; 900  : 
; 901  :     OUTREG8(&pUartRegs->MCR, bData);      

  00014	15c23010	 strneb      r3, [r2, #0x10]

; 898  :     else
; 899  :         bData &= ~UART_MCR_RTS;     //

  00018	03c33002	 biceq       r3, r3, #2

; 900  : 
; 901  :     OUTREG8(&pUartRegs->MCR, bData);      

  0001c	05c23010	 streqb      r3, [r2, #0x10]

; 902  : }

  00020	e12fff1e	 bx          lr
  00024		 |$LN8@BCRSetRTS|
  00024		 |$LN9@BCRSetRTS|
  00024	00000000	 DCD         |pUartRegs|
  00028		 |$M48667|

			 ENDP  ; |BCRSetRTS|

	EXPORT	|__$ArrayPad$| [ DATA ]
	EXPORT	|??_C@_1CM@LKJOBAFD@?$AA?$AN?$AAD?$AAi?$AAd?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAa?$AAn?$AAy?$AA?5?$AAs?$AAc?$AAa?$AAn?$AA?5?$AA?$CB?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1O@PBEKMGPM@?$AA?9?$AA?$DO?$AA?$CF?$AAs?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_0BD@PNGOPHJH@Did?5not?5any?5scan?5?$CB?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BK@DAODNELG@?$AAB?$AAa?$AAr?$AAc?$AAo?$AAd?$AAe?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|OALPAtoVA|
	IMPORT	|GetAddressByDevice|
	IMPORT	|EnableDeviceClocks|

  00000			 AREA	 |.pdata|, PDATA
|$T48703| DCD	|$LN26@BarcodeTes|
	DCD	0xc000a302

  00000			 AREA	 |.xdata|, DATA
|$T48699| DCD	0xffffffdc

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CM@LKJOBAFD@?$AA?$AN?$AAD?$AAi?$AAd?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAa?$AAn?$AAy?$AA?5?$AAs?$AAc?$AAa?$AAn?$AA?5?$AA?$CB?$AA?$AN?$AA?6?$AA?$AA@| DCB 0xd
	DCB	0x0, "D", 0x0, "i", 0x0, "d", 0x0, " ", 0x0, "n", 0x0, "o"
	DCB	0x0, "t", 0x0, " ", 0x0, "a", 0x0, "n", 0x0, "y", 0x0, " "
	DCB	0x0, "s", 0x0, "c", 0x0, "a", 0x0, "n", 0x0, " ", 0x0, "!"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1O@PBEKMGPM@?$AA?9?$AA?$DO?$AA?$CF?$AAs?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, ">", 0x0, "%", 0x0, "s", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0BD@PNGOPHJH@Did?5not?5any?5scan?5?$CB?$AA@| DCB "Did not any scan"
	DCB	" !", 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BK@DAODNELG@?$AAB?$AAa?$AAr?$AAc?$AAo?$AAd?$AAe?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?$AA@| DCB "B"
	DCB	0x0, "a", 0x0, "r", 0x0, "c", 0x0, "o", 0x0, "d", 0x0, "e"
	DCB	0x0, " ", 0x0, "T", 0x0, "e", 0x0, "s", 0x0, "t", 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000	00000000	 DCD         |__GSHandlerCheck|
  00004	00000000	 DCD         |$T48699|

  00008		 |BarcodeTest_Z2170P| PROC

; 906  : {

  00008		 |$LN26@BarcodeTes|
  00008	e92d47f0	 stmdb       sp!, {r4 - r10, lr}
  0000c	e24ddf4e	 sub         sp, sp, #0x4E, 30
  00010		 |$M48700|
  00010	e59f3278	 ldr         r3, [pc, #0x278]
  00014	e5933000	 ldr         r3, [r3]
  00018	e58d3134	 str         r3, [sp, #0x134]

; 907  :     HANDLE  hGPIO;
; 908  :     UINT8   status, ch, running = 1;
; 909  :     int     count = 30, inNum = 0;
; 910  : //    int     i = 0;
; 911  :     //WCHAR   key;
; 912  :     //WCHAR   scan[50];
; 913  :     char      scan[10][30] = {"Did not any scan !"};

  0001c	e59f1268	 ldr         r1, [pc, #0x268]
  00020	e28d0008	 add         r0, sp, #8
  00024	e3a02013	 mov         r2, #0x13
  00028	e3a0601e	 mov         r6, #0x1E
  0002c	e3a04000	 mov         r4, #0
  00030	eb000000	 bl          memcpy
  00034	e3a0200b	 mov         r2, #0xB
  00038	e3a01000	 mov         r1, #0
  0003c	e28d001b	 add         r0, sp, #0x1B
  00040	eb000000	 bl          memset
  00044	e3a03c01	 mov         r3, #1, 24
  00048	e383200e	 orr         r2, r3, #0xE
  0004c	e3a01000	 mov         r1, #0
  00050	e28d0026	 add         r0, sp, #0x26
  00054	eb000000	 bl          memset

; 914  :     
; 915  : 	OALBLMenuHeader(L"Barcode Test");

  00058	e59f0228	 ldr         r0, [pc, #0x228]
  0005c	eb000000	 bl          OALBLMenuHeader

; 916  : 	UNREFERENCED_PARAMETER(pMenu);	
; 917  : 	
; 918  :     hGPIO = GPIOOpen();

  00060	eb000000	 bl          GPIOOpen

; 919  :     GPIOSetMode(hGPIO, BCR_ENG_PWEN, GPIO_DIR_OUTPUT);         

  00064	e3a02000	 mov         r2, #0
  00068	e3a01026	 mov         r1, #0x26
  0006c	e1a05000	 mov         r5, r0
  00070	eb000000	 bl          GPIOSetMode

; 920  :     GPIOSetMode(hGPIO, BCR_ENG_TRIG, GPIO_DIR_OUTPUT);

  00074	e3a02000	 mov         r2, #0
  00078	e3a01024	 mov         r1, #0x24
  0007c	e1a00005	 mov         r0, r5
  00080	eb000000	 bl          GPIOSetMode

; 921  :     
; 922  :     GPIOSetBit(hGPIO, BCR_ENG_PWEN);                    //Power ON

  00084	e3a01026	 mov         r1, #0x26
  00088	e1a00005	 mov         r0, r5
  0008c	eb000000	 bl          GPIOSetBit

; 923  :     EnableDeviceClocks(OMAP_DEVICE_UART1, TRUE); 

  00090	e3a01001	 mov         r1, #1
  00094	e3a0000a	 mov         r0, #0xA
  00098	eb000000	 bl          EnableDeviceClocks

; 924  :     pUartRegs = OALPAtoUA(GetAddressByDevice(OMAP_DEVICE_UART1));

  0009c	e3a0000a	 mov         r0, #0xA
  000a0	eb000000	 bl          GetAddressByDevice
  000a4	e3a01000	 mov         r1, #0
  000a8	eb000000	 bl          OALPAtoVA
  000ac	e59f71d0	 ldr         r7, [pc, #0x1D0]

; 925  :            
; 926  :     // reset uart
; 927  : 	OUTREG8(&pUartRegs->SYSC, UART_SYSC_RST);

  000b0	e3a03002	 mov         r3, #2
  000b4	e5870000	 str         r0, [r7]
  000b8	e5c03054	 strb        r3, [r0, #0x54]
  000bc	e5972000	 ldr         r2, [r7]
  000c0		 |$LL9@BarcodeTes|

; 928  :     while ((INREG8(&pUartRegs->SYSS) & UART_SYSS_RST_DONE) == 0)

  000c0	e5d23058	 ldrb        r3, [r2, #0x58]
  000c4	e3130001	 tst         r3, #1
  000c8	0afffffc	 beq         |$LL9@BarcodeTes|

; 929  :         ;
; 930  : 
; 931  :     // Set baud rate
; 932  :     OUTREG8(&pUartRegs->LCR, UART_LCR_DLAB);    //Line control register, DIV_EN

  000cc	e3a03080	 mov         r3, #0x80
  000d0	e5c2300c	 strb        r3, [r2, #0xC]

; 933  :     OUTREG8(&pUartRegs->DLL, 0x38);             //9.6kbps

  000d4	e5973000	 ldr         r3, [r7]
  000d8	e3a02038	 mov         r2, #0x38

; 934  :     OUTREG8(&pUartRegs->DLH, 0x01);

  000dc	e3a0a001	 mov         r10, #1
  000e0	e5c32000	 strb        r2, [r3]
  000e4	e5973000	 ldr         r3, [r7]

; 935  :     OUTREG8(&pUartRegs->LCR, 0x00);

  000e8	e3a09000	 mov         r9, #0

; 936  : 
; 937  :     // 8 bit, 1 stop bit, no parity
; 938  :     OUTREG8(&pUartRegs->LCR, 0x03);     

  000ec	e3a02003	 mov         r2, #3
  000f0	e5c3a004	 strb        r10, [r3, #4]
  000f4	e5973000	 ldr         r3, [r7]

; 939  :     
; 940  :     // Enable FIFO
; 941  :     OUTREG8(&pUartRegs->FCR, UART_FCR_FIFO_EN);
; 942  :     OUTREG8(&pUartRegs->FCR, UART_FCR_FIFO_EN|UART_FCR_RX_FIFO_CLEAR|UART_FCR_TX_FIFO_CLEAR);

  000f8	e3a01007	 mov         r1, #7

; 943  : 
; 944  :     // Pool
; 945  :     OUTREG8(&pUartRegs->IER, 0);
; 946  : 
; 947  :     // Set DTR/RTS signals
; 948  :     OUTREG8(&pUartRegs->MCR, 0); //UART_MCR_DTR|UART_MCR_RTS);
; 949  : 
; 950  :     // Configuration complete so select UART 16x mode
; 951  : 	OUTREG8(&pUartRegs->MDR1, UART_MDR1_UART16);
; 952  :     BCRSetRTS(TRUE);
; 953  :     //OALLog(L"\r Scan Mode key '5', if Cancel '0'.\r\n");
; 954  :     
; 955  :     //OALLog(L"\r The Cancel key are '0'.\r\n");
; 956  :     while(running)
; 957  :     {
; 958  : 		//if(key == L'5')             // SCAN KEY
; 959  : 		//{
; 960  : 		    //start after barcode engine ON
; 961  : 		    LcdSleep(500);

  000fc	e3a00f7d	 mov         r0, #0x7D, 30
  00100	e5c3900c	 strb        r9, [r3, #0xC]
  00104	e5973000	 ldr         r3, [r7]
  00108	e5c3200c	 strb        r2, [r3, #0xC]
  0010c	e5973000	 ldr         r3, [r7]
  00110	e5c3a008	 strb        r10, [r3, #8]
  00114	e5973000	 ldr         r3, [r7]
  00118	e5c31008	 strb        r1, [r3, #8]
  0011c	e5973000	 ldr         r3, [r7]
  00120	e5c39004	 strb        r9, [r3, #4]
  00124	e5973000	 ldr         r3, [r7]
  00128	e5c39010	 strb        r9, [r3, #0x10]
  0012c	e5973000	 ldr         r3, [r7]
  00130	e5c39020	 strb        r9, [r3, #0x20]
  00134	e5972000	 ldr         r2, [r7]
  00138	e5d23010	 ldrb        r3, [r2, #0x10]
  0013c	e3833002	 orr         r3, r3, #2
  00140	e5c23010	 strb        r3, [r2, #0x10]
  00144	eb000000	 bl          LcdSleep

; 962  : 			GPIOClrBit(hGPIO, BCR_ENG_TRIG);

  00148	e3a01024	 mov         r1, #0x24
  0014c	e1a00005	 mov         r0, r5
  00150	eb000000	 bl          GPIOClrBit

; 963  : 			BCRSetRTS(FALSE);

  00154	e5972000	 ldr         r2, [r7]

; 964  : 			LcdSleep(500);

  00158	e3a00f7d	 mov         r0, #0x7D, 30
  0015c	e5d23010	 ldrb        r3, [r2, #0x10]
  00160	e20330fd	 and         r3, r3, #0xFD
  00164	e5c23010	 strb        r3, [r2, #0x10]
  00168	eb000000	 bl          LcdSleep
  0016c	e28d8008	 add         r8, sp, #8
  00170		 |$LL5@BarcodeTes|

; 965  :             
; 966  : 			while( count-- )
; 967  : 			{
; 968  : 				status = INREG8(&pUartRegs->LSR);

  00170	e5972000	 ldr         r2, [r7]

; 969  : 				if ((status & UART_LSR_RX_FIFO_E) != 0)
; 970  : 				{
; 971  : 					ch = INREG8(&pUartRegs->RHR);
; 972  : 					scan[1][inNum++] = ch;
; 973  : 					//OALLog(L" %c\r\n",ch);
; 974  : 				}
; 975  : 				LcdSleep(100);

  00174	e3a00064	 mov         r0, #0x64
  00178	e2466001	 sub         r6, r6, #1
  0017c	e5d23014	 ldrb        r3, [r2, #0x14]
  00180	e3130001	 tst         r3, #1
  00184	15d22000	 ldrneb      r2, [r2]
  00188	10843008	 addne       r3, r4, r8
  0018c	12844001	 addne       r4, r4, #1
  00190	15c3201e	 strneb      r2, [r3, #0x1E]
  00194	eb000000	 bl          LcdSleep
  00198	e3560000	 cmp         r6, #0
  0019c	1afffff3	 bne         |$LL5@BarcodeTes|

; 976  : 			}
; 977  : 			//
; 978  : 			DisplayShowBackground(0xFF);

  001a0	e3a000ff	 mov         r0, #0xFF
  001a4	eb000000	 bl          DisplayShowBackground

; 979  : 			GPIOSetBit(hGPIO, BCR_ENG_TRIG);

  001a8	e3a01024	 mov         r1, #0x24
  001ac	e1a00005	 mov         r0, r5
  001b0	eb000000	 bl          GPIOSetBit

; 980  : 			if( inNum > 0 )

  001b4	e3540000	 cmp         r4, #0

; 981  : 			{
; 982  : 				/*while(scan[i] != L'\0'){
; 983  : 				    OALLog(L"%c ",scan[i]);
; 984  : 				    i++;
; 985  : 				}
; 986  : 				OALLog(L"\r\n");*/
; 987  : 				scan[1][inNum] = '\0';
; 988  : 				//
; 989  :                 printStringMode(1, 12, BLUE_COLOR, TRANSPARENT_COLOR, scan, 1);

  001b8	e3a02002	 mov         r2, #2
  001bc	e3a00001	 mov         r0, #1
  001c0	da000014	 ble         |$LN2@BarcodeTes|
  001c4	e28d3008	 add         r3, sp, #8
  001c8	e0843003	 add         r3, r4, r3
  001cc	e5c3901e	 strb        r9, [r3, #0x1E]
  001d0	e28de008	 add         lr, sp, #8
  001d4	e3a03009	 mov         r3, #9
  001d8	e3a0100c	 mov         r1, #0xC
  001dc	e58da004	 str         r10, [sp, #4]
  001e0	e58de000	 str         lr, [sp]
  001e4	eb000000	 bl          printStringMode

; 990  :                 LcdStall(gd1Sec*3);

  001e8	e59f308c	 ldr         r3, [pc, #0x8C]
  001ec	e5933000	 ldr         r3, [r3]
  001f0	e0830083	 add         r0, r3, r3, lsl #1
  001f4	eb000000	 bl          LcdStall

; 991  :                 DisplayShowBackground(0xFF);

  001f8	e3a000ff	 mov         r0, #0xFF
  001fc	eb000000	 bl          DisplayShowBackground

; 992  :                 //
; 993  :                 OALLog(L"->%s\r\n",scan[1]);

  00200	e59f0078	 ldr         r0, [pc, #0x78]
  00204	e28d1026	 add         r1, sp, #0x26
  00208	eb000000	 bl          NKDbgPrintfW

; 994  : 				LcdSleep(150);

  0020c	e3a00096	 mov         r0, #0x96
  00210	eb000000	 bl          LcdSleep

; 995  : 				break;

  00214	ea00000d	 b           |$LN6@BarcodeTes|
  00218		 |$LN2@BarcodeTes|

; 996  : 			}else{
; 997  : 			    printStringMode(1, 6, BLUE_COLOR, TRANSPARENT_COLOR, scan, 0);

  00218	e28d3008	 add         r3, sp, #8
  0021c	e58d3000	 str         r3, [sp]
  00220	e3a03009	 mov         r3, #9
  00224	e3a01006	 mov         r1, #6
  00228	e58d9004	 str         r9, [sp, #4]
  0022c	eb000000	 bl          printStringMode

; 998  : 			    LcdStall(gd1Sec*3);

  00230	e59f3044	 ldr         r3, [pc, #0x44]
  00234	e5933000	 ldr         r3, [r3]
  00238	e0830083	 add         r0, r3, r3, lsl #1
  0023c	eb000000	 bl          LcdStall

; 999  :                 DisplayShowBackground(0xFF);

  00240	e3a000ff	 mov         r0, #0xFF
  00244	eb000000	 bl          DisplayShowBackground

; 1000 :                 OALLog(L"\rDid not any scan !\r\n");

  00248	e59f0028	 ldr         r0, [pc, #0x28]
  0024c	eb000000	 bl          NKDbgPrintfW
  00250		 |$LN6@BarcodeTes|

; 1001 : 				break;
; 1002 : 			}
; 1003 : 			
; 1004 : 			/*key = OALBLMenuReadKey(TRUE);
; 1005 : 			if(key == L'0')             // ESC KEY
; 1006 : 		    {
; 1007 : 			    OALLog(L"Cancel \r\n");
; 1008 : 			    break;
; 1009 : 		    }*/
; 1010 : 		//}
; 1011 : 		//LcdSleep(150);
; 1012 : 	}
; 1013 : 	GPIOClrBit(hGPIO, BCR_ENG_PWEN);

  00250	e3a01026	 mov         r1, #0x26
  00254	e1a00005	 mov         r0, r5
  00258	eb000000	 bl          GPIOClrBit

; 1014 : 	GPIOClose(hGPIO);

  0025c	e1a00005	 mov         r0, r5
  00260	eb000000	 bl          GPIOClose
  00264	e59d0134	 ldr         r0, [sp, #0x134]
  00268	eb000000	 bl          __security_check_cookie

; 1015 : }

  0026c	e28ddf4e	 add         sp, sp, #0x4E, 30
  00270	e8bd47f0	 ldmia       sp!, {r4 - r10, lr}
  00274	e12fff1e	 bx          lr
  00278		 |$LN27@BarcodeTes|
  00278		 |$LN28@BarcodeTes|
  00278	00000000	 DCD         |??_C@_1CM@LKJOBAFD@?$AA?$AN?$AAD?$AAi?$AAd?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAa?$AAn?$AAy?$AA?5?$AAs?$AAc?$AAa?$AAn?$AA?5?$AA?$CB?$AA?$AN?$AA?6?$AA?$AA@|
  0027c		 |$LN29@BarcodeTes|
  0027c	00000000	 DCD         |gd1Sec|
  00280		 |$LN30@BarcodeTes|
  00280	00000000	 DCD         |??_C@_1O@PBEKMGPM@?$AA?9?$AA?$DO?$AA?$CF?$AAs?$AA?$AN?$AA?6?$AA?$AA@|
  00284		 |$LN31@BarcodeTes|
  00284	00000000	 DCD         |pUartRegs|
  00288		 |$LN32@BarcodeTes|
  00288	00000000	 DCD         |??_C@_1BK@DAODNELG@?$AAB?$AAa?$AAr?$AAc?$AAo?$AAd?$AAe?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?$AA@|
  0028c		 |$LN33@BarcodeTes|
  0028c	00000000	 DCD         |??_C@_0BD@PNGOPHJH@Did?5not?5any?5scan?5?$CB?$AA@|
  00290		 |$LN34@BarcodeTes|
  00290	00000000	 DCD         |__security_cookie|
  00294		 |$M48701|

			 ENDP  ; |BarcodeTest_Z2170P|

	EXPORT	|AudioAndMIC_Z2170P|
	EXPORT	|??_C@_1BM@NMMNENJO@?$AAA?$AAu?$AAd?$AAi?$AAo?$AA?5?$AAA?$AAn?$AAd?$AA?5?$AAM?$AAI?$AAC?$AA?$AA@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T48719| DCD	|$LN5@AudioAndMI|
	DCD	0x40000601

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BM@NMMNENJO@?$AAA?$AAu?$AAd?$AAi?$AAo?$AA?5?$AAA?$AAn?$AAd?$AA?5?$AAM?$AAI?$AAC?$AA?$AA@| DCB "A"
	DCB	0x0, "u", 0x0, "d", 0x0, "i", 0x0, "o", 0x0, " ", 0x0, "A"
	DCB	0x0, "n", 0x0, "d", 0x0, " ", 0x0, "M", 0x0, "I", 0x0, "C"
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |AudioAndMIC_Z2170P| PROC

; 1047 : {

  00000		 |$LN5@AudioAndMI|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M48716|

; 1048 :     UNREFERENCED_PARAMETER(pMenu);
; 1049 : 	OALBLMenuHeader(L"Audio And MIC");	

  00004	e59f0008	 ldr         r0, [pc, #8]
  00008	eb000000	 bl          OALBLMenuHeader

; 1050 : }

  0000c	e49de004	 ldr         lr, [sp], #4
  00010	e12fff1e	 bx          lr
  00014		 |$LN6@AudioAndMI|
  00014		 |$LN7@AudioAndMI|
  00014	00000000	 DCD         |??_C@_1BM@NMMNENJO@?$AAA?$AAu?$AAd?$AAi?$AAo?$AA?5?$AAA?$AAn?$AAd?$AA?5?$AAM?$AAI?$AAC?$AA?$AA@|
  00018		 |$M48717|

			 ENDP  ; |AudioAndMIC_Z2170P|

	EXPORT	|clear|

  00000			 AREA	 |.pdata|, PDATA
|$T48732| DCD	|$LN12@clear|
	DCD	0x40001302
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |clear| PROC

; 1058 : {

  00000		 |$LN12@clear|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004	e24dd068	 sub         sp, sp, #0x68
  00008		 |$M48729|

; 1059 :     int i;
; 1060 :     int keyClear[KEYPAD_SIZE] = {0};

  00008	e3a03000	 mov         r3, #0
  0000c	e3a02064	 mov         r2, #0x64
  00010	e3a01000	 mov         r1, #0
  00014	e28d0004	 add         r0, sp, #4
  00018	e58d3000	 str         r3, [sp]
  0001c	eb000000	 bl          memset

; 1061 :     
; 1062 :     for(i=0; i<KEYPAD_SIZE; i++)
; 1063 :         keyStatus[i] = keyClear[i];

  00020	e59f2020	 ldr         r2, [pc, #0x20]
  00024	e28d1000	 add         r1, sp, #0
  00028	e2820068	 add         r0, r2, #0x68
  0002c		 |$LN8@clear|
  0002c	e4913004	 ldr         r3, [r1], #4
  00030	e4823004	 str         r3, [r2], #4
  00034	e1520000	 cmp         r2, r0
  00038	1afffffb	 bne         |$LN8@clear|

; 1064 : }

  0003c	e28dd068	 add         sp, sp, #0x68
  00040	e49de004	 ldr         lr, [sp], #4
  00044	e12fff1e	 bx          lr
  00048		 |$LN13@clear|
  00048		 |$LN14@clear|
  00048	00000000	 DCD         |keyStatus|
  0004c		 |$M48730|

			 ENDP  ; |clear|

	EXPORT	|KeypadMatrixStatus|

  00000			 AREA	 |.pdata|, PDATA
|$T48745| DCD	|$LN7@KeypadMatr|
	DCD	0x40000800
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |KeypadMatrixStatus| PROC

; 1068 : {

  00000		 |$LN7@KeypadMatr|
  00000		 |$M48742|

; 1069 :     //UINT8   matrix[8];
; 1070 :     int  temp=0;
; 1071 :     BOOL event = FALSE;
; 1072 :     
; 1073 :     temp = gKeypadMatrix[row] & (1<<col);
; 1074 :  
; 1075 :     if(temp)

  00000	e59f3014	 ldr         r3, [pc, #0x14]
  00004	e3a02001	 mov         r2, #1
  00008	e7d03003	 ldrb        r3, [r0, +r3]
  0000c	e1130112	 tst         r3, r2, lsl r1

; 1076 :         return event = TRUE;

  00010	13a00001	 movne       r0, #1

; 1077 :     else
; 1078 :         return event;

  00014	03a00000	 moveq       r0, #0

; 1079 : }

  00018	e12fff1e	 bx          lr
  0001c		 |$LN8@KeypadMatr|
  0001c		 |$LN9@KeypadMatr|
  0001c	00000000	 DCD         |gKeypadMatrix|
  00020		 |$M48743|

			 ENDP  ; |KeypadMatrixStatus|

	EXPORT	|__$ArrayPad$| [ DATA ]
	EXPORT	|KeypadFuncMatrix|
	EXPORT	|??_C@_1BO@NGPPIJDB@?$AAD?$AAo?$AAe?$AAs?$AAn?$AAt?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?4?$AA?5?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CA@PPFFLIOL@?$AA?$FL?$AAT?$AAA?$AAB?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CC@BLMOMOED@?$AA?$FL?$AAF?$AAN?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BO@IOBELGJB@?$AA?$FL?$AAS?$AAP?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BO@PDLCCPGE@?$AA?$FL?$AAF?$AA4?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BO@CLHBFEEC@?$AA?$FL?$AAF?$AA3?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BO@MMGMPCNF@?$AA?$FL?$AAF?$AA2?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BO@DODLBPCN@?$AA?$FL?$AAF?$AA1?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1O@DCFMJPNM@?$AA?$FL?$AA?$CL?$AA?9?$AA?$CK?$AA?1?$AA?$FN?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BM@JMJPJKJA@?$AA?$FL?$AA?4?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BM@FMDKDBOF@?$AA?$FL?$AA0?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1O@NNPFLPHL@?$AA?$FL?$AA9?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BO@HMPCCECM@?$AA?$AN?$AA?$FL?$AA8?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BM@IEPJEKMD@?$AA?$FL?$AA7?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BM@GDOEOMFE@?$AA?$FL?$AA6?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BM@JBLDABKM@?$AA?$FL?$AA5?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BM@HGKOKHDL@?$AA?$FL?$AA4?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BM@KOGNNMBN@?$AA?$FL?$AA3?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BM@EJHAHKIK@?$AA?$FL?$AA2?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BM@LLCHJHHC@?$AA?$FL?$AA1?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BM@CHPKNBI@?$AA?$FL?$AAR?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CA@NOOIPFOO@?$AA?$FL?$AAD?$AAO?$AAW?$AAN?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CA@GDCIMGPI@?$AA?$FL?$AAU?$AAP?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1O@GBBMEJJP@?$AA?$FL?$AAL?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CA@KEDIFEOF@?$AA?$FL?$AAB?$AAS?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BA@BDAJLGKP@?$AA?$FL?$AAE?$AAS?$AAC?$AA?$FN?$AA?5?$AA?5?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CA@NFAKNLNP@?$AA?$FL?$AAE?$AAN?$AAT?$AAR?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CA@IFNCPKIB@?$AA?$FL?$AAS?$AAC?$AAA?$AAN?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CA@MIFBMKAM@?$AA?$FL?$AAE?$AAN?$AAT?$AAL?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_13CMNBPIDO@?$AA?$AN?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_06NPFFKBAJ@?$FLENTR?$FN?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_06IALBHJIH@?$FLSCAN?$FN?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_06MJONCPHD@?$FLENTL?$FN?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_05BMBGMBJN@?$FLESC?$FN?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_04CGOMNFHO@?$FLBS?$FN?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_04OJGEAEAB@?$FLUP?$FN?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_06COOAKOOG@?$FLDOWN?$FN?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_05JOAADEJI@?$FL?5?4?5?$FN?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_05COMGBEDE@?$FL?50?5?$FN?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_06OEPAOOBC@?$FL?$CL?9?$CK?1?$FN?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_04OCNNFNGH@?$FLF1?$FN?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_04OAJLODDO@?$FLF2?$FN?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_04OBFJIJAJ@?$FLF3?$FN?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_04OEBGJPIM@?$FLF4?$FN?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_05LKEEIKIM@?$FLTAB?$FN?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_04LNHAHCAK@?$FLFN?$FN?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_04MMAPFLNN@?$FLSP?$FN?$AA@| [ DATA ] ; `string'
	IMPORT	|TWLReadRegs|

  00000			 AREA	 |.pdata|, PDATA
|$T49033| DCD	|$LN229@KeypadFunc|
	DCD	0xc0037c02

  00000			 AREA	 |.xdata|, DATA
|$T49029| DCD	0xffffffec

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BO@NGPPIJDB@?$AAD?$AAo?$AAe?$AAs?$AAn?$AAt?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?4?$AA?5?$AA?$AA@| DCB "D"
	DCB	0x0, "o", 0x0, "e", 0x0, "s", 0x0, "n", 0x0, "t", 0x0, " "
	DCB	0x0, "r", 0x0, "a", 0x0, "n", 0x0, "g", 0x0, "e", 0x0, "."
	DCB	0x0, " ", 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CA@PPFFLIOL@?$AA?$FL?$AAT?$AAA?$AAB?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@| DCB "["
	DCB	0x0, "T", 0x0, "A", 0x0, "B", 0x0, "]", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CC@BLMOMOED@?$AA?$FL?$AAF?$AAN?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@| DCB "["
	DCB	0x0, "F", 0x0, "N", 0x0, "]", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, " ", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BO@IOBELGJB@?$AA?$FL?$AAS?$AAP?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@| DCB "["
	DCB	0x0, "S", 0x0, "P", 0x0, "]", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BO@PDLCCPGE@?$AA?$FL?$AAF?$AA4?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@| DCB "["
	DCB	0x0, "F", 0x0, "4", 0x0, "]", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BO@CLHBFEEC@?$AA?$FL?$AAF?$AA3?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@| DCB "["
	DCB	0x0, "F", 0x0, "3", 0x0, "]", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BO@MMGMPCNF@?$AA?$FL?$AAF?$AA2?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@| DCB "["
	DCB	0x0, "F", 0x0, "2", 0x0, "]", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BO@DODLBPCN@?$AA?$FL?$AAF?$AA1?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@| DCB "["
	DCB	0x0, "F", 0x0, "1", 0x0, "]", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1O@DCFMJPNM@?$AA?$FL?$AA?$CL?$AA?9?$AA?$CK?$AA?1?$AA?$FN?$AA?$AA@| DCB "["
	DCB	0x0, "+", 0x0, "-", 0x0, "*", 0x0, "/", 0x0, "]", 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BM@JMJPJKJA@?$AA?$FL?$AA?4?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@| DCB "["
	DCB	0x0, ".", 0x0, "]", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BM@FMDKDBOF@?$AA?$FL?$AA0?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@| DCB "["
	DCB	0x0, "0", 0x0, "]", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1O@NNPFLPHL@?$AA?$FL?$AA9?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?$AA@| DCB "["
	DCB	0x0, "9", 0x0, "]", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BO@HMPCCECM@?$AA?$AN?$AA?$FL?$AA8?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@| DCB 0xd
	DCB	0x0, "[", 0x0, "8", 0x0, "]", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BM@IEPJEKMD@?$AA?$FL?$AA7?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@| DCB "["
	DCB	0x0, "7", 0x0, "]", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BM@GDOEOMFE@?$AA?$FL?$AA6?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@| DCB "["
	DCB	0x0, "6", 0x0, "]", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BM@JBLDABKM@?$AA?$FL?$AA5?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@| DCB "["
	DCB	0x0, "5", 0x0, "]", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BM@HGKOKHDL@?$AA?$FL?$AA4?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@| DCB "["
	DCB	0x0, "4", 0x0, "]", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BM@KOGNNMBN@?$AA?$FL?$AA3?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@| DCB "["
	DCB	0x0, "3", 0x0, "]", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BM@EJHAHKIK@?$AA?$FL?$AA2?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@| DCB "["
	DCB	0x0, "2", 0x0, "]", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BM@LLCHJHHC@?$AA?$FL?$AA1?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@| DCB "["
	DCB	0x0, "1", 0x0, "]", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BM@CHPKNBI@?$AA?$FL?$AAR?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@| DCB "["
	DCB	0x0, "R", 0x0, "]", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CA@NOOIPFOO@?$AA?$FL?$AAD?$AAO?$AAW?$AAN?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@| DCB "["
	DCB	0x0, "D", 0x0, "O", 0x0, "W", 0x0, "N", 0x0, "]", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CA@GDCIMGPI@?$AA?$FL?$AAU?$AAP?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@| DCB "["
	DCB	0x0, "U", 0x0, "P", 0x0, "]", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1O@GBBMEJJP@?$AA?$FL?$AAL?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?$AA@| DCB "["
	DCB	0x0, "L", 0x0, "]", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CA@KEDIFEOF@?$AA?$FL?$AAB?$AAS?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@| DCB "["
	DCB	0x0, "B", 0x0, "S", 0x0, "]", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BA@BDAJLGKP@?$AA?$FL?$AAE?$AAS?$AAC?$AA?$FN?$AA?5?$AA?5?$AA?$AA@| DCB "["
	DCB	0x0, "E", 0x0, "S", 0x0, "C", 0x0, "]", 0x0, " ", 0x0, " "
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CA@NFAKNLNP@?$AA?$FL?$AAE?$AAN?$AAT?$AAR?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@| DCB "["
	DCB	0x0, "E", 0x0, "N", 0x0, "T", 0x0, "R", 0x0, "]", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CA@IFNCPKIB@?$AA?$FL?$AAS?$AAC?$AAA?$AAN?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@| DCB "["
	DCB	0x0, "S", 0x0, "C", 0x0, "A", 0x0, "N", 0x0, "]", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CA@MIFBMKAM@?$AA?$FL?$AAE?$AAN?$AAT?$AAL?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@| DCB "["
	DCB	0x0, "E", 0x0, "N", 0x0, "T", 0x0, "L", 0x0, "]", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_13CMNBPIDO@?$AA?$AN?$AA?$AA@| DCB 0xd, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_06NPFFKBAJ@?$FLENTR?$FN?$AA@| DCB "[ENTR]", 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_06IALBHJIH@?$FLSCAN?$FN?$AA@| DCB "[SCAN]", 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_06MJONCPHD@?$FLENTL?$FN?$AA@| DCB "[ENTL]", 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_05BMBGMBJN@?$FLESC?$FN?$AA@| DCB "[ESC]", 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_04CGOMNFHO@?$FLBS?$FN?$AA@| DCB "[BS]", 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_04OJGEAEAB@?$FLUP?$FN?$AA@| DCB "[UP]", 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_06COOAKOOG@?$FLDOWN?$FN?$AA@| DCB "[DOWN]", 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_05JOAADEJI@?$FL?5?4?5?$FN?$AA@| DCB "[ . ]", 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_05COMGBEDE@?$FL?50?5?$FN?$AA@| DCB "[ 0 ]", 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_06OEPAOOBC@?$FL?$CL?9?$CK?1?$FN?$AA@| DCB "[+-*/]", 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_04OCNNFNGH@?$FLF1?$FN?$AA@| DCB "[F1]", 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_04OAJLODDO@?$FLF2?$FN?$AA@| DCB "[F2]", 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_04OBFJIJAJ@?$FLF3?$FN?$AA@| DCB "[F3]", 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_04OEBGJPIM@?$FLF4?$FN?$AA@| DCB "[F4]", 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_05LKEEIKIM@?$FLTAB?$FN?$AA@| DCB "[TAB]", 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_04LNHAHCAK@?$FLFN?$FN?$AA@| DCB "[FN]", 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_04MMAPFLNN@?$FLSP?$FN?$AA@| DCB "[SP]", 0x0	; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000	00000000	 DCD         |__GSHandlerCheck|
  00004	00000000	 DCD         |$T49029|

  00008		 |KeypadFuncMatrix| PROC

; 1083 : {

  00008		 |$LN229@KeypadFunc|
  00008	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  0000c	e24ddfef	 sub         sp, sp, #0xEF, 30
  00010		 |$M49030|
  00010	e59f3ddc	 ldr         r3, [pc, #0xDDC]
  00014	e5933000	 ldr         r3, [r3]
  00018	e58d33b8	 str         r3, [sp, #0x3B8]

; 1084 :     ULONG   ik, ix, row, column;
; 1085 :     USHORT  state=0;
; 1086 :     int     k, entry, keyAction = 0, rowPlace=2, colPlace=2; 
; 1087 :     BOOL    EXIT = FALSE;
; 1088 :     static int count = 26;
; 1089 :     char    presskey[][30] = { "[ENTR]","[SCAN]","[ENTL]",

  0001c	e59fedcc	 ldr         lr, [pc, #0xDCC]
  00020	e3a02017	 mov         r2, #0x17
  00024	e3a01000	 mov         r1, #0
  00028	e1de00b4	 ldrh        r0, [lr, #4]
  0002c	e59e3000	 ldr         r3, [lr]
  00030	e5dee006	 ldrb        lr, [lr, #6]
  00034	e1cd07b4	 strh        r0, [sp, #0x74]
  00038	e28d0077	 add         r0, sp, #0x77
  0003c	e58d3070	 str         r3, [sp, #0x70]
  00040	e5cde076	 strb        lr, [sp, #0x76]
  00044	e3a06000	 mov         r6, #0
  00048	eb000000	 bl          memset
  0004c	e59f1d98	 ldr         r1, [pc, #0xD98]
  00050	e28d008e	 add         r0, sp, #0x8E
  00054	e3a02007	 mov         r2, #7
  00058	eb000000	 bl          memcpy
  0005c	e3a02017	 mov         r2, #0x17
  00060	e3a01000	 mov         r1, #0
  00064	e28d0095	 add         r0, sp, #0x95
  00068	eb000000	 bl          memset
  0006c	e59fed74	 ldr         lr, [pc, #0xD74]
  00070	e3a02017	 mov         r2, #0x17
  00074	e3a01000	 mov         r1, #0
  00078	e1de00b4	 ldrh        r0, [lr, #4]
  0007c	e59e3000	 ldr         r3, [lr]
  00080	e5dee006	 ldrb        lr, [lr, #6]
  00084	e1cd0bb0	 strh        r0, [sp, #0xB0]
  00088	e28d00b3	 add         r0, sp, #0xB3
  0008c	e58d30ac	 str         r3, [sp, #0xAC]
  00090	e5cde0b2	 strb        lr, [sp, #0xB2]
  00094	eb000000	 bl          memset

; 1090 :                                "[ESC]","[BS]",

  00098	e59f1d44	 ldr         r1, [pc, #0xD44]
  0009c	e28d00ca	 add         r0, sp, #0xCA
  000a0	e3a02006	 mov         r2, #6
  000a4	eb000000	 bl          memcpy
  000a8	e3a02018	 mov         r2, #0x18
  000ac	e3a01000	 mov         r1, #0
  000b0	e28d00d0	 add         r0, sp, #0xD0
  000b4	eb000000	 bl          memset
  000b8	e59f0d20	 ldr         r0, [pc, #0xD20]
  000bc	e3a02019	 mov         r2, #0x19
  000c0	e3a01000	 mov         r1, #0
  000c4	e5903000	 ldr         r3, [r0]
  000c8	e5d0e004	 ldrb        lr, [r0, #4]
  000cc	e28d00ed	 add         r0, sp, #0xED
  000d0	e58d30e8	 str         r3, [sp, #0xE8]
  000d4	e5cde0ec	 strb        lr, [sp, #0xEC]
  000d8	eb000000	 bl          memset

; 1091 :                                "[L]","[UP]","[DOWN]","[R]",

  000dc	e59fecf8	 ldr         lr, [pc, #0xCF8]
  000e0	e3a0201a	 mov         r2, #0x1A
  000e4	e3a01000	 mov         r1, #0
  000e8	e1a0382e	 mov         r3, lr, lsr #16
  000ec	e3a00c01	 mov         r0, #1, 24
  000f0	e380000a	 orr         r0, r0, #0xA
  000f4	e08d0000	 add         r0, sp, r0
  000f8	e28dcc01	 add         r12, sp, #1, 24
  000fc	e1cc30b8	 strh        r3, [r12, #8]
  00100	e1cce0b6	 strh        lr, [r12, #6]
  00104	eb000000	 bl          memset
  00108	e59f0cc8	 ldr         r0, [pc, #0xCC8]
  0010c	e3a02019	 mov         r2, #0x19
  00110	e3a01000	 mov         r1, #0
  00114	e5903000	 ldr         r3, [r0]
  00118	e5d0e004	 ldrb        lr, [r0, #4]
  0011c	e3a00c01	 mov         r0, #1, 24
  00120	e3800029	 orr         r0, r0, #0x29
  00124	e08d0000	 add         r0, sp, r0
  00128	e58d3124	 str         r3, [sp, #0x124]
  0012c	e5cde128	 strb        lr, [sp, #0x128]
  00130	eb000000	 bl          memset
  00134	e59f1c98	 ldr         r1, [pc, #0xC98]
  00138	e3a00c01	 mov         r0, #1, 24
  0013c	e3800042	 orr         r0, r0, #0x42
  00140	e08d0000	 add         r0, sp, r0
  00144	e3a02007	 mov         r2, #7
  00148	eb000000	 bl          memcpy
  0014c	e3a02017	 mov         r2, #0x17
  00150	e3a01000	 mov         r1, #0
  00154	e3a00c01	 mov         r0, #1, 24
  00158	e3800049	 orr         r0, r0, #0x49
  0015c	e08d0000	 add         r0, sp, r0
  00160	eb000000	 bl          memset
  00164	e59f2c64	 ldr         r2, [pc, #0xC64]
  00168	e1a03422	 mov         r3, r2, lsr #8
  0016c	e5cd3161	 strb        r3, [sp, #0x161]
  00170	e5cd2160	 strb        r2, [sp, #0x160]
  00174	e1a03822	 mov         r3, r2, lsr #16
  00178	e1a02c22	 mov         r2, r2, lsr #24
  0017c	e5cd2163	 strb        r2, [sp, #0x163]
  00180	e3a0201a	 mov         r2, #0x1A
  00184	e3a01000	 mov         r1, #0
  00188	e28d0f59	 add         r0, sp, #0x59, 30
  0018c	e5cd3162	 strb        r3, [sp, #0x162]
  00190	eb000000	 bl          memset

; 1092 :                                "[1]","[2]","[3]",

  00194	e59fec30	 ldr         lr, [pc, #0xC30]
  00198	e3a0201a	 mov         r2, #0x1A
  0019c	e3a01000	 mov         r1, #0
  001a0	e1a0382e	 mov         r3, lr, lsr #16
  001a4	e3a00c01	 mov         r0, #1, 24
  001a8	e3800082	 orr         r0, r0, #0x82
  001ac	e08d0000	 add         r0, sp, r0
  001b0	e28dcc01	 add         r12, sp, #1, 24
  001b4	e1cc38b0	 strh        r3, [r12, #0x80]
  001b8	e1cce7be	 strh        lr, [r12, #0x7E]
  001bc	eb000000	 bl          memset
  001c0	e59f4c00	 ldr         r4, [pc, #0xC00]
  001c4	e3a0201a	 mov         r2, #0x1A
  001c8	e3a01000	 mov         r1, #0
  001cc	e1a00824	 mov         r0, r4, lsr #16
  001d0	e5cd019e	 strb        r0, [sp, #0x19E]
  001d4	e1a03424	 mov         r3, r4, lsr #8
  001d8	e1a0ec24	 mov         lr, r4, lsr #24
  001dc	e28d0e1a	 add         r0, sp, #0x1A, 28
  001e0	e5cd319d	 strb        r3, [sp, #0x19D]
  001e4	e5cde19f	 strb        lr, [sp, #0x19F]
  001e8	e5cd419c	 strb        r4, [sp, #0x19C]
  001ec	eb000000	 bl          memset
  001f0	e59febcc	 ldr         lr, [pc, #0xBCC]
  001f4	e3a0201a	 mov         r2, #0x1A
  001f8	e3a01000	 mov         r1, #0
  001fc	e1a0382e	 mov         r3, lr, lsr #16
  00200	e3a00c01	 mov         r0, #1, 24
  00204	e38000be	 orr         r0, r0, #0xBE
  00208	e08d0000	 add         r0, sp, r0
  0020c	e28dcc01	 add         r12, sp, #1, 24
  00210	e1cc3bbc	 strh        r3, [r12, #0xBC]
  00214	e1ccebba	 strh        lr, [r12, #0xBA]
  00218	eb000000	 bl          memset

; 1093 :                                "[4]","[5]","[6]",

  0021c	e59f4b9c	 ldr         r4, [pc, #0xB9C]
  00220	e3a0201a	 mov         r2, #0x1A
  00224	e3a01000	 mov         r1, #0
  00228	e1a00824	 mov         r0, r4, lsr #16
  0022c	e5cd01da	 strb        r0, [sp, #0x1DA]
  00230	e1a03424	 mov         r3, r4, lsr #8
  00234	e1a0ec24	 mov         lr, r4, lsr #24
  00238	e28d0f77	 add         r0, sp, #0x77, 30
  0023c	e5cd31d9	 strb        r3, [sp, #0x1D9]
  00240	e5cde1db	 strb        lr, [sp, #0x1DB]
  00244	e5cd41d8	 strb        r4, [sp, #0x1D8]
  00248	eb000000	 bl          memset
  0024c	e59feb68	 ldr         lr, [pc, #0xB68]
  00250	e3a0201a	 mov         r2, #0x1A
  00254	e3a01000	 mov         r1, #0
  00258	e1a0382e	 mov         r3, lr, lsr #16
  0025c	e3a00c01	 mov         r0, #1, 24
  00260	e38000fa	 orr         r0, r0, #0xFA
  00264	e08d0000	 add         r0, sp, r0
  00268	e28dcc01	 add         r12, sp, #1, 24
  0026c	e1cc3fb8	 strh        r3, [r12, #0xF8]
  00270	e1ccefb6	 strh        lr, [r12, #0xF6]
  00274	eb000000	 bl          memset
  00278	e59f4b38	 ldr         r4, [pc, #0xB38]
  0027c	e3a0201a	 mov         r2, #0x1A
  00280	e3a01000	 mov         r1, #0
  00284	e1a00824	 mov         r0, r4, lsr #16
  00288	e5cd0216	 strb        r0, [sp, #0x216]
  0028c	e1a03424	 mov         r3, r4, lsr #8
  00290	e1a0ec24	 mov         lr, r4, lsr #24
  00294	e28d0f86	 add         r0, sp, #0x86, 30
  00298	e5cd3215	 strb        r3, [sp, #0x215]
  0029c	e5cde217	 strb        lr, [sp, #0x217]
  002a0	e5cd4214	 strb        r4, [sp, #0x214]
  002a4	eb000000	 bl          memset

; 1094 :                                "[7]","[8]","[9]",

  002a8	e59feb04	 ldr         lr, [pc, #0xB04]
  002ac	e3a0201a	 mov         r2, #0x1A
  002b0	e3a01000	 mov         r1, #0
  002b4	e1a0382e	 mov         r3, lr, lsr #16
  002b8	e3a00c02	 mov         r0, #2, 24
  002bc	e3800036	 orr         r0, r0, #0x36
  002c0	e08d0000	 add         r0, sp, r0
  002c4	e28dcc02	 add         r12, sp, #2, 24
  002c8	e1cc33b4	 strh        r3, [r12, #0x34]
  002cc	e1cce3b2	 strh        lr, [r12, #0x32]
  002d0	eb000000	 bl          memset
  002d4	e59f2ad4	 ldr         r2, [pc, #0xAD4]
  002d8	e1a03422	 mov         r3, r2, lsr #8
  002dc	e5cd3251	 strb        r3, [sp, #0x251]
  002e0	e5cd2250	 strb        r2, [sp, #0x250]
  002e4	e1a0e822	 mov         lr, r2, lsr #16
  002e8	e1a03c22	 mov         r3, r2, lsr #24
  002ec	e3a0201a	 mov         r2, #0x1A
  002f0	e3a01000	 mov         r1, #0
  002f4	e28d0f95	 add         r0, sp, #0x95, 30
  002f8	e5cd3253	 strb        r3, [sp, #0x253]
  002fc	e5cde252	 strb        lr, [sp, #0x252]
  00300	eb000000	 bl          memset
  00304	e59feaa0	 ldr         lr, [pc, #0xAA0]
  00308	e3a0201a	 mov         r2, #0x1A
  0030c	e3a01000	 mov         r1, #0
  00310	e1a0382e	 mov         r3, lr, lsr #16
  00314	e3a00c02	 mov         r0, #2, 24
  00318	e3800072	 orr         r0, r0, #0x72
  0031c	e08d0000	 add         r0, sp, r0
  00320	e28dcc02	 add         r12, sp, #2, 24
  00324	e1cc37b0	 strh        r3, [r12, #0x70]
  00328	e1cce6be	 strh        lr, [r12, #0x6E]
  0032c	eb000000	 bl          memset

; 1095 :                                "[ . ]","[ 0 ]","[+-*/]",

  00330	e59f0a70	 ldr         r0, [pc, #0xA70]
  00334	e3a02018	 mov         r2, #0x18
  00338	e3a01000	 mov         r1, #0
  0033c	e5903000	 ldr         r3, [r0]
  00340	e1d0e0b4	 ldrh        lr, [r0, #4]
  00344	e3a00c02	 mov         r0, #2, 24
  00348	e3800092	 orr         r0, r0, #0x92
  0034c	e08d0000	 add         r0, sp, r0
  00350	e58d328c	 str         r3, [sp, #0x28C]
  00354	e28dcc02	 add         r12, sp, #2, 24
  00358	e1cce9b0	 strh        lr, [r12, #0x90]
  0035c	eb000000	 bl          memset
  00360	e59f1a3c	 ldr         r1, [pc, #0xA3C]
  00364	e3a00c02	 mov         r0, #2, 24
  00368	e38000aa	 orr         r0, r0, #0xAA
  0036c	e08d0000	 add         r0, sp, r0
  00370	e3a02006	 mov         r2, #6
  00374	eb000000	 bl          memcpy
  00378	e3a02018	 mov         r2, #0x18
  0037c	e3a01000	 mov         r1, #0
  00380	e28d0e2b	 add         r0, sp, #0x2B, 28
  00384	eb000000	 bl          memset
  00388	e59fea10	 ldr         lr, [pc, #0xA10]
  0038c	e3a02017	 mov         r2, #0x17
  00390	e3a01000	 mov         r1, #0
  00394	e1de00b4	 ldrh        r0, [lr, #4]
  00398	e59e3000	 ldr         r3, [lr]
  0039c	e5dee006	 ldrb        lr, [lr, #6]
  003a0	e28dcc02	 add         r12, sp, #2, 24
  003a4	e1cc0cbc	 strh        r0, [r12, #0xCC]
  003a8	e3a00c02	 mov         r0, #2, 24
  003ac	e38000cf	 orr         r0, r0, #0xCF
  003b0	e08d0000	 add         r0, sp, r0
  003b4	e58d32c8	 str         r3, [sp, #0x2C8]
  003b8	e5cde2ce	 strb        lr, [sp, #0x2CE]
  003bc	eb000000	 bl          memset

; 1096 :                                "[F1]","[F2]","[F3]","[F4]",

  003c0	e59f19d4	 ldr         r1, [pc, #0x9D4]
  003c4	e3a00c02	 mov         r0, #2, 24
  003c8	e38000e6	 orr         r0, r0, #0xE6
  003cc	e08d0000	 add         r0, sp, r0
  003d0	e3a02005	 mov         r2, #5
  003d4	eb000000	 bl          memcpy
  003d8	e3a02019	 mov         r2, #0x19
  003dc	e3a01000	 mov         r1, #0
  003e0	e3a00c02	 mov         r0, #2, 24
  003e4	e38000eb	 orr         r0, r0, #0xEB
  003e8	e08d0000	 add         r0, sp, r0
  003ec	eb000000	 bl          memset
  003f0	e59f09a0	 ldr         r0, [pc, #0x9A0]
  003f4	e3a02019	 mov         r2, #0x19
  003f8	e3a01000	 mov         r1, #0
  003fc	e5903000	 ldr         r3, [r0]
  00400	e5d0e004	 ldrb        lr, [r0, #4]
  00404	e3a00c03	 mov         r0, #3, 24
  00408	e3800009	 orr         r0, r0, #9
  0040c	e08d0000	 add         r0, sp, r0
  00410	e58d3304	 str         r3, [sp, #0x304]
  00414	e5cde308	 strb        lr, [sp, #0x308]
  00418	eb000000	 bl          memset
  0041c	e59f1970	 ldr         r1, [pc, #0x970]
  00420	e3a00c03	 mov         r0, #3, 24
  00424	e3800022	 orr         r0, r0, #0x22
  00428	e08d0000	 add         r0, sp, r0
  0042c	e3a02005	 mov         r2, #5
  00430	eb000000	 bl          memcpy
  00434	e3a02019	 mov         r2, #0x19
  00438	e3a01000	 mov         r1, #0
  0043c	e3a00c03	 mov         r0, #3, 24
  00440	e3800027	 orr         r0, r0, #0x27
  00444	e08d0000	 add         r0, sp, r0
  00448	eb000000	 bl          memset
  0044c	e59f093c	 ldr         r0, [pc, #0x93C]
  00450	e3a02019	 mov         r2, #0x19
  00454	e3a01000	 mov         r1, #0
  00458	e5903000	 ldr         r3, [r0]
  0045c	e5d0e004	 ldrb        lr, [r0, #4]
  00460	e3a00c03	 mov         r0, #3, 24
  00464	e3800045	 orr         r0, r0, #0x45
  00468	e08d0000	 add         r0, sp, r0
  0046c	e58d3340	 str         r3, [sp, #0x340]
  00470	e5cde344	 strb        lr, [sp, #0x344]
  00474	eb000000	 bl          memset

; 1097 :                                "[TAB]","[FN]","[SP]"

  00478	e59f190c	 ldr         r1, [pc, #0x90C]
  0047c	e3a00c03	 mov         r0, #3, 24
  00480	e380005e	 orr         r0, r0, #0x5E
  00484	e08d0000	 add         r0, sp, r0
  00488	e3a02006	 mov         r2, #6
  0048c	eb000000	 bl          memcpy
  00490	e3a02018	 mov         r2, #0x18
  00494	e3a01000	 mov         r1, #0
  00498	e28d0fd9	 add         r0, sp, #0xD9, 30
  0049c	eb000000	 bl          memset
  004a0	e59f08e0	 ldr         r0, [pc, #0x8E0]
  004a4	e3a02019	 mov         r2, #0x19
  004a8	e3a01000	 mov         r1, #0
  004ac	e5903000	 ldr         r3, [r0]
  004b0	e5d0e004	 ldrb        lr, [r0, #4]
  004b4	e3a00c03	 mov         r0, #3, 24
  004b8	e3800081	 orr         r0, r0, #0x81
  004bc	e08d0000	 add         r0, sp, r0
  004c0	e58d337c	 str         r3, [sp, #0x37C]
  004c4	e5cde380	 strb        lr, [sp, #0x380]
  004c8	eb000000	 bl          memset

; 1098 :                                };

  004cc	e59f18b0	 ldr         r1, [pc, #0x8B0]
  004d0	e3a00c03	 mov         r0, #3, 24
  004d4	e380009a	 orr         r0, r0, #0x9A
  004d8	e08d0000	 add         r0, sp, r0
  004dc	e3a02005	 mov         r2, #5
  004e0	eb000000	 bl          memcpy
  004e4	e3a02019	 mov         r2, #0x19
  004e8	e3a01000	 mov         r1, #0
  004ec	e3a00c03	 mov         r0, #3, 24
  004f0	e380009f	 orr         r0, r0, #0x9F
  004f4	e08d0000	 add         r0, sp, r0
  004f8	eb000000	 bl          memset

; 1099 :     
; 1100 :     /*static int  ENTL=0, SCAN=0, ENTR=0, ESC=0, BS=0, L=0,
; 1101 :                 U=0, D=0, R=0, ONE=0, TWO=0, THREE=0, 
; 1102 :                 FOUR=0, FIVE=0, SIX=0, SEVEN=0, NINE=0, ZERO=0,
; 1103 :                 DOT=0, PLUS=0, F1=0, F2=0, F4=0, SP=0, FN=0, TAB=0;*/
; 1104 :     
; 1105 :     //BOOL    ENTL=FALSE, SCAN=FALSE, ENTR=FALSE, ESC=FALSE;
; 1106 :                  
; 1107 :     //printing matrix array, Ray
; 1108 :     //for(;;){                   
; 1109 :         //for(ik=0; ik<3; ik++)
; 1110 :         //{
; 1111 :         TWLReadRegs(ghTwl, TWL_LOGADDR_FULL_CODE_7_0, gKeypadMatrix, sizeof(gKeypadMatrix));  //it is function read value, Ray 140103   

  004fc	e59f387c	 ldr         r3, [pc, #0x87C]
  00500	e59f5874	 ldr         r5, [pc, #0x874]
  00504	e3a010db	 mov         r1, #0xDB
  00508	e5930000	 ldr         r0, [r3]
  0050c	e3a03008	 mov         r3, #8
  00510	e1a02005	 mov         r2, r5
  00514	e24118fe	 sub         r1, r1, #0xFE, 16
  00518	eb000000	 bl          TWLReadRegs

; 1112 :         //OALLog(L" %d\r\n",sizeof(gKeypadMatrix));         //8
; 1113 :         
; 1114 :         /*OALLog(L" HotKeyFunction: matrix  ");
; 1115 :             for(ix=0; ix<8; ix++)
; 1116 :                  OALLog(L"[%d]", matrix[ix]);
; 1117 :             OALLog(L"\r\n");      
; 1118 :         }*/
; 1119 :         for(row=0, ik=0; row<8; row++)

  0051c	e3a02000	 mov         r2, #0
  00520	e3a00001	 mov         r0, #1
  00524		 |$LL69@KeypadFunc|

; 1120 :         {
; 1121 :             // Get matrix state 
; 1122 :             ix = row;
; 1123 :             state = gKeypadMatrix[ix] & 0xFF;     

  00524	e7d21005	 ldrb        r1, [r2, +r5]

; 1124 :             //OALLog(L"1%d\n",state);
; 1125 :             // If no-key is pressed continue with new rows
; 1126 :             if(state == 0)

  00528	e3510000	 cmp         r1, #0
  0052c	0a000005	 beq         |$LN68@KeypadFunc|

; 1127 :             {
; 1128 :                 ik += 8;
; 1129 :                 continue;           //if state event desnot 
; 1130 :             }
; 1131 :             
; 1132 :             for(column=0; column<8; column++, ik++)

  00530	e3a03000	 mov         r3, #0
  00534		 |$LL65@KeypadFunc|

; 1133 :             {
; 1134 :                 if((state & (1<<column)) !=0 ){

  00534	e1110310	 tst         r1, r0, lsl r3
  00538	e2833001	 add         r3, r3, #1

; 1135 :                     //RETAILMSG(TRUE, (L" HotKeyFunction: [%d,%d]\r\n",row ,column));
; 1136 :                     keyAction = 1;          //has values active

  0053c	13a06001	 movne       r6, #1
  00540	e3530008	 cmp         r3, #8
  00544	3afffffa	 bcc         |$LL65@KeypadFunc|
  00548		 |$LN68@KeypadFunc|

; 1112 :         //OALLog(L" %d\r\n",sizeof(gKeypadMatrix));         //8
; 1113 :         
; 1114 :         /*OALLog(L" HotKeyFunction: matrix  ");
; 1115 :             for(ix=0; ix<8; ix++)
; 1116 :                  OALLog(L"[%d]", matrix[ix]);
; 1117 :             OALLog(L"\r\n");      
; 1118 :         }*/
; 1119 :         for(row=0, ik=0; row<8; row++)

  00548	e2822001	 add         r2, r2, #1
  0054c	e3520008	 cmp         r2, #8
  00550	3afffff3	 bcc         |$LL69@KeypadFunc|

; 1137 :                     //OALLog(L"2%d\n",state);
; 1138 :                 }
; 1139 :             }
; 1140 :         }
; 1141 :     //}   
; 1142 :      
; 1143 :     if(keyAction){

  00554	e3560000	 cmp         r6, #0
  00558	0a0001e1	 beq         |$LN1@KeypadFunc|

; 1144 :         //OALLog(L"keyAction:%d\n",keyAction);
; 1145 :         OALLog(L"\r");

  0055c	e59f0814	 ldr         r0, [pc, #0x814]
  00560	eb000000	 bl          NKDbgPrintfW
  00564	e5d53000	 ldrb        r3, [r5]

; 1146 :         if( KeypadMatrixStatus(0, 5)){

  00568	e59f4804	 ldr         r4, [pc, #0x804]
  0056c	e3130020	 tst         r3, #0x20
  00570	0a00000d	 beq         |$LN60@KeypadFunc|

; 1147 :             OALLog(L"[ENTL]         ");

  00574	e59f07f4	 ldr         r0, [pc, #0x7F4]
  00578	eb000000	 bl          NKDbgPrintfW

; 1148 :             keyStatus[0]=1;

  0057c	e3a02001	 mov         r2, #1

; 1149 :             printStringMode(rowPlace, colPlace, BLUE_COLOR, TRANSPARENT_COLOR, presskey, 0);

  00580	e3a01000	 mov         r1, #0
  00584	e28d3070	 add         r3, sp, #0x70
  00588	e5842000	 str         r2, [r4]
  0058c	e58d1004	 str         r1, [sp, #4]
  00590	e58d3000	 str         r3, [sp]
  00594	e3a03009	 mov         r3, #9
  00598	e3a02002	 mov         r2, #2
  0059c	e3a01002	 mov         r1, #2
  005a0	e3a00002	 mov         r0, #2
  005a4	eb000000	 bl          printStringMode
  005a8	ea0001b1	 b           |$LN5@KeypadFunc|
  005ac		 |$LN60@KeypadFunc|

; 1150 :             //count = count++;
; 1151 :             //ENTL = 1;
; 1152 :         }else if( KeypadMatrixStatus(0, 4)){    //trouble

  005ac	e3130010	 tst         r3, #0x10
  005b0	0a00000d	 beq         |$LN58@KeypadFunc|

; 1153 :             OALLog(L"[SCAN]         ");

  005b4	e59f07b0	 ldr         r0, [pc, #0x7B0]
  005b8	eb000000	 bl          NKDbgPrintfW

; 1154 :             keyStatus[1]=1;

  005bc	e3a02001	 mov         r2, #1

; 1155 :             printStringMode(rowPlace, colPlace+7, BLUE_COLOR, TRANSPARENT_COLOR, presskey, 1);

  005c0	e3a01001	 mov         r1, #1
  005c4	e28d3070	 add         r3, sp, #0x70
  005c8	e5842004	 str         r2, [r4, #4]
  005cc	e58d1004	 str         r1, [sp, #4]
  005d0	e58d3000	 str         r3, [sp]
  005d4	e3a03009	 mov         r3, #9
  005d8	e3a02002	 mov         r2, #2
  005dc	e3a01009	 mov         r1, #9
  005e0	e3a00002	 mov         r0, #2
  005e4	eb000000	 bl          printStringMode
  005e8	ea0001a1	 b           |$LN5@KeypadFunc|
  005ec		 |$LN58@KeypadFunc|

; 1156 :             //count = count-1;
; 1157 :             //SCAN = 1;
; 1158 :         }else if( KeypadMatrixStatus(0, 2)){

  005ec	e3130004	 tst         r3, #4
  005f0	0a00000d	 beq         |$LN56@KeypadFunc|

; 1159 :             OALLog(L"[ENTR]         ");

  005f4	e59f076c	 ldr         r0, [pc, #0x76C]
  005f8	eb000000	 bl          NKDbgPrintfW

; 1160 :             keyStatus[2]=1;

  005fc	e3a02001	 mov         r2, #1

; 1161 :             printStringMode(rowPlace, colPlace+14, BLUE_COLOR, TRANSPARENT_COLOR, presskey, 2);

  00600	e3a01002	 mov         r1, #2
  00604	e28d3070	 add         r3, sp, #0x70
  00608	e5842008	 str         r2, [r4, #8]
  0060c	e58d1004	 str         r1, [sp, #4]
  00610	e58d3000	 str         r3, [sp]
  00614	e3a03009	 mov         r3, #9
  00618	e3a02002	 mov         r2, #2
  0061c	e3a01010	 mov         r1, #0x10
  00620	e3a00002	 mov         r0, #2
  00624	eb000000	 bl          printStringMode
  00628	ea000191	 b           |$LN5@KeypadFunc|
  0062c		 |$LN56@KeypadFunc|

; 1162 :             //count = count-1;
; 1163 :             //ENTR = 1;
; 1164 :         }else if( KeypadMatrixStatus(0, 1)){

  0062c	e3130002	 tst         r3, #2
  00630	0a00000d	 beq         |$LN54@KeypadFunc|

; 1165 :             OALLog(L"[ESC]  ");

  00634	e59f0728	 ldr         r0, [pc, #0x728]
  00638	eb000000	 bl          NKDbgPrintfW

; 1166 :             keyStatus[3]=1;

  0063c	e3a02001	 mov         r2, #1

; 1167 :             printStringMode(rowPlace+1, colPlace, BLUE_COLOR, TRANSPARENT_COLOR, presskey, 3);

  00640	e3a01003	 mov         r1, #3
  00644	e28d3070	 add         r3, sp, #0x70
  00648	e584200c	 str         r2, [r4, #0xC]
  0064c	e58d1004	 str         r1, [sp, #4]
  00650	e58d3000	 str         r3, [sp]
  00654	e3a03009	 mov         r3, #9
  00658	e3a02002	 mov         r2, #2
  0065c	e3a01002	 mov         r1, #2
  00660	e3a00003	 mov         r0, #3
  00664	eb000000	 bl          printStringMode
  00668	ea000181	 b           |$LN5@KeypadFunc|
  0066c		 |$LN54@KeypadFunc|

; 1168 :            //ESC = 1;
; 1169 :         }else if( KeypadMatrixStatus(0, 3)){

  0066c	e3130008	 tst         r3, #8
  00670	0a00000d	 beq         |$LN52@KeypadFunc|

; 1170 :             OALLog(L"[BS]           ");

  00674	e59f06e4	 ldr         r0, [pc, #0x6E4]
  00678	eb000000	 bl          NKDbgPrintfW

; 1171 :             keyStatus[4]=1;

  0067c	e3a02001	 mov         r2, #1

; 1172 :             printStringMode(rowPlace+1, colPlace+16, BLUE_COLOR, TRANSPARENT_COLOR, presskey, 4);

  00680	e3a01004	 mov         r1, #4
  00684	e28d3070	 add         r3, sp, #0x70
  00688	e5842010	 str         r2, [r4, #0x10]
  0068c	e58d1004	 str         r1, [sp, #4]
  00690	e58d3000	 str         r3, [sp]
  00694	e3a03009	 mov         r3, #9
  00698	e3a02002	 mov         r2, #2
  0069c	e3a01012	 mov         r1, #0x12
  006a0	e3a00003	 mov         r0, #3
  006a4	eb000000	 bl          printStringMode
  006a8	ea000171	 b           |$LN5@KeypadFunc|
  006ac		 |$LN52@KeypadFunc|
  006ac	e5d53001	 ldrb        r3, [r5, #1]

; 1173 :             //BS = 1;
; 1174 :         }else if( KeypadMatrixStatus(1, 5)){

  006b0	e3130020	 tst         r3, #0x20
  006b4	0a00000d	 beq         |$LN50@KeypadFunc|

; 1175 :             OALLog(L"[L]   ");

  006b8	e59f069c	 ldr         r0, [pc, #0x69C]
  006bc	eb000000	 bl          NKDbgPrintfW

; 1176 :             keyStatus[5]=1;

  006c0	e3a02001	 mov         r2, #1

; 1177 :             printStringMode(rowPlace+2, colPlace, BLUE_COLOR, TRANSPARENT_COLOR, presskey, 5);

  006c4	e3a01005	 mov         r1, #5
  006c8	e28d3070	 add         r3, sp, #0x70
  006cc	e5842014	 str         r2, [r4, #0x14]
  006d0	e58d1004	 str         r1, [sp, #4]
  006d4	e58d3000	 str         r3, [sp]
  006d8	e3a03009	 mov         r3, #9
  006dc	e3a02002	 mov         r2, #2
  006e0	e3a01002	 mov         r1, #2
  006e4	e3a00004	 mov         r0, #4
  006e8	eb000000	 bl          printStringMode
  006ec	ea000160	 b           |$LN5@KeypadFunc|
  006f0		 |$LN50@KeypadFunc|

; 1178 :             //L = 1;
; 1179 :         }else if( KeypadMatrixStatus(1, 4)){

  006f0	e3130010	 tst         r3, #0x10
  006f4	0a00000d	 beq         |$LN48@KeypadFunc|

; 1180 :             OALLog(L"[UP]           ");

  006f8	e59f0658	 ldr         r0, [pc, #0x658]
  006fc	eb000000	 bl          NKDbgPrintfW

; 1181 :             keyStatus[6]=1;

  00700	e3a02001	 mov         r2, #1

; 1182 :             printStringMode(rowPlace+2, colPlace+5, BLUE_COLOR, TRANSPARENT_COLOR, presskey, 6);

  00704	e3a01006	 mov         r1, #6
  00708	e28d3070	 add         r3, sp, #0x70
  0070c	e5842018	 str         r2, [r4, #0x18]
  00710	e58d1004	 str         r1, [sp, #4]
  00714	e58d3000	 str         r3, [sp]
  00718	e3a03009	 mov         r3, #9
  0071c	e3a02002	 mov         r2, #2
  00720	e3a01007	 mov         r1, #7
  00724	e3a00004	 mov         r0, #4
  00728	eb000000	 bl          printStringMode
  0072c	ea000150	 b           |$LN5@KeypadFunc|
  00730		 |$LN48@KeypadFunc|

; 1183 :             //U = 1;
; 1184 :         }else if( KeypadMatrixStatus(1, 0)){

  00730	e3130001	 tst         r3, #1
  00734	0a00000d	 beq         |$LN46@KeypadFunc|

; 1185 :             OALLog(L"[DOWN]         ");

  00738	e59f0614	 ldr         r0, [pc, #0x614]
  0073c	eb000000	 bl          NKDbgPrintfW

; 1186 :             keyStatus[7]=1;

  00740	e3a02001	 mov         r2, #1

; 1187 :             printStringMode(rowPlace+2, colPlace+10, BLUE_COLOR, TRANSPARENT_COLOR, presskey, 7);

  00744	e3a01007	 mov         r1, #7
  00748	e28d3070	 add         r3, sp, #0x70
  0074c	e584201c	 str         r2, [r4, #0x1C]
  00750	e58d1004	 str         r1, [sp, #4]
  00754	e58d3000	 str         r3, [sp]
  00758	e3a03009	 mov         r3, #9
  0075c	e3a02002	 mov         r2, #2
  00760	e3a0100c	 mov         r1, #0xC
  00764	e3a00004	 mov         r0, #4
  00768	eb000000	 bl          printStringMode
  0076c	ea000140	 b           |$LN5@KeypadFunc|
  00770		 |$LN46@KeypadFunc|

; 1188 :             //D = 1;
; 1189 :         }else if( KeypadMatrixStatus(1, 2)){

  00770	e3130004	 tst         r3, #4
  00774	0a00000d	 beq         |$LN44@KeypadFunc|

; 1190 :             OALLog(L"[R]          ");

  00778	e59f05d0	 ldr         r0, [pc, #0x5D0]
  0077c	eb000000	 bl          NKDbgPrintfW

; 1191 :             keyStatus[8]=1;

  00780	e3a02001	 mov         r2, #1

; 1192 :             printStringMode(rowPlace+2, colPlace+17, BLUE_COLOR, TRANSPARENT_COLOR, presskey, 8);

  00784	e3a01008	 mov         r1, #8
  00788	e28d3070	 add         r3, sp, #0x70
  0078c	e5842020	 str         r2, [r4, #0x20]
  00790	e58d1004	 str         r1, [sp, #4]
  00794	e58d3000	 str         r3, [sp]
  00798	e3a03009	 mov         r3, #9
  0079c	e3a02002	 mov         r2, #2
  007a0	e3a01013	 mov         r1, #0x13
  007a4	e3a00004	 mov         r0, #4
  007a8	eb000000	 bl          printStringMode
  007ac	ea000130	 b           |$LN5@KeypadFunc|
  007b0		 |$LN44@KeypadFunc|
  007b0	e5d52002	 ldrb        r2, [r5, #2]

; 1193 :             //R = 1;
; 1194 :         }else if( KeypadMatrixStatus(2, 5)){

  007b4	e3120020	 tst         r2, #0x20
  007b8	0a00000d	 beq         |$LN42@KeypadFunc|

; 1195 :             OALLog(L"[1]          ");

  007bc	e59f0588	 ldr         r0, [pc, #0x588]
  007c0	eb000000	 bl          NKDbgPrintfW

; 1196 :             keyStatus[9]=1;

  007c4	e3a02001	 mov         r2, #1

; 1197 :             printStringMode(rowPlace+3, colPlace+2, BLUE_COLOR, TRANSPARENT_COLOR, presskey, 9);

  007c8	e3a01009	 mov         r1, #9
  007cc	e28d3070	 add         r3, sp, #0x70
  007d0	e5842024	 str         r2, [r4, #0x24]
  007d4	e58d1004	 str         r1, [sp, #4]
  007d8	e58d3000	 str         r3, [sp]
  007dc	e3a03009	 mov         r3, #9
  007e0	e3a02002	 mov         r2, #2
  007e4	e3a01004	 mov         r1, #4
  007e8	e3a00005	 mov         r0, #5
  007ec	eb000000	 bl          printStringMode
  007f0	ea00011f	 b           |$LN5@KeypadFunc|
  007f4		 |$LN42@KeypadFunc|

; 1198 :             //ONE = 1;
; 1199 :         }else if( KeypadMatrixStatus(1, 1)){

  007f4	e3130002	 tst         r3, #2
  007f8	0a00000d	 beq         |$LN40@KeypadFunc|

; 1200 :             OALLog(L"[2]          ");

  007fc	e59f0544	 ldr         r0, [pc, #0x544]
  00800	eb000000	 bl          NKDbgPrintfW

; 1201 :             keyStatus[10]=1;

  00804	e3a02001	 mov         r2, #1

; 1202 :             printStringMode(rowPlace+3, colPlace+8, BLUE_COLOR, TRANSPARENT_COLOR, presskey, 10);

  00808	e3a0100a	 mov         r1, #0xA
  0080c	e28d3070	 add         r3, sp, #0x70
  00810	e5842028	 str         r2, [r4, #0x28]
  00814	e58d1004	 str         r1, [sp, #4]
  00818	e58d3000	 str         r3, [sp]
  0081c	e3a03009	 mov         r3, #9
  00820	e3a02002	 mov         r2, #2
  00824	e3a0100a	 mov         r1, #0xA
  00828	e3a00005	 mov         r0, #5
  0082c	eb000000	 bl          printStringMode
  00830	ea00010f	 b           |$LN5@KeypadFunc|
  00834		 |$LN40@KeypadFunc|

; 1203 :             //TWO = 1;
; 1204 :         }else if( KeypadMatrixStatus(1, 3)){

  00834	e3130008	 tst         r3, #8
  00838	0a00000d	 beq         |$LN38@KeypadFunc|

; 1205 :             OALLog(L"[3]          ");

  0083c	e59f0500	 ldr         r0, [pc, #0x500]
  00840	eb000000	 bl          NKDbgPrintfW

; 1206 :             keyStatus[11]=1;

  00844	e3a02001	 mov         r2, #1

; 1207 :             printStringMode(rowPlace+3, colPlace+15, BLUE_COLOR, TRANSPARENT_COLOR, presskey, 11);

  00848	e3a0100b	 mov         r1, #0xB
  0084c	e28d3070	 add         r3, sp, #0x70
  00850	e584202c	 str         r2, [r4, #0x2C]
  00854	e58d1004	 str         r1, [sp, #4]
  00858	e58d3000	 str         r3, [sp]
  0085c	e3a03009	 mov         r3, #9
  00860	e3a02002	 mov         r2, #2
  00864	e3a01011	 mov         r1, #0x11
  00868	e3a00005	 mov         r0, #5
  0086c	eb000000	 bl          printStringMode
  00870	ea0000ff	 b           |$LN5@KeypadFunc|
  00874		 |$LN38@KeypadFunc|

; 1208 :             //THREE = 1;
; 1209 :         }else if( KeypadMatrixStatus(2, 1)){

  00874	e3120002	 tst         r2, #2
  00878	0a00000d	 beq         |$LN36@KeypadFunc|

; 1210 :             OALLog(L"[4]          ");

  0087c	e59f04bc	 ldr         r0, [pc, #0x4BC]
  00880	eb000000	 bl          NKDbgPrintfW

; 1211 :             keyStatus[12]=1;

  00884	e3a02001	 mov         r2, #1

; 1212 :             printStringMode(rowPlace+4, colPlace+2, BLUE_COLOR, TRANSPARENT_COLOR, presskey, 12);

  00888	e3a0100c	 mov         r1, #0xC
  0088c	e28d3070	 add         r3, sp, #0x70
  00890	e5842030	 str         r2, [r4, #0x30]
  00894	e58d1004	 str         r1, [sp, #4]
  00898	e58d3000	 str         r3, [sp]
  0089c	e3a03009	 mov         r3, #9
  008a0	e3a02002	 mov         r2, #2
  008a4	e3a01004	 mov         r1, #4
  008a8	e3a00006	 mov         r0, #6
  008ac	eb000000	 bl          printStringMode
  008b0	ea0000ef	 b           |$LN5@KeypadFunc|
  008b4		 |$LN36@KeypadFunc|

; 1213 :             //FOUR = 1;
; 1214 :         }else if( KeypadMatrixStatus(2, 4)){

  008b4	e3120010	 tst         r2, #0x10
  008b8	0a00000d	 beq         |$LN34@KeypadFunc|

; 1215 :             OALLog(L"[5]          ");

  008bc	e59f0478	 ldr         r0, [pc, #0x478]
  008c0	eb000000	 bl          NKDbgPrintfW

; 1216 :             keyStatus[13]=1;

  008c4	e3a02001	 mov         r2, #1

; 1217 :             printStringMode(rowPlace+4, colPlace+8, BLUE_COLOR, TRANSPARENT_COLOR, presskey, 13);

  008c8	e3a0100d	 mov         r1, #0xD
  008cc	e28d3070	 add         r3, sp, #0x70
  008d0	e5842034	 str         r2, [r4, #0x34]
  008d4	e58d1004	 str         r1, [sp, #4]
  008d8	e58d3000	 str         r3, [sp]
  008dc	e3a03009	 mov         r3, #9
  008e0	e3a02002	 mov         r2, #2
  008e4	e3a0100a	 mov         r1, #0xA
  008e8	e3a00006	 mov         r0, #6
  008ec	eb000000	 bl          printStringMode
  008f0	ea0000df	 b           |$LN5@KeypadFunc|
  008f4		 |$LN34@KeypadFunc|

; 1218 :             //FIVE = 1;
; 1219 :         }else if( KeypadMatrixStatus(2, 3)){

  008f4	e3120008	 tst         r2, #8
  008f8	0a00000d	 beq         |$LN32@KeypadFunc|

; 1220 :             OALLog(L"[6]          ");

  008fc	e59f0434	 ldr         r0, [pc, #0x434]
  00900	eb000000	 bl          NKDbgPrintfW

; 1221 :             keyStatus[14]=1;

  00904	e3a02001	 mov         r2, #1

; 1222 :             printStringMode(rowPlace+4, colPlace+15, BLUE_COLOR, TRANSPARENT_COLOR, presskey, 14);

  00908	e3a0100e	 mov         r1, #0xE
  0090c	e28d3070	 add         r3, sp, #0x70
  00910	e5842038	 str         r2, [r4, #0x38]
  00914	e58d1004	 str         r1, [sp, #4]
  00918	e58d3000	 str         r3, [sp]
  0091c	e3a03009	 mov         r3, #9
  00920	e3a02002	 mov         r2, #2
  00924	e3a01011	 mov         r1, #0x11
  00928	e3a00006	 mov         r0, #6
  0092c	eb000000	 bl          printStringMode
  00930	ea0000cf	 b           |$LN5@KeypadFunc|
  00934		 |$LN32@KeypadFunc|
  00934	e5d53003	 ldrb        r3, [r5, #3]

; 1223 :             //SIX = 1;
; 1224 :         }else if( KeypadMatrixStatus(3, 5)){

  00938	e3130020	 tst         r3, #0x20
  0093c	0a00000d	 beq         |$LN30@KeypadFunc|

; 1225 :             OALLog(L"[7]          ");

  00940	e59f03ec	 ldr         r0, [pc, #0x3EC]
  00944	eb000000	 bl          NKDbgPrintfW

; 1226 :             keyStatus[15]=1;

  00948	e3a02001	 mov         r2, #1

; 1227 :             printStringMode(rowPlace+5, colPlace+2, BLUE_COLOR, TRANSPARENT_COLOR, presskey, 15);

  0094c	e3a0100f	 mov         r1, #0xF
  00950	e28d3070	 add         r3, sp, #0x70
  00954	e584203c	 str         r2, [r4, #0x3C]
  00958	e58d1004	 str         r1, [sp, #4]
  0095c	e58d3000	 str         r3, [sp]
  00960	e3a03009	 mov         r3, #9
  00964	e3a02002	 mov         r2, #2
  00968	e3a01004	 mov         r1, #4
  0096c	e3a00007	 mov         r0, #7
  00970	eb000000	 bl          printStringMode
  00974	ea0000be	 b           |$LN5@KeypadFunc|
  00978		 |$LN30@KeypadFunc|

; 1228 :             //SEVEN = 1;
; 1229 :         }else if( KeypadMatrixStatus(2, 0)){

  00978	e3120001	 tst         r2, #1
  0097c	0a00000b	 beq         |$LN28@KeypadFunc|

; 1230 :             OALLog(L"\r[8]          ");

  00980	e59f03a8	 ldr         r0, [pc, #0x3A8]
  00984	eb000000	 bl          NKDbgPrintfW

; 1231 :             printStringMode(rowPlace+5, colPlace+8, BLUE_COLOR, TRANSPARENT_COLOR, presskey, 16);

  00988	e3a02010	 mov         r2, #0x10
  0098c	e28d3070	 add         r3, sp, #0x70
  00990	e58d2004	 str         r2, [sp, #4]
  00994	e58d3000	 str         r3, [sp]
  00998	e3a03009	 mov         r3, #9
  0099c	e3a02002	 mov         r2, #2
  009a0	e3a0100a	 mov         r1, #0xA
  009a4	e3a00007	 mov         r0, #7
  009a8	eb000000	 bl          printStringMode
  009ac	ea0000b0	 b           |$LN5@KeypadFunc|
  009b0		 |$LN28@KeypadFunc|

; 1232 :             //EIGHT = 1
; 1233 :         }else if( KeypadMatrixStatus(2, 2)){

  009b0	e3120004	 tst         r2, #4
  009b4	0a00000d	 beq         |$LN26@KeypadFunc|

; 1234 :             OALLog(L"[9]   ");

  009b8	e59f036c	 ldr         r0, [pc, #0x36C]
  009bc	eb000000	 bl          NKDbgPrintfW

; 1235 :             keyStatus[16]=1;

  009c0	e3a02001	 mov         r2, #1

; 1236 :             printStringMode(rowPlace+5, colPlace+15, BLUE_COLOR, TRANSPARENT_COLOR, presskey, 17);

  009c4	e3a01011	 mov         r1, #0x11
  009c8	e28d3070	 add         r3, sp, #0x70
  009cc	e5842040	 str         r2, [r4, #0x40]
  009d0	e58d1004	 str         r1, [sp, #4]
  009d4	e58d3000	 str         r3, [sp]
  009d8	e3a03009	 mov         r3, #9
  009dc	e3a02002	 mov         r2, #2
  009e0	e3a01011	 mov         r1, #0x11
  009e4	e3a00007	 mov         r0, #7
  009e8	eb000000	 bl          printStringMode
  009ec	ea0000a0	 b           |$LN5@KeypadFunc|
  009f0		 |$LN26@KeypadFunc|

; 1237 :             //NINE = 1;
; 1238 :         }else if( KeypadMatrixStatus(3, 4)){

  009f0	e3130010	 tst         r3, #0x10
  009f4	0a00000d	 beq         |$LN24@KeypadFunc|

; 1239 :             OALLog(L"[0]          ");

  009f8	e59f0328	 ldr         r0, [pc, #0x328]
  009fc	eb000000	 bl          NKDbgPrintfW

; 1240 :             keyStatus[17]=1;

  00a00	e3a02001	 mov         r2, #1

; 1241 :             printStringMode(rowPlace+6, colPlace+7, BLUE_COLOR, TRANSPARENT_COLOR, presskey, 19);

  00a04	e3a01013	 mov         r1, #0x13
  00a08	e28d3070	 add         r3, sp, #0x70
  00a0c	e5842044	 str         r2, [r4, #0x44]
  00a10	e58d1004	 str         r1, [sp, #4]
  00a14	e58d3000	 str         r3, [sp]
  00a18	e3a03009	 mov         r3, #9
  00a1c	e3a02002	 mov         r2, #2
  00a20	e3a01009	 mov         r1, #9
  00a24	e3a00008	 mov         r0, #8
  00a28	eb000000	 bl          printStringMode
  00a2c	ea000090	 b           |$LN5@KeypadFunc|
  00a30		 |$LN24@KeypadFunc|

; 1242 :             //ZERO = 1;
; 1243 :         }else if( KeypadMatrixStatus(3, 1)){

  00a30	e3130002	 tst         r3, #2
  00a34	0a00000d	 beq         |$LN22@KeypadFunc|

; 1244 :             OALLog(L"[.]          ");

  00a38	e59f02e4	 ldr         r0, [pc, #0x2E4]
  00a3c	eb000000	 bl          NKDbgPrintfW

; 1245 :             keyStatus[18]=1;

  00a40	e3a02001	 mov         r2, #1

; 1246 :             printStringMode(rowPlace+6, colPlace, BLUE_COLOR, TRANSPARENT_COLOR, presskey, 18);

  00a44	e3a01012	 mov         r1, #0x12
  00a48	e28d3070	 add         r3, sp, #0x70
  00a4c	e5842048	 str         r2, [r4, #0x48]
  00a50	e58d1004	 str         r1, [sp, #4]
  00a54	e58d3000	 str         r3, [sp]
  00a58	e3a03009	 mov         r3, #9
  00a5c	e3a02002	 mov         r2, #2
  00a60	e3a01002	 mov         r1, #2
  00a64	e3a00008	 mov         r0, #8
  00a68	eb000000	 bl          printStringMode
  00a6c	ea000080	 b           |$LN5@KeypadFunc|
  00a70		 |$LN22@KeypadFunc|
  00a70	e5d52004	 ldrb        r2, [r5, #4]

; 1247 :             //DOT = 1;
; 1248 :         }else if( KeypadMatrixStatus(4, 1)){

  00a74	e3120002	 tst         r2, #2
  00a78	0a00000d	 beq         |$LN20@KeypadFunc|

; 1249 :             OALLog(L"[+-*/]");

  00a7c	e59f029c	 ldr         r0, [pc, #0x29C]
  00a80	eb000000	 bl          NKDbgPrintfW

; 1250 :             keyStatus[19]=1;

  00a84	e3a02001	 mov         r2, #1

; 1251 :             printStringMode(rowPlace+6, colPlace+15, BLUE_COLOR, TRANSPARENT_COLOR, presskey, 20);

  00a88	e3a01014	 mov         r1, #0x14
  00a8c	e28d3070	 add         r3, sp, #0x70
  00a90	e584204c	 str         r2, [r4, #0x4C]
  00a94	e58d1004	 str         r1, [sp, #4]
  00a98	e58d3000	 str         r3, [sp]
  00a9c	e3a03009	 mov         r3, #9
  00aa0	e3a02002	 mov         r2, #2
  00aa4	e3a01011	 mov         r1, #0x11
  00aa8	e3a00008	 mov         r0, #8
  00aac	eb000000	 bl          printStringMode
  00ab0	ea00006f	 b           |$LN5@KeypadFunc|
  00ab4		 |$LN20@KeypadFunc|

; 1252 :             //PLUS = 1;
; 1253 :         }else if( KeypadMatrixStatus(3, 3)){

  00ab4	e3130008	 tst         r3, #8
  00ab8	0a00000d	 beq         |$LN18@KeypadFunc|

; 1254 :             OALLog(L"[F1]          ");

  00abc	e59f0258	 ldr         r0, [pc, #0x258]
  00ac0	eb000000	 bl          NKDbgPrintfW

; 1255 :             keyStatus[20]=1;

  00ac4	e3a02001	 mov         r2, #1

; 1256 :             printStringMode(rowPlace+7, colPlace, BLUE_COLOR, TRANSPARENT_COLOR, presskey, 21);

  00ac8	e3a01015	 mov         r1, #0x15
  00acc	e28d3070	 add         r3, sp, #0x70
  00ad0	e5842050	 str         r2, [r4, #0x50]
  00ad4	e58d1004	 str         r1, [sp, #4]
  00ad8	e58d3000	 str         r3, [sp]
  00adc	e3a03009	 mov         r3, #9
  00ae0	e3a02002	 mov         r2, #2
  00ae4	e3a01002	 mov         r1, #2
  00ae8	e3a00009	 mov         r0, #9
  00aec	eb000000	 bl          printStringMode
  00af0	ea00005f	 b           |$LN5@KeypadFunc|
  00af4		 |$LN18@KeypadFunc|

; 1257 :             //F1 = 1;
; 1258 :         }else if( KeypadMatrixStatus(4, 3)){

  00af4	e3120008	 tst         r2, #8
  00af8	0a00000d	 beq         |$LN16@KeypadFunc|

; 1259 :             OALLog(L"[F2]          ");

  00afc	e59f0214	 ldr         r0, [pc, #0x214]
  00b00	eb000000	 bl          NKDbgPrintfW

; 1260 :             keyStatus[21]=1;

  00b04	e3a02001	 mov         r2, #1

; 1261 :             printStringMode(rowPlace+7, colPlace+5, BLUE_COLOR, TRANSPARENT_COLOR, presskey, 22);

  00b08	e3a01016	 mov         r1, #0x16
  00b0c	e28d3070	 add         r3, sp, #0x70
  00b10	e5842054	 str         r2, [r4, #0x54]
  00b14	e58d1004	 str         r1, [sp, #4]
  00b18	e58d3000	 str         r3, [sp]
  00b1c	e3a03009	 mov         r3, #9
  00b20	e3a02002	 mov         r2, #2
  00b24	e3a01007	 mov         r1, #7
  00b28	e3a00009	 mov         r0, #9
  00b2c	eb000000	 bl          printStringMode
  00b30	ea00004f	 b           |$LN5@KeypadFunc|
  00b34		 |$LN16@KeypadFunc|

; 1262 :             //F2 = 1;
; 1263 :         }else if( KeypadMatrixStatus(3, 0)){

  00b34	e3130001	 tst         r3, #1
  00b38	0a00000b	 beq         |$LN14@KeypadFunc|

; 1264 :             OALLog(L"[F3]          ");

  00b3c	e59f01d0	 ldr         r0, [pc, #0x1D0]
  00b40	eb000000	 bl          NKDbgPrintfW

; 1265 :             printStringMode(rowPlace+7, colPlace+12, BLUE_COLOR, TRANSPARENT_COLOR, presskey, 23);

  00b44	e3a02017	 mov         r2, #0x17
  00b48	e28d3070	 add         r3, sp, #0x70
  00b4c	e58d2004	 str         r2, [sp, #4]
  00b50	e58d3000	 str         r3, [sp]
  00b54	e3a03009	 mov         r3, #9
  00b58	e3a02002	 mov         r2, #2
  00b5c	e3a0100e	 mov         r1, #0xE
  00b60	e3a00009	 mov         r0, #9
  00b64	eb000000	 bl          printStringMode
  00b68	ea000041	 b           |$LN5@KeypadFunc|
  00b6c		 |$LN14@KeypadFunc|

; 1266 :             //F3 = 1;
; 1267 :         }else if( KeypadMatrixStatus(3, 2)){

  00b6c	e3130004	 tst         r3, #4
  00b70	0a00000d	 beq         |$LN12@KeypadFunc|

; 1268 :             OALLog(L"[F4]          ");

  00b74	e59f0194	 ldr         r0, [pc, #0x194]
  00b78	eb000000	 bl          NKDbgPrintfW

; 1269 :             keyStatus[22]=1;

  00b7c	e3a02001	 mov         r2, #1

; 1270 :             printStringMode(rowPlace+7, colPlace+16, BLUE_COLOR, TRANSPARENT_COLOR, presskey, 24);

  00b80	e3a01018	 mov         r1, #0x18
  00b84	e28d3070	 add         r3, sp, #0x70
  00b88	e5842058	 str         r2, [r4, #0x58]
  00b8c	e58d1004	 str         r1, [sp, #4]
  00b90	e58d3000	 str         r3, [sp]
  00b94	e3a03009	 mov         r3, #9
  00b98	e3a02002	 mov         r2, #2
  00b9c	e3a01012	 mov         r1, #0x12
  00ba0	e3a00009	 mov         r0, #9
  00ba4	eb000000	 bl          printStringMode
  00ba8	ea000031	 b           |$LN5@KeypadFunc|
  00bac		 |$LN12@KeypadFunc|

; 1271 :             //F4 = 1;
; 1272 :         }else if( KeypadMatrixStatus(4, 2)){

  00bac	e3120004	 tst         r2, #4
  00bb0	0a00000d	 beq         |$LN10@KeypadFunc|

; 1273 :             OALLog(L"[SP]          ");

  00bb4	e59f0150	 ldr         r0, [pc, #0x150]
  00bb8	eb000000	 bl          NKDbgPrintfW

; 1274 :             keyStatus[23]=1;

  00bbc	e3a02001	 mov         r2, #1

; 1275 :             printStringMode(rowPlace+8, colPlace+16, BLUE_COLOR, TRANSPARENT_COLOR, presskey, 27);

  00bc0	e3a0101b	 mov         r1, #0x1B
  00bc4	e28d3070	 add         r3, sp, #0x70
  00bc8	e584205c	 str         r2, [r4, #0x5C]
  00bcc	e58d1004	 str         r1, [sp, #4]
  00bd0	e58d3000	 str         r3, [sp]
  00bd4	e3a03009	 mov         r3, #9
  00bd8	e3a02002	 mov         r2, #2
  00bdc	e3a01012	 mov         r1, #0x12
  00be0	e3a0000a	 mov         r0, #0xA
  00be4	eb000000	 bl          printStringMode
  00be8	ea000021	 b           |$LN5@KeypadFunc|
  00bec		 |$LN10@KeypadFunc|

; 1276 :             //SP = 1;
; 1277 :         }else if( KeypadMatrixStatus(4, 4)){

  00bec	e3120010	 tst         r2, #0x10
  00bf0	0a00000d	 beq         |$LN8@KeypadFunc|

; 1278 :             OALLog(L"[FN]            ");

  00bf4	e59f010c	 ldr         r0, [pc, #0x10C]
  00bf8	eb000000	 bl          NKDbgPrintfW

; 1279 :             keyStatus[24]=1;

  00bfc	e3a02001	 mov         r2, #1

; 1280 :             printStringMode(rowPlace+8, colPlace+9, BLUE_COLOR, TRANSPARENT_COLOR, presskey, 26);

  00c00	e3a0101a	 mov         r1, #0x1A
  00c04	e28d3070	 add         r3, sp, #0x70
  00c08	e5842060	 str         r2, [r4, #0x60]
  00c0c	e58d1004	 str         r1, [sp, #4]
  00c10	e58d3000	 str         r3, [sp]
  00c14	e3a03009	 mov         r3, #9
  00c18	e3a02002	 mov         r2, #2
  00c1c	e3a0100b	 mov         r1, #0xB
  00c20	e3a0000a	 mov         r0, #0xA
  00c24	eb000000	 bl          printStringMode
  00c28	ea000011	 b           |$LN5@KeypadFunc|
  00c2c		 |$LN8@KeypadFunc|

; 1281 :             //FN = 1;
; 1282 :         }else if( KeypadMatrixStatus(4, 5)){    //KeypadMatrixStatus(4, 5)

  00c2c	e3120020	 tst         r2, #0x20
  00c30	0a00000d	 beq         |$LN6@KeypadFunc|

; 1283 :             OALLog(L"[TAB]          ");

  00c34	e59f00c8	 ldr         r0, [pc, #0xC8]
  00c38	eb000000	 bl          NKDbgPrintfW

; 1284 :             keyStatus[25]=1;

  00c3c	e3a02001	 mov         r2, #1

; 1285 :             //TAB = 1;
; 1286 :             printStringMode(rowPlace+8, colPlace+2, BLUE_COLOR, TRANSPARENT_COLOR, presskey, 25);

  00c40	e3a01019	 mov         r1, #0x19
  00c44	e28d3070	 add         r3, sp, #0x70
  00c48	e5842064	 str         r2, [r4, #0x64]
  00c4c	e58d1004	 str         r1, [sp, #4]
  00c50	e58d3000	 str         r3, [sp]
  00c54	e3a03009	 mov         r3, #9
  00c58	e3a02002	 mov         r2, #2
  00c5c	e3a01004	 mov         r1, #4
  00c60	e3a0000a	 mov         r0, #0xA
  00c64	eb000000	 bl          printStringMode

; 1287 :         }else{

  00c68	ea000001	 b           |$LN5@KeypadFunc|
  00c6c		 |$LN6@KeypadFunc|

; 1288 :             OALLog(L"Doesnt range. ");

  00c6c	e59f008c	 ldr         r0, [pc, #0x8C]
  00c70	eb000000	 bl          NKDbgPrintfW
  00c74		 |$LN5@KeypadFunc|

; 1289 :         }
; 1290 :       
; 1291 :         for(k=0, entry=1; k<KEYPAD_SIZE; k++){

  00c74	e3a02001	 mov         r2, #1
  00c78	e1a01004	 mov         r1, r4
  00c7c	e3a0001a	 mov         r0, #0x1A
  00c80		 |$LL4@KeypadFunc|

; 1292 :             entry &= keyStatus[k];         

  00c80	e4913004	 ldr         r3, [r1], #4
  00c84	e2500001	 subs        r0, r0, #1
  00c88	e0022003	 and         r2, r2, r3
  00c8c	1afffffb	 bne         |$LL4@KeypadFunc|

; 1293 :         }
; 1294 : 
; 1295 :         if(entry){

  00c90	e3520000	 cmp         r2, #0
  00c94	0a000012	 beq         |$LN1@KeypadFunc|

; 1296 :             clear();

  00c98	e3a03000	 mov         r3, #0
  00c9c	e3a02064	 mov         r2, #0x64
  00ca0	e3a01000	 mov         r1, #0
  00ca4	e28d000c	 add         r0, sp, #0xC
  00ca8	e58d3008	 str         r3, [sp, #8]
  00cac	eb000000	 bl          memset
  00cb0	e28d2008	 add         r2, sp, #8
  00cb4	e2841068	 add         r1, r4, #0x68
  00cb8		 |$LN225@KeypadFunc|
  00cb8	e4923004	 ldr         r3, [r2], #4
  00cbc	e4843004	 str         r3, [r4], #4
  00cc0	e1540001	 cmp         r4, r1
  00cc4	1afffffb	 bne         |$LN225@KeypadFunc|

; 1297 :             LcdStall(gd1Sec);

  00cc8	e59f302c	 ldr         r3, [pc, #0x2C]
  00ccc	e5930000	 ldr         r0, [r3]
  00cd0	eb000000	 bl          LcdStall

; 1298 :             return EXIT = TRUE;

  00cd4	e59d03b8	 ldr         r0, [sp, #0x3B8]
  00cd8	eb000000	 bl          __security_check_cookie
  00cdc	e3a00001	 mov         r0, #1
  00ce0	ea000002	 b           |$LN70@KeypadFunc|
  00ce4		 |$LN1@KeypadFunc|

; 1299 :         }      
; 1300 :     }
; 1301 : 
; 1302 :     /*count--;
; 1303 :     if(count == 0)
; 1304 :         count = 26;*/
; 1305 : 
; 1306 :     /*OALLog(L"%d\n",keyStatus[0]);
; 1307 :     OALLog(L"%d\n",*(keyStatus+1));
; 1308 :     OALLog(L"%d\n",*(keyStatus+2));
; 1309 :     OALLog(L"%d\n",*(keyStatus+3));*/
; 1310 :       
; 1311 :     return EXIT;

  00ce4	e59d03b8	 ldr         r0, [sp, #0x3B8]
  00ce8	eb000000	 bl          __security_check_cookie
  00cec	e3a00000	 mov         r0, #0
  00cf0		 |$LN70@KeypadFunc|

; 1312 : }

  00cf0	e28ddfef	 add         sp, sp, #0xEF, 30
  00cf4	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  00cf8	e12fff1e	 bx          lr
  00cfc		 |$LN230@KeypadFunc|
  00cfc		 |$LN231@KeypadFunc|
  00cfc	00000000	 DCD         |gd1Sec|
  00d00		 |$LN232@KeypadFunc|
  00d00	00000000	 DCD         |??_C@_1BO@NGPPIJDB@?$AAD?$AAo?$AAe?$AAs?$AAn?$AAt?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?4?$AA?5?$AA?$AA@|
  00d04		 |$LN233@KeypadFunc|
  00d04	00000000	 DCD         |??_C@_1CA@PPFFLIOL@?$AA?$FL?$AAT?$AAA?$AAB?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@|
  00d08		 |$LN234@KeypadFunc|
  00d08	00000000	 DCD         |??_C@_1CC@BLMOMOED@?$AA?$FL?$AAF?$AAN?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@|
  00d0c		 |$LN235@KeypadFunc|
  00d0c	00000000	 DCD         |??_C@_1BO@IOBELGJB@?$AA?$FL?$AAS?$AAP?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@|
  00d10		 |$LN236@KeypadFunc|
  00d10	00000000	 DCD         |??_C@_1BO@PDLCCPGE@?$AA?$FL?$AAF?$AA4?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@|
  00d14		 |$LN237@KeypadFunc|
  00d14	00000000	 DCD         |??_C@_1BO@CLHBFEEC@?$AA?$FL?$AAF?$AA3?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@|
  00d18		 |$LN238@KeypadFunc|
  00d18	00000000	 DCD         |??_C@_1BO@MMGMPCNF@?$AA?$FL?$AAF?$AA2?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@|
  00d1c		 |$LN239@KeypadFunc|
  00d1c	00000000	 DCD         |??_C@_1BO@DODLBPCN@?$AA?$FL?$AAF?$AA1?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@|
  00d20		 |$LN240@KeypadFunc|
  00d20	00000000	 DCD         |??_C@_1O@DCFMJPNM@?$AA?$FL?$AA?$CL?$AA?9?$AA?$CK?$AA?1?$AA?$FN?$AA?$AA@|
  00d24		 |$LN241@KeypadFunc|
  00d24	00000000	 DCD         |??_C@_1BM@JMJPJKJA@?$AA?$FL?$AA?4?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@|
  00d28		 |$LN242@KeypadFunc|
  00d28	00000000	 DCD         |??_C@_1BM@FMDKDBOF@?$AA?$FL?$AA0?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@|
  00d2c		 |$LN243@KeypadFunc|
  00d2c	00000000	 DCD         |??_C@_1O@NNPFLPHL@?$AA?$FL?$AA9?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?$AA@|
  00d30		 |$LN244@KeypadFunc|
  00d30	00000000	 DCD         |??_C@_1BO@HMPCCECM@?$AA?$AN?$AA?$FL?$AA8?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@|
  00d34		 |$LN245@KeypadFunc|
  00d34	00000000	 DCD         |??_C@_1BM@IEPJEKMD@?$AA?$FL?$AA7?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@|
  00d38		 |$LN246@KeypadFunc|
  00d38	00000000	 DCD         |??_C@_1BM@GDOEOMFE@?$AA?$FL?$AA6?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@|
  00d3c		 |$LN247@KeypadFunc|
  00d3c	00000000	 DCD         |??_C@_1BM@JBLDABKM@?$AA?$FL?$AA5?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@|
  00d40		 |$LN248@KeypadFunc|
  00d40	00000000	 DCD         |??_C@_1BM@HGKOKHDL@?$AA?$FL?$AA4?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@|
  00d44		 |$LN249@KeypadFunc|
  00d44	00000000	 DCD         |??_C@_1BM@KOGNNMBN@?$AA?$FL?$AA3?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@|
  00d48		 |$LN250@KeypadFunc|
  00d48	00000000	 DCD         |??_C@_1BM@EJHAHKIK@?$AA?$FL?$AA2?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@|
  00d4c		 |$LN251@KeypadFunc|
  00d4c	00000000	 DCD         |??_C@_1BM@LLCHJHHC@?$AA?$FL?$AA1?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@|
  00d50		 |$LN252@KeypadFunc|
  00d50	00000000	 DCD         |??_C@_1BM@CHPKNBI@?$AA?$FL?$AAR?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@|
  00d54		 |$LN253@KeypadFunc|
  00d54	00000000	 DCD         |??_C@_1CA@NOOIPFOO@?$AA?$FL?$AAD?$AAO?$AAW?$AAN?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@|
  00d58		 |$LN254@KeypadFunc|
  00d58	00000000	 DCD         |??_C@_1CA@GDCIMGPI@?$AA?$FL?$AAU?$AAP?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@|
  00d5c		 |$LN255@KeypadFunc|
  00d5c	00000000	 DCD         |??_C@_1O@GBBMEJJP@?$AA?$FL?$AAL?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?$AA@|
  00d60		 |$LN256@KeypadFunc|
  00d60	00000000	 DCD         |??_C@_1CA@KEDIFEOF@?$AA?$FL?$AAB?$AAS?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@|
  00d64		 |$LN257@KeypadFunc|
  00d64	00000000	 DCD         |??_C@_1BA@BDAJLGKP@?$AA?$FL?$AAE?$AAS?$AAC?$AA?$FN?$AA?5?$AA?5?$AA?$AA@|
  00d68		 |$LN258@KeypadFunc|
  00d68	00000000	 DCD         |??_C@_1CA@NFAKNLNP@?$AA?$FL?$AAE?$AAN?$AAT?$AAR?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@|
  00d6c		 |$LN259@KeypadFunc|
  00d6c	00000000	 DCD         |??_C@_1CA@IFNCPKIB@?$AA?$FL?$AAS?$AAC?$AAA?$AAN?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@|
  00d70		 |$LN260@KeypadFunc|
  00d70	00000000	 DCD         |??_C@_1CA@MIFBMKAM@?$AA?$FL?$AAE?$AAN?$AAT?$AAL?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@|
  00d74		 |$LN261@KeypadFunc|
  00d74	00000000	 DCD         |keyStatus|
  00d78		 |$LN262@KeypadFunc|
  00d78	00000000	 DCD         |??_C@_13CMNBPIDO@?$AA?$AN?$AA?$AA@|
  00d7c		 |$LN263@KeypadFunc|
  00d7c	00000000	 DCD         |gKeypadMatrix|
  00d80		 |$LN264@KeypadFunc|
  00d80	00000000	 DCD         |ghTwl|
  00d84		 |$LN265@KeypadFunc|
  00d84	00000000	 DCD         |??_C@_04MMAPFLNN@?$FLSP?$FN?$AA@|
  00d88		 |$LN266@KeypadFunc|
  00d88	00000000	 DCD         |??_C@_04LNHAHCAK@?$FLFN?$FN?$AA@|
  00d8c		 |$LN267@KeypadFunc|
  00d8c	00000000	 DCD         |??_C@_05LKEEIKIM@?$FLTAB?$FN?$AA@|
  00d90		 |$LN268@KeypadFunc|
  00d90	00000000	 DCD         |??_C@_04OEBGJPIM@?$FLF4?$FN?$AA@|
  00d94		 |$LN269@KeypadFunc|
  00d94	00000000	 DCD         |??_C@_04OBFJIJAJ@?$FLF3?$FN?$AA@|
  00d98		 |$LN270@KeypadFunc|
  00d98	00000000	 DCD         |??_C@_04OAJLODDO@?$FLF2?$FN?$AA@|
  00d9c		 |$LN271@KeypadFunc|
  00d9c	00000000	 DCD         |??_C@_04OCNNFNGH@?$FLF1?$FN?$AA@|
  00da0		 |$LN272@KeypadFunc|
  00da0	00000000	 DCD         |??_C@_06OEPAOOBC@?$FL?$CL?9?$CK?1?$FN?$AA@|
  00da4		 |$LN273@KeypadFunc|
  00da4	00000000	 DCD         |??_C@_05COMGBEDE@?$FL?50?5?$FN?$AA@|
  00da8		 |$LN274@KeypadFunc|
  00da8	00000000	 DCD         |??_C@_05JOAADEJI@?$FL?5?4?5?$FN?$AA@|
  00dac		 |$LN275@KeypadFunc|
  00dac	005d395b	 DCD         0x5d395b
  00db0		 |$LN276@KeypadFunc|
  00db0	005d385b	 DCD         0x5d385b
  00db4		 |$LN277@KeypadFunc|
  00db4	005d375b	 DCD         0x5d375b
  00db8		 |$LN278@KeypadFunc|
  00db8	005d365b	 DCD         0x5d365b
  00dbc		 |$LN279@KeypadFunc|
  00dbc	005d355b	 DCD         0x5d355b
  00dc0		 |$LN280@KeypadFunc|
  00dc0	005d345b	 DCD         0x5d345b
  00dc4		 |$LN281@KeypadFunc|
  00dc4	005d335b	 DCD         0x5d335b
  00dc8		 |$LN282@KeypadFunc|
  00dc8	005d325b	 DCD         0x5d325b
  00dcc		 |$LN283@KeypadFunc|
  00dcc	005d315b	 DCD         0x5d315b
  00dd0		 |$LN284@KeypadFunc|
  00dd0	005d525b	 DCD         0x5d525b
  00dd4		 |$LN285@KeypadFunc|
  00dd4	00000000	 DCD         |??_C@_06COOAKOOG@?$FLDOWN?$FN?$AA@|
  00dd8		 |$LN286@KeypadFunc|
  00dd8	00000000	 DCD         |??_C@_04OJGEAEAB@?$FLUP?$FN?$AA@|
  00ddc		 |$LN287@KeypadFunc|
  00ddc	005d4c5b	 DCD         0x5d4c5b
  00de0		 |$LN288@KeypadFunc|
  00de0	00000000	 DCD         |??_C@_04CGOMNFHO@?$FLBS?$FN?$AA@|
  00de4		 |$LN289@KeypadFunc|
  00de4	00000000	 DCD         |??_C@_05BMBGMBJN@?$FLESC?$FN?$AA@|
  00de8		 |$LN290@KeypadFunc|
  00de8	00000000	 DCD         |??_C@_06MJONCPHD@?$FLENTL?$FN?$AA@|
  00dec		 |$LN291@KeypadFunc|
  00dec	00000000	 DCD         |??_C@_06IALBHJIH@?$FLSCAN?$FN?$AA@|
  00df0		 |$LN292@KeypadFunc|
  00df0	00000000	 DCD         |??_C@_06NPFFKBAJ@?$FLENTR?$FN?$AA@|
  00df4		 |$LN293@KeypadFunc|
  00df4	00000000	 DCD         |__security_cookie|
  00df8		 |$M49031|

			 ENDP  ; |KeypadFuncMatrix|

	EXPORT	|__$ArrayPad$| [ DATA ]
	EXPORT	|??_C@_1CE@OGAGBDBI@?$AA?$AN?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?5?$AAB?$AAr?$AAe?$AAa?$AAk?$AA?$CB?$AA?$CB?$AA?5?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CC@JNFCCOBJ@?$AA?$AN?$AA?5?$AAT?$AAe?$AAs?$AAt?$AAe?$AAd?$AA?5?$AAo?$AAk?$AA?$CB?$AA?$CB?$AA?5?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_13LBAGMAIH@?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DA@HKDIMIAG@?$AA?$AN?$AA?5?$AA?$FL?$AAP?$AAW?$AAR?$AA?$FN?$AA?$FL?$AAT?$AAA?$AAB?$AA?$FN?$AA?$FL?$AAF?$AAN?$AA?$FN?$AA?$FL?$AAS?$AAP?$AA?$FN?$AA?5?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HO@EOHCFJB@?$AA?$AN?$AA?5?$AAP?$AAr?$AAe?$AAs?$AAs?$AA?5?$AAa?$AAn?$AAy?$AA?5?$AAk?$AAe?$AAy?$AA?5?$AAt?$AAh?$AAe?$AA?5?$AAk?$AAe?$AAy?$AAp?$AAa?$AAd?$AA?5?$AAt?$AAe?$AAs?$AAt?$AAi@| [ DATA ] ; `string'
	EXPORT	|??_C@_15OJKDPEFE@?$AA?5?$AA?5?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1M@EBPDEGHE@?$AA?$FL?$AAF?$AA?$CF?$AAd?$AA?$FN?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CO@MODKIPFA@?$AA?$AN?$AA?5?$AA?$FL?$AA?5?$AA?4?$AA?5?$AA?$FN?$AA?5?$AA?$FL?$AA?5?$AA0?$AA?5?$AA?$FN?$AA?5?$AA?$FL?$AA?$CL?$AA?9?$AA?$CK?$AA?1?$AA?$FN?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_13HOIJIPNN@?$AA?5?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BA@ILEOOHEJ@?$AA?5?$AA?5?$AA?5?$AA?$FL?$AA?$CF?$AAd?$AA?$FN?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_0BN@BPHDJHHI@You?5can?5press?5any?5key?5start?0?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_0BI@IDCCLFOC@?$FLESC?$FN?$CL?$FLBS?$FN?5are?5cancel?$DO?$DO?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_0P@LPPHAMHE@?$DO?$DOTest?5Break?$CB?$CB?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CO@IJDKLNIK@?$AAK?$AAe?$AAy?$AAp?$AAa?$AAd?$AA?5?$AAF?$AAu?$AAn?$AAc?$AAt?$AAi?$AAo?$AAn?$AAa?$AAl?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CO@IOKPGCGC@?$AA?$AN?$AA?5?$AA?$FL?$AAE?$AAN?$AAT?$AA?$FN?$AA?5?$AA?$FL?$AAS?$AAC?$AAA?$AAN?$AA?$FN?$AA?5?$AA?$FL?$AAE?$AAN?$AAT?$AA?$FN?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CO@IPBDPNGH@?$AA?$AN?$AA?5?$AA?$FL?$AAE?$AAS?$AAC?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$FL?$AAB?$AAS?$AA?$FN?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CO@EGBJCCJE@?$AA?$AN?$AA?5?$AA?$FL?$AAL?$AA?$FN?$AA?5?$AA?$FL?$AAU?$AAP?$AA?$FN?$AA?$FL?$AAD?$AAO?$AAW?$AAN?$AA?$FN?$AA?5?$AA?$FL?$AAR?$AA?$FN?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T49135| DCD	|$LN32@KeypadFunc@2|
	DCD	0xc000bb02

  00000			 AREA	 |.xdata|, DATA
|$T49131| DCD	0xffffffe8

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CE@OGAGBDBI@?$AA?$AN?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?5?$AAB?$AAr?$AAe?$AAa?$AAk?$AA?$CB?$AA?$CB?$AA?5?$AA?$AN?$AA?6?$AA?$AA@| DCB 0xd
	DCB	0x0, " ", 0x0, "T", 0x0, "e", 0x0, "s", 0x0, "t", 0x0, " "
	DCB	0x0, "B", 0x0, "r", 0x0, "e", 0x0, "a", 0x0, "k", 0x0, "!"
	DCB	0x0, "!", 0x0, " ", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CC@JNFCCOBJ@?$AA?$AN?$AA?5?$AAT?$AAe?$AAs?$AAt?$AAe?$AAd?$AA?5?$AAo?$AAk?$AA?$CB?$AA?$CB?$AA?5?$AA?$AN?$AA?6?$AA?$AA@| DCB 0xd
	DCB	0x0, " ", 0x0, "T", 0x0, "e", 0x0, "s", 0x0, "t", 0x0, "e"
	DCB	0x0, "d", 0x0, " ", 0x0, "o", 0x0, "k", 0x0, "!", 0x0, "!"
	DCB	0x0, " ", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_13LBAGMAIH@?$AA?6?$AA?$AA@| DCB 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DA@HKDIMIAG@?$AA?$AN?$AA?5?$AA?$FL?$AAP?$AAW?$AAR?$AA?$FN?$AA?$FL?$AAT?$AAA?$AAB?$AA?$FN?$AA?$FL?$AAF?$AAN?$AA?$FN?$AA?$FL?$AAS?$AAP?$AA?$FN?$AA?5?$AA?$AN?$AA?6?$AA?$AA@| DCB 0xd
	DCB	0x0, " ", 0x0, "[", 0x0, "P", 0x0, "W", 0x0, "R", 0x0, "]"
	DCB	0x0, "[", 0x0, "T", 0x0, "A", 0x0, "B", 0x0, "]", 0x0, "["
	DCB	0x0, "F", 0x0, "N", 0x0, "]", 0x0, "[", 0x0, "S", 0x0, "P"
	DCB	0x0, "]", 0x0, " ", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HO@EOHCFJB@?$AA?$AN?$AA?5?$AAP?$AAr?$AAe?$AAs?$AAs?$AA?5?$AAa?$AAn?$AAy?$AA?5?$AAk?$AAe?$AAy?$AA?5?$AAt?$AAh?$AAe?$AA?5?$AAk?$AAe?$AAy?$AAp?$AAa?$AAd?$AA?5?$AAt?$AAe?$AAs?$AAt?$AAi@| DCB 0xd
	DCB	0x0, " ", 0x0, "P", 0x0, "r", 0x0, "e", 0x0, "s", 0x0, "s"
	DCB	0x0, " ", 0x0, "a", 0x0, "n", 0x0, "y", 0x0, " ", 0x0, "k"
	DCB	0x0, "e", 0x0, "y", 0x0, " ", 0x0, "t", 0x0, "h", 0x0, "e"
	DCB	0x0, " ", 0x0, "k", 0x0, "e", 0x0, "y", 0x0, "p", 0x0, "a"
	DCB	0x0, "d", 0x0, " ", 0x0, "t", 0x0, "e", 0x0, "s", 0x0, "t"
	DCB	0x0, "i", 0x0, "n", 0x0, "g", 0x0, ",", 0x0, " ", 0x0, "["
	DCB	0x0, "E", 0x0, "S", 0x0, "C", 0x0, "]", 0x0, "+", 0x0, "["
	DCB	0x0, "B", 0x0, "S", 0x0, "]", 0x0, " ", 0x0, "a", 0x0, "r"
	DCB	0x0, "e", 0x0, " ", 0x0, "c", 0x0, "a", 0x0, "n", 0x0, "c"
	DCB	0x0, "e", 0x0, "l", 0x0, ">", 0x0, ">", 0x0, ">", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_15OJKDPEFE@?$AA?5?$AA?5?$AA?$AA@| DCB " ", 0x0, " ", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1M@EBPDEGHE@?$AA?$FL?$AAF?$AA?$CF?$AAd?$AA?$FN?$AA?$AA@| DCB "[", 0x0
	DCB	"F", 0x0, "%", 0x0, "d", 0x0, "]", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CO@MODKIPFA@?$AA?$AN?$AA?5?$AA?$FL?$AA?5?$AA?4?$AA?5?$AA?$FN?$AA?5?$AA?$FL?$AA?5?$AA0?$AA?5?$AA?$FN?$AA?5?$AA?$FL?$AA?$CL?$AA?9?$AA?$CK?$AA?1?$AA?$FN?$AA?$AN?$AA?6?$AA?$AA@| DCB 0xd
	DCB	0x0, " ", 0x0, "[", 0x0, " ", 0x0, ".", 0x0, " ", 0x0, "]"
	DCB	0x0, " ", 0x0, "[", 0x0, " ", 0x0, "0", 0x0, " ", 0x0, "]"
	DCB	0x0, " ", 0x0, "[", 0x0, "+", 0x0, "-", 0x0, "*", 0x0, "/"
	DCB	0x0, "]", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_13HOIJIPNN@?$AA?5?$AA?$AA@| DCB " ", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BA@ILEOOHEJ@?$AA?5?$AA?5?$AA?5?$AA?$FL?$AA?$CF?$AAd?$AA?$FN?$AA?$AA@| DCB " "
	DCB	0x0, " ", 0x0, " ", 0x0, "[", 0x0, "%", 0x0, "d", 0x0, "]"
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0BN@BPHDJHHI@You?5can?5press?5any?5key?5start?0?$AA@| DCB "You can"
	DCB	" press any key start,", 0x0		; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0BI@IDCCLFOC@?$FLESC?$FN?$CL?$FLBS?$FN?5are?5cancel?$DO?$DO?$AA@| DCB "["
	DCB	"ESC]+[BS] are cancel>>", 0x0		; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0P@LPPHAMHE@?$DO?$DOTest?5Break?$CB?$CB?$AA@| DCB ">>Test Break!!", 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CO@IJDKLNIK@?$AAK?$AAe?$AAy?$AAp?$AAa?$AAd?$AA?5?$AAF?$AAu?$AAn?$AAc?$AAt?$AAi?$AAo?$AAn?$AAa?$AAl?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?$AA@| DCB "K"
	DCB	0x0, "e", 0x0, "y", 0x0, "p", 0x0, "a", 0x0, "d", 0x0, " "
	DCB	0x0, "F", 0x0, "u", 0x0, "n", 0x0, "c", 0x0, "t", 0x0, "i"
	DCB	0x0, "o", 0x0, "n", 0x0, "a", 0x0, "l", 0x0, " ", 0x0, "T"
	DCB	0x0, "e", 0x0, "s", 0x0, "t", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CO@IOKPGCGC@?$AA?$AN?$AA?5?$AA?$FL?$AAE?$AAN?$AAT?$AA?$FN?$AA?5?$AA?$FL?$AAS?$AAC?$AAA?$AAN?$AA?$FN?$AA?5?$AA?$FL?$AAE?$AAN?$AAT?$AA?$FN?$AA?$AN?$AA?6?$AA?$AA@| DCB 0xd
	DCB	0x0, " ", 0x0, "[", 0x0, "E", 0x0, "N", 0x0, "T", 0x0, "]"
	DCB	0x0, " ", 0x0, "[", 0x0, "S", 0x0, "C", 0x0, "A", 0x0, "N"
	DCB	0x0, "]", 0x0, " ", 0x0, "[", 0x0, "E", 0x0, "N", 0x0, "T"
	DCB	0x0, "]", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CO@IPBDPNGH@?$AA?$AN?$AA?5?$AA?$FL?$AAE?$AAS?$AAC?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$FL?$AAB?$AAS?$AA?$FN?$AA?$AN?$AA?6?$AA?$AA@| DCB 0xd
	DCB	0x0, " ", 0x0, "[", 0x0, "E", 0x0, "S", 0x0, "C", 0x0, "]"
	DCB	0x0, " ", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, " ", 0x0, "[", 0x0, "B", 0x0, "S"
	DCB	0x0, "]", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CO@EGBJCCJE@?$AA?$AN?$AA?5?$AA?$FL?$AAL?$AA?$FN?$AA?5?$AA?$FL?$AAU?$AAP?$AA?$FN?$AA?$FL?$AAD?$AAO?$AAW?$AAN?$AA?$FN?$AA?5?$AA?$FL?$AAR?$AA?$FN?$AA?$AN?$AA?6?$AA?$AA@| DCB 0xd
	DCB	0x0, " ", 0x0, "[", 0x0, "L", 0x0, "]", 0x0, " ", 0x0, "["
	DCB	0x0, "U", 0x0, "P", 0x0, "]", 0x0, "[", 0x0, "D", 0x0, "O"
	DCB	0x0, "W", 0x0, "N", 0x0, "]", 0x0, " ", 0x0, "[", 0x0, "R"
	DCB	0x0, "]", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000	00000000	 DCD         |__GSHandlerCheck|
  00004	00000000	 DCD         |$T49131|

  00008		 |KeypadFunc_Z2170P| PROC

; 1316 : {

  00008		 |$LN32@KeypadFunc@2|
  00008	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  0000c	e24ddf4e	 sub         sp, sp, #0x4E, 30
  00010		 |$M49132|
  00010	e59f32d8	 ldr         r3, [pc, #0x2D8]
  00014	e5933000	 ldr         r3, [r3]
  00018	e58d3134	 str         r3, [sp, #0x134]

; 1317 :     int     num;
; 1318 :     //BOOL    LOOP = TRUE;
; 1319 :     //WCHAR   key;
; 1320 :     BOOL    EXIT;
; 1321 :     char    message[10][30] =  {"You can press any key start,",

  0001c	e59f12c8	 ldr         r1, [pc, #0x2C8]
  00020	e28d0008	 add         r0, sp, #8
  00024	e3a0201d	 mov         r2, #0x1D
  00028	eb000000	 bl          memcpy

; 1322 :                                 "[ESC]+[BS] are cancel>>",

  0002c	e59f12b4	 ldr         r1, [pc, #0x2B4]
  00030	e3a03000	 mov         r3, #0
  00034	e28d0026	 add         r0, sp, #0x26
  00038	e3a02018	 mov         r2, #0x18
  0003c	e5cd3025	 strb        r3, [sp, #0x25]
  00040	eb000000	 bl          memcpy

; 1323 :                                 ">>Test Break!!"
; 1324 :                                };

  00044	e59f3298	 ldr         r3, [pc, #0x298]
  00048	e3a04000	 mov         r4, #0
  0004c	e1cd43be	 strh        r4, [sp, #0x3E]
  00050	e5932000	 ldr         r2, [r3]
  00054	e5931004	 ldr         r1, [r3, #4]
  00058	e5930008	 ldr         r0, [r3, #8]
  0005c	e1d3e0bc	 ldrh        lr, [r3, #0xC]
  00060	e5d3300e	 ldrb        r3, [r3, #0xE]
  00064	e1cd44b0	 strh        r4, [sp, #0x40]
  00068	e1cd44b2	 strh        r4, [sp, #0x42]
  0006c	e58d2044	 str         r2, [sp, #0x44]
  00070	e58d1048	 str         r1, [sp, #0x48]
  00074	e58d004c	 str         r0, [sp, #0x4C]
  00078	e3a0200f	 mov         r2, #0xF
  0007c	e3a01000	 mov         r1, #0
  00080	e28d0053	 add         r0, sp, #0x53
  00084	e1cde5b0	 strh        lr, [sp, #0x50]
  00088	e5cd3052	 strb        r3, [sp, #0x52]
  0008c	eb000000	 bl          memset
  00090	e3a020d2	 mov         r2, #0xD2
  00094	e3a01000	 mov         r1, #0
  00098	e28d0062	 add         r0, sp, #0x62
  0009c	eb000000	 bl          memset

; 1325 :     
; 1326 :     UNREFERENCED_PARAMETER(pMenu);
; 1327 : 	OALBLMenuHeader(L"Keypad Functional Test");

  000a0	e59f0238	 ldr         r0, [pc, #0x238]
  000a4	eb000000	 bl          OALBLMenuHeader

; 1328 : 	//OALLog(L"!!!!!!hTwl: %X....\r\n", ghTwl);
; 1329 :     
; 1330 : 	//printing keypad 
; 1331 : 	OALLog(L"\r [ENT] [SCAN] [ENT]\r\n");

  000a8	e59f022c	 ldr         r0, [pc, #0x22C]
  000ac	eb000000	 bl          NKDbgPrintfW

; 1332 : 	OALLog(L"\r [ESC]         [BS]\r\n");

  000b0	e59f0220	 ldr         r0, [pc, #0x220]
  000b4	eb000000	 bl          NKDbgPrintfW

; 1333 : 	OALLog(L"\r [L] [UP][DOWN] [R]\r\n");

  000b8	e59f0214	 ldr         r0, [pc, #0x214]
  000bc	eb000000	 bl          NKDbgPrintfW

; 1334 : 		
; 1335 : 	for(num=1; num<10; num++){

  000c0	e59f5208	 ldr         r5, [pc, #0x208]
  000c4	e3a04001	 mov         r4, #1
  000c8		 |$LL12@KeypadFunc@2|

; 1336 :         OALLog(L"   [%d]",num);

  000c8	e59f01fc	 ldr         r0, [pc, #0x1FC]
  000cc	e1a01004	 mov         r1, r4
  000d0	eb000000	 bl          NKDbgPrintfW

; 1337 :         if((num%3) == 0)

  000d4	e0c32594	 smull       r2, r3, r4, r5
  000d8	e0833fa3	 add         r3, r3, r3, lsr #31
  000dc	e0833083	 add         r3, r3, r3, lsl #1
  000e0	e0543003	 subs        r3, r4, r3

; 1338 :             OALLog(L"\r\n");

  000e4	059f01c4	 ldreq       r0, [pc, #0x1C4]
  000e8	0b000000	 bleq        NKDbgPrintfW
  000ec	e2844001	 add         r4, r4, #1
  000f0	e354000a	 cmp         r4, #0xA
  000f4	bafffff3	 blt         |$LL12@KeypadFunc@2|

; 1339 :     }
; 1340 : 	OALLog(L"\r [ . ] [ 0 ] [+-*/]\r\n");

  000f8	e59f01c8	 ldr         r0, [pc, #0x1C8]
  000fc	eb000000	 bl          NKDbgPrintfW

; 1341 : 	OALLog(L" "); 

  00100	e59f01bc	 ldr         r0, [pc, #0x1BC]
  00104	eb000000	 bl          NKDbgPrintfW

; 1342 : 	for(num=1; num<5; num++){

  00108	e3a04001	 mov         r4, #1
  0010c		 |$LL8@KeypadFunc@2|

; 1343 :         OALLog(L"[F%d]",num);

  0010c	e59f01ac	 ldr         r0, [pc, #0x1AC]
  00110	e1a01004	 mov         r1, r4
  00114	eb000000	 bl          NKDbgPrintfW

; 1344 :         if((num%2) == 0)

  00118	e0843fa4	 add         r3, r4, r4, lsr #31
  0011c	e1a030c3	 mov         r3, r3, asr #1
  00120	e0543083	 subs        r3, r4, r3, lsl #1

; 1345 :             OALLog(L"  ");

  00124	059f0190	 ldreq       r0, [pc, #0x190]
  00128	0b000000	 bleq        NKDbgPrintfW
  0012c	e2844001	 add         r4, r4, #1
  00130	e3540005	 cmp         r4, #5
  00134	bafffff4	 blt         |$LL8@KeypadFunc@2|

; 1346 :     }
; 1347 : 	OALLog(L"\n");   

  00138	e59f0178	 ldr         r0, [pc, #0x178]
  0013c	eb000000	 bl          NKDbgPrintfW

; 1348 :     OALLog(L"\r [PWR][TAB][FN][SP] \r\n");

  00140	e59f016c	 ldr         r0, [pc, #0x16C]
  00144	eb000000	 bl          NKDbgPrintfW

; 1349 : 	OALLog(L"\r\n");

  00148	e59f0160	 ldr         r0, [pc, #0x160]
  0014c	eb000000	 bl          NKDbgPrintfW

; 1350 :     OALLog(L"\r Press any key the keypad testing, [ESC]+[BS] are cancel>>>\r\n");

  00150	e59f0154	 ldr         r0, [pc, #0x154]
  00154	eb000000	 bl          NKDbgPrintfW

; 1351 :     DisplayShowBackground(0xFF);

  00158	e3a000ff	 mov         r0, #0xFF
  0015c	eb000000	 bl          DisplayShowBackground

; 1352 :     printStringMode(0, 1, RED_COLOR, TRANSPARENT_COLOR, message, 0);

  00160	e28d3008	 add         r3, sp, #8
  00164	e58d3000	 str         r3, [sp]
  00168	e3a07000	 mov         r7, #0
  0016c	e3a03009	 mov         r3, #9
  00170	e3a02000	 mov         r2, #0
  00174	e3a01001	 mov         r1, #1
  00178	e3a00000	 mov         r0, #0
  0017c	e58d7004	 str         r7, [sp, #4]
  00180	eb000000	 bl          printStringMode

; 1353 :     printStringMode(1, 1, RED_COLOR, TRANSPARENT_COLOR, message, 1);

  00184	e3a02001	 mov         r2, #1
  00188	e28d3008	 add         r3, sp, #8
  0018c	e58d2004	 str         r2, [sp, #4]
  00190	e58d3000	 str         r3, [sp]
  00194	e3a03009	 mov         r3, #9
  00198	e3a02000	 mov         r2, #0
  0019c	e3a01001	 mov         r1, #1
  001a0	e3a00001	 mov         r0, #1
  001a4	eb000000	 bl          printStringMode

; 1354 :     LcdStall(gd1Sec);

  001a8	e59f50f8	 ldr         r5, [pc, #0xF8]
  001ac	e5950000	 ldr         r0, [r5]
  001b0	eb000000	 bl          LcdStall
  001b4	e59f60e8	 ldr         r6, [pc, #0xE8]
  001b8		 |$LL4@KeypadFunc@2|

; 1355 : 	//while(){
; 1356 :     do{
; 1357 : 	    EXIT = KeypadFuncMatrix();

  001b8	eb000000	 bl          KeypadFuncMatrix

; 1358 :         LcdStall(gd1Sec/2); 

  001bc	e5953000	 ldr         r3, [r5]
  001c0	e1a04000	 mov         r4, r0
  001c4	e1a000a3	 mov         r0, r3, lsr #1
  001c8	eb000000	 bl          LcdStall

; 1359 :         if(EXIT){

  001cc	e3540000	 cmp         r4, #0
  001d0	1a00001a	 bne         |$LN26@KeypadFunc@2|
  001d4	e5d63000	 ldrb        r3, [r6]

; 1365 :             return;
; 1366 : 	    }	    
; 1367 : 	    /*if( (key = OALBLMenuReadKey(TRUE)) == L'0')
; 1368 :             goto BREAK;*/
; 1369 :     }while((KeypadMatrixStatus(0, 1) & KeypadMatrixStatus(0, 3)) != TRUE);  //Breaking

  001d8	e3130002	 tst         r3, #2
  001dc	13a02001	 movne       r2, #1
  001e0	03a02000	 moveq       r2, #0
  001e4	e3130008	 tst         r3, #8
  001e8	13a03001	 movne       r3, #1
  001ec	03a03000	 moveq       r3, #0
  001f0	e0033002	 and         r3, r3, r2
  001f4	e3530001	 cmp         r3, #1
  001f8	1affffee	 bne         |$LL4@KeypadFunc@2|

; 1370 :     //}
; 1371 : //BREAK:
; 1372 :     printStringMode(17, 1, RED_COLOR, TRANSPARENT_COLOR, message, 2);

  001fc	e3a02002	 mov         r2, #2
  00200	e28d3008	 add         r3, sp, #8
  00204	e58d2004	 str         r2, [sp, #4]
  00208	e58d3000	 str         r3, [sp]
  0020c	e3a03009	 mov         r3, #9
  00210	e3a02000	 mov         r2, #0
  00214	e3a01001	 mov         r1, #1
  00218	e3a00011	 mov         r0, #0x11
  0021c	eb000000	 bl          printStringMode

; 1373 :     LcdStall(gd1Sec*3);

  00220	e5953000	 ldr         r3, [r5]
  00224	e0830083	 add         r0, r3, r3, lsl #1
  00228	eb000000	 bl          LcdStall

; 1374 :     DisplayShowBackground(0xFF);

  0022c	e3a000ff	 mov         r0, #0xFF
  00230	eb000000	 bl          DisplayShowBackground

; 1375 :     OALLog(L"\r Test Break!! \r\n");

  00234	e59f0064	 ldr         r0, [pc, #0x64]
  00238	eb000000	 bl          NKDbgPrintfW
  0023c	ea000010	 b           |$LN13@KeypadFunc@2|
  00240		 |$LN26@KeypadFunc@2|

; 1360 :             DisplayShowBackground(0xFF);

  00240	e3a000ff	 mov         r0, #0xFF
  00244	eb000000	 bl          DisplayShowBackground

; 1361 :             printStringMode(9, 9, RED_COLOR, GREEN_COLOR, gTestPass, 0);

  00248	e59f104c	 ldr         r1, [pc, #0x4C]
  0024c	e3a03001	 mov         r3, #1
  00250	e3a02000	 mov         r2, #0
  00254	e58d1000	 str         r1, [sp]
  00258	e3a01009	 mov         r1, #9
  0025c	e3a00009	 mov         r0, #9
  00260	e58d7004	 str         r7, [sp, #4]
  00264	eb000000	 bl          printStringMode

; 1362 : 	        LcdStall(gd1Sec*2);

  00268	e5953000	 ldr         r3, [r5]
  0026c	e1a00083	 mov         r0, r3, lsl #1
  00270	eb000000	 bl          LcdStall

; 1363 :             OALLog(L"\r Tested ok!! \r\n");

  00274	e59f001c	 ldr         r0, [pc, #0x1C]
  00278	eb000000	 bl          NKDbgPrintfW

; 1364 :             DisplayShowBackground(0xFF);

  0027c	e3a000ff	 mov         r0, #0xFF
  00280	eb000000	 bl          DisplayShowBackground

; 1375 :     OALLog(L"\r Test Break!! \r\n");

  00284		 |$LN13@KeypadFunc@2|
  00284	e59d0134	 ldr         r0, [sp, #0x134]
  00288	eb000000	 bl          __security_check_cookie

; 1376 :     return;
; 1377 : }

  0028c	e28ddf4e	 add         sp, sp, #0x4E, 30
  00290	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  00294	e12fff1e	 bx          lr
  00298		 |$LN33@KeypadFunc@2|
  00298		 |$LN34@KeypadFunc@2|
  00298	00000000	 DCD         |??_C@_1CC@JNFCCOBJ@?$AA?$AN?$AA?5?$AAT?$AAe?$AAs?$AAt?$AAe?$AAd?$AA?5?$AAo?$AAk?$AA?$CB?$AA?$CB?$AA?5?$AA?$AN?$AA?6?$AA?$AA@|
  0029c		 |$LN35@KeypadFunc@2|
  0029c	00000000	 DCD         |gTestPass|
  002a0		 |$LN36@KeypadFunc@2|
  002a0	00000000	 DCD         |??_C@_1CE@OGAGBDBI@?$AA?$AN?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?5?$AAB?$AAr?$AAe?$AAa?$AAk?$AA?$CB?$AA?$CB?$AA?5?$AA?$AN?$AA?6?$AA?$AA@|
  002a4		 |$LN37@KeypadFunc@2|
  002a4	00000000	 DCD         |gKeypadMatrix|
  002a8		 |$LN38@KeypadFunc@2|
  002a8	00000000	 DCD         |gd1Sec|
  002ac		 |$LN39@KeypadFunc@2|
  002ac	00000000	 DCD         |??_C@_1HO@EOHCFJB@?$AA?$AN?$AA?5?$AAP?$AAr?$AAe?$AAs?$AAs?$AA?5?$AAa?$AAn?$AAy?$AA?5?$AAk?$AAe?$AAy?$AA?5?$AAt?$AAh?$AAe?$AA?5?$AAk?$AAe?$AAy?$AAp?$AAa?$AAd?$AA?5?$AAt?$AAe?$AAs?$AAt?$AAi@|
  002b0		 |$LN40@KeypadFunc@2|
  002b0	00000000	 DCD         |??_C@_15JNBOKNOG@?$AA?$AN?$AA?6?$AA?$AA@|
  002b4		 |$LN41@KeypadFunc@2|
  002b4	00000000	 DCD         |??_C@_1DA@HKDIMIAG@?$AA?$AN?$AA?5?$AA?$FL?$AAP?$AAW?$AAR?$AA?$FN?$AA?$FL?$AAT?$AAA?$AAB?$AA?$FN?$AA?$FL?$AAF?$AAN?$AA?$FN?$AA?$FL?$AAS?$AAP?$AA?$FN?$AA?5?$AA?$AN?$AA?6?$AA?$AA@|
  002b8		 |$LN42@KeypadFunc@2|
  002b8	00000000	 DCD         |??_C@_13LBAGMAIH@?$AA?6?$AA?$AA@|
  002bc		 |$LN43@KeypadFunc@2|
  002bc	00000000	 DCD         |??_C@_15OJKDPEFE@?$AA?5?$AA?5?$AA?$AA@|
  002c0		 |$LN44@KeypadFunc@2|
  002c0	00000000	 DCD         |??_C@_1M@EBPDEGHE@?$AA?$FL?$AAF?$AA?$CF?$AAd?$AA?$FN?$AA?$AA@|
  002c4		 |$LN45@KeypadFunc@2|
  002c4	00000000	 DCD         |??_C@_13HOIJIPNN@?$AA?5?$AA?$AA@|
  002c8		 |$LN46@KeypadFunc@2|
  002c8	00000000	 DCD         |??_C@_1CO@MODKIPFA@?$AA?$AN?$AA?5?$AA?$FL?$AA?5?$AA?4?$AA?5?$AA?$FN?$AA?5?$AA?$FL?$AA?5?$AA0?$AA?5?$AA?$FN?$AA?5?$AA?$FL?$AA?$CL?$AA?9?$AA?$CK?$AA?1?$AA?$FN?$AA?$AN?$AA?6?$AA?$AA@|
  002cc		 |$LN47@KeypadFunc@2|
  002cc	00000000	 DCD         |??_C@_1BA@ILEOOHEJ@?$AA?5?$AA?5?$AA?5?$AA?$FL?$AA?$CF?$AAd?$AA?$FN?$AA?$AA@|
  002d0		 |$LN48@KeypadFunc@2|
  002d0	55555556	 DCD         0x55555556
  002d4		 |$LN49@KeypadFunc@2|
  002d4	00000000	 DCD         |??_C@_1CO@EGBJCCJE@?$AA?$AN?$AA?5?$AA?$FL?$AAL?$AA?$FN?$AA?5?$AA?$FL?$AAU?$AAP?$AA?$FN?$AA?$FL?$AAD?$AAO?$AAW?$AAN?$AA?$FN?$AA?5?$AA?$FL?$AAR?$AA?$FN?$AA?$AN?$AA?6?$AA?$AA@|
  002d8		 |$LN50@KeypadFunc@2|
  002d8	00000000	 DCD         |??_C@_1CO@IPBDPNGH@?$AA?$AN?$AA?5?$AA?$FL?$AAE?$AAS?$AAC?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$FL?$AAB?$AAS?$AA?$FN?$AA?$AN?$AA?6?$AA?$AA@|
  002dc		 |$LN51@KeypadFunc@2|
  002dc	00000000	 DCD         |??_C@_1CO@IOKPGCGC@?$AA?$AN?$AA?5?$AA?$FL?$AAE?$AAN?$AAT?$AA?$FN?$AA?5?$AA?$FL?$AAS?$AAC?$AAA?$AAN?$AA?$FN?$AA?5?$AA?$FL?$AAE?$AAN?$AAT?$AA?$FN?$AA?$AN?$AA?6?$AA?$AA@|
  002e0		 |$LN52@KeypadFunc@2|
  002e0	00000000	 DCD         |??_C@_1CO@IJDKLNIK@?$AAK?$AAe?$AAy?$AAp?$AAa?$AAd?$AA?5?$AAF?$AAu?$AAn?$AAc?$AAt?$AAi?$AAo?$AAn?$AAa?$AAl?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?$AA@|
  002e4		 |$LN53@KeypadFunc@2|
  002e4	00000000	 DCD         |??_C@_0P@LPPHAMHE@?$DO?$DOTest?5Break?$CB?$CB?$AA@|
  002e8		 |$LN54@KeypadFunc@2|
  002e8	00000000	 DCD         |??_C@_0BI@IDCCLFOC@?$FLESC?$FN?$CL?$FLBS?$FN?5are?5cancel?$DO?$DO?$AA@|
  002ec		 |$LN55@KeypadFunc@2|
  002ec	00000000	 DCD         |??_C@_0BN@BPHDJHHI@You?5can?5press?5any?5key?5start?0?$AA@|
  002f0		 |$LN56@KeypadFunc@2|
  002f0	00000000	 DCD         |__security_cookie|
  002f4		 |$M49133|

			 ENDP  ; |KeypadFunc_Z2170P|

	EXPORT	|__$ArrayPad$| [ DATA ]
	EXPORT	|??_C@_1DI@MMJKGDGA@?$AA?$AN?$AA?6?$AAT?$AAe?$AAs?$AAt?$AA?5?$AAp?$AAa?$AAt?$AAt?$AAe?$AAr?$AAn?$AA?3?$AA0?$AAx?$AA5?$AA5?$AA?5?$AAo?$AAk?$AA?$CB?$AA?$CB?$AA?5?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DI@PKDCLLEE@?$AA?$AN?$AA?6?$AAT?$AAe?$AAs?$AAt?$AA?5?$AAp?$AAa?$AAt?$AAt?$AAe?$AAr?$AAn?$AA?3?$AA0?$AAx?$AAA?$AAA?$AA?5?$AAo?$AAk?$AA?$CB?$AA?$CB?$AA?5?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_13JOFGPIOO@?$AA?4?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_0BH@HGINKCEF@Test?5pattern?30xAA?5ok?$CB?$CB?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_0BH@EGLAMJBH@Test?5pattern?30x55?5ok?$CB?$CB?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DC@EIEFAGNL@?$AA?$AN?$AA?6?$AA?5?$AAS?$AAt?$AAa?$AAr?$AAt?$AA?5?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?3?$AA?5?$AA0?$AAX?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DC@KDLDOOAO@?$AA?$AN?$AA?6?$AA?5?$AAE?$AAn?$AAd?$AA?5?$AA?5?$AA?5?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?3?$AA?5?$AA0?$AAX?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CM@LADFLEDP@?$AA?$AN?$AA?6?$AA?5?$AAs?$AAc?$AAa?$AAn?$AA?5?$AA1?$AA0?$AA0?$AAk?$AAB?$AA?5?$AAt?$AAi?$AAp?$AA?5?$AA?$CC?$AA?4?$AA?$CC?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FO@CNDEOBON@?$AA?$AN?$AA?6?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T49202| DCD	|$LN34@RAMAccessT|
	DCD	0xc000aa02

  00000			 AREA	 |.xdata|, DATA
|$T49198| DCD	0xffffffd8

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DI@MMJKGDGA@?$AA?$AN?$AA?6?$AAT?$AAe?$AAs?$AAt?$AA?5?$AAp?$AAa?$AAt?$AAt?$AAe?$AAr?$AAn?$AA?3?$AA0?$AAx?$AA5?$AA5?$AA?5?$AAo?$AAk?$AA?$CB?$AA?$CB?$AA?5?$AA?$AN?$AA?6?$AA?$AA@| DCB 0xd
	DCB	0x0, 0xa, 0x0, "T", 0x0, "e", 0x0, "s", 0x0, "t", 0x0, " "
	DCB	0x0, "p", 0x0, "a", 0x0, "t", 0x0, "t", 0x0, "e", 0x0, "r"
	DCB	0x0, "n", 0x0, ":", 0x0, "0", 0x0, "x", 0x0, "5", 0x0, "5"
	DCB	0x0, " ", 0x0, "o", 0x0, "k", 0x0, "!", 0x0, "!", 0x0, " "
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DI@PKDCLLEE@?$AA?$AN?$AA?6?$AAT?$AAe?$AAs?$AAt?$AA?5?$AAp?$AAa?$AAt?$AAt?$AAe?$AAr?$AAn?$AA?3?$AA0?$AAx?$AAA?$AAA?$AA?5?$AAo?$AAk?$AA?$CB?$AA?$CB?$AA?5?$AA?$AN?$AA?6?$AA?$AA@| DCB 0xd
	DCB	0x0, 0xa, 0x0, "T", 0x0, "e", 0x0, "s", 0x0, "t", 0x0, " "
	DCB	0x0, "p", 0x0, "a", 0x0, "t", 0x0, "t", 0x0, "e", 0x0, "r"
	DCB	0x0, "n", 0x0, ":", 0x0, "0", 0x0, "x", 0x0, "A", 0x0, "A"
	DCB	0x0, " ", 0x0, "o", 0x0, "k", 0x0, "!", 0x0, "!", 0x0, " "
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_13JOFGPIOO@?$AA?4?$AA?$AA@| DCB ".", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0BH@HGINKCEF@Test?5pattern?30xAA?5ok?$CB?$CB?$AA@| DCB "Test patte"
	DCB	"rn:0xAA ok!!", 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0BH@EGLAMJBH@Test?5pattern?30x55?5ok?$CB?$CB?$AA@| DCB "Test patte"
	DCB	"rn:0x55 ok!!", 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DC@EIEFAGNL@?$AA?$AN?$AA?6?$AA?5?$AAS?$AAt?$AAa?$AAr?$AAt?$AA?5?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?3?$AA?5?$AA0?$AAX?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AA@| DCB 0xd
	DCB	0x0, 0xa, 0x0, " ", 0x0, "S", 0x0, "t", 0x0, "a", 0x0, "r"
	DCB	0x0, "t", 0x0, " ", 0x0, "A", 0x0, "d", 0x0, "d", 0x0, "r"
	DCB	0x0, "e", 0x0, "s", 0x0, "s", 0x0, ":", 0x0, " ", 0x0, "0"
	DCB	0x0, "X", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "X", 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DC@KDLDOOAO@?$AA?$AN?$AA?6?$AA?5?$AAE?$AAn?$AAd?$AA?5?$AA?5?$AA?5?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?3?$AA?5?$AA0?$AAX?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AA@| DCB 0xd
	DCB	0x0, 0xa, 0x0, " ", 0x0, "E", 0x0, "n", 0x0, "d", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, "A", 0x0, "d", 0x0, "d", 0x0, "r"
	DCB	0x0, "e", 0x0, "s", 0x0, "s", 0x0, ":", 0x0, " ", 0x0, "0"
	DCB	0x0, "X", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "X", 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CM@LADFLEDP@?$AA?$AN?$AA?6?$AA?5?$AAs?$AAc?$AAa?$AAn?$AA?5?$AA1?$AA0?$AA0?$AAk?$AAB?$AA?5?$AAt?$AAi?$AAp?$AA?5?$AA?$CC?$AA?4?$AA?$CC?$AA?$AA@| DCB 0xd
	DCB	0x0, 0xa, 0x0, " ", 0x0, "s", 0x0, "c", 0x0, "a", 0x0, "n"
	DCB	0x0, " ", 0x0, "1", 0x0, "0", 0x0, "0", 0x0, "k", 0x0, "B"
	DCB	0x0, " ", 0x0, "t", 0x0, "i", 0x0, "p", 0x0, " ", 0x0, """"
	DCB	0x0, ".", 0x0, """", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FO@CNDEOBON@?$AA?$AN?$AA?6?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9@| DCB 0xd
	DCB	0x0, 0xa, 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-"
	DCB	0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-"
	DCB	0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-"
	DCB	0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-"
	DCB	0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-"
	DCB	0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-"
	DCB	0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-"
	DCB	0x0, "-", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000	00000000	 DCD         |__GSHandlerCheck|
  00004	00000000	 DCD         |$T49198|

  00008		 |RAMAccessTest| PROC

; 1436 : {

  00008		 |$LN34@RAMAccessT|
  00008	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  0000c	e24ddf4e	 sub         sp, sp, #0x4E, 30
  00010		 |$M49199|
  00010	e59f3294	 ldr         r3, [pc, #0x294]
  00014	e5933000	 ldr         r3, [r3]
  00018	e58d3134	 str         r3, [sp, #0x134]

; 1437 :     ULONG  startAddress = IMAGE_SHARE_ARGS_CA;
; 1438 :     ULONG  endAddress = startAddress|(256 *1024 *1024-1); //endAddress = startAddress + size(256MB) 
; 1439 :     ULONG  i, checkAddress =  0xFFFFFFFF;
; 1440 :     BYTE   value, temp, pattern = 0xAA, pattern2 = 0x55;
; 1441 :     //BOOL   DOING = TRUE;
; 1442 :     ULONG  percent;
; 1443 :     int    row=0, col = 1;
; 1444 :     char   scan[10][30] = { "Test pattern:0xAA ok!!",

  0001c	e59f1284	 ldr         r1, [pc, #0x284]
  00020	e28d0008	 add         r0, sp, #8
  00024	e3a02017	 mov         r2, #0x17
  00028	e3a05000	 mov         r5, #0
  0002c	eb000000	 bl          memcpy
  00030	e3a02007	 mov         r2, #7
  00034	e3a01000	 mov         r1, #0
  00038	e28d001f	 add         r0, sp, #0x1F
  0003c	eb000000	 bl          memset

; 1445 :                             "Test pattern:0x55 ok!!" 
; 1446 :                             };

  00040	e59f125c	 ldr         r1, [pc, #0x25C]
  00044	e28d0026	 add         r0, sp, #0x26
  00048	e3a02017	 mov         r2, #0x17
  0004c	eb000000	 bl          memcpy
  00050	e3a02007	 mov         r2, #7
  00054	e3a01000	 mov         r1, #0
  00058	e28d003d	 add         r0, sp, #0x3D
  0005c	eb000000	 bl          memset
  00060	e3a020f0	 mov         r2, #0xF0
  00064	e3a01000	 mov         r1, #0
  00068	e28d0044	 add         r0, sp, #0x44
  0006c	eb000000	 bl          memset

; 1447 :      
; 1448 : 	UNREFERENCED_PARAMETER(pMenu);
; 1449 : 	OALBLMenuHeader(L"RAM Access Test(Completely)");

  00070	e59f0228	 ldr         r0, [pc, #0x228]
  00074	eb000000	 bl          OALBLMenuHeader

; 1450 : 
; 1451 :     OALLog(L"\r\n Start Address: 0X%08X", startAddress&checkAddress );

  00078	e59f021c	 ldr         r0, [pc, #0x21C]
  0007c	e3a01102	 mov         r1, #2, 2
  00080	eb000000	 bl          NKDbgPrintfW

; 1452 :     OALLog(L"\r\n End   Address: 0X%08X", endAddress&checkAddress );

  00084	e59f020c	 ldr         r0, [pc, #0x20C]
  00088	e3e01207	 mvn         r1, #7, 4
  0008c	eb000000	 bl          NKDbgPrintfW

; 1453 :     OALLog(L"\r\n scan 100kB tip \".\""); 

  00090	e59f01fc	 ldr         r0, [pc, #0x1FC]
  00094	eb000000	 bl          NKDbgPrintfW

; 1454 :     OALLog(L"\r\n------------------------------------------\r\n");

  00098	e59f01f0	 ldr         r0, [pc, #0x1F0]
  0009c	eb000000	 bl          NKDbgPrintfW
  000a0	e59fb1e4	 ldr         r11, [pc, #0x1E4]
  000a4	e59f81dc	 ldr         r8, [pc, #0x1DC]
  000a8	e59f71d4	 ldr         r7, [pc, #0x1D4]
  000ac	e59f41bc	 ldr         r4, [pc, #0x1BC]
  000b0	e3a010db	 mov         r1, #0xDB
  000b4	e28d9008	 add         r9, sp, #8
  000b8	e28da008	 add         r10, sp, #8
  000bc		 |$LL14@RAMAccessT|

; 1455 :     
; 1456 :     //while(DOING){
; 1457 :     do{
; 1458 :         TWLReadRegs(ghTwl, TWL_LOGADDR_FULL_CODE_7_0, gKeypadMatrix, sizeof(gKeypadMatrix));    //cancel

  000bc	e59b0000	 ldr         r0, [r11]
  000c0	e3a03008	 mov         r3, #8
  000c4	e1a02008	 mov         r2, r8
  000c8	e24118fe	 sub         r1, r1, #0xFE, 16
  000cc	eb000000	 bl          TWLReadRegs

; 1459 :         if((row%20)==0)                 //Ray   140305

  000d0	e0c32495	 smull       r2, r3, r5, r4
  000d4	e1a031c3	 mov         r3, r3, asr #3
  000d8	e0833fa3	 add         r3, r3, r3, lsr #31
  000dc	e0833103	 add         r3, r3, r3, lsl #2
  000e0	e0553103	 subs        r3, r5, r3, lsl #2
  000e4	1a000002	 bne         |$LN11@RAMAccessT|

; 1460 :         {
; 1461 :             DisplayShowBackground(0xFF);    

  000e8	e3a000ff	 mov         r0, #0xFF
  000ec	eb000000	 bl          DisplayShowBackground

; 1462 :             row=0;

  000f0	e3a05000	 mov         r5, #0
  000f4		 |$LN11@RAMAccessT|

; 1463 : 		}
; 1464 : 		
; 1465 :         for(i=0, percent=1; i<(endAddress - startAddress); i++, percent++)

  000f4	e3a06000	 mov         r6, #0
  000f8	e3a04102	 mov         r4, #2, 2
  000fc		 |$LL10@RAMAccessT|

; 1466 : 	    {
; 1467 :             temp = *(volatile BYTE *)(startAddress + i);        //read data     ;temp(0x8000_0000) to get a address 

  000fc	e5d42000	 ldrb        r2, [r4]

; 1468 :             *(volatile BYTE *)(startAddress + i) = pattern;     //write pattern ;pattern write into address(if is AA) 

  00100	e3a030aa	 mov         r3, #0xAA
  00104	e5c43000	 strb        r3, [r4]

; 1469 :             value = *(volatile BYTE *)(startAddress + i);       //read pattern  ;value == AA, setup value

  00108	e5d43000	 ldrb        r3, [r4]

; 1470 :             *(volatile BYTE *)(startAddress + i) = temp;        //store data

  0010c	e5c42000	 strb        r2, [r4]

; 1471 :         
; 1472 :             if(value != pattern)                                //check value(in address value) equal pattern

  00110	e35300aa	 cmp         r3, #0xAA
  00114	1a00000c	 bne         |$LN28@RAMAccessT|
  00118	e2840106	 add         r0, r4, #6, 2

; 1475 :                 break;
; 1476 :             }
; 1477 : 
; 1478 :             if( (percent%(1024*100)) == 0){   //scan 100kB show tip 

  0011c	e0831790	 umull       r1, r3, r0, r7
  00120	e3a02a19	 mov         r2, #0x19, 20
  00124	e1a037a3	 mov         r3, r3, lsr #15
  00128	e0020293	 mul         r2, r3, r2
  0012c	e0503002	 subs        r3, r0, r2

; 1479 :                 //OALLog(L"\rScanned size: %dk\r\n", percent/1024); 
; 1480 :                 OALLog(L"."); 

  00130	059f0144	 ldreq       r0, [pc, #0x144]
  00134	0b000000	 bleq        NKDbgPrintfW
  00138	e2844001	 add         r4, r4, #1
  0013c	e3740217	 cmn         r4, #0x17, 4
  00140	e2866001	 add         r6, r6, #1
  00144	3affffec	 bcc         |$LL10@RAMAccessT|

; 1494 :         
; 1495 :             if(value != pattern2)                                //check value(in address value) equal pattern

  00148	ea000002	 b           |$LN8@RAMAccessT|
  0014c		 |$LN28@RAMAccessT|

; 1473 :             {
; 1474 :                 OALLog(L"\r\n Error Address: 0X%X", startAddress+i);

  0014c	e59f0124	 ldr         r0, [pc, #0x124]
  00150	e2861102	 add         r1, r6, #2, 2
  00154	eb000000	 bl          NKDbgPrintfW
  00158		 |$LN8@RAMAccessT|

; 1481 :             }
; 1482 :         }
; 1483 :         OALLog(L"\r\nTest pattern:0xAA ok!! \r\n");

  00158	e59f0120	 ldr         r0, [pc, #0x120]
  0015c	eb000000	 bl          NKDbgPrintfW

; 1484 :         printStringMode(row++, col, BLUE_COLOR, TRANSPARENT_COLOR, scan, 0);

  00160	e3a0e000	 mov         lr, #0
  00164	e3a03009	 mov         r3, #9
  00168	e3a02002	 mov         r2, #2
  0016c	e3a01001	 mov         r1, #1
  00170	e1a00005	 mov         r0, r5
  00174	e58de004	 str         lr, [sp, #4]
  00178	e58d9000	 str         r9, [sp]
  0017c	eb000000	 bl          printStringMode

; 1485 :         //OALLog(L"--------------------------------------------------\r\n");
; 1486 :         LcdStall(1);

  00180	e3a00001	 mov         r0, #1
  00184	e2856001	 add         r6, r5, #1
  00188	eb000000	 bl          LcdStall

; 1487 :         
; 1488 :         for(i=0, percent=1; i<(endAddress - startAddress); i++, percent++)

  0018c	e3a05000	 mov         r5, #0
  00190	e3a04102	 mov         r4, #2, 2
  00194		 |$LL5@RAMAccessT|

; 1489 : 	    {
; 1490 :             temp = *(volatile BYTE *)(startAddress + i);        //read data     ;temp(0x8000_0000) to get a address 

  00194	e5d42000	 ldrb        r2, [r4]

; 1491 :             *(volatile BYTE *)(startAddress + i) = pattern2;     //write pattern ;pattern write into address(if is AA) 

  00198	e3a03055	 mov         r3, #0x55
  0019c	e5c43000	 strb        r3, [r4]

; 1492 :             value = *(volatile BYTE *)(startAddress + i);       //read pattern  ;value == 1A, setup value

  001a0	e5d43000	 ldrb        r3, [r4]

; 1493 :             *(volatile BYTE *)(startAddress + i) = temp;        //store data

  001a4	e5c42000	 strb        r2, [r4]

; 1494 :         
; 1495 :             if(value != pattern2)                                //check value(in address value) equal pattern

  001a8	e3530055	 cmp         r3, #0x55
  001ac	1a00000c	 bne         |$LN29@RAMAccessT|
  001b0	e2840106	 add         r0, r4, #6, 2

; 1498 :                 break;
; 1499 :             }
; 1500 : 
; 1501 :             if( (percent%(1024*100)) == 0){   //scan 100kB show tip 

  001b4	e0831790	 umull       r1, r3, r0, r7
  001b8	e3a02a19	 mov         r2, #0x19, 20
  001bc	e1a037a3	 mov         r3, r3, lsr #15
  001c0	e0020293	 mul         r2, r3, r2
  001c4	e0503002	 subs        r3, r0, r2

; 1502 :                 //OALLog(L"\rScanned size: %dk\r\n", percent/1024);
; 1503 :                 OALLog(L"."); 

  001c8	059f00ac	 ldreq       r0, [pc, #0xAC]
  001cc	0b000000	 bleq        NKDbgPrintfW
  001d0	e2844001	 add         r4, r4, #1
  001d4	e3740217	 cmn         r4, #0x17, 4
  001d8	e2855001	 add         r5, r5, #1
  001dc	3affffec	 bcc         |$LL5@RAMAccessT|

; 1494 :         
; 1495 :             if(value != pattern2)                                //check value(in address value) equal pattern

  001e0	ea000002	 b           |$LN3@RAMAccessT|
  001e4		 |$LN29@RAMAccessT|

; 1496 :             {
; 1497 :                 OALLog(L"\r\n Error Address: 0X%X", startAddress+i);

  001e4	e59f008c	 ldr         r0, [pc, #0x8C]
  001e8	e2851102	 add         r1, r5, #2, 2
  001ec	eb000000	 bl          NKDbgPrintfW
  001f0		 |$LN3@RAMAccessT|

; 1504 :             }         
; 1505 :         }
; 1506 :         OALLog(L"\r\nTest pattern:0x55 ok!! \r\n");

  001f0	e59f007c	 ldr         r0, [pc, #0x7C]
  001f4	eb000000	 bl          NKDbgPrintfW

; 1507 :         printStringMode(row++, col, BLUE_COLOR, TRANSPARENT_COLOR, scan, 1);

  001f8	e3a0e001	 mov         lr, #1
  001fc	e3a03009	 mov         r3, #9
  00200	e3a02002	 mov         r2, #2
  00204	e3a01001	 mov         r1, #1
  00208	e1a00006	 mov         r0, r6
  0020c	e58de004	 str         lr, [sp, #4]
  00210	e58da000	 str         r10, [sp]
  00214	eb000000	 bl          printStringMode

; 1508 :         //OALLog(L"--------------------------------------------------\r\n");
; 1509 :         LcdStall(1);

  00218	e3a00001	 mov         r0, #1
  0021c	e2865001	 add         r5, r6, #1
  00220	eb000000	 bl          LcdStall
  00224	e5d83000	 ldrb        r3, [r8]

; 1510 :     }while((KeypadMatrixStatus(0, 1) & KeypadMatrixStatus(0, 3)) != TRUE);  

  00228	e59f4040	 ldr         r4, [pc, #0x40]
  0022c	e3a010db	 mov         r1, #0xDB
  00230	e3130002	 tst         r3, #2
  00234	13a02001	 movne       r2, #1
  00238	03a02000	 moveq       r2, #0
  0023c	e3130008	 tst         r3, #8
  00240	13a03001	 movne       r3, #1
  00244	03a03000	 moveq       r3, #0
  00248	e0033002	 and         r3, r3, r2
  0024c	e3530001	 cmp         r3, #1
  00250	1affff99	 bne         |$LL14@RAMAccessT|

; 1511 :     DisplayShowBackground(0xFF);    

  00254	e3a000ff	 mov         r0, #0xFF
  00258	eb000000	 bl          DisplayShowBackground
  0025c	e59d0134	 ldr         r0, [sp, #0x134]
  00260	eb000000	 bl          __security_check_cookie

; 1512 : }

  00264	e28ddf4e	 add         sp, sp, #0x4E, 30
  00268	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  0026c	e12fff1e	 bx          lr
  00270		 |$LN35@RAMAccessT|
  00270		 |$LN36@RAMAccessT|
  00270	66666667	 DCD         0x66666667
  00274		 |$LN37@RAMAccessT|
  00274	00000000	 DCD         |??_C@_1DI@MMJKGDGA@?$AA?$AN?$AA?6?$AAT?$AAe?$AAs?$AAt?$AA?5?$AAp?$AAa?$AAt?$AAt?$AAe?$AAr?$AAn?$AA?3?$AA0?$AAx?$AA5?$AA5?$AA?5?$AAo?$AAk?$AA?$CB?$AA?$CB?$AA?5?$AA?$AN?$AA?6?$AA?$AA@|
  00278		 |$LN38@RAMAccessT|
  00278	00000000	 DCD         |??_C@_1CO@GBEKHDOH@?$AA?$AN?$AA?6?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?3?$AA?5?$AA0?$AAX?$AA?$CF?$AAX?$AA?$AA@|
  0027c		 |$LN39@RAMAccessT|
  0027c	00000000	 DCD         |??_C@_13JOFGPIOO@?$AA?4?$AA?$AA@|
  00280		 |$LN40@RAMAccessT|
  00280	00000000	 DCD         |??_C@_1DI@PKDCLLEE@?$AA?$AN?$AA?6?$AAT?$AAe?$AAs?$AAt?$AA?5?$AAp?$AAa?$AAt?$AAt?$AAe?$AAr?$AAn?$AA?3?$AA0?$AAx?$AAA?$AAA?$AA?5?$AAo?$AAk?$AA?$CB?$AA?$CB?$AA?5?$AA?$AN?$AA?6?$AA?$AA@|
  00284		 |$LN41@RAMAccessT|
  00284	51eb851f	 DCD         0x51eb851f
  00288		 |$LN42@RAMAccessT|
  00288	00000000	 DCD         |gKeypadMatrix|
  0028c		 |$LN43@RAMAccessT|
  0028c	00000000	 DCD         |ghTwl|
  00290		 |$LN44@RAMAccessT|
  00290	00000000	 DCD         |??_C@_1FO@CNDEOBON@?$AA?$AN?$AA?6?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9@|
  00294		 |$LN45@RAMAccessT|
  00294	00000000	 DCD         |??_C@_1CM@LADFLEDP@?$AA?$AN?$AA?6?$AA?5?$AAs?$AAc?$AAa?$AAn?$AA?5?$AA1?$AA0?$AA0?$AAk?$AAB?$AA?5?$AAt?$AAi?$AAp?$AA?5?$AA?$CC?$AA?4?$AA?$CC?$AA?$AA@|
  00298		 |$LN46@RAMAccessT|
  00298	00000000	 DCD         |??_C@_1DC@KDLDOOAO@?$AA?$AN?$AA?6?$AA?5?$AAE?$AAn?$AAd?$AA?5?$AA?5?$AA?5?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?3?$AA?5?$AA0?$AAX?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AA@|
  0029c		 |$LN47@RAMAccessT|
  0029c	00000000	 DCD         |??_C@_1DC@EIEFAGNL@?$AA?$AN?$AA?6?$AA?5?$AAS?$AAt?$AAa?$AAr?$AAt?$AA?5?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?3?$AA?5?$AA0?$AAX?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AA@|
  002a0		 |$LN48@RAMAccessT|
  002a0	00000000	 DCD         |??_C@_1DI@GCPLOKAO@?$AAR?$AAA?$AAM?$AA?5?$AAA?$AAc?$AAc?$AAe?$AAs?$AAs?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?$CI?$AAC?$AAo?$AAm?$AAp?$AAl?$AAe?$AAt?$AAe?$AAl?$AAy?$AA?$CJ?$AA?$AA@|
  002a4		 |$LN49@RAMAccessT|
  002a4	00000000	 DCD         |??_C@_0BH@EGLAMJBH@Test?5pattern?30x55?5ok?$CB?$CB?$AA@|
  002a8		 |$LN50@RAMAccessT|
  002a8	00000000	 DCD         |??_C@_0BH@HGINKCEF@Test?5pattern?30xAA?5ok?$CB?$CB?$AA@|
  002ac		 |$LN51@RAMAccessT|
  002ac	00000000	 DCD         |__security_cookie|
  002b0		 |$M49200|

			 ENDP  ; |RAMAccessTest|

	EXPORT	|__$ArrayPad$| [ DATA ]
	EXPORT	|??_C@_1CI@EDLOHMLH@?$AA?$AN?$AAS?$AAc?$AAa?$AAn?$AA?5?$AA?$CF?$AAd?$AA?5?$AAt?$AAi?$AAm?$AAe?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T49275| DCD	|$LN40@AutoScanFu|
	DCD	0xc000de02

  00000			 AREA	 |.xdata|, DATA
|$T49271| DCD	0xffffffd8

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@EDLOHMLH@?$AA?$AN?$AAS?$AAc?$AAa?$AAn?$AA?5?$AA?$CF?$AAd?$AA?5?$AAt?$AAi?$AAm?$AAe?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?$AN?$AA?6?$AA?$AA@| DCB 0xd
	DCB	0x0, "S", 0x0, "c", 0x0, "a", 0x0, "n", 0x0, " ", 0x0, "%"
	DCB	0x0, "d", 0x0, " ", 0x0, "t", 0x0, "i", 0x0, "m", 0x0, "e"
	DCB	0x0, ":", 0x0, " ", 0x0, "%", 0x0, "s", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000	00000000	 DCD         |__GSHandlerCheck|
  00004	00000000	 DCD         |$T49271|

  00008		 |AutoScanFunc| PROC

; 1519 : {

  00008		 |$LN40@AutoScanFu|
  00008	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  0000c	e24ddf4e	 sub         sp, sp, #0x4E, 30
  00010		 |$M49272|
  00010	e59f3364	 ldr         r3, [pc, #0x364]
  00014	e5933000	 ldr         r3, [r3]
  00018	e58d3134	 str         r3, [sp, #0x134]

; 1520 : 	HANDLE  hGPIO;
; 1521 :     UINT8   status, ch;
; 1522 :     //UINT8   DOING = 1;
; 1523 :     int     count, inNum, value = 1,
; 1524 :             row = 0, col = 3;
; 1525 :     //int     i = 0;
; 1526 :     //WCHAR   key;
; 1527 :     //WCHAR   scan[50];
; 1528 :     char      scan[10][30] = {"Did not any scan !",

  0001c	e59f1354	 ldr         r1, [pc, #0x354]
  00020	e28d0008	 add         r0, sp, #8
  00024	e3a02013	 mov         r2, #0x13
  00028	e3a07001	 mov         r7, #1
  0002c	e3a04000	 mov         r4, #0
  00030	e3a0a003	 mov         r10, #3
  00034	eb000000	 bl          memcpy
  00038	e3a0200b	 mov         r2, #0xB
  0003c	e3a01000	 mov         r1, #0
  00040	e28d001b	 add         r0, sp, #0x1B
  00044	eb000000	 bl          memset

; 1529 :                               "\0" };

  00048	e3a03000	 mov         r3, #0
  0004c	e3a0201c	 mov         r2, #0x1C
  00050	e3a01000	 mov         r1, #0
  00054	e28d0028	 add         r0, sp, #0x28
  00058	e1cd32b6	 strh        r3, [sp, #0x26]
  0005c	eb000000	 bl          memset
  00060	e3a020f0	 mov         r2, #0xF0
  00064	e3a01000	 mov         r1, #0
  00068	e28d0044	 add         r0, sp, #0x44
  0006c	eb000000	 bl          memset

; 1530 :        	
; 1531 : 	OALBLMenuHeader(L"Auto Scan");

  00070	e59f02fc	 ldr         r0, [pc, #0x2FC]
  00074	eb000000	 bl          OALBLMenuHeader

; 1532 : 	UNREFERENCED_PARAMETER(pMenu);	
; 1533 : 	
; 1534 :     hGPIO = GPIOOpen();

  00078	eb000000	 bl          GPIOOpen

; 1535 :     GPIOSetMode(hGPIO, BCR_ENG_PWEN, GPIO_DIR_OUTPUT);   

  0007c	e3a02000	 mov         r2, #0
  00080	e3a01026	 mov         r1, #0x26
  00084	e1a06000	 mov         r6, r0
  00088	eb000000	 bl          GPIOSetMode

; 1536 :     GPIOSetMode(hGPIO, BCR_ENG_TRIG, GPIO_DIR_OUTPUT);

  0008c	e3a02000	 mov         r2, #0
  00090	e3a01024	 mov         r1, #0x24
  00094	e1a00006	 mov         r0, r6
  00098	eb000000	 bl          GPIOSetMode

; 1537 :     
; 1538 :     GPIOSetBit(hGPIO, BCR_ENG_PWEN);                    //Power ON

  0009c	e3a01026	 mov         r1, #0x26
  000a0	e1a00006	 mov         r0, r6
  000a4	eb000000	 bl          GPIOSetBit

; 1539 :     EnableDeviceClocks(OMAP_DEVICE_UART1, TRUE); 

  000a8	e3a01001	 mov         r1, #1
  000ac	e3a0000a	 mov         r0, #0xA
  000b0	eb000000	 bl          EnableDeviceClocks

; 1540 :     pUartRegs = OALPAtoUA(GetAddressByDevice(OMAP_DEVICE_UART1));

  000b4	e3a0000a	 mov         r0, #0xA
  000b8	eb000000	 bl          GetAddressByDevice
  000bc	e3a01000	 mov         r1, #0
  000c0	eb000000	 bl          OALPAtoVA
  000c4	e59f92a4	 ldr         r9, [pc, #0x2A4]

; 1541 :         
; 1542 :     // reset uart
; 1543 : 	OUTREG8(&pUartRegs->SYSC, UART_SYSC_RST);

  000c8	e3a03002	 mov         r3, #2
  000cc	e5890000	 str         r0, [r9]
  000d0	e5c03054	 strb        r3, [r0, #0x54]
  000d4	e5992000	 ldr         r2, [r9]
  000d8		 |$LL13@AutoScanFu|

; 1544 :     while ((INREG8(&pUartRegs->SYSS) & UART_SYSS_RST_DONE) == 0)

  000d8	e5d23058	 ldrb        r3, [r2, #0x58]
  000dc	e3130001	 tst         r3, #1
  000e0	0afffffc	 beq         |$LL13@AutoScanFu|

; 1545 :         ;
; 1546 : 
; 1547 :     // Set baud rate
; 1548 :     OUTREG8(&pUartRegs->LCR, UART_LCR_DLAB);    //Line control register, DIV_EN

  000e4	e3a03080	 mov         r3, #0x80
  000e8	e5c2300c	 strb        r3, [r2, #0xC]

; 1549 :     OUTREG8(&pUartRegs->DLL, 0x38);             //9.6kbps

  000ec	e5993000	 ldr         r3, [r9]
  000f0	e3a02038	 mov         r2, #0x38

; 1550 :     OUTREG8(&pUartRegs->DLH, 0x01);

  000f4	e3a05001	 mov         r5, #1
  000f8	e5c32000	 strb        r2, [r3]
  000fc	e5993000	 ldr         r3, [r9]

; 1551 :     OUTREG8(&pUartRegs->LCR, 0x00);

  00100	e3a0e000	 mov         lr, #0

; 1552 : 
; 1553 :     // 8 bit, 1 stop bit, no parity
; 1554 :     OUTREG8(&pUartRegs->LCR, 0x03);             

  00104	e3a02003	 mov         r2, #3
  00108	e5c35004	 strb        r5, [r3, #4]
  0010c	e5993000	 ldr         r3, [r9]

; 1555 :     // Enable FIFO
; 1556 :     OUTREG8(&pUartRegs->FCR, UART_FCR_FIFO_EN);
; 1557 :     OUTREG8(&pUartRegs->FCR, UART_FCR_FIFO_EN|UART_FCR_RX_FIFO_CLEAR|UART_FCR_TX_FIFO_CLEAR);

  00110	e3a00007	 mov         r0, #7

; 1558 :     // Pool
; 1559 :     OUTREG8(&pUartRegs->IER, 0);
; 1560 :     // Set DTR/RTS signals
; 1561 :     OUTREG8(&pUartRegs->MCR, 0); //UART_MCR_DTR|UART_MCR_RTS);
; 1562 :     // Configuration complete so select UART 16x mode
; 1563 : 	OUTREG8(&pUartRegs->MDR1, UART_MDR1_UART16);
; 1564 :     BCRSetRTS(TRUE);

  00114	e59f1240	 ldr         r1, [pc, #0x240]
  00118	e5c3e00c	 strb        lr, [r3, #0xC]
  0011c	e5993000	 ldr         r3, [r9]
  00120	e59fb240	 ldr         r11, [pc, #0x240]
  00124	e5c3200c	 strb        r2, [r3, #0xC]
  00128	e5993000	 ldr         r3, [r9]
  0012c	e5c35008	 strb        r5, [r3, #8]
  00130	e5993000	 ldr         r3, [r9]
  00134	e5c30008	 strb        r0, [r3, #8]
  00138	e5993000	 ldr         r3, [r9]
  0013c	e5c3e004	 strb        lr, [r3, #4]
  00140	e5993000	 ldr         r3, [r9]
  00144	e5c3e010	 strb        lr, [r3, #0x10]
  00148	e5993000	 ldr         r3, [r9]
  0014c	e5c3e020	 strb        lr, [r3, #0x20]
  00150	e5992000	 ldr         r2, [r9]
  00154	e3a0e0db	 mov         lr, #0xDB
  00158	e5d23010	 ldrb        r3, [r2, #0x10]
  0015c	e3833002	 orr         r3, r3, #2
  00160	e5c23010	 strb        r3, [r2, #0x10]
  00164		 |$LL11@AutoScanFu|

; 1565 :     
; 1566 :     //while(DOING)
; 1567 :     do{
; 1568 :         TWLReadRegs(ghTwl, TWL_LOGADDR_FULL_CODE_7_0, gKeypadMatrix, sizeof(gKeypadMatrix));    //cancel

  00164	e5910000	 ldr         r0, [r1]
  00168	e3a03008	 mov         r3, #8
  0016c	e1a0200b	 mov         r2, r11
  00170	e24e18fe	 sub         r1, lr, #0xFE, 16
  00174	eb000000	 bl          TWLReadRegs

; 1569 :         inNum = 0;
; 1570 :         count = 30;
; 1571 :         LcdSleep(500);

  00178	e3a00f7d	 mov         r0, #0x7D, 30
  0017c	e3a05000	 mov         r5, #0
  00180	e3a0801e	 mov         r8, #0x1E
  00184	eb000000	 bl          LcdSleep

; 1572 : 		GPIOClrBit(hGPIO, BCR_ENG_TRIG);

  00188	e3a01024	 mov         r1, #0x24
  0018c	e1a00006	 mov         r0, r6
  00190	eb000000	 bl          GPIOClrBit

; 1573 : 		BCRSetRTS(FALSE);

  00194	e5992000	 ldr         r2, [r9]

; 1574 : 		LcdSleep(500);

  00198	e3a00f7d	 mov         r0, #0x7D, 30
  0019c	e5d23010	 ldrb        r3, [r2, #0x10]
  001a0	e20330fd	 and         r3, r3, #0xFD
  001a4	e5c23010	 strb        r3, [r2, #0x10]
  001a8	eb000000	 bl          LcdSleep
  001ac	e28db008	 add         r11, sp, #8
  001b0		 |$LL8@AutoScanFu|

; 1575 : 		
; 1576 : 		//OALLog(L"count %d\r\n",count);	
; 1577 : 		while( count-- )
; 1578 : 		{
; 1579 : 		    status = INREG8(&pUartRegs->LSR);

  001b0	e5992000	 ldr         r2, [r9]

; 1580 : 		    if ((status & UART_LSR_RX_FIFO_E) != 0)
; 1581 : 			{
; 1582 : 			    ch = INREG8(&pUartRegs->RHR);
; 1583 : 			    scan[1][inNum++] = ch;
; 1584 : 				//OALLog(L" %c\r\n",ch);
; 1585 : 			}
; 1586 : 			LcdSleep(100);

  001b4	e3a00064	 mov         r0, #0x64
  001b8	e2488001	 sub         r8, r8, #1
  001bc	e5d23014	 ldrb        r3, [r2, #0x14]
  001c0	e3130001	 tst         r3, #1
  001c4	15d22000	 ldrneb      r2, [r2]
  001c8	1085300b	 addne       r3, r5, r11
  001cc	12855001	 addne       r5, r5, #1
  001d0	15c3201e	 strneb      r2, [r3, #0x1E]
  001d4	eb000000	 bl          LcdSleep
  001d8	e3580000	 cmp         r8, #0
  001dc	1afffff3	 bne         |$LL8@AutoScanFu|

; 1587 : 			//OALLog(L"count %d\r\n",count);	
; 1588 : 	    }
; 1589 :         //
; 1590 :         if((row%20)==0)                 //Ray   140305

  001e0	e59f3184	 ldr         r3, [pc, #0x184]
  001e4	e59fb17c	 ldr         r11, [pc, #0x17C]
  001e8	e0c32394	 smull       r2, r3, r4, r3
  001ec	e1a031c3	 mov         r3, r3, asr #3
  001f0	e0833fa3	 add         r3, r3, r3, lsr #31
  001f4	e0833103	 add         r3, r3, r3, lsl #2
  001f8	e0543103	 subs        r3, r4, r3, lsl #2
  001fc	1a000002	 bne         |$LN5@AutoScanFu|

; 1591 :         {
; 1592 :             DisplayShowBackground(0xFF);    

  00200	e3a000ff	 mov         r0, #0xFF
  00204	eb000000	 bl          DisplayShowBackground

; 1593 :             row=0;

  00208	e3a04000	 mov         r4, #0
  0020c		 |$LN5@AutoScanFu|

; 1594 : 		}   
; 1595 : 		GPIOSetBit(hGPIO, BCR_ENG_TRIG);

  0020c	e3a01024	 mov         r1, #0x24
  00210	e1a00006	 mov         r0, r6
  00214	eb000000	 bl          GPIOSetBit

; 1596 : 		
; 1597 : 		if( inNum > 0 )

  00218	e3550000	 cmp         r5, #0
  0021c	da00001b	 ble         |$LN37@AutoScanFu|

; 1598 : 		{
; 1599 : 		    scan[1][inNum] = '\0';

  00220	e28d3008	 add         r3, sp, #8
  00224	e0853003	 add         r3, r5, r3
  00228	e3a02000	 mov         r2, #0
  0022c	e5c3201e	 strb        r2, [r3, #0x1E]

; 1600 : 		    printInt(row, 1, RED_COLOR, TRANSPARENT_COLOR, value); 

  00230	e3a03009	 mov         r3, #9
  00234	e3a02000	 mov         r2, #0
  00238	e3a01001	 mov         r1, #1
  0023c	e1a00004	 mov         r0, r4
  00240	e58d7000	 str         r7, [sp]
  00244	eb000000	 bl          printInt

; 1601 : 		    printStringMode(row++, col, BLUE_COLOR, TRANSPARENT_COLOR, scan, 1);

  00248	e3a0e001	 mov         lr, #1
  0024c	e58de004	 str         lr, [sp, #4]
  00250	e28de008	 add         lr, sp, #8
  00254	e3a03009	 mov         r3, #9
  00258	e3a02002	 mov         r2, #2
  0025c	e1a0100a	 mov         r1, r10
  00260	e1a00004	 mov         r0, r4
  00264	e58de000	 str         lr, [sp]
  00268	eb000000	 bl          printStringMode

; 1602 : 			LcdStall(250000);

  0026c	e3a03a3d	 mov         r3, #0x3D, 20
  00270	e3830090	 orr         r0, r3, #0x90
  00274	e2844001	 add         r4, r4, #1
  00278	eb000000	 bl          LcdStall

; 1603 : 			OALLog(L"\rScan %d time: %s\r\n", value, scan[1]);

  0027c	e59f00e0	 ldr         r0, [pc, #0xE0]
  00280	e28d2026	 add         r2, sp, #0x26
  00284	e1a01007	 mov         r1, r7
  00288	eb000000	 bl          NKDbgPrintfW
  0028c	ea000015	 b           |$LN2@AutoScanFu|
  00290		 |$LN37@AutoScanFu|

; 1604 : 			//break;
; 1605 : 		}else if(inNum == 0){

  00290	1a000014	 bne         |$LN2@AutoScanFu|

; 1606 : 		    printInt(row, 1, RED_COLOR, TRANSPARENT_COLOR, value);

  00294	e3a03009	 mov         r3, #9
  00298	e3a02000	 mov         r2, #0
  0029c	e3a01001	 mov         r1, #1
  002a0	e1a00004	 mov         r0, r4
  002a4	e58d7000	 str         r7, [sp]
  002a8	eb000000	 bl          printInt

; 1607 : 		    printStringMode(row++, col, BLUE_COLOR, TRANSPARENT_COLOR, scan, 0);

  002ac	e3a0e000	 mov         lr, #0
  002b0	e58de004	 str         lr, [sp, #4]
  002b4	e28de008	 add         lr, sp, #8
  002b8	e3a03009	 mov         r3, #9
  002bc	e3a02002	 mov         r2, #2
  002c0	e1a0100a	 mov         r1, r10
  002c4	e1a00004	 mov         r0, r4
  002c8	e58de000	 str         lr, [sp]
  002cc	eb000000	 bl          printStringMode

; 1608 : 			LcdStall(250000);

  002d0	e3a03a3d	 mov         r3, #0x3D, 20
  002d4	e3830090	 orr         r0, r3, #0x90
  002d8	e2844001	 add         r4, r4, #1
  002dc	eb000000	 bl          LcdStall

; 1609 :             OALLog(L"\rDid not any scan !\r\n");

  002e0	e59f0078	 ldr         r0, [pc, #0x78]
  002e4	eb000000	 bl          NKDbgPrintfW
  002e8		 |$LN2@AutoScanFu|

; 1610 : 		}
; 1611 : 	    value+=1;

  002e8	e2877001	 add         r7, r7, #1

; 1612 : 	    if(value == 10) col=4;

  002ec	e357000a	 cmp         r7, #0xA

; 1613 : 	        
; 1614 : 		LcdSleep(300);

  002f0	e3a00f4b	 mov         r0, #0x4B, 30
  002f4	03a0a004	 moveq       r10, #4
  002f8	eb000000	 bl          LcdSleep
  002fc	e5db3000	 ldrb        r3, [r11]

; 1615 : 	}while((KeypadMatrixStatus(0, 1) & KeypadMatrixStatus(0, 3)) != TRUE);

  00300	e59f1054	 ldr         r1, [pc, #0x54]
  00304	e3a0e0db	 mov         lr, #0xDB
  00308	e3130002	 tst         r3, #2
  0030c	13a02001	 movne       r2, #1
  00310	03a02000	 moveq       r2, #0
  00314	e3130008	 tst         r3, #8
  00318	13a03001	 movne       r3, #1
  0031c	03a03000	 moveq       r3, #0
  00320	e0033002	 and         r3, r3, r2
  00324	e3530001	 cmp         r3, #1
  00328	1affff8d	 bne         |$LL11@AutoScanFu|

; 1616 : 	GPIOClrBit(hGPIO, BCR_ENG_PWEN);

  0032c	e3a01026	 mov         r1, #0x26
  00330	e1a00006	 mov         r0, r6
  00334	eb000000	 bl          GPIOClrBit

; 1617 : 	DisplayShowBackground(0xFF);

  00338	e3a000ff	 mov         r0, #0xFF
  0033c	eb000000	 bl          DisplayShowBackground

; 1618 : 	GPIOClose(hGPIO);

  00340	e1a00006	 mov         r0, r6
  00344	eb000000	 bl          GPIOClose
  00348	e59d0134	 ldr         r0, [sp, #0x134]
  0034c	eb000000	 bl          __security_check_cookie

; 1619 : }

  00350	e28ddf4e	 add         sp, sp, #0x4E, 30
  00354	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  00358	e12fff1e	 bx          lr
  0035c		 |$LN41@AutoScanFu|
  0035c		 |$LN42@AutoScanFu|
  0035c	00000000	 DCD         |ghTwl|
  00360		 |$LN43@AutoScanFu|
  00360	00000000	 DCD         |??_C@_1CM@LKJOBAFD@?$AA?$AN?$AAD?$AAi?$AAd?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAa?$AAn?$AAy?$AA?5?$AAs?$AAc?$AAa?$AAn?$AA?5?$AA?$CB?$AA?$AN?$AA?6?$AA?$AA@|
  00364		 |$LN44@AutoScanFu|
  00364	00000000	 DCD         |??_C@_1CI@EDLOHMLH@?$AA?$AN?$AAS?$AAc?$AAa?$AAn?$AA?5?$AA?$CF?$AAd?$AA?5?$AAt?$AAi?$AAm?$AAe?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?$AN?$AA?6?$AA?$AA@|
  00368		 |$LN45@AutoScanFu|
  00368	00000000	 DCD         |gKeypadMatrix|
  0036c		 |$LN46@AutoScanFu|
  0036c	66666667	 DCD         0x66666667
  00370		 |$LN47@AutoScanFu|
  00370	00000000	 DCD         |pUartRegs|
  00374		 |$LN48@AutoScanFu|
  00374	00000000	 DCD         |??_C@_1BE@FABONDOI@?$AAA?$AAu?$AAt?$AAo?$AA?5?$AAS?$AAc?$AAa?$AAn?$AA?$AA@|
  00378		 |$LN49@AutoScanFu|
  00378	00000000	 DCD         |??_C@_0BD@PNGOPHJH@Did?5not?5any?5scan?5?$CB?$AA@|
  0037c		 |$LN50@AutoScanFu|
  0037c	00000000	 DCD         |__security_cookie|
  00380		 |$M49273|

			 ENDP  ; |AutoScanFunc|

	EXPORT	|SecondaryBATFunc|
	IMPORT	|ReadBBATVoltage|

  00000			 AREA	 |.pdata|, PDATA
|$T49293| DCD	|$LN5@SecondaryB|
	DCD	0x40000401
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |SecondaryBATFunc| PROC

; 1626 : {

  00000		 |$LN5@SecondaryB|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M49290|

; 1627 :     UNREFERENCED_PARAMETER(pMenu);
; 1628 :     ReadBBATVoltage();                //Backup battery

  00004	eb000000	 bl          ReadBBATVoltage

; 1629 : 
; 1630 :     //Check value 
; 1631 : }

  00008	e49de004	 ldr         lr, [sp], #4
  0000c	e12fff1e	 bx          lr
  00010		 |$M49291|

			 ENDP  ; |SecondaryBATFunc|

	EXPORT	|RTCFunc|
	IMPORT	|ReadRTC|

  00000			 AREA	 |.pdata|, PDATA
|$T49300| DCD	|$LN5@RTCFunc|
	DCD	0x40001001
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |RTCFunc| PROC

; 1638 : {

  00000		 |$LN5@RTCFunc|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M49297|

; 1639 :     
; 1640 :     OALLog(L"\r\n Running...\r\n"); 

  00004	e59f0030	 ldr         r0, [pc, #0x30]
  00008	eb000000	 bl          NKDbgPrintfW

; 1641 :     UNREFERENCED_PARAMETER(pMenu);  
; 1642 : 
; 1643 :     DisplayShowBackground(0xFF); 

  0000c	e3a000ff	 mov         r0, #0xFF
  00010	eb000000	 bl          DisplayShowBackground

; 1644 :     ReadRTC();

  00014	eb000000	 bl          ReadRTC

; 1645 :     LcdStall(gd1Sec*3);

  00018	e59f3018	 ldr         r3, [pc, #0x18]
  0001c	e5933000	 ldr         r3, [r3]
  00020	e0830083	 add         r0, r3, r3, lsl #1
  00024	eb000000	 bl          LcdStall

; 1646 :     DisplayShowBackground(0x00);

  00028	e3a00000	 mov         r0, #0
  0002c	eb000000	 bl          DisplayShowBackground

; 1647 :      
; 1648 : }

  00030	e49de004	 ldr         lr, [sp], #4
  00034	e12fff1e	 bx          lr
  00038		 |$LN6@RTCFunc|
  00038		 |$LN7@RTCFunc|
  00038	00000000	 DCD         |gd1Sec|
  0003c		 |$LN8@RTCFunc|
  0003c	00000000	 DCD         |??_C@_1CA@IPGENFE@?$AA?$AN?$AA?6?$AA?5?$AAR?$AAu?$AAn?$AAn?$AAi?$AAn?$AAg?$AA?4?$AA?4?$AA?4?$AA?$AN?$AA?6?$AA?$AA@|
  00040		 |$M49298|

			 ENDP  ; |RTCFunc|

	EXPORT	|??_C@_1EA@NHFEEJFC@?$AA?$AN?$AA?6?$AA?5?$AA?$DO?$AA?$DO?$AA?$DO?$AAA?$AAl?$AAl?$AA?5?$AAf?$AAu?$AAn?$AAc?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAt?$AAe?$AAs?$AAt?$AAi?$AAn?$AAg?$AA?4?$AA?4?$AA?4?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DO@BGFONFOF@?$AA?$AN?$AA?6?$AA?5?$AA?$DO?$AA?$DO?$AA?$DO?$AAA?$AAl?$AAl?$AA?5?$AAf?$AAu?$AAn?$AAc?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAt?$AAe?$AAs?$AAt?$AAe?$AAd?$AA?4?$AA?4?$AA?4?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T49310| DCD	|$LN5@AllFunctio|
	DCD	0x40000c01

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EA@NHFEEJFC@?$AA?$AN?$AA?6?$AA?5?$AA?$DO?$AA?$DO?$AA?$DO?$AAA?$AAl?$AAl?$AA?5?$AAf?$AAu?$AAn?$AAc?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAt?$AAe?$AAs?$AAt?$AAi?$AAn?$AAg?$AA?4?$AA?4?$AA?4?$AA?$AN?$AA?6?$AA?$AA@| DCB 0xd
	DCB	0x0, 0xa, 0x0, " ", 0x0, ">", 0x0, ">", 0x0, ">", 0x0, "A"
	DCB	0x0, "l", 0x0, "l", 0x0, " ", 0x0, "f", 0x0, "u", 0x0, "n"
	DCB	0x0, "c", 0x0, "t", 0x0, "i", 0x0, "o", 0x0, "n", 0x0, " "
	DCB	0x0, "t", 0x0, "e", 0x0, "s", 0x0, "t", 0x0, "i", 0x0, "n"
	DCB	0x0, "g", 0x0, ".", 0x0, ".", 0x0, ".", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DO@BGFONFOF@?$AA?$AN?$AA?6?$AA?5?$AA?$DO?$AA?$DO?$AA?$DO?$AAA?$AAl?$AAl?$AA?5?$AAf?$AAu?$AAn?$AAc?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAt?$AAe?$AAs?$AAt?$AAe?$AAd?$AA?4?$AA?4?$AA?4?$AA?$AN?$AA?6?$AA?$AA@| DCB 0xd
	DCB	0x0, 0xa, 0x0, " ", 0x0, ">", 0x0, ">", 0x0, ">", 0x0, "A"
	DCB	0x0, "l", 0x0, "l", 0x0, " ", 0x0, "f", 0x0, "u", 0x0, "n"
	DCB	0x0, "c", 0x0, "t", 0x0, "i", 0x0, "o", 0x0, "n", 0x0, " "
	DCB	0x0, "t", 0x0, "e", 0x0, "s", 0x0, "t", 0x0, "e", 0x0, "d"
	DCB	0x0, ".", 0x0, ".", 0x0, ".", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |AllFunctionTest_Z2000| PROC

; 1654 : {

  00000		 |$LN5@AllFunctio|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M49307|

; 1655 :     //OAL_BLMENU_ITEM *ptr = NULL;
; 1656 : 	//ALL Test
; 1657 : 	UNREFERENCED_PARAMETER(pMenu);
; 1658 : 	OALBLMenuHeader(L"All Function Test");

  00004	e59f0020	 ldr         r0, [pc, #0x20]
  00008	eb000000	 bl          OALBLMenuHeader

; 1659 :     
; 1660 :     OALLog(L"\r\n >>>All function testing...\r\n");    

  0000c	e59f0014	 ldr         r0, [pc, #0x14]
  00010	eb000000	 bl          NKDbgPrintfW

; 1661 : 
; 1662 : 	/*DisplayTest_Z2170P(ptr);
; 1663 : 	LcdStall(gd1Sec*3);                         //2
; 1664 :   
; 1665 : 	BkTest_Z2170P(ptr);
; 1666 : 	LcdStall(gd1Sec*3);                         //3
; 1667 :          
; 1668 : 	DRAMTest_Z2170P(ptr);                                  
; 1669 : 	LcdStall(gd1Sec*3);                         //4 
; 1670 : 	   
; 1671 : 	KeypadBkTest_Z2170P(ptr);                              
; 1672 : 	LcdStall(gd1Sec*3);                         //5 */
; 1673 : 	OALLog(L"\r\n >>>All function tested...\r\n");

  00014	e59f0008	 ldr         r0, [pc, #8]
  00018	eb000000	 bl          NKDbgPrintfW

; 1674 : }

  0001c	e49de004	 ldr         lr, [sp], #4
  00020	e12fff1e	 bx          lr
  00024		 |$LN6@AllFunctio|
  00024		 |$LN7@AllFunctio|
  00024	00000000	 DCD         |??_C@_1DO@BGFONFOF@?$AA?$AN?$AA?6?$AA?5?$AA?$DO?$AA?$DO?$AA?$DO?$AAA?$AAl?$AAl?$AA?5?$AAf?$AAu?$AAn?$AAc?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAt?$AAe?$AAs?$AAt?$AAe?$AAd?$AA?4?$AA?4?$AA?4?$AA?$AN?$AA?6?$AA?$AA@|
  00028		 |$LN8@AllFunctio|
  00028	00000000	 DCD         |??_C@_1EA@NHFEEJFC@?$AA?$AN?$AA?6?$AA?5?$AA?$DO?$AA?$DO?$AA?$DO?$AAA?$AAl?$AAl?$AA?5?$AAf?$AAu?$AAn?$AAc?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAt?$AAe?$AAs?$AAt?$AAi?$AAn?$AAg?$AA?4?$AA?4?$AA?4?$AA?$AN?$AA?6?$AA?$AA@|
  0002c		 |$LN9@AllFunctio|
  0002c	00000000	 DCD         |??_C@_1CE@NDBHKBD@?$AAA?$AAl?$AAl?$AA?5?$AAF?$AAu?$AAn?$AAc?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?$AA@|
  00030		 |$M49308|

			 ENDP  ; |AllFunctionTest_Z2000|

	IMPORT	|BLShowLogo|

  00000			 AREA	 |.pdata|, PDATA
|$T49321| DCD	|$LN5@DisplayTes@2|
	DCD	0x40000b01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DisplayTest_Z2000| PROC

; 1680 : {

  00000		 |$LN5@DisplayTes@2|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M49318|

; 1681 :     BLShowLogo();

  00004	eb000000	 bl          BLShowLogo

; 1682 :     OALBLMenuHeader(L"Display Test");

  00008	e59f0018	 ldr         r0, [pc, #0x18]
  0000c	eb000000	 bl          OALBLMenuHeader

; 1683 : 	UNREFERENCED_PARAMETER(pMenu);
; 1684 :     OALLog(L"\r\n Running...\r\n");

  00010	e59f000c	 ldr         r0, [pc, #0xC]
  00014	eb000000	 bl          NKDbgPrintfW

; 1685 : 	//DisplayShow(BSP_Z2000);
; 1686 : 	DisplayShow();

  00018	eb000000	 bl          DisplayShow

; 1687 : }

  0001c	e49de004	 ldr         lr, [sp], #4
  00020	e12fff1e	 bx          lr
  00024		 |$LN6@DisplayTes@2|
  00024		 |$LN7@DisplayTes@2|
  00024	00000000	 DCD         |??_C@_1CA@IPGENFE@?$AA?$AN?$AA?6?$AA?5?$AAR?$AAu?$AAn?$AAn?$AAi?$AAn?$AAg?$AA?4?$AA?4?$AA?4?$AA?$AN?$AA?6?$AA?$AA@|
  00028		 |$LN8@DisplayTes@2|
  00028	00000000	 DCD         |??_C@_1BK@FJOPBKKD@?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?$AA@|
  0002c		 |$M49319|

			 ENDP  ; |DisplayTest_Z2000|


  00000			 AREA	 |.pdata|, PDATA
|$T49331| DCD	|$LN5@BkTest_Z21|
	DCD	0x40002102
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |BkTest_Z2170P| PROC

; 237  : {

  00000		 |$LN5@BkTest_Z21|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004	e24dd008	 sub         sp, sp, #8
  00008		 |$M49328|

; 238  :     OALBLMenuHeader(L"LCM Backlight Test");

  00008	e59f0070	 ldr         r0, [pc, #0x70]
  0000c	eb000000	 bl          OALBLMenuHeader

; 239  : 	UNREFERENCED_PARAMETER(pMenu);
; 240  : 	
; 241  : 	DisplayShowBackground(0xFF);

  00010	e3a000ff	 mov         r0, #0xFF
  00014	eb000000	 bl          DisplayShowBackground

; 242  :     SetBacklight();

  00018	eb000000	 bl          SetBacklight

; 243  :     //BLShowLogo();
; 244  :     //
; 245  :     DisplayShowBackground(0xFF);

  0001c	e3a000ff	 mov         r0, #0xFF
  00020	eb000000	 bl          DisplayShowBackground

; 246  :     printStringMode(9, 9, RED_COLOR, GREEN_COLOR, gTestPass, 0);

  00024	e59f2050	 ldr         r2, [pc, #0x50]
  00028	e3a0e000	 mov         lr, #0
  0002c	e3a03001	 mov         r3, #1
  00030	e58d2000	 str         r2, [sp]
  00034	e3a02000	 mov         r2, #0
  00038	e3a01009	 mov         r1, #9
  0003c	e3a00009	 mov         r0, #9
  00040	e58de004	 str         lr, [sp, #4]
  00044	eb000000	 bl          printStringMode

; 247  : 	LcdStall(gd1Sec*2);

  00048	e59f3028	 ldr         r3, [pc, #0x28]
  0004c	e5933000	 ldr         r3, [r3]
  00050	e1a00083	 mov         r0, r3, lsl #1
  00054	eb000000	 bl          LcdStall

; 248  :     OALLog(L"\rTested ok!! \r\n");

  00058	e59f0014	 ldr         r0, [pc, #0x14]
  0005c	eb000000	 bl          NKDbgPrintfW

; 249  :     DisplayShowBackground(0xFF);

  00060	e3a000ff	 mov         r0, #0xFF
  00064	eb000000	 bl          DisplayShowBackground

; 250  : }

  00068	e28dd008	 add         sp, sp, #8
  0006c	e49de004	 ldr         lr, [sp], #4
  00070	e12fff1e	 bx          lr
  00074		 |$LN6@BkTest_Z21|
  00074		 |$LN7@BkTest_Z21|
  00074	00000000	 DCD         |??_C@_1CA@NFDHHLIH@?$AA?$AN?$AAT?$AAe?$AAs?$AAt?$AAe?$AAd?$AA?5?$AAo?$AAk?$AA?$CB?$AA?$CB?$AA?5?$AA?$AN?$AA?6?$AA?$AA@|
  00078		 |$LN8@BkTest_Z21|
  00078	00000000	 DCD         |gd1Sec|
  0007c		 |$LN9@BkTest_Z21|
  0007c	00000000	 DCD         |gTestPass|
  00080		 |$LN10@BkTest_Z21|
  00080	00000000	 DCD         |??_C@_1CG@MFOPBHMC@?$AAL?$AAC?$AAM?$AA?5?$AAB?$AAa?$AAc?$AAk?$AAl?$AAi?$AAg?$AAh?$AAt?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?$AA@|
  00084		 |$M49329|

			 ENDP  ; |BkTest_Z2170P|

	EXPORT	|??_C@_1BK@HOMLCKFD@?$AAB?$AAu?$AAr?$AAn?$AA?9?$AAI?$AAn?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?$AA@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T49365| DCD	|$LN19@BurnIn_Z21|
	DCD	0x40003701

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BK@HOMLCKFD@?$AAB?$AAu?$AAr?$AAn?$AA?9?$AAI?$AAn?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?$AA@| DCB "B"
	DCB	0x0, "u", 0x0, "r", 0x0, "n", 0x0, "-", 0x0, "I", 0x0, "n"
	DCB	0x0, " ", 0x0, "T", 0x0, "e", 0x0, "s", 0x0, "t", 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |BurnIn_Z2170P| PROC

; 1383 : {

  00000		 |$LN19@BurnIn_Z21|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M49362|

; 1384 :     OAL_BLMENU_ITEM *ptr = NULL;
; 1385 :     
; 1386 :     UNREFERENCED_PARAMETER(pMenu);
; 1387 : 	OALBLMenuHeader(L"Burn-In Test");

  00004	e59f00cc	 ldr         r0, [pc, #0xCC]
  00008	eb000000	 bl          OALBLMenuHeader
  0000c	e59f50c0	 ldr         r5, [pc, #0xC0]
  00010	e59f40b8	 ldr         r4, [pc, #0xB8]
  00014		 |$LL3@BurnIn_Z21|

; 1388 : 	
; 1389 : 	do{
; 1390 : 	    //OALLog(L"\r\n >>>Display Testing...\r\n");
; 1391 : 	    DisplayTest_Z2170P(ptr);                    //2

  00014	e3a00000	 mov         r0, #0
  00018	eb000000	 bl          DisplayTest_Z2170P

; 1392 :         LcdStall(gd1Sec*1); 

  0001c	e5940000	 ldr         r0, [r4]
  00020	eb000000	 bl          LcdStall

; 1393 : 
; 1394 :         //OALLog(L"\r\n >>>LCM Backlight Testing...\r\n");
; 1395 : 	    BkTest_Z2170P(ptr);                         //3

  00024	e3a00000	 mov         r0, #0
  00028	eb000000	 bl          BkTest_Z2170P

; 1396 :         LcdStall(gd1Sec*1); 

  0002c	e5940000	 ldr         r0, [r4]
  00030	eb000000	 bl          LcdStall

; 1397 : 
; 1398 :         //OALLog(L"\r\n >>>DRAM Testing...\r\n");
; 1399 :         DRAMTest_Z2170P(ptr);                       //4

  00034	e3a00000	 mov         r0, #0
  00038	eb000000	 bl          DRAMTest_Z2170P

; 1400 :         LcdStall(gd1Sec*1); 

  0003c	e5940000	 ldr         r0, [r4]
  00040	eb000000	 bl          LcdStall

; 1401 : 
; 1402 :         //OALLog(L"\r\n >>>Keypad Backlight Testing...\r\n");
; 1403 :         KeypadBkTest_Z2170P(ptr);                   //5

  00044	e3a00000	 mov         r0, #0
  00048	eb000000	 bl          KeypadBkTest_Z2170P

; 1404 :         LcdStall(gd1Sec*1); 

  0004c	e5940000	 ldr         r0, [r4]
  00050	eb000000	 bl          LcdStall

; 1405 : 
; 1406 :         BatteryTest_Z2170P(ptr);                    //7 

  00054	e3a00000	 mov         r0, #0
  00058	eb000000	 bl          BatteryTest_Z2170P

; 1407 :         LcdStall(gd1Sec*1);

  0005c	e5940000	 ldr         r0, [r4]
  00060	eb000000	 bl          LcdStall

; 1408 :         
; 1409 :         LEDTest_Z2170P(ptr);                        //8

  00064	e3a00000	 mov         r0, #0
  00068	eb000000	 bl          LEDTest_Z2170P

; 1410 :         LcdStall(gd1Sec*1);

  0006c	e5940000	 ldr         r0, [r4]
  00070	eb000000	 bl          LcdStall

; 1411 : 
; 1412 :         BarcodeTest_Z2170P(ptr);                    //9 

  00074	e3a00000	 mov         r0, #0
  00078	eb000000	 bl          BarcodeTest_Z2170P

; 1413 :         LcdStall(gd1Sec*1);

  0007c	e5940000	 ldr         r0, [r4]
  00080	eb000000	 bl          LcdStall

; 1414 : 
; 1415 :         SecondaryBATFunc(ptr);                      //SP

  00084	eb000000	 bl          ReadBBATVoltage

; 1416 :         LcdStall(gd1Sec*1);

  00088	e5940000	 ldr         r0, [r4]
  0008c	eb000000	 bl          LcdStall

; 1417 :     
; 1418 :         RTCFunc(ptr);                               //SF

  00090	e3a00000	 mov         r0, #0
  00094	eb000000	 bl          RTCFunc

; 1419 :         LcdStall(gd1Sec*1);

  00098	e5940000	 ldr         r0, [r4]
  0009c	eb000000	 bl          LcdStall
  000a0	e5d53000	 ldrb        r3, [r5]

; 1420 : 	}while((KeypadMatrixStatus(0, 1) & KeypadMatrixStatus(0, 3)) != TRUE);

  000a4	e3130002	 tst         r3, #2
  000a8	13a02001	 movne       r2, #1
  000ac	03a02000	 moveq       r2, #0
  000b0	e3130008	 tst         r3, #8
  000b4	13a03001	 movne       r3, #1
  000b8	03a03000	 moveq       r3, #0
  000bc	e0033002	 and         r3, r3, r2
  000c0	e3530001	 cmp         r3, #1
  000c4	1affffd2	 bne         |$LL3@BurnIn_Z21|

; 1421 : }

  000c8	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  000cc	e12fff1e	 bx          lr
  000d0		 |$LN20@BurnIn_Z21|
  000d0		 |$LN21@BurnIn_Z21|
  000d0	00000000	 DCD         |gd1Sec|
  000d4		 |$LN22@BurnIn_Z21|
  000d4	00000000	 DCD         |gKeypadMatrix|
  000d8		 |$LN23@BurnIn_Z21|
  000d8	00000000	 DCD         |??_C@_1BK@HOMLCKFD@?$AAB?$AAu?$AAr?$AAn?$AA?9?$AAI?$AAn?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?$AA@|
  000dc		 |$M49363|

			 ENDP  ; |BurnIn_Z2170P|


  00000			 AREA	 |.pdata|, PDATA
|$T49379| DCD	|$LN7@AllFunctio@2|
	DCD	0x40004101
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |AllFunctionTest_Z2170P| PROC

; 171  : {

  00000		 |$LN7@AllFunctio@2|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M49376|

; 172  :     OAL_BLMENU_ITEM *ptr = NULL;
; 173  : 	//ALL Test
; 174  : 	UNREFERENCED_PARAMETER(pMenu);
; 175  : 	OALBLMenuHeader(L"All Function Test");

  00004	e59f00f4	 ldr         r0, [pc, #0xF4]
  00008	eb000000	 bl          OALBLMenuHeader

; 176  :     
; 177  :     OALLog(L"\r\n >>>All function testing...\r\n");    

  0000c	e59f00e8	 ldr         r0, [pc, #0xE8]
  00010	eb000000	 bl          NKDbgPrintfW

; 178  : 
; 179  : 	DisplayTest_Z2170P(ptr);

  00014	e3a00000	 mov         r0, #0
  00018	eb000000	 bl          DisplayTest_Z2170P

; 180  : 	LcdStall(gd1Sec*2);                         //2

  0001c	e59f40d4	 ldr         r4, [pc, #0xD4]
  00020	e5943000	 ldr         r3, [r4]
  00024	e1a00083	 mov         r0, r3, lsl #1
  00028	eb000000	 bl          LcdStall

; 181  :   
; 182  : 	BkTest_Z2170P(ptr);

  0002c	e3a00000	 mov         r0, #0
  00030	eb000000	 bl          BkTest_Z2170P

; 183  : 	LcdStall(gd1Sec*2);                         //3

  00034	e5943000	 ldr         r3, [r4]
  00038	e1a00083	 mov         r0, r3, lsl #1
  0003c	eb000000	 bl          LcdStall

; 184  :          
; 185  : 	DRAMTest_Z2170P(ptr);                                  

  00040	e3a00000	 mov         r0, #0
  00044	eb000000	 bl          DRAMTest_Z2170P

; 186  : 	LcdStall(gd1Sec*2);                         //4 

  00048	e5943000	 ldr         r3, [r4]
  0004c	e1a00083	 mov         r0, r3, lsl #1
  00050	eb000000	 bl          LcdStall

; 187  : 	   
; 188  : 	KeypadBkTest_Z2170P(ptr);                              

  00054	e3a00000	 mov         r0, #0
  00058	eb000000	 bl          KeypadBkTest_Z2170P

; 189  : 	LcdStall(gd1Sec*2);                         //5 

  0005c	e5943000	 ldr         r3, [r4]
  00060	e1a00083	 mov         r0, r3, lsl #1
  00064	eb000000	 bl          LcdStall

; 190  : 
; 191  : 	TouchPanelTest_Z2170P(ptr);                 //6 

  00068	e3a00000	 mov         r0, #0
  0006c	eb000000	 bl          TouchPanelTest_Z2170P

; 192  :     LcdStall(gd1Sec*2);

  00070	e5943000	 ldr         r3, [r4]
  00074	e1a00083	 mov         r0, r3, lsl #1
  00078	eb000000	 bl          LcdStall

; 193  :     
; 194  :     BatteryTest_Z2170P(ptr);                    //7 

  0007c	e3a00000	 mov         r0, #0
  00080	eb000000	 bl          BatteryTest_Z2170P

; 195  :     LcdStall(gd1Sec*2);

  00084	e5943000	 ldr         r3, [r4]
  00088	e1a00083	 mov         r0, r3, lsl #1
  0008c	eb000000	 bl          LcdStall

; 196  :     
; 197  :     LEDTest_Z2170P(ptr);                        //8

  00090	e3a00000	 mov         r0, #0
  00094	eb000000	 bl          LEDTest_Z2170P

; 198  :     LcdStall(gd1Sec*2);

  00098	e5943000	 ldr         r3, [r4]
  0009c	e1a00083	 mov         r0, r3, lsl #1
  000a0	eb000000	 bl          LcdStall

; 199  :     
; 200  :     BarcodeTest_Z2170P(ptr);                    //9 

  000a4	e3a00000	 mov         r0, #0
  000a8	eb000000	 bl          BarcodeTest_Z2170P

; 201  :     LcdStall(gd1Sec*2);

  000ac	e5943000	 ldr         r3, [r4]
  000b0	e1a00083	 mov         r0, r3, lsl #1
  000b4	eb000000	 bl          LcdStall

; 202  :     
; 203  :     /*AudioAndMIC_Z2170P(ptr);                  //
; 204  :     LcdStall(gd1Sec*2);*/
; 205  :     
; 206  :     KeypadFunc_Z2170P(ptr);                      //F1

  000b8	e3a00000	 mov         r0, #0
  000bc	eb000000	 bl          KeypadFunc_Z2170P

; 207  :     LcdStall(gd1Sec*2);

  000c0	e5943000	 ldr         r3, [r4]
  000c4	e1a00083	 mov         r0, r3, lsl #1
  000c8	eb000000	 bl          LcdStall

; 208  :     
; 209  :     /*BurnIn_Z2170P(ptr);                       //
; 210  :     LcdStall(gd1Sec*2);*/
; 211  : 
; 212  :     SecondaryBATFunc(ptr);                      //SP

  000cc	eb000000	 bl          ReadBBATVoltage

; 213  :     LcdStall(gd1Sec*2);

  000d0	e5943000	 ldr         r3, [r4]
  000d4	e1a00083	 mov         r0, r3, lsl #1
  000d8	eb000000	 bl          LcdStall

; 214  :     
; 215  :     RTCFunc(ptr);                               //SF

  000dc	e3a00000	 mov         r0, #0
  000e0	eb000000	 bl          RTCFunc

; 216  : 	LcdStall(gd1Sec*2);

  000e4	e5943000	 ldr         r3, [r4]
  000e8	e1a00083	 mov         r0, r3, lsl #1
  000ec	eb000000	 bl          LcdStall

; 217  : }

  000f0	e8bd4010	 ldmia       sp!, {r4, lr}
  000f4	e12fff1e	 bx          lr
  000f8		 |$LN8@AllFunctio@2|
  000f8		 |$LN9@AllFunctio@2|
  000f8	00000000	 DCD         |gd1Sec|
  000fc		 |$LN10@AllFunctio@2|
  000fc	00000000	 DCD         |??_C@_1EA@NHFEEJFC@?$AA?$AN?$AA?6?$AA?5?$AA?$DO?$AA?$DO?$AA?$DO?$AAA?$AAl?$AAl?$AA?5?$AAf?$AAu?$AAn?$AAc?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAt?$AAe?$AAs?$AAt?$AAi?$AAn?$AAg?$AA?4?$AA?4?$AA?4?$AA?$AN?$AA?6?$AA?$AA@|
  00100		 |$LN11@AllFunctio@2|
  00100	00000000	 DCD         |??_C@_1CE@NDBHKBD@?$AAA?$AAl?$AAl?$AA?5?$AAF?$AAu?$AAn?$AAc?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAT?$AAe?$AAs?$AAt?$AA?$AA@|
  00104		 |$M49377|

			 ENDP  ; |AllFunctionTest_Z2170P|

	END
