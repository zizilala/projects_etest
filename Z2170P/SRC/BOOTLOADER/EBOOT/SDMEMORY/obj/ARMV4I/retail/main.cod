; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\Z2170P\SRC\BOOTLOADER\EBOOT\main.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|??_C@_1BK@GNCICGCB@?$AAN?$AAK?$AA?5?$AAf?$AAr?$AAo?$AAm?$AA?5?$AAN?$AAA?$AAN?$AAD?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CK@GNCLKLEF@?$AAN?$AAK?$AA?5?$AAf?$AAr?$AAo?$AAm?$AA?5?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AA?5?$AAF?$AAI?$AAL?$AAE?$AA?5?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BK@NKDLNHPK@?$AAU?$AAS?$AAB?$AAF?$AAn?$AA?5?$AAR?$AAN?$AAD?$AAI?$AAS?$AA?5?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BI@OOCKPHGK@?$AAL?$AAA?$AAN?$AA9?$AA1?$AA1?$AA5?$AA?5?$AAM?$AAA?$AAC?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|g_kitlEthLan911x| [ DATA ]
	EXPORT	|g_kitlUsbRndis| [ DATA ]
	EXPORT	|g_kitlDevices| [ DATA ]
	EXPORT	|g_bootDevices| [ DATA ]
	EXPORT	|DefaultMacAddress| [ DATA ]
	EXPORT	|dwEbootECCtype| [ DATA ]
	EXPORT	|g_CPUFamily| [ DATA ]
	IMPORT	|RndisMulticastList|
	IMPORT	|RndisCurrentPacketFilter|
	IMPORT	|RndisDisableInts|
	IMPORT	|RndisEnableInts|
	IMPORT	|RndisEDbgGetFrame|
	IMPORT	|RndisEDbgSendFrame|
	IMPORT	|HostMiniInit|
	IMPORT	|LAN911XMulticastList|
	IMPORT	|LAN911XCurrentPacketFilter|
	IMPORT	|LAN911XDisableInts|
	IMPORT	|LAN911XEnableInts|
	IMPORT	|LAN911XGetFrame|
	IMPORT	|LAN911XSendFrame|
	IMPORT	|LAN911XInit|

  00000			 AREA	 |.data|, DATA
	 COMMON	|g_bootCfg|, 0x90

	 COMMON	|ghTwl|, 0x4

	 COMMON	|g_ecctype|, 0x1

	 COMMON	|g_eboot|, 0x148

	 COMMON	|gDevice_prefix|, 0x4


  00000			 AREA	 |.bss|, NOINIT
|g_CPUFamily| %	0x4

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BK@GNCICGCB@?$AAN?$AAK?$AA?5?$AAf?$AAr?$AAo?$AAm?$AA?5?$AAN?$AAA?$AAN?$AAD?$AA?$AA@| DCB "N"
	DCB	0x0, "K", 0x0, " ", 0x0, "f", 0x0, "r", 0x0, "o", 0x0, "m"
	DCB	0x0, " ", 0x0, "N", 0x0, "A", 0x0, "N", 0x0, "D", 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CK@GNCLKLEF@?$AAN?$AAK?$AA?5?$AAf?$AAr?$AAo?$AAm?$AA?5?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AA?5?$AAF?$AAI?$AAL?$AAE?$AA?5?$AA?$AA@| DCB "N"
	DCB	0x0, "K", 0x0, " ", 0x0, "f", 0x0, "r", 0x0, "o", 0x0, "m"
	DCB	0x0, " ", 0x0, "S", 0x0, "D", 0x0, "C", 0x0, "a", 0x0, "r"
	DCB	0x0, "d", 0x0, " ", 0x0, "F", 0x0, "I", 0x0, "L", 0x0, "E"
	DCB	0x0, " ", 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BK@NKDLNHPK@?$AAU?$AAS?$AAB?$AAF?$AAn?$AA?5?$AAR?$AAN?$AAD?$AAI?$AAS?$AA?5?$AA?$AA@| DCB "U"
	DCB	0x0, "S", 0x0, "B", 0x0, "F", 0x0, "n", 0x0, " ", 0x0, "R"
	DCB	0x0, "N", 0x0, "D", 0x0, "I", 0x0, "S", 0x0, " ", 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BI@OOCKPHGK@?$AAL?$AAA?$AAN?$AA9?$AA1?$AA1?$AA5?$AA?5?$AAM?$AAA?$AAC?$AA?$AA@| DCB "L"
	DCB	0x0, "A", 0x0, "N", 0x0, "9", 0x0, "1", 0x0, "1", 0x0, "5"
	DCB	0x0, " ", 0x0, "M", 0x0, "A", 0x0, "C", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.data|, DATA
|g_kitlEthLan911x| DCD |LAN911XInit|
	DCD	0x0
	DCD	0x0
	DCD	|LAN911XSendFrame|
	DCD	|LAN911XGetFrame|
	DCD	|LAN911XEnableInts|
	DCD	|LAN911XDisableInts|
	DCD	0x0
	DCD	0x0
	DCD	|LAN911XCurrentPacketFilter|
	DCD	|LAN911XMulticastList|
|g_kitlUsbRndis| DCD |HostMiniInit|
	DCD	0x0
	DCD	0x0
	DCD	|RndisEDbgSendFrame|
	DCD	|RndisEDbgGetFrame|
	DCD	|RndisEnableInts|
	DCD	|RndisDisableInts|
	DCD	0x0
	DCD	0x0
	DCD	|RndisCurrentPacketFilter|
	DCD	|RndisMulticastList|
|g_kitlDevices| DCD |??_C@_1BI@OOCKPHGK@?$AAL?$AAA?$AAN?$AA9?$AA1?$AA1?$AA5?$AA?5?$AAM?$AAA?$AAC?$AA?$AA@|
	DCD	0x0
	DCD	0x15000000
	DCD	0x0
	DCD	0x2
	DCD	|g_kitlEthLan911x|
	DCD	|??_C@_1BK@NKDLNHPK@?$AAU?$AAS?$AAB?$AAF?$AAn?$AA?5?$AAR?$AAN?$AAD?$AAI?$AAS?$AA?5?$AA?$AA@|
	DCD	0x0
	DCD	0x480ab000
	DCD	0x0
	DCD	0x2
	DCD	|g_kitlUsbRndis|
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
|g_bootDevices| DCD |??_C@_1CK@GNCLKLEF@?$AAN?$AAK?$AA?5?$AAf?$AAr?$AAo?$AAm?$AA?5?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AA?5?$AAF?$AAI?$AAL?$AAE?$AA?5?$AA?$AA@|
	DCD	0x0
	DCD	0x4809c000
	DCD	0x0
	DCD	0x4
	DCD	0x0
	DCD	|??_C@_1BK@GNCICGCB@?$AAN?$AAK?$AA?5?$AAf?$AAr?$AAo?$AAm?$AA?5?$AAN?$AAA?$AAN?$AAD?$AA?$AA@|
	DCD	0x0
	DCD	0x8000020
	DCD	0x0
	DCD	0x3
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
|DefaultMacAddress| DCW 0x2020
	DCW	0x3040
	DCW	0x5060

  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
|dwEbootECCtype| DCD 0xffffffff
	%	4
|?ebootPinMux_37XX@?1??OEMPlatformInit@@9@9| DCW 0x52	; `OEMPlatformInit'::`2'::ebootPinMux_37XX
	%	2
	DCD	0x0
	DCW	0x53
	%	2
	DCD	0x0
	DCW	0x54
	%	2
	DCD	0x0
	DCW	0x55
	%	2
	DCD	0x0
	DCW	0x5c
	%	2
	DCD	0x0
	DCW	0x5d
	%	2
	DCD	0x0
	DCW	0x5e
	%	2
	DCD	0x0
	DCW	0x5f
	%	2
	DCD	0x0
	DCW	0x60
	%	2
	DCD	0x0
	DCW	0x61
	%	2
	DCD	0x0
	DCW	0x62
	%	2
	DCD	0x0
	DCW	0x63
	%	2
	DCD	0x0
	DCW	0x64
	%	2
	DCD	0x0
	DCW	0x65
	%	2
	DCD	0x0
	DCW	0x66
	%	2
	DCD	0x0
	DCW	0x67
	%	2
	DCD	0x0
	DCW	0x68
	%	2
	DCD	0x18
	DCW	0x69
	%	2
	DCD	0x18
	DCW	0x6a
	%	2
	DCD	0x18
	DCW	0x6b
	%	2
	DCD	0x18
	DCW	0x6c
	%	2
	DCD	0x18
	DCW	0x6d
	%	2
	DCD	0x18
	DCW	0x51b
	%	2
	DCD	0x18
	DCW	0x51c
	%	2
	DCD	0x18
	DCW	0x51e
	%	2
	DCD	0x18
	DCW	0x51f
	%	2
	DCD	0x18
	DCW	0x520
	%	2
	DCD	0x18
	DCW	0x521
	%	2
	DCD	0x18
	DCW	0xd0
	%	2
	DCD	0x20
	DCW	0xac
	%	2
	DCD	0x20
	DCW	0xa5
	%	2
	DCD	0x20
	DCW	0x4c
	%	2
	DCD	0x20
	DCW	0x82
	%	2
	DCD	0x21
	DCW	0xad
	%	2
	DCD	0x20
	DCW	0xab
	%	2
	DCD	0x21
	DCW	0xaa
	%	2
	DCD	0x21
	DCW	0xa0
	%	2
	DCD	0x23
	DCW	0x9a
	%	2
	DCD	0x20
	DCW	0x2d8
	%	2
	DCD	0x20
	DCW	0x2d7
	%	2
	DCD	0x20
	DCW	0x25
	%	2
	DCD	0x20
	DCW	0x27
	%	2
	DCD	0x20
	DCW	0x28
	%	2
	DCD	0x20
	DCW	0x29
	%	2
	DCD	0x20
	DCW	0x2e
	%	2
	DCD	0x21
	DCW	0x9d
	%	2
	DCD	0x20
	DCW	0xba
	%	2
	DCD	0x7
	DCW	0xb9
	%	2
	DCD	0x1
	DCW	0xbb
	%	2
	DCD	0x1
	DCW	0xbc
	%	2
	DCD	0x1
	DCW	0xbd
	%	2
	DCD	0x1
	DCW	0xbe
	%	2
	DCD	0x1
	DCW	0xbf
	%	2
	DCD	0x1
	DCW	0xc0
	%	2
	DCD	0x1
	DCW	0xc1
	%	2
	DCD	0x1
	DCW	0xc2
	%	2
	DCD	0x1
	DCW	0xc3
	%	2
	DCD	0x1
	DCW	0xc4
	%	2
	DCD	0x1
	DCW	0xcf
	%	2
	DCD	0x20
	DCW	0xcd
	%	2
	DCD	0x20
	DCW	0xcc
	%	2
	DCD	0x20
	DCW	0xb3
	%	2
	DCD	0x20
	DCW	0xb1
	%	2
	DCD	0x21
	DCW	0xb0
	%	2
	DCD	0x20
	DCW	0xae
	%	2
	DCD	0x21
	DCW	0xaf
	%	2
	DCD	0x21
	DCW	0xc9
	%	2
	DCD	0x20
	DCW	0xca
	%	2
	DCD	0x21
	DCW	0xa6
	%	2
	DCD	0x0
	DCW	0xa9
	%	2
	DCD	0x7
	DCW	0xa7
	%	2
	DCD	0x0
	DCW	0xa8
	%	2
	DCD	0x7
	DCW	0xb2
	%	2
	DCD	0x20
	DCW	0x9e
	%	2
	DCD	0x20
	DCW	0x25
	%	2
	DCD	0x20
	DCW	0x9b
	%	2
	DCD	0x20
	DCW	0x2df
	%	2
	DCD	0x20
	DCW	0xffff
	%	2
	DCD	0x0
	IMPORT	|SOCSetPadConfig|
; File c:\wince600\platform\z2170p\src\inc\bsp_padcfg.h

  00000			 AREA	 |.pdata|, PDATA
|$T48217| DCD	|$LN9@ConfigureP|
	DCD	0x40001601
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |ConfigurePadArray| PROC

; 588  : {

  00000		 |$LN9@ConfigureP|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004		 |$M48214|
  00004	e1a04000	 mov         r4, r0

; 589  :     int i=0;
; 590  :     while (padArray[i].padID != (UINT16) -1)

  00008	e1d420b0	 ldrh        r2, [r4]
  0000c	e3a03cff	 mov         r3, #0xFF, 24
  00010	e38350ff	 orr         r5, r3, #0xFF
  00014	e1520005	 cmp         r2, r5
  00018	e3a06000	 mov         r6, #0
  0001c	0a00000b	 beq         |$LN1@ConfigureP|
  00020	e3a01c7f	 mov         r1, #0x7F, 24
  00024	e38170ff	 orr         r7, r1, #0xFF
  00028	e1a03004	 mov         r3, r4
  0002c		 |$LL2@ConfigureP|

; 591  :     {
; 592  :         SOCSetPadConfig(padArray[i].padID,(UINT16) padArray[i].Cfg);

  0002c	e5933004	 ldr         r3, [r3, #4]
  00030	e1a00002	 mov         r0, r2
  00034	e0031007	 and         r1, r3, r7
  00038	eb000000	 bl          SOCSetPadConfig

; 593  :         i++;

  0003c	e2866001	 add         r6, r6, #1
  00040	e0843186	 add         r3, r4, r6, lsl #3
  00044	e1d320b0	 ldrh        r2, [r3]
  00048	e1520005	 cmp         r2, r5
  0004c	1afffff6	 bne         |$LL2@ConfigureP|
  00050		 |$LN1@ConfigureP|

; 594  :     }
; 595  : }

  00050	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  00054	e12fff1e	 bx          lr
  00058		 |$M48215|

			 ENDP  ; |ConfigurePadArray|

	EXPORT	|BSPGpioInit|
	IMPORT	|BSPInsertGpioDevice|
	IMPORT	|Omap_Gpio|
	IMPORT	|Tps659xx_Gpio|
; File c:\wince600\platform\z2170p\src\bootloader\eboot\main.c

  00000			 AREA	 |.pdata|, PDATA
|$T48224| DCD	|$LN5@BSPGpioIni|
	DCD	0x40000d01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |BSPGpioInit| PROC

; 107  : {

  00000		 |$LN5@BSPGpioIni|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M48221|

; 108  :    BSPInsertGpioDevice(0,&Omap_Gpio,NULL);

  00004	e59f1024	 ldr         r1, [pc, #0x24]
  00008	e3a02000	 mov         r2, #0
  0000c	e3a00000	 mov         r0, #0
  00010	eb000000	 bl          BSPInsertGpioDevice

; 109  :    BSPInsertGpioDevice(TRITON_GPIO_PINID_START, &Tps659xx_Gpio, NULL);

  00014	e59f1010	 ldr         r1, [pc, #0x10]
  00018	e3a02000	 mov         r2, #0
  0001c	e3a00c01	 mov         r0, #1, 24
  00020	eb000000	 bl          BSPInsertGpioDevice

; 110  : }

  00024	e49de004	 ldr         lr, [sp], #4
  00028	e12fff1e	 bx          lr
  0002c		 |$LN6@BSPGpioIni|
  0002c		 |$LN7@BSPGpioIni|
  0002c	00000000	 DCD         |Tps659xx_Gpio|
  00030		 |$LN8@BSPGpioIni|
  00030	00000000	 DCD         |Omap_Gpio|
  00034		 |$M48222|

			 ENDP  ; |BSPGpioInit|

	EXPORT	|main|
	IMPORT	|BootloaderMain|
	IMPORT	|EnableDeviceClocks|
	IMPORT	|BSPGetDebugUARTConfig|

  00000			 AREA	 |.pdata|, PDATA
|$T48236| DCD	|$LN5@main|
	DCD	0x40000901
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |main|	 PROC

; 113  : {

  00000		 |$LN5@main|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M48233|

; 114  : 	//UINT32 CpuRevision;
; 115  : 	// Get CPU family
; 116  : 	//g_CPUFamily = CPU_FAMILY_OMAP35XX;
; 117  : 	//CpuRevision = Get_CPUVersion();
; 118  : 	//g_CPUFamily = CPU_FAMILY(CpuRevision);
; 119  :     EnableDeviceClocks(BSPGetDebugUARTConfig()->dev,TRUE);

  00004	eb000000	 bl          BSPGetDebugUARTConfig
  00008	e5900000	 ldr         r0, [r0]
  0000c	e3a01001	 mov         r1, #1
  00010	eb000000	 bl          EnableDeviceClocks

; 120  :     BootloaderMain();

  00014	eb000000	 bl          BootloaderMain

; 121  : }

  00018	e3a00000	 mov         r0, #0
  0001c	e49de004	 ldr         lr, [sp], #4
  00020	e12fff1e	 bx          lr
  00024		 |$M48234|

			 ENDP  ; |main|

	EXPORT	|OEMPlatformInit|
	EXPORT	|??_C@_1DO@MGHPPPEE@?$AAT?$AAP?$AAS?$AA6?$AA5?$AA9?$AAX?$AAX?$AA?5?$AAV?$AAe?$AAr?$AAs?$AAi?$AAo?$AAn?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA2?$AAx?$AA?5?$AA?$CI?$AA?$CF?$AAs?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1M@OIJGKENB@?$AAE?$AAS?$AA1?$AA?4?$AA3?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EE@KGKCAFPP@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAU?$AAn?$AAK?$AAn?$AAo?$AAw?$AAn?$AA?5?$AAC?$AAP?$AAU?$AA?5?$AAf?$AAa?$AAm?$AAi?$AAl?$AAy?$AA?3?$AA?$CF?$AAd?$AA?4?$AA?4?$AA?4?$AA?4?$AA?$AN@| [ DATA ] ; `string'
	EXPORT	|??_C@_08DGJGOJCE@EVM3530?9?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_07BFNEHID@Z2170P?9?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EA@CNLHEJHC@?$AAT?$AAI?$AA?5?$AAO?$AAM?$AAA?$AAP?$AA?$CF?$AAx?$AA?5?$AAV?$AAe?$AAr?$AAs?$AAi?$AAo?$AAn?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?5?$AA?$CI?$AA?$CF?$AAs?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BA@LEPJIIOK@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1M@FACKMDLE@?$AAE?$AAS?$AA1?$AA?4?$AA2?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1M@ECJPGMFK@?$AAE?$AAS?$AA1?$AA?4?$AA1?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1M@LKGLCH@?$AAE?$AAS?$AA3?$AA?4?$AA1?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1M@LIAGAMEC@?$AAE?$AAS?$AA3?$AA?4?$AA0?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DO@OPHFFOFA@?$AAE?$AAS?$AA2?$AA?4?$AA1?$AA?0?$AA?5?$AAI?$AAD?$AA?5?$AAd?$AAe?$AAt?$AAe?$AAr?$AAm?$AAi?$AAn?$AAe?$AAd?$AA?5?$AAu?$AAs?$AAi?$AAn?$AAg?$AA?5?$AAC?$AAR?$AAC?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DO@OONAPHOG@?$AAE?$AAS?$AA2?$AA?4?$AA0?$AA?0?$AA?5?$AAI?$AAD?$AA?5?$AAd?$AAe?$AAt?$AAe?$AAr?$AAm?$AAi?$AAn?$AAe?$AAd?$AA?5?$AAu?$AAs?$AAi?$AAn?$AAg?$AA?5?$AAC?$AAR?$AAC?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1M@MMBAGLLJ@?$AAE?$AAS?$AA2?$AA?4?$AA1?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1M@HEKMAMNM@?$AAE?$AAS?$AA2?$AA?4?$AA0?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1M@PKCDALDP@?$AAE?$AAS?$AA1?$AA?4?$AA0?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|GPIOClose|
	IMPORT	|TWLReadIDCode|
	IMPORT	|NKDbgPrintfW|
	IMPORT	|HotKeyInit|
	IMPORT	|GPIOSetBit|
	IMPORT	|GPIOSetMode|
	IMPORT	|GPIOClrBit|
	IMPORT	|GPIOOpen|
	IMPORT	|TWLOpen|
	IMPORT	|GPIOInit|
	IMPORT	|OALI2CInit|
	IMPORT	|OALPAtoVA|
	IMPORT	|Get_CPUVersion|
	IMPORT	|OALLocalAllocInit|

  00004			 AREA	 |.bss|, NOINIT
|?allocationPool@?1??OEMPlatformInit@@9@9| % 0x200	; `OEMPlatformInit'::`2'::allocationPool
|?allocationPool@?1??OEMPlatformInit@@9@9| % 0x200	; `OEMPlatformInit'::`2'::allocationPool
; File c:\wince600\platform\z2170p\src\inc\bsp_padcfg.h

  00000			 AREA	 |.pdata|, PDATA
|$T48292| DCD	|$LN49@OEMPlatfor|
	DCD	0x40011202

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DO@MGHPPPEE@?$AAT?$AAP?$AAS?$AA6?$AA5?$AA9?$AAX?$AAX?$AA?5?$AAV?$AAe?$AAr?$AAs?$AAi?$AAo?$AAn?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA2?$AAx?$AA?5?$AA?$CI?$AA?$CF?$AAs?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "T"
	DCB	0x0, "P", 0x0, "S", 0x0, "6", 0x0, "5", 0x0, "9", 0x0, "X"
	DCB	0x0, "X", 0x0, " ", 0x0, "V", 0x0, "e", 0x0, "r", 0x0, "s"
	DCB	0x0, "i", 0x0, "o", 0x0, "n", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "2", 0x0, "x", 0x0, " ", 0x0, "("
	DCB	0x0, "%", 0x0, "s", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1M@OIJGKENB@?$AAE?$AAS?$AA1?$AA?4?$AA3?$AA?$AA@| DCB "E", 0x0, "S", 0x0
	DCB	"1", 0x0, ".", 0x0, "3", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EE@KGKCAFPP@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAU?$AAn?$AAK?$AAn?$AAo?$AAw?$AAn?$AA?5?$AAC?$AAP?$AAU?$AA?5?$AAf?$AAa?$AAm?$AAi?$AAl?$AAy?$AA?3?$AA?$CF?$AAd?$AA?4?$AA?4?$AA?4?$AA?4?$AA?$AN@| DCB "I"
	DCB	0x0, "N", 0x0, "F", 0x0, "O", 0x0, ":", 0x0, " ", 0x0, "U"
	DCB	0x0, "n", 0x0, "K", 0x0, "n", 0x0, "o", 0x0, "w", 0x0, "n"
	DCB	0x0, " ", 0x0, "C", 0x0, "P", 0x0, "U", 0x0, " ", 0x0, "f"
	DCB	0x0, "a", 0x0, "m", 0x0, "i", 0x0, "l", 0x0, "y", 0x0, ":"
	DCB	0x0, "%", 0x0, "d", 0x0, ".", 0x0, ".", 0x0, ".", 0x0, "."
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_08DGJGOJCE@EVM3530?9?$AA@| DCB "EVM3530-", 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_07BFNEHID@Z2170P?9?$AA@| DCB "Z2170P-", 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EA@CNLHEJHC@?$AAT?$AAI?$AA?5?$AAO?$AAM?$AAA?$AAP?$AA?$CF?$AAx?$AA?5?$AAV?$AAe?$AAr?$AAs?$AAi?$AAo?$AAn?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?5?$AA?$CI?$AA?$CF?$AAs?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "T"
	DCB	0x0, "I", 0x0, " ", 0x0, "O", 0x0, "M", 0x0, "A", 0x0, "P"
	DCB	0x0, "%", 0x0, "x", 0x0, " ", 0x0, "V", 0x0, "e", 0x0, "r"
	DCB	0x0, "s", 0x0, "i", 0x0, "o", 0x0, "n", 0x0, " ", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, " "
	DCB	0x0, "(", 0x0, "%", 0x0, "s", 0x0, ")", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BA@LEPJIIOK@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@| DCB "U", 0x0
	DCB	"n", 0x0, "k", 0x0, "n", 0x0, "o", 0x0, "w", 0x0, "n", 0x0
	DCB	0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1M@FACKMDLE@?$AAE?$AAS?$AA1?$AA?4?$AA2?$AA?$AA@| DCB "E", 0x0, "S", 0x0
	DCB	"1", 0x0, ".", 0x0, "2", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1M@ECJPGMFK@?$AAE?$AAS?$AA1?$AA?4?$AA1?$AA?$AA@| DCB "E", 0x0, "S", 0x0
	DCB	"1", 0x0, ".", 0x0, "1", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1M@LKGLCH@?$AAE?$AAS?$AA3?$AA?4?$AA1?$AA?$AA@| DCB "E", 0x0, "S", 0x0
	DCB	"3", 0x0, ".", 0x0, "1", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1M@LIAGAMEC@?$AAE?$AAS?$AA3?$AA?4?$AA0?$AA?$AA@| DCB "E", 0x0, "S", 0x0
	DCB	"3", 0x0, ".", 0x0, "0", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DO@OPHFFOFA@?$AAE?$AAS?$AA2?$AA?4?$AA1?$AA?0?$AA?5?$AAI?$AAD?$AA?5?$AAd?$AAe?$AAt?$AAe?$AAr?$AAm?$AAi?$AAn?$AAe?$AAd?$AA?5?$AAu?$AAs?$AAi?$AAn?$AAg?$AA?5?$AAC?$AAR?$AAC?$AA?$AA@| DCB "E"
	DCB	0x0, "S", 0x0, "2", 0x0, ".", 0x0, "1", 0x0, ",", 0x0, " "
	DCB	0x0, "I", 0x0, "D", 0x0, " ", 0x0, "d", 0x0, "e", 0x0, "t"
	DCB	0x0, "e", 0x0, "r", 0x0, "m", 0x0, "i", 0x0, "n", 0x0, "e"
	DCB	0x0, "d", 0x0, " ", 0x0, "u", 0x0, "s", 0x0, "i", 0x0, "n"
	DCB	0x0, "g", 0x0, " ", 0x0, "C", 0x0, "R", 0x0, "C", 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DO@OONAPHOG@?$AAE?$AAS?$AA2?$AA?4?$AA0?$AA?0?$AA?5?$AAI?$AAD?$AA?5?$AAd?$AAe?$AAt?$AAe?$AAr?$AAm?$AAi?$AAn?$AAe?$AAd?$AA?5?$AAu?$AAs?$AAi?$AAn?$AAg?$AA?5?$AAC?$AAR?$AAC?$AA?$AA@| DCB "E"
	DCB	0x0, "S", 0x0, "2", 0x0, ".", 0x0, "0", 0x0, ",", 0x0, " "
	DCB	0x0, "I", 0x0, "D", 0x0, " ", 0x0, "d", 0x0, "e", 0x0, "t"
	DCB	0x0, "e", 0x0, "r", 0x0, "m", 0x0, "i", 0x0, "n", 0x0, "e"
	DCB	0x0, "d", 0x0, " ", 0x0, "u", 0x0, "s", 0x0, "i", 0x0, "n"
	DCB	0x0, "g", 0x0, " ", 0x0, "C", 0x0, "R", 0x0, "C", 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1M@MMBAGLLJ@?$AAE?$AAS?$AA2?$AA?4?$AA1?$AA?$AA@| DCB "E", 0x0, "S", 0x0
	DCB	"2", 0x0, ".", 0x0, "1", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1M@HEKMAMNM@?$AAE?$AAS?$AA2?$AA?4?$AA0?$AA?$AA@| DCB "E", 0x0, "S", 0x0
	DCB	"2", 0x0, ".", 0x0, "0", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1M@PKCDALDP@?$AAE?$AAS?$AA1?$AA?4?$AA0?$AA?$AA@| DCB "E", 0x0, "S", 0x0
	DCB	"1", 0x0, ".", 0x0, "0", 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Ogspy
; File c:\wince600\platform\z2170p\src\bootloader\eboot\main.c

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OEMPlatformInit| PROC

; 132  : {

  00000		 |$LN49@OEMPlatfor|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd008	 sub         sp, sp, #8
  00008		 |$M48289|

; 133  :     OMAP_GPTIMER_REGS *pTimerRegs;
; 134  :     UINT32 CpuRevision, version;
; 135  :     HANDLE hTwl, hGPIO;
; 136  :     static UCHAR allocationPool[512];
; 137  :     static const PAD_INFO ebootPinMux_37XX[] = {
; 138  :             DSS_PADS_37XX
; 139  :             GPIO_PADS_37XX
; 140  : 	     	USBOTG_PADS
; 141  : 	     	MCSPI1_EBOOT_PADS
; 142  :             MCSPI4_PADS                 //Ray 131119
; 143  :             I2C3_PADS                   //Ray 131128
; 144  :             UART1_PADS                  //Ray 131225
; 145  :             LED_PADS                    //Ray 131227
; 146  :             POWER_ON_PADS               //Ray 140109
; 147  :             END_OF_PAD_ARRAY
; 148  :     };
; 149  : 		
; 150  :     OALLocalAllocInit(allocationPool, sizeof(allocationPool));

  00008	e59f6434	 ldr         r6, [pc, #0x434]
  0000c	e3a01c02	 mov         r1, #2, 24
  00010	e1a00006	 mov         r0, r6
  00014	eb000000	 bl          OALLocalAllocInit

; 151  : 
; 152  :     // Get processor and companion chip versions
; 153  : 	g_CPUFamily = CPU_FAMILY_OMAP35XX;

  00018	e3a03000	 mov         r3, #0
  0001c	e5863200	 str         r3, [r6, #0x200]

; 154  :     CpuRevision = Get_CPUVersion();

  00020	eb000000	 bl          Get_CPUVersion
  00024	e1a07000	 mov         r7, r0

; 155  :     version = CPU_REVISION(CpuRevision);
; 156  :     g_CPUFamily = CPU_FAMILY(CpuRevision);

  00028	e1a03807	 mov         r3, r7, lsl #16
  0002c	e3a02312	 mov         r2, #0x12, 6
  00030	e1a03c23	 mov         r3, r3, lsr #24

; 157  : 
; 158  : 	// Set GPTIMER1 regs pointer
; 159  : 	pTimerRegs = OALPAtoUA(OMAP_GPTIMER1_REGS_PA);

  00034	e3a01000	 mov         r1, #0
  00038	e38209c6	 orr         r0, r2, #0xC6, 18
  0003c	e5863200	 str         r3, [r6, #0x200]
  00040	e20740ff	 and         r4, r7, #0xFF
  00044	eb000000	 bl          OALPAtoVA

; 160  : 	
; 161  : 	ConfigurePadArray(ebootPinMux_37XX);

  00048	e59f93f0	 ldr         r9, [pc, #0x3F0]
  0004c	e3a01c7f	 mov         r1, #0x7F, 24
  00050	e381a0ff	 orr         r10, r1, #0xFF
  00054	e2891008	 add         r1, r9, #8
  00058	e58d1000	 str         r1, [sp]
  0005c	e1a08000	 mov         r8, r0
  00060	e2891008	 add         r1, r9, #8
  00064	e59d9000	 ldr         r9, [sp]
  00068	e3a00cff	 mov         r0, #0xFF, 24
  0006c	e58d1004	 str         r1, [sp, #4]
  00070	e1a06001	 mov         r6, r1
  00074	e3a05000	 mov         r5, #0
  00078	e3a03000	 mov         r3, #0
  0007c	e3a02052	 mov         r2, #0x52
  00080	e380b0ff	 orr         r11, r0, #0xFF
  00084		 |$LL38@OEMPlatfor|
  00084	e0833009	 add         r3, r3, r9
  00088	e5933004	 ldr         r3, [r3, #4]
  0008c	e1a00002	 mov         r0, r2
  00090	e003100a	 and         r1, r3, r10
  00094	eb000000	 bl          SOCSetPadConfig
  00098	e2855001	 add         r5, r5, #1
  0009c	e1a03185	 mov         r3, r5, lsl #3
  000a0	e19320b6	 ldrh        r2, [r3, +r6]
  000a4	e152000b	 cmp         r2, r11
  000a8	1afffff5	 bne         |$LL38@OEMPlatfor|

; 162  : 	 
; 163  : 	//Bootstrap message(1), Ray 131024
; 164  : 	/*OALMSG(TRUE, (L"Bootstrap messages\r\n"));    //e-test comment, Ray 
; 165  :     OALMSG(TRUE,(L"ZEBEX E-TEST for Z-2170P - Ray\r\nBuilt %S at %S\r\n", __DATE__, __TIME__ ));*/    
; 166  :     //OALLog(L"ZEBEX Windows CE EBOOT for Z-2170P - Ray\r\nBuilt %S at %S\r\n", __DATE__, __TIME__ );  
; 167  :     //OALLog(L"ZEBEX~~~~~~~~~~~~~~~~~~~~X\n");  
; 168  : /*#if BUILDING_EBOOT_SD           //Bootstrap message(2), Ray
; 169  :     //OALLog(L"Version: " BSP_EBLD_SD_VERSION_STRING L"\r\n");  //e-test comment, Ray 
; 170  :     OALLog(L"Version: " BSP_ETEST_SD_VERSION_STRING L"\r\n");
; 171  : #else
; 172  : 	OALLog(L"Version: " BSP_EBLD_NAND_VERSION_STRING L"\r\n");
; 173  : #endif*/
; 174  : 
; 175  :     // Soft reset GPTIMER1
; 176  :     OUTREG32(&pTimerRegs->TIOCP, SYSCONFIG_SOFTRESET);

  000ac	e3a03002	 mov         r3, #2
  000b0	e59f638c	 ldr         r6, [pc, #0x38C]
  000b4	e59f9384	 ldr         r9, [pc, #0x384]
  000b8	e5883010	 str         r3, [r8, #0x10]
  000bc		 |$LL6@OEMPlatfor|

; 177  :     // While until done
; 178  :     while ((INREG32(&pTimerRegs->TISTAT) & GPTIMER_TISTAT_RESETDONE) == 0)

  000bc	e5983014	 ldr         r3, [r8, #0x14]
  000c0	e3130001	 tst         r3, #1
  000c4	0afffffc	 beq         |$LL6@OEMPlatfor|

; 179  :     	;
; 180  :  
; 181  :     // Enable posted mode
; 182  :     OUTREG32(&pTimerRegs->TSICR, GPTIMER_TSICR_POSTED);

  000c8	e3a03004	 mov         r3, #4
  000cc	e5883040	 str         r3, [r8, #0x40]

; 183  :     // Start timer
; 184  :     OUTREG32(&pTimerRegs->TCLR, GPTIMER_TCLR_AR|GPTIMER_TCLR_ST);

  000d0	e3a03003	 mov         r3, #3

; 185  :     
; 186  : 	// Enable device clocks used by the bootloader
; 187  :     EnableDeviceClocks(OMAP_DEVICE_GPIO1,TRUE);

  000d4	e3a01001	 mov         r1, #1
  000d8	e3a00029	 mov         r0, #0x29
  000dc	e5883024	 str         r3, [r8, #0x24]
  000e0	eb000000	 bl          EnableDeviceClocks

; 188  :     EnableDeviceClocks(OMAP_DEVICE_GPIO2,TRUE);

  000e4	e3a01001	 mov         r1, #1
  000e8	e3a0002d	 mov         r0, #0x2D
  000ec	eb000000	 bl          EnableDeviceClocks

; 189  :     EnableDeviceClocks(OMAP_DEVICE_GPIO3,TRUE);

  000f0	e3a01001	 mov         r1, #1
  000f4	e3a0002e	 mov         r0, #0x2E
  000f8	eb000000	 bl          EnableDeviceClocks

; 190  :     EnableDeviceClocks(OMAP_DEVICE_GPIO4,TRUE);

  000fc	e3a01001	 mov         r1, #1
  00100	e3a0002f	 mov         r0, #0x2F
  00104	eb000000	 bl          EnableDeviceClocks

; 191  :     EnableDeviceClocks(OMAP_DEVICE_GPIO5,TRUE);

  00108	e3a01001	 mov         r1, #1
  0010c	e3a00030	 mov         r0, #0x30
  00110	eb000000	 bl          EnableDeviceClocks

; 192  :     EnableDeviceClocks(OMAP_DEVICE_GPIO6,TRUE);

  00114	e3a01001	 mov         r1, #1
  00118	e3a00031	 mov         r0, #0x31
  0011c	eb000000	 bl          EnableDeviceClocks

; 193  :     
; 194  : 	EnableDeviceClocks(OMAP_DEVICE_MCSPI1,TRUE);

  00120	e3a01001	 mov         r1, #1
  00124	e3a0000f	 mov         r0, #0xF
  00128	eb000000	 bl          EnableDeviceClocks

; 195  : 	EnableDeviceClocks(OMAP_DEVICE_UART1, TRUE); 

  0012c	e3a01001	 mov         r1, #1
  00130	e3a0000a	 mov         r0, #0xA
  00134	eb000000	 bl          EnableDeviceClocks

; 196  : 	
; 197  :     // configure i2c devices
; 198  :     OALI2CInit(OMAP_DEVICE_I2C1); // TPS65650_I2CCNTL

  00138	e3a0000c	 mov         r0, #0xC
  0013c	eb000000	 bl          OALI2CInit

; 199  :     //OALI2CInit(OMAP_DEVICE_I2C2); // G-sensor for Z-2000
; 200  :     //OALI2CInit(OMAP_DEVICE_I2C3);   // BQ27510, Ray 131128 
; 201  :   
; 202  : 
; 203  :     GPIOInit();

  00140	eb000000	 bl          GPIOInit

; 204  :     // Note that T2 accesses must occur after I2C initialization
; 205  :     hTwl  = TWLOpen();      // difference between TWLOpen and GPIOOpen??

  00144	eb000000	 bl          TWLOpen
  00148	e1a0a000	 mov         r10, r0

; 206  :     hGPIO = GPIOOpen();     //

  0014c	eb000000	 bl          GPIOOpen

; 207  :    
; 208  :     //if( omap_mcspi_init() )
; 209  :     //	OALLog(L"omap_mcspi_init: success!!!\r\n");
; 210  :     	
; 211  :     // Clear Reset on ethernet controller        
; 212  :     //GPIOSetBit(hGPIO,LAN9115_RESET_GPIO);            
; 213  :     //GPIOSetMode(hGPIO, LAN9115_RESET_GPIO,GPIO_DIR_OUTPUT);
; 214  : 	// test GPIO 
; 215  : 	GPIOClrBit(hGPIO,15); // BT_EN

  00150	e3a0100f	 mov         r1, #0xF
  00154	e1a08000	 mov         r8, r0
  00158	eb000000	 bl          GPIOClrBit

; 216  : 	GPIOSetMode(hGPIO, 15,GPIO_DIR_OUTPUT);

  0015c	e3a02000	 mov         r2, #0
  00160	e3a0100f	 mov         r1, #0xF
  00164	e1a00008	 mov         r0, r8
  00168	eb000000	 bl          GPIOSetMode

; 217  : 	GPIOClrBit(hGPIO,136); // VIBRATOR

  0016c	e3a01088	 mov         r1, #0x88
  00170	e1a00008	 mov         r0, r8
  00174	eb000000	 bl          GPIOClrBit

; 218  : 	GPIOSetMode(hGPIO, 136,GPIO_DIR_OUTPUT);

  00178	e3a02000	 mov         r2, #0
  0017c	e3a01088	 mov         r1, #0x88
  00180	e1a00008	 mov         r0, r8
  00184	eb000000	 bl          GPIOSetMode

; 219  :     GPIOClrBit(hGPIO,16); // WLAN_EN

  00188	e3a01010	 mov         r1, #0x10
  0018c	e1a00008	 mov         r0, r8
  00190	eb000000	 bl          GPIOClrBit

; 220  : 	GPIOSetMode(hGPIO, 16,GPIO_DIR_OUTPUT);

  00194	e3a02000	 mov         r2, #0
  00198	e3a01010	 mov         r1, #0x10
  0019c	e1a00008	 mov         r0, r8
  001a0	eb000000	 bl          GPIOSetMode

; 221  : 	//GPIOSetBit(hGPIO,15);     // test 
; 222  :     
; 223  :     GPIOClrBit(hGPIO, 155); // Keypad_LED, Ray 131112                

  001a4	e3a0109b	 mov         r1, #0x9B
  001a8	e1a00008	 mov         r0, r8
  001ac	eb000000	 bl          GPIOClrBit

; 224  :     GPIOSetMode(hGPIO, 155, GPIO_DIR_OUTPUT);

  001b0	e3a02000	 mov         r2, #0
  001b4	e3a0109b	 mov         r1, #0x9B
  001b8	e1a00008	 mov         r0, r8
  001bc	eb000000	 bl          GPIOSetMode

; 225  :     
; 226  :     GPIOClrBit(hGPIO, 34);  // GREEN_LED, Ray 131227                   

  001c0	e3a01022	 mov         r1, #0x22
  001c4	e1a00008	 mov         r0, r8
  001c8	eb000000	 bl          GPIOClrBit

; 227  :     GPIOSetMode(hGPIO, 34, GPIO_DIR_OUTPUT);  

  001cc	e3a02000	 mov         r2, #0
  001d0	e3a01022	 mov         r1, #0x22
  001d4	e1a00008	 mov         r0, r8
  001d8	eb000000	 bl          GPIOSetMode

; 228  :     
; 229  :     GPIOClrBit(hGPIO, 140); // RED_LED, Ray 131227                 

  001dc	e3a0108c	 mov         r1, #0x8C
  001e0	e1a00008	 mov         r0, r8
  001e4	eb000000	 bl          GPIOClrBit

; 230  :     GPIOSetMode(hGPIO, 140, GPIO_DIR_OUTPUT);   

  001e8	e3a02000	 mov         r2, #0
  001ec	e3a0108c	 mov         r1, #0x8C
  001f0	e1a00008	 mov         r0, r8
  001f4	eb000000	 bl          GPIOSetMode

; 231  :     
; 232  :     GPIOClrBit(hGPIO, 160); // BARCODE_LED, Ray 131227                 

  001f8	e3a010a0	 mov         r1, #0xA0
  001fc	e1a00008	 mov         r0, r8
  00200	eb000000	 bl          GPIOClrBit

; 233  :     GPIOSetMode(hGPIO, 160, GPIO_DIR_OUTPUT);   

  00204	e3a02000	 mov         r2, #0
  00208	e3a010a0	 mov         r1, #0xA0
  0020c	e1a00008	 mov         r0, r8
  00210	eb000000	 bl          GPIOSetMode

; 234  :     
; 235  :     GPIOClrBit(hGPIO,  EN_VIO_1V8_Z2170P);  // Drive power 1.8, Ray 140109               

  00214	e3a01089	 mov         r1, #0x89
  00218	e1a00008	 mov         r0, r8
  0021c	eb000000	 bl          GPIOClrBit

; 236  :     GPIOSetMode(hGPIO, EN_VIO_1V8_Z2170P, GPIO_DIR_OUTPUT); 

  00220	e3a02000	 mov         r2, #0
  00224	e3a01089	 mov         r1, #0x89
  00228	e1a00008	 mov         r0, r8
  0022c	eb000000	 bl          GPIOSetMode

; 237  :     GPIOClrBit(hGPIO, EN_DC_3V3);   // Drive power 3.3, Ray 140109             

  00230	e3a01017	 mov         r1, #0x17
  00234	e1a00008	 mov         r0, r8
  00238	eb000000	 bl          GPIOClrBit

; 238  :     GPIOSetMode(hGPIO, EN_DC_3V3, GPIO_DIR_OUTPUT);               

  0023c	e3a02000	 mov         r2, #0
  00240	e3a01017	 mov         r1, #0x17
  00244	e1a00008	 mov         r0, r8
  00248	eb000000	 bl          GPIOSetMode

; 239  :     GPIOSetBit(hGPIO, EN_VIO_1V8_Z2170P);

  0024c	e3a01089	 mov         r1, #0x89
  00250	e1a00008	 mov         r0, r8
  00254	eb000000	 bl          GPIOSetBit

; 240  :     GPIOSetBit(hGPIO, EN_DC_3V3 );

  00258	e3a01017	 mov         r1, #0x17
  0025c	e1a00008	 mov         r0, r8
  00260	eb000000	 bl          GPIOSetBit

; 241  :         
; 242  :     GPIOSetMode(hGPIO, ENG_SET1_GPIO, GPIO_DIR_OUTPUT);  //barcode, Ray 131225     

  00264	e3a02000	 mov         r2, #0
  00268	e3a01098	 mov         r1, #0x98
  0026c	e1a00008	 mov         r0, r8
  00270	eb000000	 bl          GPIOSetMode

; 243  :     GPIOSetBit(hGPIO, ENG_SET1_GPIO);

  00274	e3a01098	 mov         r1, #0x98
  00278	e1a00008	 mov         r0, r8
  0027c	eb000000	 bl          GPIOSetBit

; 244  :     GPIOSetMode(hGPIO, ENG_SET2_GPIO, GPIO_DIR_OUTPUT);       

  00280	e3a02000	 mov         r2, #0
  00284	e3a01099	 mov         r1, #0x99
  00288	e1a00008	 mov         r0, r8
  0028c	eb000000	 bl          GPIOSetMode

; 245  :     GPIOSetBit(hGPIO, ENG_SET2_GPIO);

  00290	e3a01099	 mov         r1, #0x99
  00294	e1a00008	 mov         r0, r8
  00298	eb000000	 bl          GPIOSetBit

; 246  : 
; 247  :     GPIOClrBit(hGPIO, EN_SB_CHARGE);                    // RTC, Ray 140224     

  0029c	e3a0108b	 mov         r1, #0x8B
  002a0	e1a00008	 mov         r0, r8
  002a4	eb000000	 bl          GPIOClrBit

; 248  :     GPIOSetMode(hGPIO, EN_SB_CHARGE, GPIO_DIR_OUTPUT);

  002a8	e3a02000	 mov         r2, #0
  002ac	e3a0108b	 mov         r1, #0x8B
  002b0	e1a00008	 mov         r0, r8
  002b4	eb000000	 bl          GPIOSetMode

; 249  : 
; 250  :     GPIOSetBit(hGPIO, 155);                             // Keypad_LED are Low-active;So use GPIOSetBit() let light close, Ray 131112                          

  002b8	e3a0109b	 mov         r1, #0x9B
  002bc	e1a00008	 mov         r0, r8
  002c0	eb000000	 bl          GPIOSetBit

; 251  :     
; 252  :     //OALLog(L"Initial Barcode\r\n");
; 253  : 
; 254  :     /*GPIOClrBit(hGPIO, 184);               //I2C3_CLK, Ray 131129                  
; 255  :     GPIOSetMode(hGPIO, 184, GPIO_DIR_OUTPUT);
; 256  :     GPIOClrBit(hGPIO, 185);                 //I2C3_SDA, Ray 131129    
; 257  :     GPIOSetMode(hGPIO, 185, GPIO_DIR_OUTPUT);*/
; 258  :     //OALLog(L"\r\n >>>Set hGPIO: %x \r\n",hGPIO); 
; 259  :     
; 260  : 	HotKeyInit(hTwl);                               //HotKey Initial ,Ray

  002c4	e1a0000a	 mov         r0, r10
  002c8	eb000000	 bl          HotKeyInit

; 261  :     ghTwl = hTwl;                                   //assign give "ghTwl"           

  002cc	e59f3168	 ldr         r3, [pc, #0x168]

; 262  :     //OALLog(L"******hTwl: %X....\r\n", hTwl);      //address-1, Ray
; 263  : 
; 264  :     //Bootstrap message(3), Ray
; 265  :     OALLog(L"TI OMAP%x Version 0x%08x (%s)\r\n", CPU_ID(CpuRevision), CPU_REVISION(CpuRevision),        
; 266  :         version == CPU_FAMILY_35XX_REVISION_ES_1_0 ? L"ES1.0" :
; 267  :         version == CPU_FAMILY_35XX_REVISION_ES_2_0 ? L"ES2.0" :
; 268  :         version == CPU_FAMILY_35XX_REVISION_ES_2_1 ? L"ES2.1" :
; 269  :         version == CPU_FAMILY_35XX_REVISION_ES_2_0_CRC ? L"ES2.0, ID determined using CRC" :
; 270  :         version == CPU_FAMILY_35XX_REVISION_ES_2_1_CRC ? L"ES2.1, ID determined using CRC" :
; 271  :         version == CPU_FAMILY_35XX_REVISION_ES_3_0 ? L"ES3.0" :
; 272  :         version == CPU_FAMILY_35XX_REVISION_ES_3_1 ? L"ES3.1" : 
; 273  :         version == CPU_FAMILY_37XX_REVISION_ES_1_0? L"ES1.0" :
; 274  :         version == CPU_FAMILY_37XX_REVISION_ES_1_1? L"ES1.1" :
; 275  :         version == CPU_FAMILY_37XX_REVISION_ES_1_2? L"ES1.2" :
; 276  :         L"Unknown" );

  002d0	e59f5160	 ldr         r5, [pc, #0x160]
  002d4	e3540000	 cmp         r4, #0
  002d8	e583a000	 str         r10, [r3]
  002dc	0a000013	 beq         |$LN44@OEMPlatfor|
  002e0	e3540001	 cmp         r4, #1
  002e4	059f3148	 ldreq       r3, [pc, #0x148]
  002e8	0a000018	 beq         |$LN10@OEMPlatfor|
  002ec	e3540002	 cmp         r4, #2
  002f0	059f3138	 ldreq       r3, [pc, #0x138]
  002f4	0a000015	 beq         |$LN10@OEMPlatfor|
  002f8	e3540003	 cmp         r4, #3
  002fc	059f3128	 ldreq       r3, [pc, #0x128]
  00300	0a000012	 beq         |$LN10@OEMPlatfor|
  00304	e3540004	 cmp         r4, #4
  00308	059f3118	 ldreq       r3, [pc, #0x118]
  0030c	0a00000f	 beq         |$LN10@OEMPlatfor|
  00310	e3540005	 cmp         r4, #5
  00314	059f3108	 ldreq       r3, [pc, #0x108]
  00318	0a00000c	 beq         |$LN10@OEMPlatfor|
  0031c	e3540006	 cmp         r4, #6
  00320	059f30f8	 ldreq       r3, [pc, #0xF8]
  00324	0a000009	 beq         |$LN10@OEMPlatfor|
  00328	e3540010	 cmp         r4, #0x10
  0032c	1a000001	 bne         |$LN13@OEMPlatfor|
  00330		 |$LN44@OEMPlatfor|
  00330	e1a03005	 mov         r3, r5
  00334	ea000005	 b           |$LN10@OEMPlatfor|
  00338		 |$LN13@OEMPlatfor|
  00338	e3540011	 cmp         r4, #0x11
  0033c	059f30c4	 ldreq       r3, [pc, #0xC4]
  00340	0a000002	 beq         |$LN10@OEMPlatfor|
  00344	e3540012	 cmp         r4, #0x12
  00348	059f30b4	 ldreq       r3, [pc, #0xB4]
  0034c	159f30a8	 ldrne       r3, [pc, #0xA8]
  00350		 |$LN10@OEMPlatfor|
  00350	e59f00c4	 ldr         r0, [pc, #0xC4]
  00354	e1a02004	 mov         r2, r4
  00358	e1a01827	 mov         r1, r7, lsr #16
  0035c	eb000000	 bl          NKDbgPrintfW

; 277  :         
; 278  :     /* Initialize Device Prefix */
; 279  :     if(g_CPUFamily == CPU_FAMILY_DM37XX)

  00360	e5963200	 ldr         r3, [r6, #0x200]
  00364	e3530001	 cmp         r3, #1

; 280  :     {
; 281  :         gDevice_prefix = BSP_DEVICE_37xx_PREFIX;

  00368	059f20a8	 ldreq       r2, [pc, #0xA8]
  0036c	0a000005	 beq         |$LN45@OEMPlatfor|

; 282  :     }
; 283  :     else if (g_CPUFamily == CPU_FAMILY_OMAP35XX)

  00370	e5963200	 ldr         r3, [r6, #0x200]
  00374	e3530000	 cmp         r3, #0

; 284  :     {
; 285  :         gDevice_prefix = BSP_DEVICE_35xx_PREFIX;
; 286  :     }
; 287  :     else
; 288  :     {
; 289  :         OALLog(L"INFO: UnKnown CPU family:%d....\r\n", g_CPUFamily);

  00378	15961200	 ldrne       r1, [r6, #0x200]
  0037c	159f0090	 ldrne       r0, [pc, #0x90]
  00380	1b000000	 blne        NKDbgPrintfW

; 290  :         gDevice_prefix = BSP_DEVICE_35xx_PREFIX;

  00384	e59f2084	 ldr         r2, [pc, #0x84]
  00388		 |$LN45@OEMPlatfor|
  00388	e59f307c	 ldr         r3, [pc, #0x7C]

; 291  :     }
; 292  :     version = TWLReadIDCode(hTwl);

  0038c	e1a0000a	 mov         r0, r10
  00390	e5832000	 str         r2, [r3]
  00394	eb000000	 bl          TWLReadIDCode
  00398	e1b01000	 movs        r1, r0

; 293  : 
; 294  :     //Bootstrap message(4), Ray
; 295  :     OALLog(L"TPS659XX Version 0x%02x (%s)\r\n", version,
; 296  :         version == 0x00 ? L"ES1.0" : 
; 297  :         version == 0x10 ? L"ES1.1" : 
; 298  :         version == 0x20 ? L"ES1.2" : 
; 299  :         version == 0x30 ? L"ES1.3" : L"Unknown" );

  0039c	0a000008	 beq         |$LN30@OEMPlatfor|
  003a0	e3510010	 cmp         r1, #0x10
  003a4	059f505c	 ldreq       r5, [pc, #0x5C]
  003a8	0a000005	 beq         |$LN30@OEMPlatfor|
  003ac	e3510020	 cmp         r1, #0x20
  003b0	059f504c	 ldreq       r5, [pc, #0x4C]
  003b4	0a000002	 beq         |$LN30@OEMPlatfor|
  003b8	e3510030	 cmp         r1, #0x30
  003bc	059f503c	 ldreq       r5, [pc, #0x3C]
  003c0	159f5034	 ldrne       r5, [pc, #0x34]
  003c4		 |$LN30@OEMPlatfor|
  003c4	e59f002c	 ldr         r0, [pc, #0x2C]
  003c8	e1a02005	 mov         r2, r5
  003cc	eb000000	 bl          NKDbgPrintfW

; 300  : 	
; 301  :     g_ecctype = (UCHAR)dwEbootECCtype;

  003d0	e5992000	 ldr         r2, [r9]
  003d4	e59f3018	 ldr         r3, [pc, #0x18]

; 302  : 
; 303  : 	//Bootstrap message(5), Ray
; 304  : 	//HotKeyFunction(hTwl);   // Function Locate is right? would to changes it.      
; 305  : 	//GPIOClrBit(hGPIO,15); // test high puls 20ms
; 306  :     // Done
; 307  : 
; 308  :     GPIOClose(hGPIO);

  003d8	e1a00008	 mov         r0, r8
  003dc	e5c32000	 strb        r2, [r3]
  003e0	eb000000	 bl          GPIOClose

; 309  :     return TRUE;

  003e4	e3a00001	 mov         r0, #1

; 310  : }

  003e8	e28dd008	 add         sp, sp, #8
  003ec	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  003f0	e12fff1e	 bx          lr
  003f4		 |$LN50@OEMPlatfor|
  003f4		 |$LN51@OEMPlatfor|
  003f4	00000000	 DCD         |g_ecctype|
  003f8		 |$LN52@OEMPlatfor|
  003f8	00000000	 DCD         |??_C@_1DO@MGHPPPEE@?$AAT?$AAP?$AAS?$AA6?$AA5?$AA9?$AAX?$AAX?$AA?5?$AAV?$AAe?$AAr?$AAs?$AAi?$AAo?$AAn?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA2?$AAx?$AA?5?$AA?$CI?$AA?$CF?$AAs?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  003fc		 |$LN53@OEMPlatfor|
  003fc	00000000	 DCD         |??_C@_1BA@LEPJIIOK@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@|
  00400		 |$LN54@OEMPlatfor|
  00400	00000000	 DCD         |??_C@_1M@OIJGKENB@?$AAE?$AAS?$AA1?$AA?4?$AA3?$AA?$AA@|
  00404		 |$LN55@OEMPlatfor|
  00404	00000000	 DCD         |??_C@_1M@FACKMDLE@?$AAE?$AAS?$AA1?$AA?4?$AA2?$AA?$AA@|
  00408		 |$LN56@OEMPlatfor|
  00408	00000000	 DCD         |??_C@_1M@ECJPGMFK@?$AAE?$AAS?$AA1?$AA?4?$AA1?$AA?$AA@|
  0040c		 |$LN57@OEMPlatfor|
  0040c	00000000	 DCD         |gDevice_prefix|
  00410		 |$LN58@OEMPlatfor|
  00410	00000000	 DCD         |??_C@_08DGJGOJCE@EVM3530?9?$AA@|
  00414		 |$LN59@OEMPlatfor|
  00414	00000000	 DCD         |??_C@_1EE@KGKCAFPP@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAU?$AAn?$AAK?$AAn?$AAo?$AAw?$AAn?$AA?5?$AAC?$AAP?$AAU?$AA?5?$AAf?$AAa?$AAm?$AAi?$AAl?$AAy?$AA?3?$AA?$CF?$AAd?$AA?4?$AA?4?$AA?4?$AA?4?$AA?$AN@|
  00418		 |$LN60@OEMPlatfor|
  00418	00000000	 DCD         |??_C@_07BFNEHID@Z2170P?9?$AA@|
  0041c		 |$LN61@OEMPlatfor|
  0041c	00000000	 DCD         |??_C@_1EA@CNLHEJHC@?$AAT?$AAI?$AA?5?$AAO?$AAM?$AAA?$AAP?$AA?$CF?$AAx?$AA?5?$AAV?$AAe?$AAr?$AAs?$AAi?$AAo?$AAn?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?5?$AA?$CI?$AA?$CF?$AAs?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  00420		 |$LN62@OEMPlatfor|
  00420	00000000	 DCD         |??_C@_1M@LKGLCH@?$AAE?$AAS?$AA3?$AA?4?$AA1?$AA?$AA@|
  00424		 |$LN63@OEMPlatfor|
  00424	00000000	 DCD         |??_C@_1M@LIAGAMEC@?$AAE?$AAS?$AA3?$AA?4?$AA0?$AA?$AA@|
  00428		 |$LN64@OEMPlatfor|
  00428	00000000	 DCD         |??_C@_1DO@OPHFFOFA@?$AAE?$AAS?$AA2?$AA?4?$AA1?$AA?0?$AA?5?$AAI?$AAD?$AA?5?$AAd?$AAe?$AAt?$AAe?$AAr?$AAm?$AAi?$AAn?$AAe?$AAd?$AA?5?$AAu?$AAs?$AAi?$AAn?$AAg?$AA?5?$AAC?$AAR?$AAC?$AA?$AA@|
  0042c		 |$LN65@OEMPlatfor|
  0042c	00000000	 DCD         |??_C@_1DO@OONAPHOG@?$AAE?$AAS?$AA2?$AA?4?$AA0?$AA?0?$AA?5?$AAI?$AAD?$AA?5?$AAd?$AAe?$AAt?$AAe?$AAr?$AAm?$AAi?$AAn?$AAe?$AAd?$AA?5?$AAu?$AAs?$AAi?$AAn?$AAg?$AA?5?$AAC?$AAR?$AAC?$AA?$AA@|
  00430		 |$LN66@OEMPlatfor|
  00430	00000000	 DCD         |??_C@_1M@MMBAGLLJ@?$AAE?$AAS?$AA2?$AA?4?$AA1?$AA?$AA@|
  00434		 |$LN67@OEMPlatfor|
  00434	00000000	 DCD         |??_C@_1M@HEKMAMNM@?$AAE?$AAS?$AA2?$AA?4?$AA0?$AA?$AA@|
  00438		 |$LN68@OEMPlatfor|
  00438	00000000	 DCD         |??_C@_1M@PKCDALDP@?$AAE?$AAS?$AA1?$AA?4?$AA0?$AA?$AA@|
  0043c		 |$LN69@OEMPlatfor|
  0043c	00000000	 DCD         |ghTwl|
  00440		 |$LN70@OEMPlatfor|
  00440	00000000	 DCD         |dwEbootECCtype|
  00444		 |$LN71@OEMPlatfor|
  00444	00000000	 DCD         |?allocationPool@?1??OEMPlatformInit@@9@9|
  00448		 |$M48290|

			 ENDP  ; |OEMPlatformInit|

	EXPORT	|??_C@_1GG@GNNPKEFL@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAO?$AAE?$AAM?$AAP?$AAl?$AAa?$AAt?$AAf?$AAo?$AAr?$AAm?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?5?$AA?9?$AA?5?$AA?5?$AAD?$AAi?$AAs?$AAa?$AAb@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T48323| DCD	|$LN8@OEMPlatfor@2|
	DCD	0x40003c01

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GG@GNNPKEFL@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAO?$AAE?$AAM?$AAP?$AAl?$AAa?$AAt?$AAf?$AAo?$AAr?$AAm?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?5?$AA?9?$AA?5?$AA?5?$AAD?$AAi?$AAs?$AAa?$AAb@| DCB "I"
	DCB	0x0, "N", 0x0, "F", 0x0, "O", 0x0, ":", 0x0, " ", 0x0, "O"
	DCB	0x0, "E", 0x0, "M", 0x0, "P", 0x0, "l", 0x0, "a", 0x0, "t"
	DCB	0x0, "f", 0x0, "o", 0x0, "r", 0x0, "m", 0x0, "D", 0x0, "e"
	DCB	0x0, "i", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, " ", 0x0, "-"
	DCB	0x0, " ", 0x0, " ", 0x0, "D", 0x0, "i", 0x0, "s", 0x0, "a"
	DCB	0x0, "b", 0x0, "l", 0x0, "e", 0x0, " ", 0x0, "d", 0x0, "e"
	DCB	0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, " ", 0x0, "c"
	DCB	0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k", 0x0, "s", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OEMPlatformDeinit| PROC

; 317  : {

  00000		 |$LN8@OEMPlatfor@2|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M48320|
  00004	e3a03312	 mov         r3, #0x12, 6

; 318  :     OMAP_GPTIMER_REGS *pTimerRegs = OALPAtoUA(OMAP_GPTIMER1_REGS_PA);

  00008	e38309c6	 orr         r0, r3, #0xC6, 18
  0000c	e3a01000	 mov         r1, #0
  00010	eb000000	 bl          OALPAtoVA

; 319  : 
; 320  :     // Soft reset GPTIMER
; 321  :     OUTREG32(&pTimerRegs->TIOCP, SYSCONFIG_SOFTRESET);

  00014	e3a03002	 mov         r3, #2
  00018	e5803010	 str         r3, [r0, #0x10]
  0001c		 |$LL2@OEMPlatfor@2|

; 322  :     // While until done
; 323  :     while ((INREG32(&pTimerRegs->TISTAT) & GPTIMER_TISTAT_RESETDONE) == 0);

  0001c	e5903014	 ldr         r3, [r0, #0x14]
  00020	e3130001	 tst         r3, #1
  00024	0afffffc	 beq         |$LL2@OEMPlatfor@2|

; 324  : 
; 325  : 	// Disable device clocks that were used by the bootloader
; 326  : 	OALLog(L"INFO: OEMPlatformDeinit -  Disable device clocks\r\n");

  00028	e59f00bc	 ldr         r0, [pc, #0xBC]
  0002c	eb000000	 bl          NKDbgPrintfW

; 327  :     EnableDeviceClocks(OMAP_DEVICE_GPIO1, FALSE);

  00030	e3a01000	 mov         r1, #0
  00034	e3a00029	 mov         r0, #0x29
  00038	eb000000	 bl          EnableDeviceClocks

; 328  :     EnableDeviceClocks(OMAP_DEVICE_GPIO2, FALSE);

  0003c	e3a01000	 mov         r1, #0
  00040	e3a0002d	 mov         r0, #0x2D
  00044	eb000000	 bl          EnableDeviceClocks

; 329  :     EnableDeviceClocks(OMAP_DEVICE_GPIO3, FALSE);

  00048	e3a01000	 mov         r1, #0
  0004c	e3a0002e	 mov         r0, #0x2E
  00050	eb000000	 bl          EnableDeviceClocks

; 330  :     EnableDeviceClocks(OMAP_DEVICE_GPIO4, FALSE);

  00054	e3a01000	 mov         r1, #0
  00058	e3a0002f	 mov         r0, #0x2F
  0005c	eb000000	 bl          EnableDeviceClocks

; 331  :     EnableDeviceClocks(OMAP_DEVICE_GPIO5, FALSE);

  00060	e3a01000	 mov         r1, #0
  00064	e3a00030	 mov         r0, #0x30
  00068	eb000000	 bl          EnableDeviceClocks

; 332  :     EnableDeviceClocks(OMAP_DEVICE_GPIO6, FALSE);

  0006c	e3a01000	 mov         r1, #0
  00070	e3a00031	 mov         r0, #0x31
  00074	eb000000	 bl          EnableDeviceClocks

; 333  :     EnableDeviceClocks(OMAP_DEVICE_MCSPI1, FALSE);

  00078	e3a01000	 mov         r1, #0
  0007c	e3a0000f	 mov         r0, #0xF
  00080	eb000000	 bl          EnableDeviceClocks

; 334  :     EnableDeviceClocks(OMAP_DEVICE_GPTIMER2, FALSE);

  00084	e3a01000	 mov         r1, #0
  00088	e3a00035	 mov         r0, #0x35
  0008c	eb000000	 bl          EnableDeviceClocks

; 335  :     EnableDeviceClocks(OMAP_DEVICE_UART1, FALSE);

  00090	e3a01000	 mov         r1, #0
  00094	e3a0000a	 mov         r0, #0xA
  00098	eb000000	 bl          EnableDeviceClocks

; 336  : 	EnableDeviceClocks(OMAP_DEVICE_UART2, FALSE);

  0009c	e3a01000	 mov         r1, #0
  000a0	e3a0000b	 mov         r0, #0xB
  000a4	eb000000	 bl          EnableDeviceClocks

; 337  :     EnableDeviceClocks(OMAP_DEVICE_UART3, FALSE);

  000a8	e3a01000	 mov         r1, #0
  000ac	e3a0003d	 mov         r0, #0x3D
  000b0	eb000000	 bl          EnableDeviceClocks

; 338  :     EnableDeviceClocks(OMAP_DEVICE_MMC1, FALSE);

  000b4	e3a01000	 mov         r1, #0
  000b8	e3a00015	 mov         r0, #0x15
  000bc	eb000000	 bl          EnableDeviceClocks

; 339  :     EnableDeviceClocks(OMAP_DEVICE_MMC2, FALSE);

  000c0	e3a01000	 mov         r1, #0
  000c4	e3a00016	 mov         r0, #0x16
  000c8	eb000000	 bl          EnableDeviceClocks

; 340  :     EnableDeviceClocks(OMAP_DEVICE_I2C1, FALSE);

  000cc	e3a01000	 mov         r1, #0
  000d0	e3a0000c	 mov         r0, #0xC
  000d4	eb000000	 bl          EnableDeviceClocks

; 341  :     //EnableDeviceClocks(OMAP_DEVICE_I2C2,FALSE);
; 342  :     EnableDeviceClocks(OMAP_DEVICE_I2C3, FALSE); 

  000d8	e3a01000	 mov         r1, #0
  000dc	e3a0000e	 mov         r0, #0xE
  000e0	eb000000	 bl          EnableDeviceClocks

; 343  : }

  000e4	e49de004	 ldr         lr, [sp], #4
  000e8	e12fff1e	 bx          lr
  000ec		 |$LN9@OEMPlatfor@2|
  000ec		 |$LN10@OEMPlatfor@2|
  000ec	00000000	 DCD         |??_C@_1GG@GNNPKEFL@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAO?$AAE?$AAM?$AAP?$AAl?$AAa?$AAt?$AAf?$AAo?$AAr?$AAm?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?5?$AA?9?$AA?5?$AA?5?$AAD?$AAi?$AAs?$AAa?$AAb@|
  000f0		 |$M48321|

			 ENDP  ; |OEMPlatformDeinit|

	EXPORT	|__$ArrayPad$| [ DATA ]
	EXPORT	|OEMMultiBinNotify|
	EXPORT	|??_C@_1CK@FDDKFJJE@?$AA?9?$AAO?$AAE?$AAM?$AAM?$AAu?$AAl?$AAt?$AAi?$AAB?$AAi?$AAn?$AAN?$AAo?$AAt?$AAi?$AAf?$AAy?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CG@JHMEBKAH@?$AAS?$AAp?$AAi?$AAn?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAe?$AAv?$AAe?$AAr?$AA?4?$AA?4?$AA?4?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DC@FNKKGJOD@?$AAD?$AAo?$AAw?$AAn?$AAl?$AAo?$AAa?$AAd?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AAt?$AAy?$AAp?$AAe?$AA?3?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DM@CJMKOEPD@?$AAU?$AAn?$AAs?$AAu?$AAp?$AAp?$AAo?$AAr?$AAt?$AAe?$AAd?$AA?5?$AAd?$AAo?$AAw?$AAn?$AAl?$AAo?$AAa?$AAd?$AAe?$AAd?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_08CMMENMPK@logo?4nb0?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FC@BJIBFLEA@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAM?$AAu?$AAl?$AAt?$AAi?$AAX?$AAI?$AAP?$AA?5?$AAi?$AAm?$AAa?$AAg?$AAe?$AA?5?$AAi?$AAs?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAs?$AAu?$AAp@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GG@NLHBBJNL@?$AA?$FL?$AA?$CF?$AAd?$AA?$FN?$AA?3?$AA?5?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?$DN?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?5?$AA?5?$AAL?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$DN?$AA0?$AAx?$AA?$CF@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DK@OFMGKCPE@?$AAD?$AAo?$AAw?$AAn?$AAl?$AAo?$AAa?$AAd?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AAi?$AAn?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?3?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HM@MNPMBDFE@?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9@| [ DATA ] ; `string'
	IMPORT	|dpCurSettings|
	IMPORT	|OALVAtoPA|
	IMPORT	|__GSHandlerCheck|
	IMPORT	|__security_cookie|
	IMPORT	|strncmp|
	IMPORT	|memset|
	IMPORT	|__security_check_cookie|

  00000			 AREA	 |.pdata|, PDATA
|$T48362| DCD	|$LN43@OEMMultiBi|
	DCD	0xc0009702

  00000			 AREA	 |.xdata|, DATA
|$T48358| DCD	0xffffffdc

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CK@FDDKFJJE@?$AA?9?$AAO?$AAE?$AAM?$AAM?$AAu?$AAl?$AAt?$AAi?$AAB?$AAi?$AAn?$AAN?$AAo?$AAt?$AAi?$AAf?$AAy?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "O", 0x0, "E", 0x0, "M", 0x0, "M", 0x0, "u", 0x0, "l"
	DCB	0x0, "t", 0x0, "i", 0x0, "B", 0x0, "i", 0x0, "n", 0x0, "N"
	DCB	0x0, "o", 0x0, "t", 0x0, "i", 0x0, "f", 0x0, "y", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CG@JHMEBKAH@?$AAS?$AAp?$AAi?$AAn?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAe?$AAv?$AAe?$AAr?$AA?4?$AA?4?$AA?4?$AA?$AN?$AA?6?$AA?$AA@| DCB "S"
	DCB	0x0, "p", 0x0, "i", 0x0, "n", 0x0, " ", 0x0, "f", 0x0, "o"
	DCB	0x0, "r", 0x0, " ", 0x0, "e", 0x0, "v", 0x0, "e", 0x0, "r"
	DCB	0x0, ".", 0x0, ".", 0x0, ".", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DC@FNKKGJOD@?$AAD?$AAo?$AAw?$AAn?$AAl?$AAo?$AAa?$AAd?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AAt?$AAy?$AAp?$AAe?$AA?3?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "D"
	DCB	0x0, "o", 0x0, "w", 0x0, "n", 0x0, "l", 0x0, "o", 0x0, "a"
	DCB	0x0, "d", 0x0, " ", 0x0, "f", 0x0, "i", 0x0, "l", 0x0, "e"
	DCB	0x0, " ", 0x0, "t", 0x0, "y", 0x0, "p", 0x0, "e", 0x0, ":"
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DM@CJMKOEPD@?$AAU?$AAn?$AAs?$AAu?$AAp?$AAp?$AAo?$AAr?$AAt?$AAe?$AAd?$AA?5?$AAd?$AAo?$AAw?$AAn?$AAl?$AAo?$AAa?$AAd?$AAe?$AAd?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?$AN?$AA?6?$AA?$AA@| DCB "U"
	DCB	0x0, "n", 0x0, "s", 0x0, "u", 0x0, "p", 0x0, "p", 0x0, "o"
	DCB	0x0, "r", 0x0, "t", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "d"
	DCB	0x0, "o", 0x0, "w", 0x0, "n", 0x0, "l", 0x0, "o", 0x0, "a"
	DCB	0x0, "d", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "f", 0x0, "i"
	DCB	0x0, "l", 0x0, "e", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_08CMMENMPK@logo?4nb0?$AA@| DCB "logo.nb0", 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FC@BJIBFLEA@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAM?$AAu?$AAl?$AAt?$AAi?$AAX?$AAI?$AAP?$AA?5?$AAi?$AAm?$AAa?$AAg?$AAe?$AA?5?$AAi?$AAs?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAs?$AAu?$AAp@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "M", 0x0, "u", 0x0, "l", 0x0, "t", 0x0, "i", 0x0, "X"
	DCB	0x0, "I", 0x0, "P", 0x0, " ", 0x0, "i", 0x0, "m", 0x0, "a"
	DCB	0x0, "g", 0x0, "e", 0x0, " ", 0x0, "i", 0x0, "s", 0x0, " "
	DCB	0x0, "n", 0x0, "o", 0x0, "t", 0x0, " ", 0x0, "s", 0x0, "u"
	DCB	0x0, "p", 0x0, "p", 0x0, "o", 0x0, "r", 0x0, "t", 0x0, "e"
	DCB	0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GG@NLHBBJNL@?$AA?$FL?$AA?$CF?$AAd?$AA?$FN?$AA?3?$AA?5?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?$DN?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?5?$AA?5?$AAL?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$DN?$AA0?$AAx?$AA?$CF@| DCB "["
	DCB	0x0, "%", 0x0, "d", 0x0, "]", 0x0, ":", 0x0, " ", 0x0, "A"
	DCB	0x0, "d", 0x0, "d", 0x0, "r", 0x0, "e", 0x0, "s", 0x0, "s"
	DCB	0x0, "=", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8"
	DCB	0x0, "x", 0x0, " ", 0x0, " ", 0x0, "L", 0x0, "e", 0x0, "n"
	DCB	0x0, "g", 0x0, "t", 0x0, "h", 0x0, "=", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, " ", 0x0, " "
	DCB	0x0, "S", 0x0, "a", 0x0, "v", 0x0, "e", 0x0, "=", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DK@OFMGKCPE@?$AAD?$AAo?$AAw?$AAn?$AAl?$AAo?$AAa?$AAd?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AAi?$AAn?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?3?$AA?$AN?$AA?6?$AA?$AA@| DCB "D"
	DCB	0x0, "o", 0x0, "w", 0x0, "n", 0x0, "l", 0x0, "o", 0x0, "a"
	DCB	0x0, "d", 0x0, " ", 0x0, "f", 0x0, "i", 0x0, "l", 0x0, "e"
	DCB	0x0, " ", 0x0, "i", 0x0, "n", 0x0, "f", 0x0, "o", 0x0, "r"
	DCB	0x0, "m", 0x0, "a", 0x0, "t", 0x0, "i", 0x0, "o", 0x0, "n"
	DCB	0x0, ":", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HM@MNPMBDFE@?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9@| DCB "-"
	DCB	0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-"
	DCB	0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-"
	DCB	0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-"
	DCB	0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-"
	DCB	0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-"
	DCB	0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-"
	DCB	0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-"
	DCB	0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-"
	DCB	0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-"
	DCB	0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000	00000000	 DCD         |__GSHandlerCheck|
  00004	00000000	 DCD         |$T48358|

  00008		 |OEMMultiBinNotify| PROC

; 830  : {

  00008		 |$LN43@OEMMultiBi|
  00008	e92d47f0	 stmdb       sp!, {r4 - r10, lr}
  0000c	e24ddf43	 sub         sp, sp, #0x43, 30
  00010		 |$M48359|
  00010	e1a06000	 mov         r6, r0
  00014	e59f3244	 ldr         r3, [pc, #0x244]
  00018	e5933000	 ldr         r3, [r3]
  0001c	e58d3108	 str         r3, [sp, #0x108]
  00020	e3a03102	 mov         r3, #2, 2

; 831  :     BOOL rc = FALSE;
; 832  :     UINT32 base = OALVAtoPA((UCHAR*)IMAGE_WINCE_CODE_CA);

  00024	e3830a02	 orr         r0, r3, #2, 20
  00028	eb000000	 bl          OALVAtoPA
  0002c	e1a0a000	 mov         r10, r0

; 833  :     UINT32 start, length;
; 834  :     UINT32 ix;
; 835  : 
; 836  :     //OALMSG(OAL_INFO, (L"+OEMMultiBinNotify(0x%08x -> %d)\r\n", pInfo, pInfo->dwNumRegions));
; 837  :     OALMSG(1, (L"Download file information:\r\n"));

  00030	e59f0224	 ldr         r0, [pc, #0x224]
  00034	eb000000	 bl          NKDbgPrintfW

; 838  :     OALMSG(1, (L"-----------------------------------------------------------\r\n"));

  00038	e59f0210	 ldr         r0, [pc, #0x210]
  0003c	eb000000	 bl          NKDbgPrintfW

; 839  : 
; 840  :     // Copy information to EBOOT structure and set also save address
; 841  :     g_eboot.numRegions = pInfo->dwNumRegions;

  00040	e59f5210	 ldr         r5, [pc, #0x210]
  00044	e5963000	 ldr         r3, [r6]

; 842  :     for (ix = 0; ix < pInfo->dwNumRegions; ix++)

  00048	e3a09000	 mov         r9, #0
  0004c	e5853008	 str         r3, [r5, #8]
  00050	e5963000	 ldr         r3, [r6]
  00054	e3530000	 cmp         r3, #0
  00058	9a000014	 bls         |$LN22@OEMMultiBi|

; 843  : 	{
; 844  :         g_eboot.region[ix].start = pInfo->Region[ix].dwRegionStart;

  0005c	e1a07005	 mov         r7, r5
  00060	e1a08006	 mov         r8, r6
  00064		 |$LL24@OEMMultiBi|
  00064	e5983004	 ldr         r3, [r8, #4]

; 845  :         g_eboot.region[ix].length = pInfo->Region[ix].dwRegionLength;
; 846  :         g_eboot.region[ix].base = base;
; 847  :         base += g_eboot.region[ix].length;
; 848  :         OALMSG(1, (L"[%d]: Address=0x%08x  Length=0x%08x  Save=0x%08x\r\n",
; 849  :             ix, g_eboot.region[ix].start, g_eboot.region[ix].length,g_eboot.region[ix].base));

  00068	e59f01e4	 ldr         r0, [pc, #0x1E4]
  0006c	e1a0e00a	 mov         lr, r10
  00070	e5873010	 str         r3, [r7, #0x10]
  00074	e5983008	 ldr         r3, [r8, #8]
  00078	e5972010	 ldr         r2, [r7, #0x10]
  0007c	e1a01009	 mov         r1, r9
  00080	e1a04003	 mov         r4, r3
  00084	e587a018	 str         r10, [r7, #0x18]
  00088	e08aa004	 add         r10, r10, r4
  0008c	e5873014	 str         r3, [r7, #0x14]
  00090	e58de000	 str         lr, [sp]
  00094	eb000000	 bl          NKDbgPrintfW
  00098	e5963000	 ldr         r3, [r6]
  0009c	e2899001	 add         r9, r9, #1
  000a0	e2888f43	 add         r8, r8, #0x43, 30
  000a4	e1590003	 cmp         r9, r3
  000a8	e287700c	 add         r7, r7, #0xC
  000ac	3affffec	 bcc         |$LL24@OEMMultiBi|
  000b0		 |$LN22@OEMMultiBi|

; 850  : 	}
; 851  :     OALMSG(1, (L"-----------------------------------------------------------\r\n"));

  000b0	e59f0198	 ldr         r0, [pc, #0x198]
  000b4	eb000000	 bl          NKDbgPrintfW

; 852  : 
; 853  : #ifndef IMGMULTIXIP
; 854  : 
; 855  :     //Determine type of image downloaded
; 856  :     if (g_eboot.numRegions > 1) 

  000b8	e5953008	 ldr         r3, [r5, #8]
  000bc	e3530001	 cmp         r3, #1
  000c0	9a000005	 bls         |$LN21@OEMMultiBi|

; 857  :     {
; 858  :         OALMSG(OAL_ERROR, (L"ERROR: MultiXIP image is not supported\r\n"));

  000c4	e59f3178	 ldr         r3, [pc, #0x178]
  000c8	e5933440	 ldr         r3, [r3, #0x440]
  000cc	e3130001	 tst         r3, #1
  000d0	0a000048	 beq         |$LN36@OEMMultiBi|
  000d4	e59f0170	 ldr         r0, [pc, #0x170]

; 859  :         goto cleanUp;

  000d8	ea000045	 b           |$LN38@OEMMultiBi|
  000dc		 |$LN21@OEMMultiBi|

; 860  :     }
; 861  : #endif
; 862  : 
; 863  :     base = g_eboot.region[0].base;
; 864  :     start = g_eboot.region[0].start;

  000dc	e5951010	 ldr         r1, [r5, #0x10]
  000e0	e3a03101	 mov         r3, #1, 2

; 865  :     length = g_eboot.region[0].length; 
; 866  :     
; 867  :     if (start == IMAGE_XLDR_CODE_PA)

  000e4	e3833602	 orr         r3, r3, #2, 12
  000e8	e1510003	 cmp         r1, r3
  000ec	e5950018	 ldr         r0, [r5, #0x18]
  000f0	e5954014	 ldr         r4, [r5, #0x14]

; 868  : 	{
; 869  :         g_eboot.type = DOWNLOAD_TYPE_XLDR;

  000f4	03a03003	 moveq       r3, #3
  000f8	0a00000e	 beq         |$LN40@OEMMultiBi|

; 870  :         memset(OALPAtoCA(base), 0xFF, length);

  000fc	e3a03487	 mov         r3, #0x87, 8

; 871  : 	} 
; 872  :     else if (start == IMAGE_EBOOT_CODE_CA)

  00100	e383360e	 orr         r3, r3, #0xE, 12
  00104	e1510003	 cmp         r1, r3

; 873  : 	{
; 874  :         g_eboot.type = DOWNLOAD_TYPE_EBOOT;

  00108	03a03004	 moveq       r3, #4
  0010c	0a000009	 beq         |$LN40@OEMMultiBi|

; 875  :         memset(OALPAtoCA(base), 0xFF, length);

  00110	e3a03103	 mov         r3, #3, 2

; 876  : 	}
; 877  :     else if (start == (IMAGE_WINCE_CODE_CA + NAND_ROMOFFSET))

  00114	e3833a02	 orr         r3, r3, #2, 20
  00118	e1510003	 cmp         r1, r3

; 878  : 	{
; 879  :         g_eboot.type = DOWNLOAD_TYPE_FLASHNAND;

  0011c	03a03006	 moveq       r3, #6
  00120	0a000004	 beq         |$LN40@OEMMultiBi|

; 880  :         memset(OALPAtoCA(base), 0xFF, length);

  00124	e3a0320e	 mov         r3, #0xE, 4

; 881  : 	} 
; 882  : #ifdef IMGMULTIXIP
; 883  :     else if (start == (IMAGE_WINCE_EXT_CA))
; 884  : 	{
; 885  :         g_eboot.type = DOWNLOAD_TYPE_EXT;
; 886  :         memset(OALPAtoCA(base), 0xFF, length);
; 887  : 	} 
; 888  : #endif	
; 889  :     else if (start == (IMAGE_WINCE_CODE_CA + NOR_ROMOFFSET))

  00128	e3833a02	 orr         r3, r3, #2, 20
  0012c	e1510003	 cmp         r1, r3
  00130	1a000007	 bne         |$LN14@OEMMultiBi|

; 890  : 	{
; 891  :         g_eboot.type = DOWNLOAD_TYPE_FLASHNOR;

  00134	e3a03007	 mov         r3, #7
  00138		 |$LN40@OEMMultiBi|

; 892  :         memset(OALPAtoCA(base), 0xFF, length);

  00138	e3a01001	 mov         r1, #1
  0013c	e5853004	 str         r3, [r5, #4]
  00140	eb000000	 bl          OALPAtoVA
  00144	e1a02004	 mov         r2, r4
  00148	e3a010ff	 mov         r1, #0xFF
  0014c	eb000000	 bl          memset
  00150	ea00002d	 b           |$LN4@OEMMultiBi|
  00154		 |$LN14@OEMMultiBi|

; 893  : 	} 
; 894  : 	else if (start == 0) // Probably a NB0 file, let's fint out

  00154	e3510000	 cmp         r1, #0
  00158	1a000029	 bne         |$LN12@OEMMultiBi|

; 895  : 	{
; 896  : 		// Convert the file name to lower case
; 897  : 		CHAR szFileName[MAX_PATH];
; 898  : 		int i = 0;
; 899  : 		int fileExtPos = 0;
; 900  : 
; 901  : 		while ((pInfo->Region[0].szFileName[i] != '\0') && (i < MAX_PATH))

  0015c	e1d630dc	 ldrsb       r3, [r6, #0xC]
  00160	e3a00000	 mov         r0, #0
  00164	e3530000	 cmp         r3, #0
  00168	0a00000f	 beq         |$LN37@OEMMultiBi|
  0016c	e28d3004	 add         r3, sp, #4
  00170	e0431006	 sub         r1, r3, r6
  00174	e1a02006	 mov         r2, r6
  00178		 |$LL11@OEMMultiBi|
  00178	e3500f41	 cmp         r0, #0x41, 30
  0017c	aa00000a	 bge         |$LN37@OEMMultiBi|

; 902  : 		{
; 903  : 			if((pInfo->Region[0].szFileName[i] >= 'A') && (pInfo->Region[0].szFileName[i] <= 'Z')) 

  00180	e1d230dc	 ldrsb       r3, [r2, #0xC]
  00184	e3530041	 cmp         r3, #0x41
  00188	ba000001	 blt         |$LN9@OEMMultiBi|
  0018c	e353005a	 cmp         r3, #0x5A

; 904  : 			{
; 905  : 				szFileName[i] = (pInfo->Region[0].szFileName[i] - 'A' + 'a'); 

  00190	d2833020	 addle       r3, r3, #0x20
  00194		 |$LN9@OEMMultiBi|

; 906  : 			}
; 907  : 			else
; 908  : 			{
; 909  : 				szFileName[i] = pInfo->Region[0].szFileName[i];

  00194	e7c13002	 strb        r3, [r1, +r2]

; 910  : 			}
; 911  : 
; 912  : 			// Keep track of file extension position
; 913  : 			if (szFileName[i] == '.')
; 914  : 			{
; 915  : 				fileExtPos = i;
; 916  : 			}
; 917  : 			i++;

  00198	e2822001	 add         r2, r2, #1
  0019c	e1d230dc	 ldrsb       r3, [r2, #0xC]
  001a0	e2800001	 add         r0, r0, #1
  001a4	e3530000	 cmp         r3, #0
  001a8	1afffff2	 bne         |$LL11@OEMMultiBi|
  001ac		 |$LN37@OEMMultiBi|

; 918  : 		}
; 919  : 
; 920  : 		// Copy string terminator as well
; 921  : 		szFileName[i] = pInfo->Region[0].szFileName[i];

  001ac	e0863000	 add         r3, r6, r0
  001b0	e1d320dc	 ldrsb       r2, [r3, #0xC]

; 922  : 
; 923  : 		// Check if we support this file
; 924  : 		if (strncmp(szFileName, LOGO_NB0_FILE, LOGO_NB0_FILE_LEN) == 0)

  001b4	e59f108c	 ldr         r1, [pc, #0x8C]
  001b8	e28d3004	 add         r3, sp, #4
  001bc	e7c02003	 strb        r2, [r0, +r3]
  001c0	e3a02008	 mov         r2, #8
  001c4	e28d0004	 add         r0, sp, #4
  001c8	eb000000	 bl          strncmp
  001cc	e3500000	 cmp         r0, #0

; 925  : 		{
; 926  : 			// Remap the start address to the correct NAND location of the logo
; 927  : 			g_eboot.region[0].start = IMAGE_XLDR_BOOTSEC_NAND_SIZE + IMAGE_EBOOT_BOOTSEC_NAND_SIZE;

  001d0	03a03703	 moveq       r3, #3, 14
  001d4	05853010	 streq       r3, [r5, #0x10]

; 928  : 			g_eboot.type = DOWNLOAD_TYPE_LOGO;

  001d8	03a03008	 moveq       r3, #8
  001dc	0a000009	 beq         |$LN39@OEMMultiBi|

; 929  : 		}
; 930  : 		else
; 931  : 		{
; 932  : 		    OALMSG(OAL_ERROR, (L"Unsupported downloaded file\r\n"));

  001e0	e59f305c	 ldr         r3, [pc, #0x5C]
  001e4	e5933440	 ldr         r3, [r3, #0x440]
  001e8	e3130001	 tst         r3, #1
  001ec	0a000001	 beq         |$LN36@OEMMultiBi|
  001f0	e59f0048	 ldr         r0, [pc, #0x48]
  001f4		 |$LN38@OEMMultiBi|
  001f4	eb000000	 bl          NKDbgPrintfW
  001f8		 |$LN36@OEMMultiBi|

; 942  :     
; 943  :     rc = TRUE;
; 944  : 
; 945  : cleanUp:
; 946  :     if (!rc) 
; 947  : 	{
; 948  :         OALMSG(1, (L"Spin for ever...\r\n"));

  001f8	e59f003c	 ldr         r0, [pc, #0x3C]
  001fc	eb000000	 bl          NKDbgPrintfW
  00200		 |$LL2@OEMMultiBi|

; 949  :         for(;;);

  00200	eafffffe	 b           |$LL2@OEMMultiBi|
  00204		 |$LN12@OEMMultiBi|

; 933  : 			goto cleanUp;
; 934  : 		}
; 935  : 	}
; 936  :     else 
; 937  : 	{
; 938  :         g_eboot.type = DOWNLOAD_TYPE_RAM; // 1

  00204	e3a03001	 mov         r3, #1
  00208		 |$LN39@OEMMultiBi|
  00208	e5853004	 str         r3, [r5, #4]
  0020c		 |$LN4@OEMMultiBi|
  0020c	e5951004	 ldr         r1, [r5, #4]

; 939  : 	}
; 940  : 
; 941  :     OALMSG(1, (L"Download file type: %d\r\n", g_eboot.type));

  00210	e59f0020	 ldr         r0, [pc, #0x20]
  00214	eb000000	 bl          NKDbgPrintfW

; 950  : 	}
; 951  :     OALMSG(1, (L"-OEMMultiBinNotify\r\n"));

  00218	e59f0014	 ldr         r0, [pc, #0x14]
  0021c		 |$cleanUp$48006|
  0021c	eb000000	 bl          NKDbgPrintfW
  00220	e59d0108	 ldr         r0, [sp, #0x108]
  00224	eb000000	 bl          __security_check_cookie

; 952  : }

  00228	e28ddf43	 add         sp, sp, #0x43, 30
  0022c	e8bd47f0	 ldmia       sp!, {r4 - r10, lr}
  00230	e12fff1e	 bx          lr
  00234		 |$LN44@OEMMultiBi|
  00234		 |$LN45@OEMMultiBi|
  00234	00000000	 DCD         |??_C@_1CK@FDDKFJJE@?$AA?9?$AAO?$AAE?$AAM?$AAM?$AAu?$AAl?$AAt?$AAi?$AAB?$AAi?$AAn?$AAN?$AAo?$AAt?$AAi?$AAf?$AAy?$AA?$AN?$AA?6?$AA?$AA@|
  00238		 |$LN46@OEMMultiBi|
  00238	00000000	 DCD         |??_C@_1DC@FNKKGJOD@?$AAD?$AAo?$AAw?$AAn?$AAl?$AAo?$AAa?$AAd?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AAt?$AAy?$AAp?$AAe?$AA?3?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  0023c		 |$LN47@OEMMultiBi|
  0023c	00000000	 DCD         |??_C@_1CG@JHMEBKAH@?$AAS?$AAp?$AAi?$AAn?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAe?$AAv?$AAe?$AAr?$AA?4?$AA?4?$AA?4?$AA?$AN?$AA?6?$AA?$AA@|
  00240		 |$LN48@OEMMultiBi|
  00240	00000000	 DCD         |??_C@_1DM@CJMKOEPD@?$AAU?$AAn?$AAs?$AAu?$AAp?$AAp?$AAo?$AAr?$AAt?$AAe?$AAd?$AA?5?$AAd?$AAo?$AAw?$AAn?$AAl?$AAo?$AAa?$AAd?$AAe?$AAd?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?$AN?$AA?6?$AA?$AA@|
  00244		 |$LN49@OEMMultiBi|
  00244	00000000	 DCD         |dpCurSettings|
  00248		 |$LN50@OEMMultiBi|
  00248	00000000	 DCD         |??_C@_08CMMENMPK@logo?4nb0?$AA@|
  0024c		 |$LN51@OEMMultiBi|
  0024c	00000000	 DCD         |??_C@_1FC@BJIBFLEA@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAM?$AAu?$AAl?$AAt?$AAi?$AAX?$AAI?$AAP?$AA?5?$AAi?$AAm?$AAa?$AAg?$AAe?$AA?5?$AAi?$AAs?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAs?$AAu?$AAp@|
  00250		 |$LN52@OEMMultiBi|
  00250	00000000	 DCD         |??_C@_1HM@MNPMBDFE@?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9@|
  00254		 |$LN53@OEMMultiBi|
  00254	00000000	 DCD         |??_C@_1GG@NLHBBJNL@?$AA?$FL?$AA?$CF?$AAd?$AA?$FN?$AA?3?$AA?5?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?$DN?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?5?$AA?5?$AAL?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$DN?$AA0?$AAx?$AA?$CF@|
  00258		 |$LN54@OEMMultiBi|
  00258	00000000	 DCD         |g_eboot|
  0025c		 |$LN55@OEMMultiBi|
  0025c	00000000	 DCD         |??_C@_1DK@OFMGKCPE@?$AAD?$AAo?$AAw?$AAn?$AAl?$AAo?$AAa?$AAd?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AAi?$AAn?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?3?$AA?$AN?$AA?6?$AA?$AA@|
  00260		 |$LN56@OEMMultiBi|
  00260	00000000	 DCD         |__security_cookie|
  00264		 |$M48360|

			 ENDP  ; |OEMMultiBinNotify|

	EXPORT	|OEMMapMemAddr|
	EXPORT	|??_C@_1GC@BMCFFGLH@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAE?$AAM?$AAM?$AAa?$AAp?$AAM?$AAe?$AAm?$AAA?$AAd?$AAd?$AAr?$AA?3?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAd?$AAo@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T48390| DCD	|$LN14@OEMMapMemA|
	DCD	0x40002701

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GC@BMCFFGLH@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAE?$AAM?$AAM?$AAa?$AAp?$AAM?$AAe?$AAm?$AAA?$AAd?$AAd?$AAr?$AA?3?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAd?$AAo@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "O", 0x0, "E", 0x0, "M", 0x0, "M", 0x0, "a", 0x0, "p"
	DCB	0x0, "M", 0x0, "e", 0x0, "m", 0x0, "A", 0x0, "d", 0x0, "d"
	DCB	0x0, "r", 0x0, ":", 0x0, " ", 0x0, "I", 0x0, "n", 0x0, "v"
	DCB	0x0, "a", 0x0, "l", 0x0, "i", 0x0, "d", 0x0, " ", 0x0, "d"
	DCB	0x0, "o", 0x0, "w", 0x0, "n", 0x0, "l", 0x0, "o", 0x0, "a"
	DCB	0x0, "d", 0x0, " ", 0x0, "t", 0x0, "y", 0x0, "p", 0x0, "e"
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OEMMapMemAddr| PROC

; 965  : {

  00000		 |$LN14@OEMMapMemA|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M48387|
  00004	e1a02001	 mov         r2, r1

; 966  :     UINT8 *pAddress = NULL;
; 967  : 
; 968  :     //OALMSG(1, (L"+OEMMapMemAddr(0x%08x, 0x%08x)\r\n", image, address));
; 969  :     //OALMSG(1, (L"+OEMMapMemAddr(g_eboot.type = 0x%08x)\r\n", g_eboot.type));
; 970  :     
; 971  :     switch (g_eboot.type) {

  00008	e59f3088	 ldr         r3, [pc, #0x88]
  0000c	e3a04000	 mov         r4, #0
  00010	e5931004	 ldr         r1, [r3, #4]
  00014	e3510001	 cmp         r1, #1
  00018	0a000018	 beq         |$LN4@OEMMapMemA|
  0001c	e3510002	 cmp         r1, #2
  00020	9a000007	 bls         |$LN1@OEMMapMemA|
  00024	e3510004	 cmp         r1, #4
  00028	9a000010	 bls         |$LN5@OEMMapMemA|
  0002c	e3510006	 cmp         r1, #6
  00030	0a00000c	 beq         |$LN3@OEMMapMemA|
  00034	e3510007	 cmp         r1, #7
  00038	0a000008	 beq         |$LN2@OEMMapMemA|
  0003c	e3510008	 cmp         r1, #8
  00040	0a00000a	 beq         |$LN5@OEMMapMemA|
  00044		 |$LN1@OEMMapMemA|

; 993  : 		
; 994  : #ifdef IMGMULTIXIP
; 995  : 	case DOWNLOAD_TYPE_EXT:
; 996  :         pAddress = (UINT8*) (address);
; 997  :         break;
; 998  : #endif
; 999  : 
; 1000 :     default:
; 1001 :         OALMSG(OAL_ERROR, (L"ERROR: OEMMapMemAddr: " L"Invalid download type %d\r\n", g_eboot.type
; 1002 :         ));

  00044	e59f3048	 ldr         r3, [pc, #0x48]
  00048	e5933440	 ldr         r3, [r3, #0x440]
  0004c	e3130001	 tst         r3, #1
  00050	0a00000b	 beq         |$LN11@OEMMapMemA|
  00054	e59f0034	 ldr         r0, [pc, #0x34]
  00058	eb000000	 bl          NKDbgPrintfW
  0005c	ea000008	 b           |$LN11@OEMMapMemA|
  00060		 |$LN2@OEMMapMemA|

; 989  : 
; 990  : 	case DOWNLOAD_TYPE_FLASHNOR:
; 991  :         pAddress = (UINT8*) (address - NOR_ROMOFFSET);

  00060	e2424206	 sub         r4, r2, #6, 4

; 992  :         break;

  00064	ea000006	 b           |$LN11@OEMMapMemA|
  00068		 |$LN3@OEMMapMemA|

; 984  :         break;
; 985  : 
; 986  :     case DOWNLOAD_TYPE_FLASHNAND:
; 987  :         pAddress = (UINT8*) (address - NAND_ROMOFFSET);

  00068	e2424101	 sub         r4, r2, #1, 2

; 988  :         break;

  0006c	ea000004	 b           |$LN11@OEMMapMemA|
  00070		 |$LN5@OEMMapMemA|

; 972  : 
; 973  :         
; 974  :     case DOWNLOAD_TYPE_XLDR: // 3
; 975  :     case DOWNLOAD_TYPE_EBOOT:   
; 976  : 	case DOWNLOAD_TYPE_LOGO:
; 977  :         //  Map to scratch RAM prior to flashing
; 978  :         pAddress = (UINT8*)g_eboot.region[0].base + (address - image);

  00070	e5933018	 ldr         r3, [r3, #0x18]
  00074	e0433000	 sub         r3, r3, r0
  00078	e0834002	 add         r4, r3, r2

; 979  :         break;

  0007c	ea000000	 b           |$LN11@OEMMapMemA|
  00080		 |$LN4@OEMMapMemA|

; 980  : 
; 981  :     case DOWNLOAD_TYPE_RAM: // 1
; 982  :         //  RAM based NK.BIN and EBOOT.BIN files are given in virtual memory addresses
; 983  :         pAddress = (UINT8*)address;

  00080	e1a04002	 mov         r4, r2
  00084		 |$LN11@OEMMapMemA|

; 1003 :     }
; 1004 : 
; 1005 :     //OALMSGS(1, (L"-OEMMapMemAddr(pAddress = 0x%08x)\r\n", pAddress));
; 1006 :     return pAddress;
; 1007 : }

  00084	e1a00004	 mov         r0, r4
  00088	e8bd4010	 ldmia       sp!, {r4, lr}
  0008c	e12fff1e	 bx          lr
  00090		 |$LN15@OEMMapMemA|
  00090		 |$LN16@OEMMapMemA|
  00090	00000000	 DCD         |??_C@_1GC@BMCFFGLH@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAE?$AAM?$AAM?$AAa?$AAp?$AAM?$AAe?$AAm?$AAA?$AAd?$AAd?$AAr?$AA?3?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAd?$AAo@|
  00094		 |$LN17@OEMMapMemA|
  00094	00000000	 DCD         |dpCurSettings|
  00098		 |$LN18@OEMMapMemA|
  00098	00000000	 DCD         |g_eboot|
  0009c		 |$M48388|

			 ENDP  ; |OEMMapMemAddr|

	EXPORT	|OEMIsFlashAddr|

  00000			 AREA	 |.pdata|, PDATA
|$T48404| DCD	|$LN9@OEMIsFlash|
	DCD	0x40000e00
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OEMIsFlashAddr| PROC

; 1020 : {

  00000		 |$LN9@OEMIsFlash|
  00000		 |$M48401|

; 1021 :     BOOL rc;
; 1022 : 
; 1023 : 	UNREFERENCED_PARAMETER(address);
; 1024 : 
; 1025 :     //OALMSG(OAL_INFO, (L"+OEMIsFlashAddr(0x%08x)\r\n", address));
; 1026 : 
; 1027 :     // Depending on download type
; 1028 :     switch (g_eboot.type)

  00000	e59f302c	 ldr         r3, [pc, #0x2C]
  00004	e5933004	 ldr         r3, [r3, #4]
  00008	e3530003	 cmp         r3, #3
  0000c	3a000006	 bcc         |$LN1@OEMIsFlash|
  00010	e3530004	 cmp         r3, #4
  00014	9a000002	 bls         |$LN2@OEMIsFlash|
  00018	e2433006	 sub         r3, r3, #6
  0001c	e3530003	 cmp         r3, #3
  00020	8a000001	 bhi         |$LN1@OEMIsFlash|
  00024		 |$LN2@OEMIsFlash|

; 1029 :     {
; 1030 :         case DOWNLOAD_TYPE_XLDR:
; 1031 :         case DOWNLOAD_TYPE_EBOOT:
; 1032 :         case DOWNLOAD_TYPE_LOGO:
; 1033 :         case DOWNLOAD_TYPE_FLASHNAND:
; 1034 :         case DOWNLOAD_TYPE_FLASHNOR:
; 1035 :         case DOWNLOAD_TYPE_EXT:
; 1036 :             rc = TRUE;

  00024	e3a00001	 mov         r0, #1

; 1040 :             break;
; 1041 :     }
; 1042 : 
; 1043 :     //OALMSG(OAL_INFO, (L"-OEMIsFlashAddr(rc = %d)\r\n", rc));
; 1044 :     return rc;
; 1045 : }

  00028	e12fff1e	 bx          lr
  0002c		 |$LN1@OEMIsFlash|

; 1037 :             break;
; 1038 :         default:
; 1039 :             rc = FALSE;

  0002c	e3a00000	 mov         r0, #0

; 1040 :             break;
; 1041 :     }
; 1042 : 
; 1043 :     //OALMSG(OAL_INFO, (L"-OEMIsFlashAddr(rc = %d)\r\n", rc));
; 1044 :     return rc;
; 1045 : }

  00030	e12fff1e	 bx          lr
  00034		 |$LN10@OEMIsFlash|
  00034		 |$LN11@OEMIsFlash|
  00034	00000000	 DCD         |g_eboot|
  00038		 |$M48402|

			 ENDP  ; |OEMIsFlashAddr|

	EXPORT	|OEMReadData|
	IMPORT	|BLEthReadData|
	IMPORT	|BLSDCardReadData|

  00000			 AREA	 |.pdata|, PDATA
|$T48418| DCD	|$LN9@OEMReadDat|
	DCD	0x40001201
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OEMReadData| PROC

; 1055 : {

  00000		 |$LN9@OEMReadDat|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M48415|
  00004	e1a02000	 mov         r2, r0

; 1056 :     BOOL rc = FALSE;
; 1057 :     switch (g_eboot.bootDeviceType)

  00008	e59f3034	 ldr         r3, [pc, #0x34]
  0000c	e3a00000	 mov         r0, #0
  00010	e5933000	 ldr         r3, [r3]
  00014	e3530002	 cmp         r3, #2
  00018	0a000005	 beq         |$LN1@OEMReadDat|
  0001c	e3530004	 cmp         r3, #4
  00020	1a000005	 bne         |$LN3@OEMReadDat|

; 1058 :         {
; 1059 :         #if BUILDING_EBOOT_SD
; 1060 :         case BOOT_SDCARD_TYPE: // 4
; 1061 :         	//OALMSG(1, (L"OEMReadData(size = 0x%x, pData = 0x%x)\r\n", size, pData));
; 1062 :             rc = BLSDCardReadData(size, pData);

  00024	e1a00002	 mov         r0, r2
  00028	eb000000	 bl          BLSDCardReadData

; 1067 :             break;
; 1068 :         }
; 1069 :     return rc;
; 1070 : }

  0002c	e49de004	 ldr         lr, [sp], #4
  00030	e12fff1e	 bx          lr
  00034		 |$LN1@OEMReadDat|

; 1063 :             break;
; 1064 :         #endif
; 1065 :         case OAL_KITL_TYPE_ETH: // 2
; 1066 :             rc = BLEthReadData(size, pData);

  00034	e1a00002	 mov         r0, r2
  00038	eb000000	 bl          BLEthReadData
  0003c		 |$LN3@OEMReadDat|

; 1067 :             break;
; 1068 :         }
; 1069 :     return rc;
; 1070 : }

  0003c	e49de004	 ldr         lr, [sp], #4
  00040	e12fff1e	 bx          lr
  00044		 |$LN10@OEMReadDat|
  00044		 |$LN11@OEMReadDat|
  00044	00000000	 DCD         |g_eboot|
  00048		 |$M48416|

			 ENDP  ; |OEMReadData|

	EXPORT	|OEMShowProgress|
	EXPORT	|??_C@_13JOFGPIOO@?$AA?4?$AA?$AA@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T48427| DCD	|$LN5@OEMShowPro@2|
	DCD	0x40000601

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_13JOFGPIOO@?$AA?4?$AA?$AA@| DCB ".", 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OEMShowProgress| PROC

; 1080 : {

  00000		 |$LN5@OEMShowPro@2|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M48424|

; 1081 :     UNREFERENCED_PARAMETER(packetNumber);
; 1082 :     RETAILMSG(1,(TEXT(".")));

  00004	e59f0008	 ldr         r0, [pc, #8]
  00008	eb000000	 bl          NKDbgPrintfW

; 1083 : }

  0000c	e49de004	 ldr         lr, [sp], #4
  00010	e12fff1e	 bx          lr
  00014		 |$LN6@OEMShowPro@2|
  00014		 |$LN7@OEMShowPro@2|
  00014	00000000	 DCD         |??_C@_13JOFGPIOO@?$AA?4?$AA?$AA@|
  00018		 |$M48425|

			 ENDP  ; |OEMShowProgress|

	EXPORT	|OALGetTickCount|

  00000			 AREA	 |.pdata|, PDATA
|$T48439| DCD	|$LN5@OALGetTick|
	DCD	0x40000901
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALGetTickCount| PROC

; 1090 : {

  00000		 |$LN5@OALGetTick|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M48436|
  00004	e3a03312	 mov         r3, #0x12, 6

; 1091 :     OMAP_GPTIMER_REGS *pGPTimerRegs = OALPAtoUA(OMAP_GPTIMER1_REGS_PA);

  00008	e38309c6	 orr         r0, r3, #0xC6, 18
  0000c	e3a01000	 mov         r1, #0
  00010	eb000000	 bl          OALPAtoVA

; 1092 :     return INREG32(&pGPTimerRegs->TCRR) >> 5;

  00014	e5903028	 ldr         r3, [r0, #0x28]
  00018	e1a002a3	 mov         r0, r3, lsr #5

; 1093 : }

  0001c	e49de004	 ldr         lr, [sp], #4
  00020	e12fff1e	 bx          lr
  00024		 |$M48437|

			 ENDP  ; |OALGetTickCount|

	EXPORT	|OEMKitlGetSecs|

  00000			 AREA	 |.pdata|, PDATA
|$T48453| DCD	|$LN7@OEMKitlGet|
	DCD	0x40000d01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OEMKitlGetSecs| PROC

; 1102 : {

  00000		 |$LN7@OEMKitlGet|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M48450|
  00004	e3a03312	 mov         r3, #0x12, 6

; 1103 :     return OALGetTickCount()/1000;

  00008	e38309c6	 orr         r0, r3, #0xC6, 18
  0000c	e3a01000	 mov         r1, #0
  00010	eb000000	 bl          OALPAtoVA
  00014	e5903028	 ldr         r3, [r0, #0x28]
  00018	e59f2010	 ldr         r2, [pc, #0x10]
  0001c	e1a012a3	 mov         r1, r3, lsr #5
  00020	e0823291	 umull       r3, r2, r1, r2
  00024	e1a00322	 mov         r0, r2, lsr #6

; 1104 : }

  00028	e49de004	 ldr         lr, [sp], #4
  0002c	e12fff1e	 bx          lr
  00030		 |$LN8@OEMKitlGet|
  00030		 |$LN9@OEMKitlGet|
  00030	10624dd3	 DCD         0x10624dd3
  00034		 |$M48451|

			 ENDP  ; |OEMKitlGetSecs|

	EXPORT	|GetDisplayResolutionFromBootArgs|

  00000			 AREA	 |.pdata|, PDATA
|$T48463| DCD	|$LN5@GetDisplay|
	DCD	0x40000500
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |GetDisplayResolutionFromBootArgs| PROC

; 1107 : {

  00000		 |$LN5@GetDisplay|
  00000		 |$M48460|

; 1108 :     *pDispRes=g_bootCfg.displayRes;

  00000	e59f3008	 ldr         r3, [pc, #8]
  00004	e593307c	 ldr         r3, [r3, #0x7C]
  00008	e5803000	 str         r3, [r0]

; 1109 : }

  0000c	e12fff1e	 bx          lr
  00010		 |$LN6@GetDisplay|
  00010		 |$LN7@GetDisplay|
  00010	00000000	 DCD         |g_bootCfg|
  00014		 |$M48461|

			 ENDP  ; |GetDisplayResolutionFromBootArgs|

	EXPORT	|IsDVIMode|

  00000			 AREA	 |.pdata|, PDATA
|$T48474| DCD	|$LN5@IsDVIMode|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |IsDVIMode| PROC

; 1112 : {

  00000		 |$LN5@IsDVIMode|
  00000		 |$M48471|

; 1113 :     /*DWORD dispRes;    
; 1114 :     GetDisplayResolutionFromBootArgs(&dispRes);
; 1115 :     if (dispRes==OMAP_LCD_DEFAULT)*/
; 1116 : 	return FALSE;

  00000	e3a00000	 mov         r0, #0

; 1117 :     //else
; 1118 : 	//return TRUE;        
; 1119 : }

  00004	e12fff1e	 bx          lr
  00008		 |$M48472|

			 ENDP  ; |IsDVIMode|

	EXPORT	|ConvertCAtoPA|

  00000			 AREA	 |.pdata|, PDATA
|$T48484| DCD	|$LN5@ConvertCAt|
	DCD	0x40000401
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |ConvertCAtoPA| PROC

; 1122 : {   

  00000		 |$LN5@ConvertCAt|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M48481|

; 1123 :     return OALVAtoPA(va);

  00004	eb000000	 bl          OALVAtoPA

; 1124 : }

  00008	e49de004	 ldr         lr, [sp], #4
  0000c	e12fff1e	 bx          lr
  00010		 |$M48482|

			 ENDP  ; |ConvertCAtoPA|

	EXPORT	|OEMPreDownload|
	EXPORT	|??_C@_1CM@LKNPOFLB@?$AAb?$AAo?$AAo?$AAt?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAT?$AAy?$AAp?$AAe?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CI@OKDMPKNO@?$AAL?$AAo?$AAg?$AAi?$AAc?$AAa?$AAl?$AAL?$AAo?$AAc?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DO@OPINKPO@?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?5?$AAs?$AAh?$AAa?$AAr?$AAe?$AA?5?$AAA?$AAR?$AAG?$AAS?$AA?5?$AA?9?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_11LOCGONAA@?$AA?$AA@| [ DATA ]	; `string'
	EXPORT	|??_C@_1O@HJKNOJA@?$AAn?$AAk?$AA?4?$AAb?$AAi?$AAn?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EC@IFKCAMGN@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAS?$AAW?$AA4?$AA?5?$AAb?$AAo?$AAo?$AAt?$AA?5?$AAs?$AAe?$AAt?$AAt?$AAi?$AAn?$AAg?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA2?$AAx?$AA?$AN?$AA?6@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GC@MEIINOMM@?$AAW?$AAA?$AAR?$AAN?$AA?3?$AA?5?$AAB?$AAo?$AAo?$AAt?$AA?5?$AAc?$AAo?$AAn?$AAf?$AAi?$AAg?$AA?5?$AAw?$AAa?$AAs?$AAn?$AA?8?$AAt?$AA?5?$AAf?$AAo?$AAu?$AAn?$AAd?$AA?0?$AA?5@| [ DATA ] ; `string'
	IMPORT	|BLFlashDownload|
	IMPORT	|BLSDCardDownload|
	IMPORT	|BLMenu|
	IMPORT	|ADCRTCInit|
	IMPORT	|HotKeyColdReset|
	IMPORT	|BLReadBootCfg|
	IMPORT	|BLShowLogo|
	IMPORT	|g_pOEMMultiBINNotify|
	IMPORT	|wcscpy|
	IMPORT	|memcpy|

  00000			 AREA	 |.pdata|, PDATA
|$T48537| DCD	|$LN64@OEMPreDown|
	DCD	0x4000e601

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CM@LKNPOFLB@?$AAb?$AAo?$AAo?$AAt?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAT?$AAy?$AAp?$AAe?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "b"
	DCB	0x0, "o", 0x0, "o", 0x0, "t", 0x0, "D", 0x0, "e", 0x0, "v"
	DCB	0x0, "i", 0x0, "c", 0x0, "e", 0x0, "T", 0x0, "y", 0x0, "p"
	DCB	0x0, "e", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "%", 0x0, "d"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@OKDMPKNO@?$AAL?$AAo?$AAg?$AAi?$AAc?$AAa?$AAl?$AAL?$AAo?$AAc?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB "L"
	DCB	0x0, "o", 0x0, "g", 0x0, "i", 0x0, "c", 0x0, "a", 0x0, "l"
	DCB	0x0, "L", 0x0, "o", 0x0, "c", 0x0, " ", 0x0, "=", 0x0, " "
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DO@OPINKPO@?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?5?$AAs?$AAh?$AAa?$AAr?$AAe?$AA?5?$AAA?$AAR?$AAG?$AAS?$AA?5?$AA?9?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB "I"
	DCB	0x0, "n", 0x0, "i", 0x0, "t", 0x0, "i", 0x0, "a", 0x0, "l"
	DCB	0x0, "i", 0x0, "z", 0x0, "e", 0x0, " ", 0x0, "s", 0x0, "h"
	DCB	0x0, "a", 0x0, "r", 0x0, "e", 0x0, " ", 0x0, "A", 0x0, "R"
	DCB	0x0, "G", 0x0, "S", 0x0, " ", 0x0, "-", 0x0, " ", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_11LOCGONAA@?$AA?$AA@| DCB 0x0, 0x0		; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1O@HJKNOJA@?$AAn?$AAk?$AA?4?$AAb?$AAi?$AAn?$AA?$AA@| DCB "n", 0x0, "k"
	DCB	0x0, ".", 0x0, "b", 0x0, "i", 0x0, "n", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EC@IFKCAMGN@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAS?$AAW?$AA4?$AA?5?$AAb?$AAo?$AAo?$AAt?$AA?5?$AAs?$AAe?$AAt?$AAt?$AAi?$AAn?$AAg?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA2?$AAx?$AA?$AN?$AA?6@| DCB "I"
	DCB	0x0, "N", 0x0, "F", 0x0, "O", 0x0, ":", 0x0, " ", 0x0, "S"
	DCB	0x0, "W", 0x0, "4", 0x0, " ", 0x0, "b", 0x0, "o", 0x0, "o"
	DCB	0x0, "t", 0x0, " ", 0x0, "s", 0x0, "e", 0x0, "t", 0x0, "t"
	DCB	0x0, "i", 0x0, "n", 0x0, "g", 0x0, ":", 0x0, " ", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "0", 0x0, "2", 0x0, "x", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GC@MEIINOMM@?$AAW?$AAA?$AAR?$AAN?$AA?3?$AA?5?$AAB?$AAo?$AAo?$AAt?$AA?5?$AAc?$AAo?$AAn?$AAf?$AAi?$AAg?$AA?5?$AAw?$AAa?$AAs?$AAn?$AA?8?$AAt?$AA?5?$AAf?$AAo?$AAu?$AAn?$AAd?$AA?0?$AA?5@| DCB "W"
	DCB	0x0, "A", 0x0, "R", 0x0, "N", 0x0, ":", 0x0, " ", 0x0, "B"
	DCB	0x0, "o", 0x0, "o", 0x0, "t", 0x0, " ", 0x0, "c", 0x0, "o"
	DCB	0x0, "n", 0x0, "f", 0x0, "i", 0x0, "g", 0x0, " ", 0x0, "w"
	DCB	0x0, "a", 0x0, "s", 0x0, "n", 0x0, "'", 0x0, "t", 0x0, " "
	DCB	0x0, "f", 0x0, "o", 0x0, "u", 0x0, "n", 0x0, "d", 0x0, ","
	DCB	0x0, " ", 0x0, "u", 0x0, "s", 0x0, "i", 0x0, "n", 0x0, "g"
	DCB	0x0, " ", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "a", 0x0, "u"
	DCB	0x0, "l", 0x0, "t", 0x0, "s", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OEMPreDownload| PROC

; 452  : {

  00000		 |$LN64@OEMPreDown|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004		 |$M48534|

; 453  :     ULONG rc = (ULONG) BL_ERROR;
; 454  :     BSP_ARGS *pArgs = OALCAtoUA(IMAGE_SHARE_ARGS_CA);
; 455  :     BOOL bForceBootMenu;
; 456  :     OMAP_PRCM_GLOBAL_PRM_REGS * pPrmGlobal = OALPAtoUA(OMAP_PRCM_GLOBAL_PRM_REGS_PA);

  00004	e59f0388	 ldr         r0, [pc, #0x388]
  00008	e3a01000	 mov         r1, #0
  0000c	e3a0a20a	 mov         r10, #0xA, 4
  00010	eb000000	 bl          OALPAtoVA
  00014	e1a07000	 mov         r7, r0

; 457  :     ULONG dwTemp;
; 458  :     UINT32 *pStatusControlAddr = OALPAtoUA(OMAP_STATUS_CONTROL_REGS_PA);

  00018	e59f0370	 ldr         r0, [pc, #0x370]
  0001c	e3a01000	 mov         r1, #0
  00020	eb000000	 bl          OALPAtoVA

; 459  :     UINT32 dwSysBootCfg;
; 460  :     
; 461  : #ifdef BUILDING_EBOOT_SD    
; 462  : 	//BYTE CalibBuffer[CALIBRATE_SIZE];
; 463  : #endif
; 464  : 
; 465  :     //OALLog(L"INFO: Predownload....%d...\r\n",sizeof(BSP_ARGS));
; 466  : 
; 467  :     // We need to support multi bin notify
; 468  :     g_pOEMMultiBINNotify = OEMMultiBinNotify;

  00024	e59f2360	 ldr         r2, [pc, #0x360]
  00028	e59f3358	 ldr         r3, [pc, #0x358]
  0002c	e1a06000	 mov         r6, r0
  00030	e5823000	 str         r3, [r2]

; 469  : 
; 470  :     // Ensure bootloader blocks are marked as reserved
; 471  : #ifdef BUILDING_EBOOT_SD // brian    
; 472  :     //BLReserveBootBlocks(); // brian
; 473  : #endif
; 474  : 	
; 475  : 	BLShowLogo();                   // Ray 13115

  00034	eb000000	 bl          BLShowLogo

; 476  : 	
; 477  :     //BLShowMenu();               //At screen show menu,invoke function go to cfg.c; function prototype in the eboot.h
; 478  : 
; 479  :     // Read saved configration      //Bootstrap message(LCD init after), Ray
; 480  :     if (BLReadBootCfg(&g_bootCfg) &&
; 481  :         (g_bootCfg.signature == BOOT_CFG_SIGNATURE) && (g_bootCfg.version == BOOT_CFG_VERSION))

  00038	e59f4344	 ldr         r4, [pc, #0x344]
  0003c	e1a00004	 mov         r0, r4
  00040	eb000000	 bl          BLReadBootCfg
  00044	e59f8334	 ldr         r8, [pc, #0x334]
  00048	e59f532c	 ldr         r5, [pc, #0x32C]
  0004c	e3500000	 cmp         r0, #0
  00050	0a000005	 beq         |$LN23@OEMPreDown|
  00054	e5943000	 ldr         r3, [r4]
  00058	e1530005	 cmp         r3, r5
  0005c	1a000002	 bne         |$LN23@OEMPreDown|
  00060	e5943004	 ldr         r3, [r4, #4]
  00064	e3530002	 cmp         r3, #2
  00068	0a000055	 beq         |$LN22@OEMPreDown|
  0006c		 |$LN23@OEMPreDown|

; 482  : 	{
; 483  :         //OALLog(L"INFO: Boot configuration found\r\n");    //e-test comment, Ray
; 484  : 	}else{
; 485  :         OALLog(L"WARN: Boot config wasn't found, using defaults\r\n");

  0006c	e59f0304	 ldr         r0, [pc, #0x304]
  00070	eb000000	 bl          NKDbgPrintfW

; 486  :         memset(&g_bootCfg, 0, sizeof(g_bootCfg));

  00074	e3a02090	 mov         r2, #0x90
  00078	e3a01000	 mov         r1, #0
  0007c	e1a00004	 mov         r0, r4
  00080	eb000000	 bl          memset

; 487  : 		memcpy(&g_bootCfg.mac,DefaultMacAddress,sizeof(g_bootCfg.mac));

  00084	e2881048	 add         r1, r8, #0x48
  00088	e2840076	 add         r0, r4, #0x76
  0008c	e3a02006	 mov         r2, #6
  00090	eb000000	 bl          memcpy

; 488  :         g_bootCfg.signature = BOOT_CFG_SIGNATURE;
; 489  :         g_bootCfg.version = BOOT_CFG_VERSION;
; 490  : 
; 491  :         g_bootCfg.oalFlags = 0;
; 492  :         g_bootCfg.flashNKFlags = 0;
; 493  :         g_bootCfg.ECCtype =  (UCHAR)dwEbootECCtype;

  00094	e59f32d8	 ldr         r3, [pc, #0x2D8]

; 494  :         // To make it easier to select USB or EBOOT from menus when booting from SD card,
; 495  :         // preset the kitlFlags. This has no effect if booting from SD card.
; 496  :         g_bootCfg.kitlFlags = OAL_KITL_FLAGS_DHCP|OAL_KITL_FLAGS_ENABLED;
; 497  :         g_bootCfg.kitlFlags |= OAL_KITL_FLAGS_VMINI;
; 498  :         g_bootCfg.kitlFlags |= OAL_KITL_FLAGS_EXTNAME;
; 499  : 
; 500  :         //g_bootCfg.displayRes = OMAP_LCD_DEFAULT;
; 501  : 
; 502  :         
; 503  :         if(g_CPUFamily == CPU_FAMILY_DM37XX)

  00098	e59f22d0	 ldr         r2, [pc, #0x2D0]
  0009c	e3a01002	 mov         r1, #2
  000a0	e5933000	 ldr         r3, [r3]
  000a4	e5845000	 str         r5, [r4]
  000a8	e5922000	 ldr         r2, [r2]
  000ac	e3a00000	 mov         r0, #0
  000b0	e5841004	 str         r1, [r4, #4]
  000b4	e3a01000	 mov         r1, #0
  000b8	e5840034	 str         r0, [r4, #0x34]
  000bc	e5841080	 str         r1, [r4, #0x80]
  000c0	e5c43084	 strb        r3, [r4, #0x84]
  000c4	e3a0302d	 mov         r3, #0x2D
  000c8	e3520001	 cmp         r2, #1
  000cc	e5843030	 str         r3, [r4, #0x30]

; 504  :         {
; 505  :             g_bootCfg.opp_mode = BSP_OPM_SELECT_37XX-1;

  000d0	03a03003	 moveq       r3, #3

; 506  :         }
; 507  :         else
; 508  :         {
; 509  :             g_bootCfg.opp_mode = BSP_OPM_SELECT_35XX-1;

  000d4	13a03004	 movne       r3, #4
  000d8	e5843088	 str         r3, [r4, #0x88]

; 510  :         }
; 511  :         // select default boot device based on boot select switch setting
; 512  :         dwSysBootCfg = INREG32(pStatusControlAddr);

  000dc	e5963000	 ldr         r3, [r6]

; 513  :         OALLog(L"INFO: SW4 boot setting: 0x%02x\r\n", dwSysBootCfg & 0x3f);

  000e0	e59f0284	 ldr         r0, [pc, #0x284]
  000e4	e203503f	 and         r5, r3, #0x3F
  000e8	e1a01005	 mov         r1, r5
  000ec	eb000000	 bl          NKDbgPrintfW

; 514  : 
; 515  :         switch (dwSysBootCfg & 0x3f)

  000f0	e3a03302	 mov         r3, #2, 6
  000f4	e3832020	 orr         r2, r3, #0x20
  000f8	e3550024	 cmp         r5, #0x24
  000fc	8a000012	 bhi         |$LN26@OEMPreDown|
  00100	0a00001f	 beq         |$LN17@OEMPreDown|
  00104	e355001b	 cmp         r5, #0x1B
  00108	8a000015	 bhi         |$LN13@OEMPreDown|
  0010c	e28f3004	 add         r3, pc, #4
  00110	e7d33005	 ldrb        r3, [r3, +r5]
  00114	e08ff003	 add         pc, pc, r3
  00118		 |$LN33@OEMPreDown|
  00118		 |$LN32@OEMPreDown|
  00118		 |$LN34@OEMPreDown|
  00118	20ed		 DCB         0x20
  00119		 |$LN35@OEMPreDown|
  00119	18ed		 DCB         0x18
  0011a		 |$LN36@OEMPreDown|
  0011a	20ed		 DCB         0x20
  0011b		 |$LN37@OEMPreDown|
  0011b	48ed		 DCB         0x48
  0011c		 |$LN38@OEMPreDown|
  0011c	20ed		 DCB         0x20
  0011d		 |$LN39@OEMPreDown|
  0011d	48ed		 DCB         0x48
  0011e		 |$LN40@OEMPreDown|
  0011e	58ed		 DCB         0x58
  0011f		 |$LN41@OEMPreDown|
  0011f	48ed		 DCB         0x48
  00120		 |$LN42@OEMPreDown|
  00120	48ed		 DCB         0x48
  00121		 |$LN43@OEMPreDown|
  00121	48ed		 DCB         0x48
  00122		 |$LN44@OEMPreDown|
  00122	48ed		 DCB         0x48
  00123		 |$LN45@OEMPreDown|
  00123	48ed		 DCB         0x48
  00124		 |$LN46@OEMPreDown|
  00124	18ed		 DCB         0x18
  00125		 |$LN47@OEMPreDown|
  00125	48ed		 DCB         0x48
  00126		 |$LN48@OEMPreDown|
  00126	48ed		 DCB         0x48
  00127		 |$LN49@OEMPreDown|
  00127	48ed		 DCB         0x48
  00128		 |$LN50@OEMPreDown|
  00128	20ed		 DCB         0x20
  00129		 |$LN51@OEMPreDown|
  00129	48ed		 DCB         0x48
  0012a		 |$LN52@OEMPreDown|
  0012a	58ed		 DCB         0x58
  0012b		 |$LN53@OEMPreDown|
  0012b	48ed		 DCB         0x48
  0012c		 |$LN54@OEMPreDown|
  0012c	48ed		 DCB         0x48
  0012d		 |$LN55@OEMPreDown|
  0012d	18ed		 DCB         0x18
  0012e		 |$LN56@OEMPreDown|
  0012e	20ed		 DCB         0x20
  0012f		 |$LN57@OEMPreDown|
  0012f	48ed		 DCB         0x48
  00130		 |$LN58@OEMPreDown|
  00130	58ed		 DCB         0x58
  00131		 |$LN59@OEMPreDown|
  00131	48ed		 DCB         0x48
  00132		 |$LN60@OEMPreDown|
  00132	48ed		 DCB         0x48
  00133		 |$LN61@OEMPreDown|
  00133	18ed		 DCB         0x18
  00134		 |$LN15@OEMPreDown|

; 523  :             break;
; 524  :     
; 525  :     	case 0x2f: // brian
; 526  :         case 0x06:
; 527  :         case 0x12:
; 528  :         case 0x18:
; 529  :             // 1st boot device is MMC1 (SD Card Boot)
; 530  :             g_bootCfg.bootDevLoc.LogicalLoc = OMAP_MMCHS1_REGS_PA;
; 531  :             break;          
; 532  : 
; 533  :         case 0x01: 
; 534  :         case 0x0c: 
; 535  :         case 0x15: 
; 536  :         case 0x1b: 
; 537  :             // 1st boot device is NAND
; 538  :             g_bootCfg.bootDevLoc.LogicalLoc = BSP_NAND_REGS_PA + 0x20;

  00134	e5842010	 str         r2, [r4, #0x10]

; 539  :             break;

  00138	ea000015	 b           |$LN18@OEMPreDown|
  0013c		 |$LN14@OEMPreDown|
  0013c	e3a03303	 mov         r3, #3, 6

; 540  :             
; 541  :         case 0x00:
; 542  :         case 0x02:
; 543  :         case 0x04:
; 544  :         case 0x10:
; 545  :         case 0x16:
; 546  :             // 1st boot device is ONENAND
; 547  :             g_bootCfg.bootDevLoc.LogicalLoc = BSP_ONENAND_REGS_PA + 0x20;                       

  00140	e3833020	 orr         r3, r3, #0x20
  00144	e5843010	 str         r3, [r4, #0x10]
  00148	ea000011	 b           |$LN18@OEMPreDown|
  0014c		 |$LN26@OEMPreDown|

; 514  : 
; 515  :         switch (dwSysBootCfg & 0x3f)

  0014c	e3550026	 cmp         r5, #0x26
  00150	0a00000b	 beq         |$LN17@OEMPreDown|
  00154	e355002f	 cmp         r5, #0x2F
  00158	0a000005	 beq         |$LN16@OEMPreDown|
  0015c	e355003b	 cmp         r5, #0x3B
  00160	0a000007	 beq         |$LN17@OEMPreDown|
  00164		 |$LN13@OEMPreDown|

; 548  :             break;
; 549  : 
; 550  :         default:
; 551  :             // UART,  Ethernet Boot
; 552  :             g_bootCfg.bootDevLoc.LogicalLoc = BSP_NAND_REGS_PA + 0x20;;

  00164	e3a03302	 mov         r3, #2, 6
  00168	e3832020	 orr         r2, r3, #0x20
  0016c	e5842010	 str         r2, [r4, #0x10]

; 553  :             g_bootCfg.kitlDevLoc.LogicalLoc = BSP_NAND_REGS_PA + 0x20;;
; 554  :             break;

  00170	ea00000a	 b           |$LN30@OEMPreDown|
  00174		 |$LN16@OEMPreDown|
  00174	e3a03312	 mov         r3, #0x12, 6
  00178	e3833927	 orr         r3, r3, #0x27, 18
  0017c	e5843010	 str         r3, [r4, #0x10]
  00180	ea000003	 b           |$LN18@OEMPreDown|
  00184		 |$LN17@OEMPreDown|

; 516  :         {
; 517  :         case 0x24:
; 518  :         case 0x26:
; 519  :         case 0x3b:
; 520  :             // 1st boot device is USB
; 521  :             g_bootCfg.bootDevLoc.LogicalLoc = OMAP_USBHS_REGS_PA;

  00184	e3a03312	 mov         r3, #0x12, 6
  00188	e3833aab	 orr         r3, r3, #0xAB, 20
  0018c	e5843010	 str         r3, [r4, #0x10]

; 522  :             g_bootCfg.kitlDevLoc.LogicalLoc = OMAP_USBHS_REGS_PA;

  00190	e5843024	 str         r3, [r4, #0x24]
  00194		 |$LN18@OEMPreDown|

; 539  :             break;

  00194	e5943024	 ldr         r3, [r4, #0x24]

; 555  :         }            
; 556  :         if (g_bootCfg.kitlDevLoc.LogicalLoc == 0)

  00198	e3530000	 cmp         r3, #0
  0019c	1a000000	 bne         |$LN12@OEMPreDown|
  001a0		 |$LN30@OEMPreDown|

; 557  :         {
; 558  :             g_bootCfg.kitlDevLoc.LogicalLoc = BSP_NAND_REGS_PA + 0x20;;

  001a0	e5842024	 str         r2, [r4, #0x24]
  001a4		 |$LN12@OEMPreDown|

; 559  :         }
; 560  :         //g_bootCfg.deviceID = 0;
; 561  :         wcscpy(g_bootCfg.SerialNumber, L"");

  001a4	e59f11bc	 ldr         r1, [pc, #0x1BC]
  001a8	e2840038	 add         r0, r4, #0x38
  001ac	eb000000	 bl          wcscpy

; 562  :         g_bootCfg.osPartitionSize = IMAGE_WINCE_CODE_SIZE;
; 563  :         wcscpy(g_bootCfg.filename, L"nk.bin");

  001b0	e59f11ac	 ldr         r1, [pc, #0x1AC]
  001b4	e3a0350a	 mov         r3, #0xA, 10
  001b8	e284005c	 add         r0, r4, #0x5C
  001bc	e5843058	 str         r3, [r4, #0x58]
  001c0	eb000000	 bl          wcscpy
  001c4		 |$LN22@OEMPreDown|

; 564  : 	}
; 565  : 	g_bootCfg.displayRes = OMAP_LCD_DEFAULT;

  001c4	e3a03000	 mov         r3, #0

; 566  : 	
; 567  : 	// Initialize flash partitions if needed
; 568  : #ifdef BUILDING_EBOOT_SD // brian
; 569  :    //BLConfigureFlashPartitions(FALSE); //brian
; 570  : #endif
; 571  :     // Initialize ARGS structure
; 572  :     if ((pArgs->header.signature != OAL_ARGS_SIGNATURE) ||
; 573  :         (pArgs->header.oalVersion != OAL_ARGS_VERSION) ||
; 574  :         (pArgs->header.bspVersion != BSP_ARGS_VERSION))

  001c8	e59f5190	 ldr         r5, [pc, #0x190]
  001cc	e584307c	 str         r3, [r4, #0x7C]
  001d0	e59a3000	 ldr         r3, [r10]
  001d4	e1530005	 cmp         r3, r5
  001d8	1a000005	 bne         |$LN10@OEMPreDown|
  001dc	e1da30b4	 ldrh        r3, [r10, #4]
  001e0	e3530001	 cmp         r3, #1
  001e4	1a000002	 bne         |$LN10@OEMPreDown|
  001e8	e1da30b6	 ldrh        r3, [r10, #6]
  001ec	e3530001	 cmp         r3, #1
  001f0	0a000003	 beq         |$LN11@OEMPreDown|
  001f4		 |$LN10@OEMPreDown|

; 575  : 	{
; 576  : 		//OALLog(L"Clear share ARGS - 0x%x\r\n",IMAGE_SHARE_ARGS_CA);   //e-test comment, Ray
; 577  : 		memset(pArgs, 0, IMAGE_SHARE_ARGS_SIZE);

  001f4	e3a02a01	 mov         r2, #1, 20
  001f8	e3a01000	 mov         r1, #0
  001fc	e3a0020a	 mov         r0, #0xA, 4
  00200	eb000000	 bl          memset
  00204		 |$LN11@OEMPreDown|

; 578  : 	}        
; 579  :     
; 580  :     // Save reset type  //Bootstrap message(final); Determine Clod or Warm Reset, Ray 131024
; 581  :     dwTemp = INREG32(&pPrmGlobal->PRM_RSTST);

  00204	e5973058	 ldr         r3, [r7, #0x58]

; 582  :     if (dwTemp & (GLOBALWARM_RST /* actually SW reset */ | EXTERNALWARM_RST))

  00208	e3a0b000	 mov         r11, #0
  0020c	e3a09001	 mov         r9, #1
  00210	e3130042	 tst         r3, #0x42

; 583  :     {
; 584  :         pArgs->coldBoot = FALSE;
; 585  :         //OALLog(L"\r>>> Now entry warm-reset... \r\n");    //e-test comment, Ray
; 586  :     }
; 587  :     else
; 588  :     {
; 589  :         pArgs->coldBoot = TRUE;
; 590  :         //OALLog(L"\r\n>>> Forcing cold boot (non-persistent registry and other data will be wiped) <<< \r\n");     //e-test comment, Ray
; 591  :         //OALLog(L"\r>>> Now entry cold-reset... \r\n");    //e-test comment, Ray
; 592  :         HotKeyColdReset(ghTwl);

  00214	059f3140	 ldreq       r3, [pc, #0x140]
  00218	158ab00c	 strne       r11, [r10, #0xC]
  0021c	058a900c	 streq       r9, [r10, #0xC]
  00220	05930000	 ldreq       r0, [r3]
  00224	0b000000	 bleq        HotKeyColdReset

; 593  :         //LLog(L"******hTwl: %X....\r\n", ghTwl);       //address-2, Ray
; 594  :     }
; 595  :     
; 596  :     // Don't force the boot menu, use default action unless user breaks
; 597  :     // into menu
; 598  :     //bForceBootMenu = FALSE;   //e-test comment, Ray
; 599  :     bForceBootMenu = TRUE;
; 600  :     ADCRTCInit();               //Ray 140303

  00228	eb000000	 bl          ADCRTCInit
  0022c	e59f6124	 ldr         r6, [pc, #0x124]
  00230	e59f711c	 ldr         r7, [pc, #0x11C]
  00234		 |$retryBootMenu$47891|

; 601  : retryBootMenu:
; 602  : 	// Call configuration menu
; 603  :     BLMenu(bForceBootMenu);

  00234	e3a00001	 mov         r0, #1
  00238	eb000000	 bl          BLMenu

; 604  :     
; 605  :    
; 606  :     // Update ARGS structure if necessary
; 607  :     if ((pArgs->header.signature != OAL_ARGS_SIGNATURE) ||
; 608  :         (pArgs->header.oalVersion != OAL_ARGS_VERSION) || 
; 609  :         (pArgs->header.bspVersion != BSP_ARGS_VERSION))

  0023c	e59a3000	 ldr         r3, [r10]
  00240	e1530005	 cmp         r3, r5
  00244	1a000005	 bne         |$LN6@OEMPreDown|
  00248	e1da30b4	 ldrh        r3, [r10, #4]
  0024c	e3530001	 cmp         r3, #1
  00250	1a000002	 bne         |$LN6@OEMPreDown|
  00254	e1da30b6	 ldrh        r3, [r10, #6]
  00258	e3530001	 cmp         r3, #1
  0025c	0a000022	 beq         |$LN7@OEMPreDown|
  00260		 |$LN6@OEMPreDown|

; 610  : 	{
; 611  : 		OALLog(L"Initialize share ARGS - 0x%x\r\n",IMAGE_SHARE_ARGS_CA);

  00260	e59f00e8	 ldr         r0, [pc, #0xE8]
  00264	e3a01102	 mov         r1, #2, 2
  00268	eb000000	 bl          NKDbgPrintfW

; 612  : 		//OALLog(L"Initialize share ARGS - %s\r\n",g_bootCfg.SerialNumber);
; 613  :         pArgs->header.signature = OAL_ARGS_SIGNATURE;

  0026c	e58a5000	 str         r5, [r10]

; 614  :         pArgs->header.oalVersion = OAL_ARGS_VERSION;

  00270	e1ca90b4	 strh        r9, [r10, #4]

; 615  :         pArgs->header.bspVersion = BSP_ARGS_VERSION;

  00274	e1ca90b6	 strh        r9, [r10, #6]

; 616  :         pArgs->kitl.flags = g_bootCfg.kitlFlags;

  00278	e5943030	 ldr         r3, [r4, #0x30]

; 617  :         pArgs->kitl.devLoc = g_bootCfg.kitlDevLoc;

  0027c	e284101c	 add         r1, r4, #0x1C
  00280	e28a001c	 add         r0, r10, #0x1C
  00284	e3a02014	 mov         r2, #0x14
  00288	e58a3018	 str         r3, [r10, #0x18]
  0028c	eb000000	 bl          memcpy
  00290	e3a0920a	 mov         r9, #0xA, 4

; 618  :         //pArgs->kitl.ipAddress = g_bootCfg.ipAddress;
; 619  :         //pArgs->kitl.ipMask = g_bootCfg.ipMask;
; 620  :         //pArgs->kitl.ipRoute = g_bootCfg.ipRoute;
; 621  : 		memcpy(pArgs->kitl.mac,g_bootCfg.mac,sizeof(pArgs->kitl.mac)); 

  00294	e3890030	 orr         r0, r9, #0x30
  00298	e2841076	 add         r1, r4, #0x76
  0029c	e3a02006	 mov         r2, #6
  002a0	eb000000	 bl          memcpy

; 622  :  	    pArgs->updateMode = FALSE;

  002a4	e58ab008	 str         r11, [r10, #8]

; 623  :         //pArgs->deviceID = g_bootCfg.deviceID;
; 624  :         pArgs->oalFlags = g_bootCfg.oalFlags;

  002a8	e5943034	 ldr         r3, [r4, #0x34]

; 625  :         pArgs->dispRes = g_bootCfg.displayRes;
; 626  :         pArgs->ECCtype = g_bootCfg.ECCtype; 
; 627  :         pArgs->opp_mode = g_bootCfg.opp_mode;
; 628  :         memcpy(pArgs->DevicePrefix, gDevice_prefix, sizeof(pArgs->DevicePrefix));

  002ac	e3890048	 orr         r0, r9, #0x48
  002b0	e3a02012	 mov         r2, #0x12
  002b4	e58a3044	 str         r3, [r10, #0x44]
  002b8	e594307c	 ldr         r3, [r4, #0x7C]
  002bc	e58a3078	 str         r3, [r10, #0x78]
  002c0	e5d43084	 ldrb        r3, [r4, #0x84]
  002c4	e58a307c	 str         r3, [r10, #0x7C]
  002c8	e5943088	 ldr         r3, [r4, #0x88]
  002cc	e58a3080	 str         r3, [r10, #0x80]
  002d0	e5971000	 ldr         r1, [r7]
  002d4	eb000000	 bl          memcpy

; 629  :         memcpy(pArgs->SerialNumber, g_bootCfg.SerialNumber, sizeof(pArgs->SerialNumber));

  002d8	e389005a	 orr         r0, r9, #0x5A
  002dc	e2841038	 add         r1, r4, #0x38
  002e0	e3a0201e	 mov         r2, #0x1E
  002e4	eb000000	 bl          memcpy
  002e8	e3a09001	 mov         r9, #1
  002ec		 |$LN7@OEMPreDown|

; 630  :         //memcpy((BYTE *)SERIAL_NUMBER_STORE_ADDR, g_bootCfg.SerialNumber, sizeof(g_bootCfg.SerialNumber));
; 631  :         //OALLog(L"Initialize share ARGS - %s\r\n",pArgs->SerialNumber);
; 632  : 	}  
; 633  :     
; 634  :     // Initialize display
; 635  : 	//BLShowLogo();	// cfg.c
; 636  : 	
; 637  : 	// Read touch Calibration data
; 638  : #ifdef BUILDING_EBOOT_SD
; 639  : 	/*memset(pArgs->CalibBuffer, 0, CALIBRATE_SIZE);
; 640  : 	if( BLSDCardReadCalibData(TOUCHCALIB_EBOOT_FILE, CalibBuffer, CALIBRATE_SIZE) )
; 641  : 	{
; 642  : 		//int i;
; 643  : 		memcpy(pArgs->CalibBuffer, CalibBuffer, CALIBRATE_SIZE);
; 644  : 		OALLog(L"BLSDCardReadCalibData: %d bytes\r\n", CalibBuffer[1]);
; 645  : 		//for( i=0 ; i<120 ; i++)
; 646  : 		//	OALLog(L"BLSDCardReadCalibData: %d = 0x%x\r\n", i, pArgs->CalibBuffer[i]);
; 647  : 	}*/
; 648  : 	
; 649  :     // Image download depends on protocol
; 650  : 	g_eboot.bootDeviceType = BOOT_SDCARD_TYPE;
; 651  : #else
; 652  : 	g_bootCfg.bootDevLoc.LogicalLoc = BSP_NAND_REGS_PA + 0x20;
; 653  : 	g_eboot.bootDeviceType = OAL_KITL_TYPE_FLASH;
; 654  : #endif
; 655  :     //g_eboot.bootDeviceType = OALKitlDeviceType(&g_bootCfg.bootDevLoc, g_bootDevices);
; 656  : 
; 657  : 	OALLog(L"bootDeviceType = %d\r\n", g_eboot.bootDeviceType);

  002ec	e59f0058	 ldr         r0, [pc, #0x58]
  002f0	e3a03004	 mov         r3, #4
  002f4	e3a01004	 mov         r1, #4
  002f8	e5863000	 str         r3, [r6]
  002fc	eb000000	 bl          NKDbgPrintfW

; 658  : 	OALLog(L"LogicalLoc = 0x%x\r\n", g_bootCfg.bootDevLoc.LogicalLoc);

  00300	e5941010	 ldr         r1, [r4, #0x10]
  00304	e59f003c	 ldr         r0, [pc, #0x3C]
  00308	eb000000	 bl          NKDbgPrintfW

; 659  : 	switch (g_eboot.bootDeviceType)

  0030c	e5963000	 ldr         r3, [r6]
  00310	e3530003	 cmp         r3, #3
  00314	0a000004	 beq         |$LN2@OEMPreDown|
  00318	e3530004	 cmp         r3, #4
  0031c	1affffc4	 bne         |$retryBootMenu$47891|

; 660  : 	{
; 661  : 		case BOOT_SDCARD_TYPE: // 4
; 662  :             rc = BLSDCardDownload(g_bootCfg.filename); // \PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\COMMON_TI\BOOT\SDMEMORY

  00320	e284005c	 add         r0, r4, #0x5C
  00324	eb000000	 bl          BLSDCardDownload

; 663  :             break;

  00328	ea000002	 b           |$LN4@OEMPreDown|
  0032c		 |$LN2@OEMPreDown|

; 664  :         case OAL_KITL_TYPE_FLASH: // 3
; 665  :             rc = BLFlashDownload(&g_bootCfg, g_bootDevices);

  0032c	e1a01008	 mov         r1, r8
  00330	e1a00004	 mov         r0, r4
  00334	eb000000	 bl          BLFlashDownload
  00338		 |$LN4@OEMPreDown|

; 666  :             break;
; 667  :         //case OAL_KITL_TYPE_ETH:
; 668  :         //    rc = BLEthDownload(&g_bootCfg, g_bootDevices);
; 669  :         //    break;
; 670  : 	}
; 671  :         
; 672  : 	if (rc == BL_ERROR)

  00338	e3700001	 cmn         r0, #1

; 673  :     {
; 674  :         // No automatic mode now, force the boot menu to appear
; 675  :         bForceBootMenu = TRUE;
; 676  :         goto retryBootMenu; 

  0033c	0affffbc	 beq         |$retryBootMenu$47891|

; 677  :     }   
; 678  :     
; 679  :     return rc;
; 680  : }

  00340	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  00344	e12fff1e	 bx          lr
  00348		 |$LN65@OEMPreDown|
  00348		 |$LN66@OEMPreDown|
  00348	00000000	 DCD         |??_C@_1CI@OKDMPKNO@?$AAL?$AAo?$AAg?$AAi?$AAc?$AAa?$AAl?$AAL?$AAo?$AAc?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  0034c		 |$LN67@OEMPreDown|
  0034c	00000000	 DCD         |??_C@_1CM@LKNPOFLB@?$AAb?$AAo?$AAo?$AAt?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAT?$AAy?$AAp?$AAe?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  00350		 |$LN68@OEMPreDown|
  00350	00000000	 DCD         |??_C@_1DO@OPINKPO@?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?5?$AAs?$AAh?$AAa?$AAr?$AAe?$AA?5?$AAA?$AAR?$AAG?$AAS?$AA?5?$AA?9?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  00354		 |$LN69@OEMPreDown|
  00354	00000000	 DCD         |gDevice_prefix|
  00358		 |$LN70@OEMPreDown|
  00358	00000000	 DCD         |g_eboot|
  0035c		 |$LN71@OEMPreDown|
  0035c	00000000	 DCD         |ghTwl|
  00360		 |$LN72@OEMPreDown|
  00360	53475241	 DCD         0x53475241
  00364		 |$LN73@OEMPreDown|
  00364	00000000	 DCD         |??_C@_1O@HJKNOJA@?$AAn?$AAk?$AA?4?$AAb?$AAi?$AAn?$AA?$AA@|
  00368		 |$LN74@OEMPreDown|
  00368	00000000	 DCD         |??_C@_11LOCGONAA@?$AA?$AA@|
  0036c		 |$LN75@OEMPreDown|
  0036c	00000000	 DCD         |??_C@_1EC@IFKCAMGN@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAS?$AAW?$AA4?$AA?5?$AAb?$AAo?$AAo?$AAt?$AA?5?$AAs?$AAe?$AAt?$AAt?$AAi?$AAn?$AAg?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA2?$AAx?$AA?$AN?$AA?6@|
  00370		 |$LN76@OEMPreDown|
  00370	00000000	 DCD         |g_CPUFamily|
  00374		 |$LN77@OEMPreDown|
  00374	00000000	 DCD         |dwEbootECCtype|
  00378		 |$LN78@OEMPreDown|
  00378	00000000	 DCD         |??_C@_1GC@MEIINOMM@?$AAW?$AAA?$AAR?$AAN?$AA?3?$AA?5?$AAB?$AAo?$AAo?$AAt?$AA?5?$AAc?$AAo?$AAn?$AAf?$AAi?$AAg?$AA?5?$AAw?$AAa?$AAs?$AAn?$AA?8?$AAt?$AA?5?$AAf?$AAo?$AAu?$AAn?$AAd?$AA?0?$AA?5@|
  0037c		 |$LN79@OEMPreDown|
  0037c	42434647	 DCD         0x42434647
  00380		 |$LN80@OEMPreDown|
  00380	00000000	 DCD         |g_bootDevices|
  00384		 |$LN81@OEMPreDown|
  00384	00000000	 DCD         |g_bootCfg|
  00388		 |$LN82@OEMPreDown|
  00388	00000000	 DCD         |OEMMultiBinNotify|
  0038c		 |$LN83@OEMPreDown|
  0038c	00000000	 DCD         |g_pOEMMultiBINNotify|
  00390		 |$LN84@OEMPreDown|
  00390	480022f0	 DCD         0x480022f0
  00394		 |$LN85@OEMPreDown|
  00394	48307200	 DCD         0x48307200
  00398		 |$M48535|

			 ENDP  ; |OEMPreDownload|

	EXPORT	|OEMLaunch|
	EXPORT	|??_C@_1GI@OMOEGIPN@?$AAL?$AAa?$AAu?$AAn?$AAc?$AAh?$AA?5?$AAW?$AAi?$AAn?$AAd?$AAo?$AAw?$AAs?$AA?5?$AAC?$AAE?$AA?5?$AAi?$AAm?$AAa?$AAg?$AAe?$AA?5?$AAb?$AAy?$AA?5?$AAj?$AAu?$AAm?$AAp?$AAi@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HO@MGHNOKAM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAE?$AAM?$AAL?$AAa?$AAu?$AAn?$AAc?$AAh?$AA?3?$AA?5?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?5?$AAi?$AAm?$AAa?$AAg?$AAe?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GE@FBKDALPO@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAE?$AAM?$AAL?$AAa?$AAu?$AAn?$AAc?$AAh?$AA?3?$AA?5?$AAF?$AAl?$AAa?$AAs?$AAh?$AA?5?$AAN?$AAK?$AA?4?$AAb?$AAi?$AAn?$AA?5?$AAf@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FC@IKOIDMGO@?$AAW?$AAr?$AAi?$AAt?$AAe?$AAF?$AAl?$AAa?$AAs?$AAh?$AAN?$AAK?$AA?3?$AA?5?$AAs?$AAt?$AAa?$AAr?$AAt?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?0?$AAs?$AAi?$AAz?$AAe?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GA@LEGMELFL@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAX?$AAL?$AAD?$AAR?$AA?1?$AAE?$AAB?$AAO?$AAO?$AAT?$AA?1?$AAI?$AAP?$AAL?$AA?5?$AAd?$AAo?$AAw?$AAn?$AAl?$AAo?$AAa?$AAd?$AAe?$AAd?$AA?0@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GE@FFBNFJNC@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAS?$AAp?$AAl?$AAa?$AAs?$AAh?$AAc?$AAr?$AAe?$AAe?$AAn?$AA?5?$AAl?$AAo?$AAg?$AAo?$AA?5?$AAd?$AAo?$AAw?$AAn?$AAl?$AAo?$AAa?$AAd?$AAe@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HA@LNJPPCBO@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAE?$AAM?$AAL?$AAa?$AAu?$AAn?$AAc?$AAh?$AA?3?$AA?5?$AAI?$AAm?$AAa?$AAg?$AAe?$AA?5?$AAl?$AAo?$AAa?$AAd?$AA?5?$AAf?$AAr?$AAo@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HA@PPNIDEHG@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAE?$AAM?$AAL?$AAa?$AAu?$AAn?$AAc?$AAh?$AA?3?$AA?5?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?5?$AAd?$AAo?$AAw?$AAn?$AAl?$AAo@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GK@MMIDCEGF@?$AA?$CL?$AAO?$AAE?$AAM?$AAL?$AAa?$AAu?$AAn?$AAc?$AAh?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8@| [ DATA ] ; `string'
	IMPORT	|JumpTo|
	IMPORT	|ClearDisplayBuffer|
	IMPORT	|OEMDeinitDebugSerial|
	IMPORT	|WriteFlashNK|
	IMPORT	|BLEthConfig|

  00000			 AREA	 |.pdata|, PDATA
|$T48612| DCD	|$LN79@OEMLaunch|
	DCD	0x40009202

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GI@OMOEGIPN@?$AAL?$AAa?$AAu?$AAn?$AAc?$AAh?$AA?5?$AAW?$AAi?$AAn?$AAd?$AAo?$AAw?$AAs?$AA?5?$AAC?$AAE?$AA?5?$AAi?$AAm?$AAa?$AAg?$AAe?$AA?5?$AAb?$AAy?$AA?5?$AAj?$AAu?$AAm?$AAp?$AAi@| DCB "L"
	DCB	0x0, "a", 0x0, "u", 0x0, "n", 0x0, "c", 0x0, "h", 0x0, " "
	DCB	0x0, "W", 0x0, "i", 0x0, "n", 0x0, "d", 0x0, "o", 0x0, "w"
	DCB	0x0, "s", 0x0, " ", 0x0, "C", 0x0, "E", 0x0, " ", 0x0, "i"
	DCB	0x0, "m", 0x0, "a", 0x0, "g", 0x0, "e", 0x0, " ", 0x0, "b"
	DCB	0x0, "y", 0x0, " ", 0x0, "j", 0x0, "u", 0x0, "m", 0x0, "p"
	DCB	0x0, "i", 0x0, "n", 0x0, "g", 0x0, " ", 0x0, "t", 0x0, "o"
	DCB	0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8"
	DCB	0x0, "x", 0x0, ".", 0x0, ".", 0x0, ".", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HO@MGHNOKAM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAE?$AAM?$AAL?$AAa?$AAu?$AAn?$AAc?$AAh?$AA?3?$AA?5?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?5?$AAi?$AAm?$AAa?$AAg?$AAe?$AA?5@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "O", 0x0, "E", 0x0, "M", 0x0, "L", 0x0, "a", 0x0, "u"
	DCB	0x0, "n", 0x0, "c", 0x0, "h", 0x0, ":", 0x0, " ", 0x0, "U"
	DCB	0x0, "n", 0x0, "k", 0x0, "n", 0x0, "o", 0x0, "w", 0x0, "n"
	DCB	0x0, " ", 0x0, "i", 0x0, "m", 0x0, "a", 0x0, "g", 0x0, "e"
	DCB	0x0, " ", 0x0, "l", 0x0, "a", 0x0, "u", 0x0, "n", 0x0, "c"
	DCB	0x0, "h", 0x0, " ", 0x0, "a", 0x0, "d", 0x0, "d", 0x0, "r"
	DCB	0x0, "e", 0x0, "s", 0x0, "s", 0x0, ",", 0x0, " ", 0x0, "s"
	DCB	0x0, "p", 0x0, "i", 0x0, "n", 0x0, " ", 0x0, "f", 0x0, "o"
	DCB	0x0, "r", 0x0, "e", 0x0, "v", 0x0, "e", 0x0, "r", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GE@FBKDALPO@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAE?$AAM?$AAL?$AAa?$AAu?$AAn?$AAc?$AAh?$AA?3?$AA?5?$AAF?$AAl?$AAa?$AAs?$AAh?$AA?5?$AAN?$AAK?$AA?4?$AAb?$AAi?$AAn?$AA?5?$AAf@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "O", 0x0, "E", 0x0, "M", 0x0, "L", 0x0, "a", 0x0, "u"
	DCB	0x0, "n", 0x0, "c", 0x0, "h", 0x0, ":", 0x0, " ", 0x0, "F"
	DCB	0x0, "l", 0x0, "a", 0x0, "s", 0x0, "h", 0x0, " ", 0x0, "N"
	DCB	0x0, "K", 0x0, ".", 0x0, "b", 0x0, "i", 0x0, "n", 0x0, " "
	DCB	0x0, "f", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d"
	DCB	0x0, ",", 0x0, " ", 0x0, "s", 0x0, "t", 0x0, "a", 0x0, "r"
	DCB	0x0, "t", 0x0, "=", 0x0, "%", 0x0, "x", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FC@IKOIDMGO@?$AAW?$AAr?$AAi?$AAt?$AAe?$AAF?$AAl?$AAa?$AAs?$AAh?$AAN?$AAK?$AA?3?$AA?5?$AAs?$AAt?$AAa?$AAr?$AAt?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?0?$AAs?$AAi?$AAz?$AAe?$AA?5@| DCB "W"
	DCB	0x0, "r", 0x0, "i", 0x0, "t", 0x0, "e", 0x0, "F", 0x0, "l"
	DCB	0x0, "a", 0x0, "s", 0x0, "h", 0x0, "N", 0x0, "K", 0x0, ":"
	DCB	0x0, " ", 0x0, "s", 0x0, "t", 0x0, "a", 0x0, "r", 0x0, "t"
	DCB	0x0, " ", 0x0, "=", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "x", 0x0, ",", 0x0, "s", 0x0, "i", 0x0, "z", 0x0, "e"
	DCB	0x0, " ", 0x0, "=", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GA@LEGMELFL@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAX?$AAL?$AAD?$AAR?$AA?1?$AAE?$AAB?$AAO?$AAO?$AAT?$AA?1?$AAI?$AAP?$AAL?$AA?5?$AAd?$AAo?$AAw?$AAn?$AAl?$AAo?$AAa?$AAd?$AAe?$AAd?$AA?0@| DCB "I"
	DCB	0x0, "N", 0x0, "F", 0x0, "O", 0x0, ":", 0x0, " ", 0x0, "X"
	DCB	0x0, "L", 0x0, "D", 0x0, "R", 0x0, "/", 0x0, "E", 0x0, "B"
	DCB	0x0, "O", 0x0, "O", 0x0, "T", 0x0, "/", 0x0, "I", 0x0, "P"
	DCB	0x0, "L", 0x0, " ", 0x0, "d", 0x0, "o", 0x0, "w", 0x0, "n"
	DCB	0x0, "l", 0x0, "o", 0x0, "a", 0x0, "d", 0x0, "e", 0x0, "d"
	DCB	0x0, ",", 0x0, " ", 0x0, "s", 0x0, "p", 0x0, "i", 0x0, "n"
	DCB	0x0, " ", 0x0, "f", 0x0, "o", 0x0, "r", 0x0, "e", 0x0, "v"
	DCB	0x0, "e", 0x0, "r", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GE@FFBNFJNC@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAS?$AAp?$AAl?$AAa?$AAs?$AAh?$AAc?$AAr?$AAe?$AAe?$AAn?$AA?5?$AAl?$AAo?$AAg?$AAo?$AA?5?$AAd?$AAo?$AAw?$AAn?$AAl?$AAo?$AAa?$AAd?$AAe@| DCB "I"
	DCB	0x0, "N", 0x0, "F", 0x0, "O", 0x0, ":", 0x0, " ", 0x0, "S"
	DCB	0x0, "p", 0x0, "l", 0x0, "a", 0x0, "s", 0x0, "h", 0x0, "c"
	DCB	0x0, "r", 0x0, "e", 0x0, "e", 0x0, "n", 0x0, " ", 0x0, "l"
	DCB	0x0, "o", 0x0, "g", 0x0, "o", 0x0, " ", 0x0, "d", 0x0, "o"
	DCB	0x0, "w", 0x0, "n", 0x0, "l", 0x0, "o", 0x0, "a", 0x0, "d"
	DCB	0x0, "e", 0x0, "d", 0x0, ",", 0x0, " ", 0x0, "s", 0x0, "p"
	DCB	0x0, "i", 0x0, "n", 0x0, " ", 0x0, "f", 0x0, "o", 0x0, "r"
	DCB	0x0, "e", 0x0, "v", 0x0, "e", 0x0, "r", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HA@LNJPPCBO@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAE?$AAM?$AAL?$AAa?$AAu?$AAn?$AAc?$AAh?$AA?3?$AA?5?$AAI?$AAm?$AAa?$AAg?$AAe?$AA?5?$AAl?$AAo?$AAa?$AAd?$AA?5?$AAf?$AAr?$AAo@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "O", 0x0, "E", 0x0, "M", 0x0, "L", 0x0, "a", 0x0, "u"
	DCB	0x0, "n", 0x0, "c", 0x0, "h", 0x0, ":", 0x0, " ", 0x0, "I"
	DCB	0x0, "m", 0x0, "a", 0x0, "g", 0x0, "e", 0x0, " ", 0x0, "l"
	DCB	0x0, "o", 0x0, "a", 0x0, "d", 0x0, " ", 0x0, "f", 0x0, "r"
	DCB	0x0, "o", 0x0, "m", 0x0, " ", 0x0, "f", 0x0, "l", 0x0, "a"
	DCB	0x0, "s", 0x0, "h", 0x0, " ", 0x0, "m", 0x0, "e", 0x0, "m"
	DCB	0x0, "o", 0x0, "r", 0x0, "y", 0x0, " ", 0x0, "f", 0x0, "a"
	DCB	0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HA@PPNIDEHG@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAE?$AAM?$AAL?$AAa?$AAu?$AAn?$AAc?$AAh?$AA?3?$AA?5?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?5?$AAd?$AAo?$AAw?$AAn?$AAl?$AAo@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "O", 0x0, "E", 0x0, "M", 0x0, "L", 0x0, "a", 0x0, "u"
	DCB	0x0, "n", 0x0, "c", 0x0, "h", 0x0, ":", 0x0, " ", 0x0, "U"
	DCB	0x0, "n", 0x0, "k", 0x0, "n", 0x0, "o", 0x0, "w", 0x0, "n"
	DCB	0x0, " ", 0x0, "d", 0x0, "o", 0x0, "w", 0x0, "n", 0x0, "l"
	DCB	0x0, "o", 0x0, "a", 0x0, "d", 0x0, " ", 0x0, "t", 0x0, "y"
	DCB	0x0, "p", 0x0, "e", 0x0, ",", 0x0, " ", 0x0, "s", 0x0, "p"
	DCB	0x0, "i", 0x0, "n", 0x0, " ", 0x0, "f", 0x0, "o", 0x0, "r"
	DCB	0x0, "e", 0x0, "v", 0x0, "e", 0x0, "r", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GK@MMIDCEGF@?$AA?$CL?$AAO?$AAE?$AAM?$AAL?$AAa?$AAu?$AAn?$AAc?$AAh?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8@| DCB "+"
	DCB	0x0, "O", 0x0, "E", 0x0, "M", 0x0, "L", 0x0, "a", 0x0, "u"
	DCB	0x0, "n", 0x0, "c", 0x0, "h", 0x0, "(", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, ",", 0x0, " "
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x"
	DCB	0x0, ",", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0"
	DCB	0x0, "8", 0x0, "x", 0x0, ",", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, " ", 0x0, "-"
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, "/", 0x0, "%", 0x0, "d"
	DCB	0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OEMLaunch| PROC

; 690  : {

  00000		 |$LN79@OEMLaunch|
  00000	e92d43f0	 stmdb       sp!, {r4 - r9, lr}
  00004	e24dd00c	 sub         sp, sp, #0xC
  00008		 |$M48609|
  00008	e1a05003	 mov         r5, r3
  0000c	e1a08002	 mov         r8, r2
  00010	e1a09001	 mov         r9, r1
  00014	e1a07000	 mov         r7, r0

; 691  :     BSP_ARGS *pArgs = OALCAtoUA(IMAGE_SHARE_ARGS_CA);
; 692  : 
; 693  : 	UNREFERENCED_PARAMETER(size);
; 694  : 	UNREFERENCED_PARAMETER(pRomHeader);
; 695  : 
; 696  :     OALMSG(1, (L"+OEMLaunch(0x%08x, 0x%08x, 0x%08x, 0x%08x - %d/%d)\r\n", start, size,
; 697  :         launch, pRomHeader, g_eboot.bootDeviceType, g_eboot.type)); // OAL_INFO

  00018	e59f6224	 ldr         r6, [pc, #0x224]
  0001c	e59f021c	 ldr         r0, [pc, #0x21C]
  00020	e1a03008	 mov         r3, r8
  00024	e5964004	 ldr         r4, [r6, #4]
  00028	e596e000	 ldr         lr, [r6]
  0002c	e1a02009	 mov         r2, r9
  00030	e1a01007	 mov         r1, r7
  00034	e58d4008	 str         r4, [sp, #8]
  00038	e58de004	 str         lr, [sp, #4]
  0003c	e58d5000	 str         r5, [sp]
  00040	eb000000	 bl          NKDbgPrintfW

; 698  : 
; 699  :     // Depending on protocol there can be some action required
; 700  :     switch (g_eboot.bootDeviceType)

  00044	e5963000	 ldr         r3, [r6]
  00048	e59f51ec	 ldr         r5, [pc, #0x1EC]
  0004c	e3530002	 cmp         r3, #2
  00050	0a000018	 beq         |$LN21@OEMLaunch|
  00054	e3530004	 cmp         r3, #4

; 785  :                     break;
; 786  : 			}
; 787  :             break;
; 788  : 
; 789  :         default:        
; 790  :             launch = g_eboot.launchAddress;
; 791  :             break;

  00058	1a00002b	 bne         |$LN17@OEMLaunch|
  0005c	e5963004	 ldr         r3, [r6, #4]
  00060	e3530001	 cmp         r3, #1
  00064	0a000036	 beq         |$LN16@OEMLaunch|

; 701  : 	{
; 702  : #if BUILDING_EBOOT_SD
; 703  :         case BOOT_SDCARD_TYPE: // 4
; 704  :             switch (g_eboot.type)

  00068	e3530006	 cmp         r3, #6
  0006c	0a000005	 beq         |$LN26@OEMLaunch|

; 726  : 					}
; 727  :                     launch = g_eboot.launchAddress;
; 728  :                     break;
; 729  : 					
; 730  : #if 0
; 731  : /*				case DOWNLOAD_TYPE_EBOOT:
; 732  :                 case DOWNLOAD_TYPE_XLDR:
; 733  :                     OALMSG(OAL_INFO, (L"INFO: "
; 734  :                         L"XLDR/EBOOT/IPL downloaded, spin forever\r\n"
; 735  :                         ));
; 736  :                     while (TRUE);
; 737  :                     break;
; 738  : */
; 739  : #endif
; 740  :                 default:
; 741  :                     OALMSG(OAL_ERROR, (L"ERROR: OEMLaunch: Unknown download type, spin forever\r\n"));

  00070	e59f31ac	 ldr         r3, [pc, #0x1AC]
  00074	e5933440	 ldr         r3, [r3, #0x440]
  00078	e3130001	 tst         r3, #1
  0007c	159f01a4	 ldrne       r0, [pc, #0x1A4]
  00080	1b000000	 blne        NKDbgPrintfW
  00084		 |$LL23@OEMLaunch|

; 742  :                     for(;;);

  00084	eafffffe	 b           |$LL23@OEMLaunch|
  00088		 |$LN26@OEMLaunch|

; 705  : 			{
; 706  : #if 0
; 707  : /*				case DOWNLOAD_TYPE_FLASHRAM:
; 708  :                     if (BLFlashDownload(&g_bootCfg, g_kitlDevices) != BL_JUMP)
; 709  : 					{
; 710  :                         OALMSG(OAL_ERROR, (L"ERROR: OEMLaunch: Image load from flash memory failed\r\n"));
; 711  :                         goto cleanUp;
; 712  : 					}
; 713  :                     launch = g_eboot.launchAddress;
; 714  :                     break;
; 715  : */
; 716  : #endif
; 717  :                 case DOWNLOAD_TYPE_RAM: // 1
; 718  :                     launch = (UINT32)OEMMapMemAddr(start, launch);
; 719  :                     break;
; 720  : 					
; 721  :                 case DOWNLOAD_TYPE_FLASHNAND: // 6
; 722  :                     if (BLFlashDownload(&g_bootCfg, g_kitlDevices) != BL_JUMP)

  00088	e59f11a8	 ldr         r1, [pc, #0x1A8]
  0008c	e1a00005	 mov         r0, r5
  00090	eb000000	 bl          BLFlashDownload
  00094	e3500001	 cmp         r0, #1
  00098	0a00001b	 beq         |$LN17@OEMLaunch|

; 723  : 					{
; 724  :                         OALMSG(OAL_ERROR, (L"ERROR: OEMLaunch: Image load from flash memory failed\r\n"));

  0009c	e59f3180	 ldr         r3, [pc, #0x180]
  000a0	e5933440	 ldr         r3, [r3, #0x440]
  000a4	e3130001	 tst         r3, #1
  000a8	0a000056	 beq         |$cleanUp$47933|
  000ac	e59f0180	 ldr         r0, [pc, #0x180]
  000b0	eb000000	 bl          NKDbgPrintfW

; 725  :                         goto cleanUp;

  000b4	ea000053	 b           |$cleanUp$47933|
  000b8		 |$LN21@OEMLaunch|

; 743  :                     break;
; 744  : 			}
; 745  :             break;
; 746  : 
; 747  : #endif
; 748  : 
; 749  :         case OAL_KITL_TYPE_ETH:
; 750  :             BLEthConfig(pArgs);

  000b8	e3a0020a	 mov         r0, #0xA, 4
  000bc	eb000000	 bl          BLEthConfig

; 751  :             switch (g_eboot.type)

  000c0	e5963004	 ldr         r3, [r6, #4]
  000c4	e3530001	 cmp         r3, #1
  000c8	0a00001d	 beq         |$LN16@OEMLaunch|
  000cc	e3530002	 cmp         r3, #2
  000d0	9a000015	 bls         |$LN9@OEMLaunch|
  000d4	e3530004	 cmp         r3, #4
  000d8	9a00000d	 bls         |$LN15@OEMLaunch|
  000dc	e3530005	 cmp         r3, #5
  000e0	9a000011	 bls         |$LN9@OEMLaunch|
  000e4	e3530007	 cmp         r3, #7
  000e8	9affffe6	 bls         |$LN26@OEMLaunch|
  000ec	e3530008	 cmp         r3, #8
  000f0	1a00000d	 bne         |$LN9@OEMLaunch|

; 775  :                     break;
; 776  : 
; 777  : 				case DOWNLOAD_TYPE_LOGO:
; 778  :                     OALMSG(OAL_INFO, (L"INFO: Splashcreen logo downloaded, spin forever\r\n"));

  000f4	e59f3128	 ldr         r3, [pc, #0x128]
  000f8	e5933440	 ldr         r3, [r3, #0x440]
  000fc	e3130008	 tst         r3, #8
  00100	159f0128	 ldrne       r0, [pc, #0x128]
  00104	1b000000	 blne        NKDbgPrintfW
  00108		 |$LL11@OEMLaunch|

; 779  :                     for(;;);

  00108	eafffffe	 b           |$LL11@OEMLaunch|
  0010c		 |$LN17@OEMLaunch|

; 752  : 			{
; 753  : #ifdef IMGMULTIXIP
; 754  :                 case DOWNLOAD_TYPE_EXT:
; 755  : #endif					
; 756  :                 case DOWNLOAD_TYPE_FLASHNAND:
; 757  : 				case DOWNLOAD_TYPE_FLASHNOR:
; 758  :                     if (BLFlashDownload(&g_bootCfg, g_kitlDevices) != BL_JUMP)
; 759  :                         {
; 760  :                         OALMSG(OAL_ERROR, (L"ERROR: OEMLaunch: "
; 761  :                             L"Image load from flash memory failed\r\n"));
; 762  :                         goto cleanUp;
; 763  :                         }
; 764  :                     launch = g_eboot.launchAddress;

  0010c	e596400c	 ldr         r4, [r6, #0xC]

; 765  :                     break;

  00110	ea00000f	 b           |$LN19@OEMLaunch|
  00114		 |$LN15@OEMLaunch|

; 769  :                     break;
; 770  : 
; 771  :                 case DOWNLOAD_TYPE_EBOOT:
; 772  :                 case DOWNLOAD_TYPE_XLDR:
; 773  :                     OALMSG(OAL_INFO, (L"INFO: XLDR/EBOOT/IPL downloaded, spin forever\r\n"));

  00114	e59f3108	 ldr         r3, [pc, #0x108]
  00118	e5933440	 ldr         r3, [r3, #0x440]
  0011c	e3130008	 tst         r3, #8
  00120	159f0104	 ldrne       r0, [pc, #0x104]
  00124	1b000000	 blne        NKDbgPrintfW
  00128		 |$LL14@OEMLaunch|

; 774  :                     for(;;);

  00128	eafffffe	 b           |$LL14@OEMLaunch|
  0012c		 |$LN9@OEMLaunch|

; 780  :                     break;
; 781  : 
; 782  :                 default:
; 783  :                     OALMSG(OAL_ERROR, (L"ERROR: OEMLaunch: Unknown download type, spin forever\r\n"));

  0012c	e59f30f0	 ldr         r3, [pc, #0xF0]
  00130	e5933440	 ldr         r3, [r3, #0x440]
  00134	e3130001	 tst         r3, #1
  00138	159f00e8	 ldrne       r0, [pc, #0xE8]
  0013c	1b000000	 blne        NKDbgPrintfW
  00140		 |$LL8@OEMLaunch|

; 784  :                     for(;;);

  00140	eafffffe	 b           |$LL8@OEMLaunch|
  00144		 |$LN16@OEMLaunch|

; 766  : 
; 767  :                 case DOWNLOAD_TYPE_RAM:
; 768  :                     launch = (UINT32)OEMMapMemAddr(start, launch);

  00144	e1a01008	 mov         r1, r8
  00148	e1a00007	 mov         r0, r7
  0014c	eb000000	 bl          OEMMapMemAddr
  00150	e1a04000	 mov         r4, r0
  00154		 |$LN19@OEMLaunch|

; 792  :         }
; 793  : 
; 794  : #ifndef BSP_NO_NAND_IN_SDBOOT
; 795  : 	/* if loading from NAND then do not need to flash NAND again */
; 796  :     if ((g_bootCfg.flashNKFlags & ENABLE_FLASH_NK) && (g_eboot.bootDeviceType != OAL_KITL_TYPE_FLASH) && 
; 797  : 	    (start != (IMAGE_WINCE_CODE_CA + NAND_ROMOFFSET)) && // 0x80002000 + 0x40000000
; 798  : 	    (start != (IMAGE_WINCE_CODE_CA + NOR_ROMOFFSET)))	 // 0x80002000 + 0x60000000

  00154	e5953080	 ldr         r3, [r5, #0x80]
  00158	e59f50c4	 ldr         r5, [pc, #0xC4]
  0015c	e3130001	 tst         r3, #1
  00160	0a000018	 beq         |$LN66@OEMLaunch|
  00164	e5963000	 ldr         r3, [r6]
  00168	e3530003	 cmp         r3, #3
  0016c	0a000015	 beq         |$LN66@OEMLaunch|
  00170	e3a03103	 mov         r3, #3, 2
  00174	e3833a02	 orr         r3, r3, #2, 20
  00178	e1570003	 cmp         r7, r3
  0017c	0a000011	 beq         |$LN66@OEMLaunch|
  00180	e3a0320e	 mov         r3, #0xE, 4
  00184	e3833a02	 orr         r3, r3, #2, 20
  00188	e1570003	 cmp         r7, r3
  0018c	0a00000d	 beq         |$LN66@OEMLaunch|

; 799  : 	{
; 800  : 		OALMSG(1, (L"WriteFlashNK: start = 0x%x,size = 0x%x\r\n",start,size));	

  00190	e59f0088	 ldr         r0, [pc, #0x88]
  00194	e1a02009	 mov         r2, r9
  00198	e1a01007	 mov         r1, r7
  0019c	eb000000	 bl          NKDbgPrintfW

; 801  : 		if( !WriteFlashNK(start, size))

  001a0	e1a01009	 mov         r1, r9
  001a4	e1a00007	 mov         r0, r7
  001a8	eb000000	 bl          WriteFlashNK
  001ac	e3500000	 cmp         r0, #0
  001b0	1a000004	 bne         |$LN66@OEMLaunch|

; 802  : 			OALMSG(OAL_ERROR, (L"ERROR: OEMLaunch: Flash NK.bin failed, start=%x\r\n", start));

  001b4	e5953440	 ldr         r3, [r5, #0x440]
  001b8	e3130001	 tst         r3, #1
  001bc	159f0058	 ldrne       r0, [pc, #0x58]
  001c0	11a01007	 movne       r1, r7
  001c4	1b000000	 blne        NKDbgPrintfW
  001c8		 |$LN66@OEMLaunch|

; 803  : 	}
; 804  : #endif
; 805  : 
; 806  :     // Check if we get launch address
; 807  :     if (launch == (UINT32)INVALID_HANDLE_VALUE)

  001c8	e3740001	 cmn         r4, #1
  001cc	1a000004	 bne         |$LN1@OEMLaunch|
  001d0	e5953440	 ldr         r3, [r5, #0x440]

; 808  : 	{
; 809  :         OALMSG(OAL_ERROR, (L"ERROR: OEMLaunch: Unknown image launch address, spin forever\r\n"));

  001d4	e3130001	 tst         r3, #1
  001d8	159f0038	 ldrne       r0, [pc, #0x38]
  001dc	1b000000	 blne        NKDbgPrintfW
  001e0		 |$LL2@OEMLaunch|

; 810  :         for(;;);

  001e0	eafffffe	 b           |$LL2@OEMLaunch|
  001e4		 |$LN1@OEMLaunch|

; 811  : 	}        
; 812  : 
; 813  :     // Print message, flush caches and jump to image
; 814  :     OALLog(L"Launch Windows CE image by jumping to 0x%08x...\r\n\r\n", launch);

  001e4	e59f0028	 ldr         r0, [pc, #0x28]
  001e8	e1a01004	 mov         r1, r4
  001ec	eb000000	 bl          NKDbgPrintfW

; 815  : 
; 816  : 	OEMDeinitDebugSerial();

  001f0	eb000000	 bl          OEMDeinitDebugSerial

; 817  :     OEMPlatformDeinit();

  001f4	eb000000	 bl          OEMPlatformDeinit

; 818  :     ClearDisplayBuffer();

  001f8	eb000000	 bl          ClearDisplayBuffer

; 819  :     JumpTo(OALVAtoPA((UCHAR*)launch));

  001fc	e1a00004	 mov         r0, r4
  00200	eb000000	 bl          OALVAtoPA
  00204	eb000000	 bl          JumpTo
  00208		 |$cleanUp$47933|

; 820  : 
; 821  : cleanUp:
; 822  :     return;
; 823  : }

  00208	e28dd00c	 add         sp, sp, #0xC
  0020c	e8bd43f0	 ldmia       sp!, {r4 - r9, lr}
  00210	e12fff1e	 bx          lr
  00214		 |$LN80@OEMLaunch|
  00214		 |$LN81@OEMLaunch|
  00214	00000000	 DCD         |??_C@_1GI@OMOEGIPN@?$AAL?$AAa?$AAu?$AAn?$AAc?$AAh?$AA?5?$AAW?$AAi?$AAn?$AAd?$AAo?$AAw?$AAs?$AA?5?$AAC?$AAE?$AA?5?$AAi?$AAm?$AAa?$AAg?$AAe?$AA?5?$AAb?$AAy?$AA?5?$AAj?$AAu?$AAm?$AAp?$AAi@|
  00218		 |$LN82@OEMLaunch|
  00218	00000000	 DCD         |??_C@_1HO@MGHNOKAM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAE?$AAM?$AAL?$AAa?$AAu?$AAn?$AAc?$AAh?$AA?3?$AA?5?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?5?$AAi?$AAm?$AAa?$AAg?$AAe?$AA?5@|
  0021c		 |$LN83@OEMLaunch|
  0021c	00000000	 DCD         |??_C@_1GE@FBKDALPO@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAE?$AAM?$AAL?$AAa?$AAu?$AAn?$AAc?$AAh?$AA?3?$AA?5?$AAF?$AAl?$AAa?$AAs?$AAh?$AA?5?$AAN?$AAK?$AA?4?$AAb?$AAi?$AAn?$AA?5?$AAf@|
  00220		 |$LN84@OEMLaunch|
  00220	00000000	 DCD         |??_C@_1FC@IKOIDMGO@?$AAW?$AAr?$AAi?$AAt?$AAe?$AAF?$AAl?$AAa?$AAs?$AAh?$AAN?$AAK?$AA?3?$AA?5?$AAs?$AAt?$AAa?$AAr?$AAt?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?0?$AAs?$AAi?$AAz?$AAe?$AA?5@|
  00224		 |$LN85@OEMLaunch|
  00224	00000000	 DCD         |dpCurSettings|
  00228		 |$LN86@OEMLaunch|
  00228	00000000	 DCD         |??_C@_1HA@PPNIDEHG@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAE?$AAM?$AAL?$AAa?$AAu?$AAn?$AAc?$AAh?$AA?3?$AA?5?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?5?$AAd?$AAo?$AAw?$AAn?$AAl?$AAo@|
  0022c		 |$LN87@OEMLaunch|
  0022c	00000000	 DCD         |??_C@_1GA@LEGMELFL@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAX?$AAL?$AAD?$AAR?$AA?1?$AAE?$AAB?$AAO?$AAO?$AAT?$AA?1?$AAI?$AAP?$AAL?$AA?5?$AAd?$AAo?$AAw?$AAn?$AAl?$AAo?$AAa?$AAd?$AAe?$AAd?$AA?0@|
  00230		 |$LN88@OEMLaunch|
  00230	00000000	 DCD         |??_C@_1GE@FFBNFJNC@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAS?$AAp?$AAl?$AAa?$AAs?$AAh?$AAc?$AAr?$AAe?$AAe?$AAn?$AA?5?$AAl?$AAo?$AAg?$AAo?$AA?5?$AAd?$AAo?$AAw?$AAn?$AAl?$AAo?$AAa?$AAd?$AAe@|
  00234		 |$LN89@OEMLaunch|
  00234	00000000	 DCD         |??_C@_1HA@LNJPPCBO@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAE?$AAM?$AAL?$AAa?$AAu?$AAn?$AAc?$AAh?$AA?3?$AA?5?$AAI?$AAm?$AAa?$AAg?$AAe?$AA?5?$AAl?$AAo?$AAa?$AAd?$AA?5?$AAf?$AAr?$AAo@|
  00238		 |$LN90@OEMLaunch|
  00238	00000000	 DCD         |g_kitlDevices|
  0023c		 |$LN91@OEMLaunch|
  0023c	00000000	 DCD         |g_bootCfg|
  00240		 |$LN92@OEMLaunch|
  00240	00000000	 DCD         |??_C@_1GK@MMIDCEGF@?$AA?$CL?$AAO?$AAE?$AAM?$AAL?$AAa?$AAu?$AAn?$AAc?$AAh?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8@|
  00244		 |$LN93@OEMLaunch|
  00244	00000000	 DCD         |g_eboot|
  00248		 |$M48610|

			 ENDP  ; |OEMLaunch|

	END
