; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\Z2170P\SRC\BOOTLOADER\XLDR\main.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|pTOC| [ DATA ]
	EXPORT	|dwOEMHighSecurity| [ DATA ]
	EXPORT	|dwEbootECCtype| [ DATA ]
	EXPORT	|g_ecctype| [ DATA ]

  00000			 AREA	 |.data|, DATA
	 COMMON	|gCPU_family|, 0x4


  00000			 AREA	 |.bss|, NOINIT
|g_ecctype| %	0x1

  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
|pTOC|	DCD	0xffffffff
|dwOEMHighSecurity| DCD 0x2
|dwEbootECCtype| DCD 0xffffffff
	EXPORT	|BSPGpioInit|
	IMPORT	|BSPInsertGpioDevice|
	IMPORT	|Omap_Gpio|
; File c:\wince600\platform\z2170p\src\bootloader\xldr\main.c

  00000			 AREA	 |.pdata|, PDATA
|$T47703| DCD	|$LN5@BSPGpioIni|
	DCD	0x40000801
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |BSPGpioInit| PROC

; 280  : {

  00000		 |$LN5@BSPGpioIni|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M47700|

; 281  :    BSPInsertGpioDevice(0,&Omap_Gpio,NULL);

  00004	e59f1010	 ldr         r1, [pc, #0x10]
  00008	e3a02000	 mov         r2, #0
  0000c	e3a00000	 mov         r0, #0
  00010	eb000000	 bl          BSPInsertGpioDevice

; 282  : }

  00014	e49de004	 ldr         lr, [sp], #4
  00018	e12fff1e	 bx          lr
  0001c		 |$LN6@BSPGpioIni|
  0001c		 |$LN7@BSPGpioIni|
  0001c	00000000	 DCD         |Omap_Gpio|
  00020		 |$M47701|

			 ENDP  ; |BSPGpioInit|

	EXPORT	|OALPAtoVA|

  00000			 AREA	 |.pdata|, PDATA
|$T47715| DCD	|$LN5@OALPAtoVA|
	DCD	0x40000100
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALPAtoVA| PROC

; 732  : {

  00000		 |$LN5@OALPAtoVA|
  00000		 |$M47712|

; 733  :     UNREFERENCED_PARAMETER(cached);
; 734  :     return (VOID*)address;
; 735  : }

  00000	e12fff1e	 bx          lr
  00004		 |$M47713|

			 ENDP  ; |OALPAtoVA|

	EXPORT	|OALVAtoPA|

  00000			 AREA	 |.pdata|, PDATA
|$T47725| DCD	|$LN5@OALVAtoPA|
	DCD	0x40000100
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALVAtoPA| PROC

; 743  : {

  00000		 |$LN5@OALVAtoPA|
  00000		 |$M47722|

; 744  :     return (UINT32)pVA;
; 745  : }

  00000	e12fff1e	 bx          lr
  00004		 |$M47723|

			 ENDP  ; |OALVAtoPA|


  00000			 AREA	 |.pdata|, PDATA
|$T47752| DCD	|$LN23@SetupCopyS|
	DCD	0x40002801
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |SetupCopySection| PROC

; 758  : {

  00000		 |$LN23@SetupCopyS|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004		 |$M47749|
  00004	e1a01000	 mov         r1, r0

; 759  :     BOOL rc = FALSE;

  00008	e3a00000	 mov         r0, #0

; 760  :     UINT32 loop, count;
; 761  :     COPYentry *pCopyEntry;
; 762  :     UINT8 *pSrc, *pDst;
; 763  : 
; 764  :     if (pTableOfContents == (ROMHDR *const) -1) goto cleanUp;

  0000c	e3710001	 cmn         r1, #1
  00010	0a000020	 beq         |$cleanUp$47633|

; 765  : 
; 766  :     for (loop = 0; loop < pTableOfContents->ulCopyEntries; loop++)

  00014	e5913020	 ldr         r3, [r1, #0x20]
  00018	e3a0e000	 mov         lr, #0
  0001c	e3530000	 cmp         r3, #0
  00020	9a00001b	 bls         |$LN5@SetupCopyS|
  00024	e3a04000	 mov         r4, #0
  00028	e3a07000	 mov         r7, #0
  0002c		 |$LL7@SetupCopyS|
  0002c	e5913024	 ldr         r3, [r1, #0x24]
  00030	e0845003	 add         r5, r4, r3

; 767  :         {
; 768  :         pCopyEntry = (COPYentry *)(pTableOfContents->ulCopyOffset + loop*sizeof(COPYentry));
; 769  : 
; 770  :         count = pCopyEntry->ulCopyLen;

  00034	e5953008	 ldr         r3, [r5, #8]

; 771  :         pDst = (UINT8*)pCopyEntry->ulDest;

  00038	e5950004	 ldr         r0, [r5, #4]

; 772  :         pSrc = (UINT8*)pCopyEntry->ulSource;

  0003c	e5952000	 ldr         r2, [r5]
  00040	e1b06003	 movs        r6, r3

; 773  :         while (count-- > 0)

  00044	0a000003	 beq         |$LN14@SetupCopyS|
  00048		 |$LL4@SetupCopyS|

; 774  :             *pDst++ = *pSrc++;

  00048	e4d23001	 ldrb        r3, [r2], #1
  0004c	e2566001	 subs        r6, r6, #1
  00050	e4c03001	 strb        r3, [r0], #1
  00054	1afffffb	 bne         |$LL4@SetupCopyS|
  00058		 |$LN14@SetupCopyS|

; 775  :         count = pCopyEntry->ulDestLen - pCopyEntry->ulCopyLen;

  00058	e595200c	 ldr         r2, [r5, #0xC]
  0005c	e5953008	 ldr         r3, [r5, #8]
  00060	e0523003	 subs        r3, r2, r3

; 776  :         while (count-- > 0)

  00064	0a000005	 beq         |$LN2@SetupCopyS|
  00068	e3530000	 cmp         r3, #0
  0006c	0a000003	 beq         |$LN2@SetupCopyS|

; 775  :         count = pCopyEntry->ulDestLen - pCopyEntry->ulCopyLen;

  00070	e0803003	 add         r3, r0, r3
  00074		 |$LN19@SetupCopyS|
  00074	e4c07001	 strb        r7, [r0], #1
  00078	e1500003	 cmp         r0, r3
  0007c	1afffffc	 bne         |$LN19@SetupCopyS|
  00080		 |$LN2@SetupCopyS|

; 765  : 
; 766  :     for (loop = 0; loop < pTableOfContents->ulCopyEntries; loop++)

  00080	e5913020	 ldr         r3, [r1, #0x20]
  00084	e28ee001	 add         lr, lr, #1
  00088	e2844010	 add         r4, r4, #0x10
  0008c	e15e0003	 cmp         lr, r3
  00090	3affffe5	 bcc         |$LL7@SetupCopyS|
  00094		 |$LN5@SetupCopyS|

; 777  :             *pDst++ = 0;
; 778  :         }
; 779  : 
; 780  :     rc = TRUE;

  00094	e3a00001	 mov         r0, #1
  00098		 |$cleanUp$47633|

; 781  : 
; 782  : cleanUp:
; 783  :     return rc;
; 784  : }

  00098	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  0009c	e12fff1e	 bx          lr
  000a0		 |$M47750|

			 ENDP  ; |SetupCopySection|

	EXPORT	|NKDbgPrintfW|

  00000			 AREA	 |.pdata|, PDATA
|$T47759| DCD	|$LN5@NKDbgPrint|
	DCD	0x40000503
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |NKDbgPrintfW| PROC

; 792  : {

  00000		 |$LN5@NKDbgPrint|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d000f	 stmdb       sp!, {r0 - r3}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c		 |$M47756|

; 793  :     //  Stubbed out to shrink XLDR binary size
; 794  :     UNREFERENCED_PARAMETER(pszFormat);
; 795  : }

  0000c	e89d6000	 ldmia       sp, {sp, lr}
  00010	e12fff1e	 bx          lr
  00014		 |$M47757|

			 ENDP  ; |NKDbgPrintfW|

	EXPORT	|NKvDbgPrintfW|

  00000			 AREA	 |.pdata|, PDATA
|$T47766| DCD	|$LN5@NKvDbgPrin|
	DCD	0x40000100
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |NKvDbgPrintfW| PROC

; 803  : {

  00000		 |$LN5@NKvDbgPrin|
  00000		 |$M47763|

; 804  :     //  Stubbed out to shrink XLDR binary size
; 805  :     UNREFERENCED_PARAMETER(pszFormat);
; 806  :     UNREFERENCED_PARAMETER(pArgList);
; 807  : 
; 808  : }

  00000	e12fff1e	 bx          lr
  00004		 |$M47764|

			 ENDP  ; |NKvDbgPrintfW|

	EXPORT	|XLDRMain|
	EXPORT	|??_C@_1BC@MABDLOIF@?$AA?$AN?$AA?6?$AAH?$AAA?$AAL?$AAT?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DE@IMNGKPHE@?$AA?$AN?$AA?6?$AAJ?$AAu?$AAm?$AAp?$AAi?$AAn?$AAg?$AA?5?$AAt?$AAo?$AA?5?$AAb?$AAo?$AAo?$AAt?$AAl?$AAo?$AAa?$AAd?$AAe?$AAr?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_13JOFGPIOO@?$AA?4?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_13PBOLBIIK@?$AA$?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_13GMDMCADD@?$AA?$CD?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CO@MAFCCJBC@?$AA?$AN?$AA?6?$AAF?$AAM?$AAD?$AA_?$AAG?$AAe?$AAt?$AAI?$AAn?$AAf?$AAo?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CI@HOAHMIF@?$AA?$AN?$AA?6?$AAF?$AAM?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GG@MOBLLCID@?$AA?$AN?$AA?6?$AAZ?$AAE?$AAB?$AAE?$AAX?$AA?5?$AAW?$AAi?$AAn?$AAd?$AAo?$AAw?$AAs?$AA?5?$AAC?$AAE?$AA?5?$AAN?$AAA?$AAN?$AAD?$AA?5?$AAX?$AA?9?$AAL?$AAo?$AAa?$AAd?$AAe?$AAr@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EE@HGBBJJHB@?$AA?$AN?$AA?6?$AAB?$AAu?$AAi?$AAl?$AAt?$AA?5?$AAM?$AAa?$AAr?$AA?5?$AA?5?$AA3?$AA?5?$AA2?$AA0?$AA1?$AA4?$AA?5?$AAa?$AAt?$AA?5?$AA1?$AA4?$AA?3?$AA1?$AA5?$AA?3?$AA2?$AA3?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_17KPMHKKFB@?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CC@DJCPIFGO@?$AAV?$AAe?$AAr?$AAs?$AAi?$AAo?$AAn?$AA?3?$AA?5?$AA0?$AA?4?$AA0?$AA?4?$AA1?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_19PONNFJAB@?$AA3?$AA7?$AAX?$AAX?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_19CAFJHOAJ@?$AA3?$AA5?$AA3?$AA0?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|JumpTo|
	IMPORT	|OEMDeinitDebugSerial|
	IMPORT	|FMD_ReadSector|
	IMPORT	|FMD_Deinit|
	IMPORT	|FMD_GetBlockStatus|
	IMPORT	|FMD_GetInfo|
	IMPORT	|FMD_Init|
	IMPORT	|GPIOSetMode|
	IMPORT	|GPIOClrBit|
	IMPORT	|GPIOOpen|
	IMPORT	|GPIOInit|
	IMPORT	|OEMWriteDebugString|
	IMPORT	|OEMInitDebugSerial|
	IMPORT	|EnableDeviceClocks|
	IMPORT	|BSPGetDebugUARTConfig|
	IMPORT	|PlatformSetup|
	IMPORT	|Get_CPUVersion|
	IMPORT	|EnableCache_GP|
	IMPORT	|OALLocalAllocInit|

  00001			 AREA	 |.bss|, NOINIT
|?allocationPool@?1??XLDRMain@@9@9| % 0x200		; `XLDRMain'::`2'::allocationPool
|?allocationPool@?1??XLDRMain@@9@9| % 0x200		; `XLDRMain'::`2'::allocationPool

  00000			 AREA	 |.pdata|, PDATA
|$T47830| DCD	|$LN51@XLDRMain|
	DCD	0x4000b502

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BC@MABDLOIF@?$AA?$AN?$AA?6?$AAH?$AAA?$AAL?$AAT?$AA?$AN?$AA?6?$AA?$AA@| DCB 0xd
	DCB	0x0, 0xa, 0x0, "H", 0x0, "A", 0x0, "L", 0x0, "T", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DE@IMNGKPHE@?$AA?$AN?$AA?6?$AAJ?$AAu?$AAm?$AAp?$AAi?$AAn?$AAg?$AA?5?$AAt?$AAo?$AA?5?$AAb?$AAo?$AAo?$AAt?$AAl?$AAo?$AAa?$AAd?$AAe?$AAr?$AA?$AN?$AA?6?$AA?$AA@| DCB 0xd
	DCB	0x0, 0xa, 0x0, "J", 0x0, "u", 0x0, "m", 0x0, "p", 0x0, "i"
	DCB	0x0, "n", 0x0, "g", 0x0, " ", 0x0, "t", 0x0, "o", 0x0, " "
	DCB	0x0, "b", 0x0, "o", 0x0, "o", 0x0, "t", 0x0, "l", 0x0, "o"
	DCB	0x0, "a", 0x0, "d", 0x0, "e", 0x0, "r", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_13JOFGPIOO@?$AA?4?$AA?$AA@| DCB ".", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_13PBOLBIIK@?$AA$?$AA?$AA@| DCB "$$", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_13GMDMCADD@?$AA?$CD?$AA?$AA@| DCB "#", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CO@MAFCCJBC@?$AA?$AN?$AA?6?$AAF?$AAM?$AAD?$AA_?$AAG?$AAe?$AAt?$AAI?$AAn?$AAf?$AAo?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB 0xd
	DCB	0x0, 0xa, 0x0, "F", 0x0, "M", 0x0, "D", 0x0, "_", 0x0, "G"
	DCB	0x0, "e", 0x0, "t", 0x0, "I", 0x0, "n", 0x0, "f", 0x0, "o"
	DCB	0x0, " ", 0x0, "f", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e"
	DCB	0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@HOAHMIF@?$AA?$AN?$AA?6?$AAF?$AAM?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB 0xd
	DCB	0x0, 0xa, 0x0, "F", 0x0, "M", 0x0, "D", 0x0, "_", 0x0, "I"
	DCB	0x0, "n", 0x0, "i", 0x0, "t", 0x0, " ", 0x0, "f", 0x0, "a"
	DCB	0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GG@MOBLLCID@?$AA?$AN?$AA?6?$AAZ?$AAE?$AAB?$AAE?$AAX?$AA?5?$AAW?$AAi?$AAn?$AAd?$AAo?$AAw?$AAs?$AA?5?$AAC?$AAE?$AA?5?$AAN?$AAA?$AAN?$AAD?$AA?5?$AAX?$AA?9?$AAL?$AAo?$AAa?$AAd?$AAe?$AAr@| DCB 0xd
	DCB	0x0, 0xa, 0x0, "Z", 0x0, "E", 0x0, "B", 0x0, "E", 0x0, "X"
	DCB	0x0, " ", 0x0, "W", 0x0, "i", 0x0, "n", 0x0, "d", 0x0, "o"
	DCB	0x0, "w", 0x0, "s", 0x0, " ", 0x0, "C", 0x0, "E", 0x0, " "
	DCB	0x0, "N", 0x0, "A", 0x0, "N", 0x0, "D", 0x0, " ", 0x0, "X"
	DCB	0x0, "-", 0x0, "L", 0x0, "o", 0x0, "a", 0x0, "d", 0x0, "e"
	DCB	0x0, "r", 0x0, " ", 0x0, "f", 0x0, "o", 0x0, "r", 0x0, " "
	DCB	0x0, "Z", 0x0, "-", 0x0, "2", 0x0, "1", 0x0, "7", 0x0, "0"
	DCB	0x0, "P", 0x0, " ", 0x0, "-", 0x0, " ", 0x0, "R", 0x0, "a"
	DCB	0x0, "y", 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EE@HGBBJJHB@?$AA?$AN?$AA?6?$AAB?$AAu?$AAi?$AAl?$AAt?$AA?5?$AAM?$AAa?$AAr?$AA?5?$AA?5?$AA3?$AA?5?$AA2?$AA0?$AA1?$AA4?$AA?5?$AAa?$AAt?$AA?5?$AA1?$AA4?$AA?3?$AA1?$AA5?$AA?3?$AA2?$AA3?$AA?5@| DCB 0xd
	DCB	0x0, 0xa, 0x0, "B", 0x0, "u", 0x0, "i", 0x0, "l", 0x0, "t"
	DCB	0x0, " ", 0x0, "M", 0x0, "a", 0x0, "r", 0x0, " ", 0x0, " "
	DCB	0x0, "3", 0x0, " ", 0x0, "2", 0x0, "0", 0x0, "1", 0x0, "4"
	DCB	0x0, " ", 0x0, "a", 0x0, "t", 0x0, " ", 0x0, "1", 0x0, "4"
	DCB	0x0, ":", 0x0, "1", 0x0, "5", 0x0, ":", 0x0, "2", 0x0, "3"
	DCB	0x0, " ", 0x0, "(", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_17KPMHKKFB@?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB ")", 0x0, 0xd, 0x0
	DCB	0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CC@DJCPIFGO@?$AAV?$AAe?$AAr?$AAs?$AAi?$AAo?$AAn?$AA?3?$AA?5?$AA0?$AA?4?$AA0?$AA?4?$AA1?$AA?$AN?$AA?6?$AA?$AA@| DCB "V"
	DCB	0x0, "e", 0x0, "r", 0x0, "s", 0x0, "i", 0x0, "o", 0x0, "n"
	DCB	0x0, ":", 0x0, " ", 0x0, "0", 0x0, ".", 0x0, "0", 0x0, "."
	DCB	0x0, "1", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_19PONNFJAB@?$AA3?$AA7?$AAX?$AAX?$AA?$AA@| DCB "3", 0x0, "7", 0x0, "X"
	DCB	0x0, "X", 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_19CAFJHOAJ@?$AA3?$AA5?$AA3?$AA0?$AA?$AA@| DCB "3", 0x0, "5", 0x0, "3"
	DCB	0x0, "0", 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |XLDRMain| PROC

; 289  : {

  00000		 |$LN51@XLDRMain|
  00000	e92d43f0	 stmdb       sp!, {r4 - r9, lr}
  00004	e24ddfe6	 sub         sp, sp, #0xE6, 30
  00008		 |$M47827|

; 290  : #ifdef FMD_NAND // UART, SD, NAND
; 291  :     HANDLE hFMD;
; 292  :     PCI_REG_INFO regInfo;
; 293  :     FlashInfo flashInfo;
; 294  :     UINT32 size;  
; 295  : #endif
; 296  : 
; 297  : #ifdef MEMORY_BOOT // NAND
; 298  :     UINT32 count;
; 299  :     SECTOR_ADDR ix;
; 300  : #endif
; 301  : 
; 302  : #ifdef UART_BOOT // UART
; 303  :     UINT32 dnld_size, offset;
; 304  : 
; 305  :     INT image_block_cnt, nand_blocks_to_write;
; 306  :     INT xret;
; 307  : 
; 308  :     INT xblock_cnt = 0;
; 309  :     INT xack_cnt = 0;
; 310  :     INT xnak_cnt = 0;
; 311  :     INT xcan_cnt = 0;
; 312  :     INT xothers_cnt = 0;
; 313  : 
; 314  :     INT checksum_error_cnt = 0;
; 315  :     INT dup_pkt_cnt = 0;
; 316  : #endif
; 317  : 
; 318  :     SECTOR_ADDR sector;
; 319  :     BLOCK_ID block;
; 320  :     UINT8 *pImage;
; 321  :     SectorInfo sectorInfo;
; 322  : 
; 323  :     HANDLE hGpio;
; 324  :     static UCHAR allocationPool[512];
; 325  :     LPCWSTR ProcessorName   = L"3530";
; 326  : 
; 327  :     // Setup global variables
; 328  :     if (!SetupCopySection(pTOC))

  00008	e59f92c0	 ldr         r9, [pc, #0x2C0]
  0000c	e59f72b8	 ldr         r7, [pc, #0x2B8]
  00010	e5990000	 ldr         r0, [r9]
  00014	e3700001	 cmn         r0, #1
  00018	0a00009a	 beq         |$cleanUp$47572|
  0001c	e5903020	 ldr         r3, [r0, #0x20]
  00020	e3a04000	 mov         r4, #0
  00024	e3530000	 cmp         r3, #0
  00028	9a00001b	 bls         |$LN22@XLDRMain|
  0002c	e3a05000	 mov         r5, #0
  00030	e3a08000	 mov         r8, #0
  00034		 |$LL24@XLDRMain|
  00034	e5903024	 ldr         r3, [r0, #0x24]
  00038	e083e005	 add         lr, r3, r5
  0003c	e59e3008	 ldr         r3, [lr, #8]
  00040	e59e1004	 ldr         r1, [lr, #4]
  00044	e59e2000	 ldr         r2, [lr]
  00048	e1b06003	 movs        r6, r3
  0004c	0a000003	 beq         |$LN36@XLDRMain|
  00050		 |$LL21@XLDRMain|
  00050	e4d23001	 ldrb        r3, [r2], #1
  00054	e2566001	 subs        r6, r6, #1
  00058	e4c13001	 strb        r3, [r1], #1
  0005c	1afffffb	 bne         |$LL21@XLDRMain|
  00060		 |$LN36@XLDRMain|
  00060	e59e200c	 ldr         r2, [lr, #0xC]
  00064	e59e3008	 ldr         r3, [lr, #8]
  00068	e0523003	 subs        r3, r2, r3
  0006c	0a000005	 beq         |$LN19@XLDRMain|
  00070	e3530000	 cmp         r3, #0
  00074	0a000003	 beq         |$LN19@XLDRMain|
  00078	e0813003	 add         r3, r1, r3
  0007c		 |$LN45@XLDRMain|
  0007c	e4c18001	 strb        r8, [r1], #1
  00080	e1510003	 cmp         r1, r3
  00084	1afffffc	 bne         |$LN45@XLDRMain|
  00088		 |$LN19@XLDRMain|
  00088	e5903020	 ldr         r3, [r0, #0x20]
  0008c	e2844001	 add         r4, r4, #1
  00090	e2855010	 add         r5, r5, #0x10
  00094	e1540003	 cmp         r4, r3
  00098	3affffe5	 bcc         |$LL24@XLDRMain|
  0009c		 |$LN22@XLDRMain|

; 329  :         goto cleanUp;
; 330  : 
; 331  :     OALLocalAllocInit(allocationPool,sizeof(allocationPool));

  0009c	e59f8224	 ldr         r8, [pc, #0x224]
  000a0	e3a01c02	 mov         r1, #2, 24
  000a4		 |$cleanUp$47779|
  000a4	e1a00008	 mov         r0, r8
  000a8	eb000000	 bl          OALLocalAllocInit

; 332  : 
; 333  : /*
; 334  :     //  Enable cache based on device type
; 335  :     if( dwOEMHighSecurity == OEM_HIGH_SECURITY_HS )
; 336  :     {
; 337  :         EnableCache_HS();
; 338  :     }
; 339  :     else
; 340  :     {
; 341  :         EnableCache_GP();
; 342  :     }
; 343  : */
; 344  :     EnableCache_GP();

  000ac	eb000000	 bl          EnableCache_GP

; 345  : 
; 346  :     gCPU_family = CPU_FAMILY(Get_CPUVersion());

  000b0	eb000000	 bl          Get_CPUVersion
  000b4	e1a03800	 mov         r3, r0, lsl #16
  000b8	e59f2204	 ldr         r2, [pc, #0x204]
  000bc	e1a03c23	 mov         r3, r3, lsr #24

; 347  : 	
; 348  :     if( gCPU_family == CPU_FAMILY_DM37XX)

  000c0	e3530001	 cmp         r3, #1

; 349  :     {
; 350  :         ProcessorName = L"37XX";

  000c4	059f71f4	 ldreq       r7, [pc, #0x1F4]
  000c8	e5823000	 str         r3, [r2]

; 351  :     }
; 352  :     
; 353  :     PlatformSetup();

  000cc	eb000000	 bl          PlatformSetup

; 354  : 
; 355  :     // Initialize debug serial output
; 356  :     XLDRMSGINIT;

  000d0	eb000000	 bl          BSPGetDebugUARTConfig
  000d4	e5900000	 ldr         r0, [r0]
  000d8	e3a01001	 mov         r1, #1
  000dc	eb000000	 bl          EnableDeviceClocks
  000e0	eb000000	 bl          OEMInitDebugSerial

; 357  : 
; 358  :     // Print information...
; 359  : #ifdef FMD_ONENAND // X
; 360  : #ifdef MEMORY_BOOT
; 361  :     XLDRMSG(
; 362  :         TEXT("\r\nTexas Instruments Windows CE OneNAND X-Loader for EVM "));
; 363  :     XLDRMSG( (UINT16 *)ProcessorName);
; 364  :     XLDRMSG( 
; 365  :         TEXT("\r\n")
; 366  :         TEXT("Built ") TEXT(__DATE__) TEXT(" at ") TEXT(__TIME__) TEXT("\r\n")
; 367  :         );
; 368  : #endif
; 369  : #endif
; 370  : #ifdef FMD_NAND 
; 371  : #ifdef MEMORY_BOOT
; 372  :     //XLDRMSG( TEXT("\r\nZEBEX Windows CE NAND X-Loader for Z-2170P - Brian")); 
; 373  :     XLDRMSG( TEXT("\r\nZEBEX Windows CE NAND X-Loader for Z-2170P - Ray"));     //Ray 131024

  000e4	e59f01d0	 ldr         r0, [pc, #0x1D0]
  000e8	eb000000	 bl          OEMWriteDebugString

; 374  :     XLDRMSG( TEXT("\r\n") TEXT("Built ") TEXT(__DATE__) TEXT(" at ") TEXT(__TIME__) TEXT(" ("));

  000ec	e59f01c4	 ldr         r0, [pc, #0x1C4]
  000f0	eb000000	 bl          OEMWriteDebugString

; 375  : 	XLDRMSG( (UINT16 *)ProcessorName);

  000f4	e1a00007	 mov         r0, r7
  000f8	eb000000	 bl          OEMWriteDebugString

; 376  : 	XLDRMSG( TEXT(")\r\n"));

  000fc	e59f01b0	 ldr         r0, [pc, #0x1B0]
  00100	eb000000	 bl          OEMWriteDebugString

; 377  : #endif
; 378  : #endif
; 379  : 
; 380  : #ifdef MEMORY_BOOT // NAND
; 381  :     XLDRMSG( TEXT("Version: ") BSP_XLDR_NAND_VERSION_STRING TEXT("\r\n") );

  00104	e59f01a4	 ldr         r0, [pc, #0x1A4]
  00108	eb000000	 bl          OEMWriteDebugString

; 382  : #else
; 383  : 	XLDRMSG( TEXT("Version: ") BSP_XLDR_SD_VERSION_STRING TEXT("\r\n") );
; 384  : #endif
; 385  :     GPIOInit();

  0010c	eb000000	 bl          GPIOInit

; 386  :     hGpio = GPIOOpen();

  00110	eb000000	 bl          GPIOOpen

; 387  : 
; 388  : //#ifdef BSP_Z2000
; 389  :     GPIOClrBit(hGpio,BL_EN_SET_GPIO);

  00114	e3a0103d	 mov         r1, #0x3D
  00118	e1a04000	 mov         r4, r0
  0011c	eb000000	 bl          GPIOClrBit

; 390  :     GPIOSetMode(hGpio,BL_EN_SET_GPIO,GPIO_DIR_OUTPUT);

  00120	e3a02000	 mov         r2, #0
  00124	e3a0103d	 mov         r1, #0x3D
  00128	e1a00004	 mov         r0, r4
  0012c	eb000000	 bl          GPIOSetMode

; 391  : //#endif
; 392  :     
; 393  : #ifdef FMD_ONENAND // X
; 394  :     // Open FMD to access ONENAND
; 395  :     regInfo.MemBase.Reg[0] = BSP_ONENAND_REGS_PA;
; 396  :     hFMD = FMD_Init(NULL, &regInfo, NULL);
; 397  :     if (hFMD == NULL)
; 398  :     {
; 399  :         XLDRMSG(L"\r\nFMD_Init failed\r\n");
; 400  :         goto cleanUp;
; 401  :     }
; 402  : 
; 403  :     //  Set ONENAND XLDR bootsector size
; 404  :     size = IMAGE_XLDR_BOOTSEC_ONENAND_SIZE;
; 405  : #endif
; 406  : #ifdef FMD_NAND // UART, SD, NAND
; 407  :     // Open FMD to access NAND
; 408  :     regInfo.MemBase.Reg[0] = BSP_NAND_REGS_PA;

  00130	e3a03302	 mov         r3, #2, 6

; 409  :     hFMD = FMD_Init(NULL, &regInfo, NULL);

  00134	e3a02000	 mov         r2, #0
  00138	e28d1018	 add         r1, sp, #0x18
  0013c	e3a00000	 mov         r0, #0
  00140	e58d3328	 str         r3, [sp, #0x328]
  00144	eb000000	 bl          FMD_Init
  00148	e1b07000	 movs        r7, r0

; 410  :     if (hFMD == NULL)

  0014c	1a000002	 bne         |$LN13@XLDRMain|

; 411  :     {
; 412  :         XLDRMSG(L"\r\nFMD_Init failed\r\n");

  00150	e59f0154	 ldr         r0, [pc, #0x154]
  00154	eb000000	 bl          OEMWriteDebugString

; 413  :         goto cleanUp;

  00158	ea00004a	 b           |$cleanUp$47572|
  0015c		 |$LN13@XLDRMain|

; 414  :     }
; 415  : 
; 416  :     //  Set NAND XLDR bootsector size
; 417  :     size = IMAGE_XLDR_BOOTSEC_NAND_SIZE;
; 418  : #endif
; 419  : 
; 420  :     // Get flash info
; 421  :     if (!FMD_GetInfo(&flashInfo))

  0015c	e28d0000	 add         r0, sp, #0
  00160	eb000000	 bl          FMD_GetInfo
  00164	e3500000	 cmp         r0, #0
  00168	1a000002	 bne         |$LN12@XLDRMain|

; 422  :     {
; 423  :         XLDRMSG(L"\r\nFMD_GetInfo failed\r\n");

  0016c	e59f0134	 ldr         r0, [pc, #0x134]
  00170	eb000000	 bl          OEMWriteDebugString
  00174	ea000043	 b           |$cleanUp$47572|
  00178		 |$LN12@XLDRMain|

; 424  :         goto cleanUp;
; 425  :     }
; 426  : 
; 427  : #ifdef MEMORY_BOOT
; 428  :     // Start from NAND start
; 429  :     block  = 0;

  00178	e3a04000	 mov         r4, #0

; 430  :     sector = 0;

  0017c	e3a05000	 mov         r5, #0

; 431  : 
; 432  :     // First skip XLDR boot region.
; 433  : 
; 434  :     // NOTE - The bootrom will load the xldr from the first good block starting
; 435  :     // at zero.  If an uncorrectable ECC error is encountered it will try the next
; 436  :     // good block.  The last block attempted is the fourth physical block.  The first
; 437  :     // block is guaranteed good when shipped from the factory, for the first 1000
; 438  :     // erase/program cycles.
; 439  : 
; 440  :     // Our programming algorithm will place four copies of the xldr into the first
; 441  :     // four *good* blocks.  If one or more of the first four physical blocks is marked
; 442  :     // bad, the XLDR boot region will include the fifth physical block or beyond.  This
; 443  :     // would result in a wasted block containing a copy of the XLDR that will never be
; 444  :     // loaded by the bootrom, but it simplifies the flash management algorithms.
; 445  :     count = 0;

  00180	e3a06000	 mov         r6, #0
  00184		 |$LL11@XLDRMain|

; 446  :     while (count < size)
; 447  : 	{
; 448  :         if ((FMD_GetBlockStatus(block) & BLOCK_STATUS_BAD) == 0)

  00184	e1a00004	 mov         r0, r4
  00188	eb000000	 bl          FMD_GetBlockStatus
  0018c	e3100002	 tst         r0, #2

; 449  :             count += flashInfo.dwBytesPerBlock;

  00190	059d3008	 ldreq       r3, [sp, #8]

; 450  :         block++;
; 451  :         sector += flashInfo.wSectorsPerBlock;

  00194	e2844001	 add         r4, r4, #1
  00198	00866003	 addeq       r6, r6, r3
  0019c	e1dd30bc	 ldrh        r3, [sp, #0xC]
  001a0	e3560702	 cmp         r6, #2, 14
  001a4	e0855003	 add         r5, r5, r3
  001a8	3afffff5	 bcc         |$LL11@XLDRMain|

; 452  : 	}
; 453  :     // get ECC type for EBOOT from FIXUP value
; 454  :     g_ecctype = (UCHAR)dwEbootECCtype;

  001ac	e5993008	 ldr         r3, [r9, #8]

; 455  : 	
; 456  :     FMD_Deinit(hFMD); 

  001b0	e1a00007	 mov         r0, r7
  001b4	e5c83200	 strb        r3, [r8, #0x200]
  001b8	eb000000	 bl          FMD_Deinit

; 457  :     hFMD = FMD_Init(NULL, &regInfo, NULL);

  001bc	e3a02000	 mov         r2, #0
  001c0	e28d1018	 add         r1, sp, #0x18
  001c4	e3a00000	 mov         r0, #0
  001c8	eb000000	 bl          FMD_Init

; 458  : 
; 459  :     // Set address where to place image
; 460  :     pImage = (UINT8*)IMAGE_STARTUP_IMAGE_PA;

  001cc	e3e09d0f	 mvn         r9, #0xF, 26
  001d0	e1a08a89	 mov         r8, r9, lsl #21

; 461  : 
; 462  :     // Read image to memory
; 463  :     count = 0;

  001d4	e3a07000	 mov         r7, #0
  001d8		 |$LL8@XLDRMain|

; 464  :     while ((count < IMAGE_STARTUP_IMAGE_SIZE) && (block < flashInfo.dwNumBlocks))

  001d8	e59d3004	 ldr         r3, [sp, #4]
  001dc	e1540003	 cmp         r4, r3
  001e0	2a000023	 bcs         |$LN7@XLDRMain|

; 465  : 	{
; 466  :         // Skip bad blocks
; 467  :         if ((FMD_GetBlockStatus(block) & BLOCK_STATUS_BAD) != 0)

  001e4	e1a00004	 mov         r0, r4
  001e8	eb000000	 bl          FMD_GetBlockStatus

; 468  :             {
; 469  :             block++;
; 470  :             sector += flashInfo.wSectorsPerBlock;

  001ec	e1dd30bc	 ldrh        r3, [sp, #0xC]
  001f0	e3100002	 tst         r0, #2
  001f4	0a000004	 beq         |$LN6@XLDRMain|

; 471  :             XLDRMSG(L"#");

  001f8	e59f00a4	 ldr         r0, [pc, #0xA4]
  001fc	e2844001	 add         r4, r4, #1
  00200	e0855003	 add         r5, r5, r3
  00204	eb000000	 bl          OEMWriteDebugString

; 472  :             continue;

  00208	ea000017	 b           |$LN44@XLDRMain|
  0020c		 |$LN6@XLDRMain|

; 473  :             }
; 474  : 
; 475  :         // Read sectors in block
; 476  :         ix = 0;
; 477  :         while ((ix++ < flashInfo.wSectorsPerBlock) &&
; 478  :                 (count < IMAGE_STARTUP_IMAGE_SIZE))

  0020c	e3a06000	 mov         r6, #0
  00210	e3530000	 cmp         r3, #0
  00214	0a000011	 beq         |$LN47@XLDRMain|
  00218		 |$LL5@XLDRMain|
  00218	e2866001	 add         r6, r6, #1
  0021c	e3570701	 cmp         r7, #1, 14
  00220	2a00000e	 bcs         |$LN47@XLDRMain|

; 479  :             {
; 480  :             // If a read fails, there is nothing we can do about it
; 481  :             if (!FMD_ReadSector(sector, pImage, &sectorInfo, 1))

  00224	e3a03001	 mov         r3, #1
  00228	e28d2010	 add         r2, sp, #0x10
  0022c	e1a01008	 mov         r1, r8
  00230	e1a00005	 mov         r0, r5
  00234	eb000000	 bl          FMD_ReadSector
  00238	e3500000	 cmp         r0, #0

; 482  :                 {
; 483  :                 XLDRMSG(L"$");

  0023c	059f005c	 ldreq       r0, [pc, #0x5C]
  00240	0b000000	 bleq        OEMWriteDebugString
  00244	e1dd30bc	 ldrh        r3, [sp, #0xC]

; 484  :                 }
; 485  : 
; 486  :             // Move to next sector
; 487  :             sector++;
; 488  :             pImage += flashInfo.wDataBytesPerSector;

  00248	e1dd20be	 ldrh        r2, [sp, #0xE]
  0024c	e2855001	 add         r5, r5, #1
  00250	e1560003	 cmp         r6, r3
  00254	e0888002	 add         r8, r8, r2

; 489  :             count += flashInfo.wDataBytesPerSector;

  00258	e0877002	 add         r7, r7, r2
  0025c	3affffed	 bcc         |$LL5@XLDRMain|
  00260		 |$LN47@XLDRMain|

; 490  :             }
; 491  : 
; 492  :         XLDRMSG(L".");

  00260	e59f0034	 ldr         r0, [pc, #0x34]
  00264	eb000000	 bl          OEMWriteDebugString

; 493  : 
; 494  :         // Move to next block
; 495  :         block++;

  00268	e2844001	 add         r4, r4, #1
  0026c		 |$LN44@XLDRMain|

; 464  :     while ((count < IMAGE_STARTUP_IMAGE_SIZE) && (block < flashInfo.dwNumBlocks))

  0026c	e3570701	 cmp         r7, #1, 14
  00270	3affffd8	 bcc         |$LL8@XLDRMain|
  00274		 |$LN7@XLDRMain|

; 496  : 	}
; 497  : 
; 498  :     XLDRMSG(L"\r\nJumping to bootloader\r\n");

  00274	e59f001c	 ldr         r0, [pc, #0x1C]
  00278	eb000000	 bl          OEMWriteDebugString

; 499  : 
; 500  :     // Wait for serial port
; 501  :     XLDRMSGDEINIT;

  0027c	eb000000	 bl          OEMDeinitDebugSerial

; 502  : 
; 503  :     // Jump to image
; 504  :     JumpTo((VOID*)IMAGE_STARTUP_IMAGE_PA);

  00280	e1a00a89	 mov         r0, r9, lsl #21
  00284	eb000000	 bl          JumpTo
  00288		 |$cleanUp$47572|

; 505  : #endif  /* MEMORY_BOOT */
; 506  : #ifdef UART_BOOT
; 507  : 
; 508  : #if defined(UART_DNLD_EBOOT_TO_RAM) || defined(UART_DNLD_RAW_TO_NAND)
; 509  : 
; 510  : #ifdef UART_DNLD_EBOOT_TO_RAM // X
; 511  :     XLDRMSG(L"\r\nDNLD EBOOTND.nb0 Image\r\n");
; 512  : #endif
; 513  : 
; 514  : #ifdef UART_DNLD_RAW_TO_NAND // UART
; 515  :     XLDRMSG(L"\r\nDNLD TIEVM3530-nand.raw Image\r\n");
; 516  : #endif
; 517  : 
; 518  :     // Set address where to place download image
; 519  :     pImage = (UINT8*)IMAGE_STARTUP_IMAGE_PA; // 0x87E00000
; 520  : 
; 521  : 	xret = XReceive(pImage, IMAGE_XLDR_BOOTSEC_NAND_SIZE+IMAGE_EBOOT_CODE_SIZE+IMAGE_BOOTLOADER_BITMAP_SIZE+8, &dnld_size);
; 522  : 	if(xret < 0)
; 523  : 	{
; 524  : 		goto cleanUp;
; 525  : 	}
; 526  : 
; 527  : #ifdef UART_DNLD_EBOOT_TO_RAM // X
; 528  :     XLDRMSG(L"\r\nJumping to bootloader EBOOT\r\n");
; 529  : 
; 530  : 	// Wait for serial port
; 531  :     XLDRMSGDEINIT;
; 532  : 
; 533  : 	// Jump to image
; 534  : 	JumpTo((VOID*)IMAGE_STARTUP_IMAGE_PA);
; 535  : #endif  /* UART_DNLD_EBOOT_TO_RAM */
; 536  : 
; 537  : #ifdef UART_DNLD_RAW_TO_NAND
; 538  : 	// How many nand blocks to write
; 539  : 	if (dnld_size < flashInfo.dwBytesPerBlock)
; 540  : 	{
; 541  : 		nand_blocks_to_write=0;
; 542  : 	}
; 543  : 	else
; 544  : 	{
; 545  : 		for(nand_blocks_to_write=0; nand_blocks_to_write <= NAND_MAX_BLOCKS_TO_WRITE; nand_blocks_to_write++)
; 546  : 		{
; 547  : 			if ((nand_blocks_to_write * flashInfo.dwBytesPerBlock) >= dnld_size)
; 548  : 			{
; 549  : 				break;
; 550  : 			}
; 551  : 		}
; 552  : 	}
; 553  : 
; 554  : 	if ((nand_blocks_to_write == 0) || (nand_blocks_to_write > NAND_MAX_BLOCKS_TO_WRITE))
; 555  : 	{
; 556  : 		goto cleanUp;
; 557  : 	}
; 558  : 
; 559  :     // Set address to where to copy from
; 560  :     pImage = (UINT8*)IMAGE_STARTUP_IMAGE_PA; // 0x87E00000
; 561  : 
; 562  : 	// Write dnld image, starting from first good block (4 xldr block and 2 eboot block)
; 563  : 	block = 0;
; 564  :     image_block_cnt = 0;
; 565  : 
; 566  : 	while (image_block_cnt < nand_blocks_to_write)
; 567  : 	{
; 568  : 
; 569  : 		/* writing Eboot: need to change ECC mode*/ 
; 570  : 		if(image_block_cnt == 4)
; 571  : 		{
; 572  : 			// get EBOOT ECC type from FIXUP value
; 573  : 			g_ecctype = (UCHAR)dwEbootECCtype;
; 574  :                  
; 575  : 			FMD_Deinit(hFMD); 
; 576  : 			hFMD = FMD_Init(NULL, &regInfo, NULL);
; 577  : 		}
; 578  : 		// Skip to a good block
; 579  :         while (block < flashInfo.dwNumBlocks)
; 580  :         {
; 581  :             if ((FMD_GetBlockStatus(block) & BLOCK_STATUS_BAD) == 0)
; 582  :     		{
; 583  :     			// A good block
; 584  :     			break;
; 585  :     		}
; 586  :             block++;
; 587  :         }
; 588  :     
; 589  :     	if (block >= flashInfo.dwNumBlocks)
; 590  :     	{
; 591  :     		// No good block found!!
; 592  :     		goto cleanUp;
; 593  :     	}
; 594  : 
; 595  : 		// Erase block first
; 596  : 		if (!FMD_EraseBlock(block))
; 597  : 		{
; 598  : 			for(;;) XLDRMSG(L"Erase FAILED\r\n");
; 599  : 		}
; 600  : 
; 601  : 		// Calculate starting sector id of the good block
; 602  :     	sector = block * flashInfo.wSectorsPerBlock;
; 603  : 		offset = 0;
; 604  : 
; 605  : 		// Copy sectors in block
; 606  : 		while (offset < flashInfo.dwBytesPerBlock)
; 607  : 		{
; 608  :         	memset(&sectorInfo, 0xFF, sizeof(sectorInfo));
; 609  : 	        sectorInfo.bOEMReserved &= ~(OEM_BLOCK_READONLY|OEM_BLOCK_RESERVED);
; 610  : 			sectorInfo.dwReserved1 = 0;
; 611  : 			sectorInfo.wReserved2 = 0;
; 612  :     
; 613  :     		// Write 1 sector
; 614  :     		if (!FMD_WriteSector(sector, pImage + offset, &sectorInfo, 1))
; 615  : 			{
; 616  : 				for(;;) XLDRMSG(L"Write FAILED\r\n");
; 617  : 				goto cleanUp;
; 618  : 			}
; 619  : 
; 620  : 			// Next sector
; 621  : 			sector++;
; 622  : 			offset += flashInfo.wDataBytesPerSector;
; 623  : 		}
; 624  :     
; 625  : 		// Written 1 block
; 626  : 		++image_block_cnt;
; 627  : 
; 628  : 		// Start from next block id and next block of data
; 629  : 		++block;
; 630  : 		pImage += offset;
; 631  : 	}
; 632  : 
; 633  : 	XGetStats ( &xblock_cnt, &xack_cnt, &xnak_cnt,
; 634  : 		        &xcan_cnt, &xothers_cnt, &checksum_error_cnt, 
; 635  : 				&dup_pkt_cnt);
; 636  : 
; 637  : 	XLDRMSG(L"\r\nReceive return code "); XLDRPrintUint8((UINT8)xret, 1, 1);
; 638  : 	XLDRMSG(L"blocks written ");          XLDRPrintUint8((UINT8)image_block_cnt, 1, 1);
; 639  : 	XLDRMSG(L"bytes rx ");                XLDRPrintUlong((UINT32)dnld_size, 1, 1);
; 640  : 	XLDRMSG(L"pkts rx ");                 XLDRPrintUlong((UINT32)xblock_cnt, 1, 1);
; 641  : 	XLDRMSG(L"acks sent ");               XLDRPrintUlong((UINT32)xack_cnt, 1, 1);
; 642  : 	XLDRMSG(L"naks sent ");               XLDRPrintUlong((UINT32)xnak_cnt, 1, 1);
; 643  : 	XLDRMSG(L"can sent ");                XLDRPrintUlong((UINT32)xcan_cnt, 1, 1);
; 644  : 	XLDRMSG(L"others sent ");             XLDRPrintUlong((UINT32)xothers_cnt, 1, 1);
; 645  : 	XLDRMSG(L"chksum errs ");             XLDRPrintUlong((UINT32)checksum_error_cnt, 1, 1);
; 646  : 	XLDRMSG(L"dup pkts ");                XLDRPrintUlong((UINT32)dup_pkt_cnt, 1, 1);
; 647  : 
; 648  : 	// Wait for serial port
; 649  :     XLDRMSGDEINIT;
; 650  : 
; 651  : 	// Done.
; 652  : 	return;
; 653  : #endif  /* UART_DNLD_RAW_TO_NAND */
; 654  : #endif  /* UART_DNLD_EBOOT_TO_RAM || UART_DNLD_RAW_TO_NAND */
; 655  : 
; 656  : #ifdef UART_BOOT_READ_SECTOR
; 657  :     // Set address where to place data read
; 658  :     pImage = (UINT8*)IMAGE_STARTUP_IMAGE_PA;
; 659  : 
; 660  : 	sector = 0;
; 661  :     if (!FMD_ReadSector(sector, pImage, &sectorInfo, 1))
; 662  :     {
; 663  :         for(;;) XLDRMSG(L"read failed\r\n");
; 664  :     }            
; 665  : 
; 666  :     //print the first 16 bytes to debug port 
; 667  :     pImage = (UINT8*)IMAGE_STARTUP_IMAGE_PA;
; 668  : 
; 669  : 	for(;;)
; 670  : 	{
; 671  : 	    XLDRPrintUint8(sectorInfo.bOEMReserved, 1, 0);
; 672  : 	    XLDRPrintUint8(sectorInfo.bBadBlock, 1, 0);
; 673  : 
; 674  : 		for (ix = 0; ix<16; ix++)
; 675  : 		{
; 676  : 		    XLDRPrintUint8(*(pImage+ix), 1, 0);
; 677  : 		}
; 678  :    	    XLDRMSG(L"\r\n");
; 679  : 	}
; 680  : #endif /* UART_BOOT_READ_SECTOR */
; 681  : 
; 682  : #ifdef UART_BOOT_WRITE_SECTOR
; 683  : 
; 684  : 	if (!FMD_EraseBlock(0))
; 685  : 	{
; 686  : 		while(1) XLDRMSG(L"Erase FAILED\r\n");
; 687  : 	}
; 688  : 
; 689  : 	// Set address where to place image
; 690  :     pImage = (UINT8*)IMAGE_STARTUP_IMAGE_PA;
; 691  : 
; 692  : 	for (uc = 0; uc<16; uc++)
; 693  : 		*(pImage+uc) = uc+'A';
; 694  : 
; 695  : 	sector = 0;
; 696  : 
; 697  :    	memset(&sectorInfo, 0xFF, sizeof(sectorInfo));
; 698  :     sectorInfo.bOEMReserved &= ~(OEM_BLOCK_READONLY|OEM_BLOCK_RESERVED);
; 699  : 	sectorInfo.dwReserved1 = 0;
; 700  : 	sectorInfo.wReserved2 = 0;
; 701  :     
; 702  :     // Write 1 sector
; 703  :     if (!FMD_WriteSector(sector, pImage, &sectorInfo, 1))
; 704  : 	{
; 705  : 		while(1) XLDRMSG(L"Write FAILED\r\n");
; 706  : 		goto cleanUp;
; 707  : 	}
; 708  : 
; 709  : 	XLDRPrintUint8('z', 10000, 1);
; 710  : 	XLDRMSG(L"That many times printed\r\n");
; 711  : 
; 712  : 	// Wait for serial port
; 713  :     XLDRMSGDEINIT;
; 714  : 
; 715  : 	// Done.
; 716  : 	return;
; 717  : #endif /* UART_BOOT_WRITE_SECTOR */
; 718  : 
; 719  : #endif  /* UART_BOOT */
; 720  :     
; 721  : cleanUp:
; 722  :     XLDRMSG(L"\r\nHALT\r\n");

  00288	e59f0004	 ldr         r0, [pc, #4]
  0028c	eb000000	 bl          OEMWriteDebugString
  00290		 |$LL2@XLDRMain|

; 723  :     for(;;);

  00290	eafffffe	 b           |$LL2@XLDRMain|
  00294		 |$LN52@XLDRMain|
  00294		 |$LN53@XLDRMain|
  00294	00000000	 DCD         |??_C@_1BC@MABDLOIF@?$AA?$AN?$AA?6?$AAH?$AAA?$AAL?$AAT?$AA?$AN?$AA?6?$AA?$AA@|
  00298		 |$LN54@XLDRMain|
  00298	00000000	 DCD         |??_C@_1DE@IMNGKPHE@?$AA?$AN?$AA?6?$AAJ?$AAu?$AAm?$AAp?$AAi?$AAn?$AAg?$AA?5?$AAt?$AAo?$AA?5?$AAb?$AAo?$AAo?$AAt?$AAl?$AAo?$AAa?$AAd?$AAe?$AAr?$AA?$AN?$AA?6?$AA?$AA@|
  0029c		 |$LN55@XLDRMain|
  0029c	00000000	 DCD         |??_C@_13JOFGPIOO@?$AA?4?$AA?$AA@|
  002a0		 |$LN56@XLDRMain|
  002a0	00000000	 DCD         |??_C@_13PBOLBIIK@?$AA$?$AA?$AA@|
  002a4		 |$LN57@XLDRMain|
  002a4	00000000	 DCD         |??_C@_13GMDMCADD@?$AA?$CD?$AA?$AA@|
  002a8		 |$LN58@XLDRMain|
  002a8	00000000	 DCD         |??_C@_1CO@MAFCCJBC@?$AA?$AN?$AA?6?$AAF?$AAM?$AAD?$AA_?$AAG?$AAe?$AAt?$AAI?$AAn?$AAf?$AAo?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  002ac		 |$LN59@XLDRMain|
  002ac	00000000	 DCD         |??_C@_1CI@HOAHMIF@?$AA?$AN?$AA?6?$AAF?$AAM?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  002b0		 |$LN60@XLDRMain|
  002b0	00000000	 DCD         |??_C@_1CC@DJCPIFGO@?$AAV?$AAe?$AAr?$AAs?$AAi?$AAo?$AAn?$AA?3?$AA?5?$AA0?$AA?4?$AA0?$AA?4?$AA1?$AA?$AN?$AA?6?$AA?$AA@|
  002b4		 |$LN61@XLDRMain|
  002b4	00000000	 DCD         |??_C@_17KPMHKKFB@?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  002b8		 |$LN62@XLDRMain|
  002b8	00000000	 DCD         |??_C@_1EE@HGBBJJHB@?$AA?$AN?$AA?6?$AAB?$AAu?$AAi?$AAl?$AAt?$AA?5?$AAM?$AAa?$AAr?$AA?5?$AA?5?$AA3?$AA?5?$AA2?$AA0?$AA1?$AA4?$AA?5?$AAa?$AAt?$AA?5?$AA1?$AA4?$AA?3?$AA1?$AA5?$AA?3?$AA2?$AA3?$AA?5@|
  002bc		 |$LN63@XLDRMain|
  002bc	00000000	 DCD         |??_C@_1GG@MOBLLCID@?$AA?$AN?$AA?6?$AAZ?$AAE?$AAB?$AAE?$AAX?$AA?5?$AAW?$AAi?$AAn?$AAd?$AAo?$AAw?$AAs?$AA?5?$AAC?$AAE?$AA?5?$AAN?$AAA?$AAN?$AAD?$AA?5?$AAX?$AA?9?$AAL?$AAo?$AAa?$AAd?$AAe?$AAr@|
  002c0		 |$LN64@XLDRMain|
  002c0	00000000	 DCD         |??_C@_19PONNFJAB@?$AA3?$AA7?$AAX?$AAX?$AA?$AA@|
  002c4		 |$LN65@XLDRMain|
  002c4	00000000	 DCD         |gCPU_family|
  002c8		 |$LN66@XLDRMain|
  002c8	00000000	 DCD         |?allocationPool@?1??XLDRMain@@9@9|
  002cc		 |$LN67@XLDRMain|
  002cc	00000000	 DCD         |??_C@_19CAFJHOAJ@?$AA3?$AA5?$AA3?$AA0?$AA?$AA@|
  002d0		 |$LN68@XLDRMain|
  002d0	00000000	 DCD         |pTOC|
  002d4		 |$M47828|

			 ENDP  ; |XLDRMain|

	END
