; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\Z2170P\SRC\BOOTLOADER\XLDR\SDMEMORY\sdmain.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|pTOC| [ DATA ]
	EXPORT	|dwOEMHighSecurity| [ DATA ]

  00000			 AREA	 |.data|, DATA
	 COMMON	|g_bootCfg|, 0x90

	 COMMON	|gCPU_family|, 0x4


  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
|pTOC|	DCD	0xffffffff
|dwOEMHighSecurity| DCD 0x2
	EXPORT	|BSPGpioInit|
	IMPORT	|BSPInsertGpioDevice|
	IMPORT	|Omap_Gpio|
	IMPORT	|Tps659xx_Gpio|
; File c:\wince600\platform\z2170p\src\bootloader\xldr\sdmemory\sdmain.c

  00000			 AREA	 |.pdata|, PDATA
|$T47546| DCD	|$LN5@BSPGpioIni|
	DCD	0x40000d01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |BSPGpioInit| PROC

; 77   : {

  00000		 |$LN5@BSPGpioIni|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M47543|

; 78   : 	//XLDRMSG( TEXT("BSPGpioInit()\r\n"));
; 79   : 	BSPInsertGpioDevice(0,&Omap_Gpio,NULL);

  00004	e59f1024	 ldr         r1, [pc, #0x24]
  00008	e3a02000	 mov         r2, #0
  0000c	e3a00000	 mov         r0, #0
  00010	eb000000	 bl          BSPInsertGpioDevice

; 80   : 	BSPInsertGpioDevice(TRITON_GPIO_PINID_START,&Tps659xx_Gpio,NULL);

  00014	e59f1010	 ldr         r1, [pc, #0x10]
  00018	e3a02000	 mov         r2, #0
  0001c	e3a00c01	 mov         r0, #1, 24
  00020	eb000000	 bl          BSPInsertGpioDevice

; 81   : }

  00024	e49de004	 ldr         lr, [sp], #4
  00028	e12fff1e	 bx          lr
  0002c		 |$LN6@BSPGpioIni|
  0002c		 |$LN7@BSPGpioIni|
  0002c	00000000	 DCD         |Tps659xx_Gpio|
  00030		 |$LN8@BSPGpioIni|
  00030	00000000	 DCD         |Omap_Gpio|
  00034		 |$M47544|

			 ENDP  ; |BSPGpioInit|

	EXPORT	|OALPAtoVA|

  00000			 AREA	 |.pdata|, PDATA
|$T47559| DCD	|$LN5@OALPAtoVA|
	DCD	0x40000100
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALPAtoVA| PROC

; 195  : {

  00000		 |$LN5@OALPAtoVA|
  00000		 |$M47556|

; 196  :     UNREFERENCED_PARAMETER(cached);
; 197  :     return (VOID*)address;
; 198  : }

  00000	e12fff1e	 bx          lr
  00004		 |$M47557|

			 ENDP  ; |OALPAtoVA|

	EXPORT	|OALVAtoPA|

  00000			 AREA	 |.pdata|, PDATA
|$T47569| DCD	|$LN5@OALVAtoPA|
	DCD	0x40000100
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALVAtoPA| PROC

; 206  : {

  00000		 |$LN5@OALVAtoPA|
  00000		 |$M47566|

; 207  :     return (UINT32)pVA;
; 208  : }

  00000	e12fff1e	 bx          lr
  00004		 |$M47567|

			 ENDP  ; |OALVAtoPA|


  00000			 AREA	 |.pdata|, PDATA
|$T47596| DCD	|$LN23@SetupCopyS|
	DCD	0x40002801
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |SetupCopySection| PROC

; 220  : {

  00000		 |$LN23@SetupCopyS|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004		 |$M47593|
  00004	e1a01000	 mov         r1, r0

; 221  :     BOOL rc = FALSE;

  00008	e3a00000	 mov         r0, #0

; 222  :     UINT32 loop, count;
; 223  :     COPYentry *pCopyEntry;
; 224  :     UINT8 *pSrc, *pDst;
; 225  : 
; 226  :     if (pTableOfContents == (ROMHDR *const) -1) goto CleanUp;

  0000c	e3710001	 cmn         r1, #1
  00010	0a000020	 beq         |$CleanUp$47362|

; 227  : 
; 228  :     for (loop = 0; loop < pTableOfContents->ulCopyEntries; loop++)

  00014	e5913020	 ldr         r3, [r1, #0x20]
  00018	e3a0e000	 mov         lr, #0
  0001c	e3530000	 cmp         r3, #0
  00020	9a00001b	 bls         |$LN5@SetupCopyS|
  00024	e3a04000	 mov         r4, #0
  00028	e3a07000	 mov         r7, #0
  0002c		 |$LL7@SetupCopyS|
  0002c	e5913024	 ldr         r3, [r1, #0x24]
  00030	e0845003	 add         r5, r4, r3

; 229  :         {
; 230  :         pCopyEntry = (COPYentry *)(pTableOfContents->ulCopyOffset + loop*sizeof(COPYentry));
; 231  : 
; 232  :         count = pCopyEntry->ulCopyLen;

  00034	e5953008	 ldr         r3, [r5, #8]

; 233  :         pDst = (UINT8*)pCopyEntry->ulDest;

  00038	e5950004	 ldr         r0, [r5, #4]

; 234  :         pSrc = (UINT8*)pCopyEntry->ulSource;

  0003c	e5952000	 ldr         r2, [r5]
  00040	e1b06003	 movs        r6, r3

; 235  :         while (count-- > 0) *pDst++ = *pSrc++;

  00044	0a000003	 beq         |$LN14@SetupCopyS|
  00048		 |$LL4@SetupCopyS|
  00048	e4d23001	 ldrb        r3, [r2], #1
  0004c	e2566001	 subs        r6, r6, #1
  00050	e4c03001	 strb        r3, [r0], #1
  00054	1afffffb	 bne         |$LL4@SetupCopyS|
  00058		 |$LN14@SetupCopyS|

; 236  :         count = pCopyEntry->ulDestLen - pCopyEntry->ulCopyLen;

  00058	e595200c	 ldr         r2, [r5, #0xC]
  0005c	e5953008	 ldr         r3, [r5, #8]
  00060	e0523003	 subs        r3, r2, r3

; 237  :         while (count-- > 0) *pDst++ = 0;

  00064	0a000005	 beq         |$LN2@SetupCopyS|
  00068	e3530000	 cmp         r3, #0
  0006c	0a000003	 beq         |$LN2@SetupCopyS|

; 236  :         count = pCopyEntry->ulDestLen - pCopyEntry->ulCopyLen;

  00070	e0803003	 add         r3, r0, r3
  00074		 |$LN19@SetupCopyS|
  00074	e4c07001	 strb        r7, [r0], #1
  00078	e1500003	 cmp         r0, r3
  0007c	1afffffc	 bne         |$LN19@SetupCopyS|
  00080		 |$LN2@SetupCopyS|

; 227  : 
; 228  :     for (loop = 0; loop < pTableOfContents->ulCopyEntries; loop++)

  00080	e5913020	 ldr         r3, [r1, #0x20]
  00084	e28ee001	 add         lr, lr, #1
  00088	e2844010	 add         r4, r4, #0x10
  0008c	e15e0003	 cmp         lr, r3
  00090	3affffe5	 bcc         |$LL7@SetupCopyS|
  00094		 |$LN5@SetupCopyS|

; 238  :         }
; 239  : 
; 240  :     rc = TRUE;

  00094	e3a00001	 mov         r0, #1
  00098		 |$CleanUp$47362|

; 241  : 
; 242  : CleanUp:
; 243  :     return rc;
; 244  : }

  00098	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  0009c	e12fff1e	 bx          lr
  000a0		 |$M47594|

			 ENDP  ; |SetupCopySection|

	IMPORT	|OEMWriteDebugByte|

  00000			 AREA	 |.pdata|, PDATA
|$T47606| DCD	|$LN11@OutputNumH|
	DCD	0x40001201
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OutputNumHex| PROC

; 262  : {

  00000		 |$LN11@OutputNumH|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M47603|
  00004	e3510000	 cmp         r1, #0
  00008	e1a04000	 mov         r4, r0

; 263  :     if (depth)
; 264  :     {
; 265  :         depth--;

  0000c	12411001	 subne       r1, r1, #1

; 266  :     }
; 267  : 
; 268  :     if ((n & ~0xf) || depth)

  00010	e3d4c00f	 bics        r12, r4, #0xF
  00014	1a000001	 bne         |$LN3@OutputNumH|
  00018	e3510000	 cmp         r1, #0
  0001c	0a000002	 beq         |$LN4@OutputNumH|
  00020		 |$LN3@OutputNumH|

; 269  :     {
; 270  :         OutputNumHex(n >> 4, depth);

  00020	e1a00224	 mov         r0, r4, lsr #4
  00024	eb000000	 bl          OutputNumHex

; 271  :         n &= 0xf;

  00028	e204400f	 and         r4, r4, #0xF
  0002c		 |$LN4@OutputNumH|

; 272  :     }
; 273  : 
; 274  :     if (n < 10)

  0002c	e354000a	 cmp         r4, #0xA

; 275  :     {
; 276  :         OEMWriteDebugByte((BYTE)(n + '0'));

  00030	32843030	 addcc       r3, r4, #0x30

; 277  :     }
; 278  :     else
; 279  :     {
; 280  :         OEMWriteDebugByte((BYTE)(n - 10 + 'A'));

  00034	22843037	 addcs       r3, r4, #0x37
  00038	e20300ff	 and         r0, r3, #0xFF
  0003c	eb000000	 bl          OEMWriteDebugByte

; 281  :     }
; 282  : }

  00040	e8bd4010	 ldmia       sp!, {r4, lr}
  00044	e12fff1e	 bx          lr
  00048		 |$M47604|

			 ENDP  ; |OutputNumHex|


  00000			 AREA	 |.pdata|, PDATA
|$T47614| DCD	|$LN6@OutputNumD|
	DCD	0x40001101
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OutputNumDecimal| PROC

; 297  : {

  00000		 |$LN6@OutputNumD|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M47611|
  00004	e1a05000	 mov         r5, r0

; 298  :     if (n >= 10)

  00008	e355000a	 cmp         r5, #0xA
  0000c	3a000006	 bcc         |$LN1@OutputNumD|

; 299  :     {
; 300  :         OutputNumDecimal(n / 10);

  00010	e59f3028	 ldr         r3, [pc, #0x28]
  00014	e0832395	 umull       r2, r3, r5, r3
  00018	e1a041a3	 mov         r4, r3, lsr #3
  0001c	e1a00004	 mov         r0, r4
  00020	eb000000	 bl          OutputNumDecimal

; 301  :         n %= 10;

  00024	e0843104	 add         r3, r4, r4, lsl #2
  00028	e0455083	 sub         r5, r5, r3, lsl #1
  0002c		 |$LN1@OutputNumD|

; 302  :     }
; 303  :     OEMWriteDebugByte((BYTE)(n + '0'));

  0002c	e2853030	 add         r3, r5, #0x30
  00030	e20300ff	 and         r0, r3, #0xFF
  00034	eb000000	 bl          OEMWriteDebugByte

; 304  : }

  00038	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  0003c	e12fff1e	 bx          lr
  00040		 |$LN7@OutputNumD|
  00040		 |$LN8@OutputNumD|
  00040	cccccccd	 DCD         0xcccccccd
  00044		 |$M47612|

			 ENDP  ; |OutputNumDecimal|

	EXPORT	|NKvDbgPrintfW|
	IMPORT	|OEMWriteDebugString|

  00000			 AREA	 |.pdata|, PDATA
|$T47694| DCD	|$LN66@NKvDbgPrin|
	DCD	0x40006a01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |NKvDbgPrintfW| PROC

; 313  : {

  00000		 |$LN66@NKvDbgPrin|
  00000	e92d41f0	 stmdb       sp!, {r4 - r8, lr}
  00004		 |$M47691|
  00004	e1a05001	 mov         r5, r1
  00008	e1a07000	 mov         r7, r0

; 314  :     // Stubbed out to shrink XLDR binary size
; 315  :     TCHAR c;
; 316  : 
; 317  :     while (*pszFormat)

  0000c	e1d730b0	 ldrh        r3, [r7]
  00010	e3530000	 cmp         r3, #0
  00014	0a000060	 beq         |$LN19@NKvDbgPrin|
  00018	e59f8184	 ldr         r8, [pc, #0x184]
  0001c		 |$LL20@NKvDbgPrin|

; 318  :     {
; 319  :         c = *pszFormat++;
; 320  :         switch ((BYTE)c)

  0001c	e20340ff	 and         r4, r3, #0xFF
  00020	e354000a	 cmp         r4, #0xA
  00024	e2877002	 add         r7, r7, #2
  00028	0a000054	 beq         |$LN2@NKvDbgPrin|
  0002c	e3540025	 cmp         r4, #0x25
  00030	1a000054	 bne         |$LN1@NKvDbgPrin|

; 321  :         {
; 322  :             case '%':
; 323  :                 c = *pszFormat++;

  00034	e0d730b2	 ldrh        r3, [r7], #2

; 324  :                 switch (c)

  00038	e3530063	 cmp         r3, #0x63
  0003c	ca00001d	 bgt         |$LN23@NKvDbgPrin|
  00040	0a000018	 beq         |$LN4@NKvDbgPrin|
  00044	e3530025	 cmp         r3, #0x25
  00048	0a000014	 beq         |$LN5@NKvDbgPrin|
  0004c	e3530042	 cmp         r3, #0x42
  00050	0a000010	 beq         |$LN12@NKvDbgPrin|
  00054	e3530048	 cmp         r3, #0x48
  00058	0a00000c	 beq         |$LN11@NKvDbgPrin|
  0005c	e3530058	 cmp         r3, #0x58
  00060	1a00001c	 bne         |$LN3@NKvDbgPrin|

; 336  :                         break;
; 337  : 
; 338  :                     case 'X':
; 339  :                         OutputNumHex(va_arg(vl, unsigned long), 8);

  00064	e3a01007	 mov         r1, #7
  00068		 |$LN63@NKvDbgPrin|
  00068	e2855004	 add         r5, r5, #4
  0006c	e5154004	 ldr         r4, [r5, #-4]
  00070	e1a00224	 mov         r0, r4, lsr #4
  00074	eb000000	 bl          OutputNumHex
  00078	e204300f	 and         r3, r4, #0xF
  0007c	e353000a	 cmp         r3, #0xA
  00080	32830030	 addcc       r0, r3, #0x30
  00084	3a000040	 bcc         |$LN59@NKvDbgPrin|
  00088	e2830037	 add         r0, r3, #0x37

; 340  :                         break;

  0008c	ea00003e	 b           |$LN59@NKvDbgPrin|
  00090		 |$LN11@NKvDbgPrin|

; 332  :                         break;
; 333  : 
; 334  :                     case 'H':
; 335  :                         OutputNumHex(va_arg(vl, unsigned long), 4);

  00090	e3a01003	 mov         r1, #3
  00094	eafffff3	 b           |$LN63@NKvDbgPrin|
  00098		 |$LN12@NKvDbgPrin|

; 328  :                         break;
; 329  : 
; 330  :                     case 'B':
; 331  :                         OutputNumHex(va_arg(vl, unsigned long), 2);

  00098	e3a01001	 mov         r1, #1
  0009c	eafffff1	 b           |$LN63@NKvDbgPrin|
  000a0		 |$LN5@NKvDbgPrin|

; 363  : 
; 364  :                     case '%':
; 365  :                         OEMWriteDebugByte('%');

  000a0	e3a00025	 mov         r0, #0x25

; 366  :                         break;

  000a4	ea000038	 b           |$LN59@NKvDbgPrin|
  000a8		 |$LN4@NKvDbgPrin|

; 367  : 
; 368  :                     case 'c':
; 369  :                         c = va_arg(vl, TCHAR);

  000a8	e2855004	 add         r5, r5, #4

; 370  :                         OEMWriteDebugByte((BYTE)c);

  000ac	e15530b4	 ldrh        r3, [r5, #-4]
  000b0	e20300ff	 and         r0, r3, #0xFF

; 371  :                         break;

  000b4	ea000034	 b           |$LN59@NKvDbgPrin|
  000b8		 |$LN23@NKvDbgPrin|

; 324  :                 switch (c)

  000b8	e3530064	 cmp         r3, #0x64
  000bc	0a000027	 beq         |$LN9@NKvDbgPrin|
  000c0	e3530073	 cmp         r3, #0x73
  000c4	0a000021	 beq         |$LN6@NKvDbgPrin|
  000c8	e3530075	 cmp         r3, #0x75
  000cc	0a000012	 beq         |$LN7@NKvDbgPrin|
  000d0	e3530078	 cmp         r3, #0x78
  000d4	0a000001	 beq         |$LN13@NKvDbgPrin|
  000d8		 |$LN3@NKvDbgPrin|

; 372  : 
; 373  :                     default:
; 374  :                         OEMWriteDebugByte(' ');

  000d8	e3a00020	 mov         r0, #0x20

; 375  :                         break;

  000dc	ea00002a	 b           |$LN59@NKvDbgPrin|
  000e0		 |$LN13@NKvDbgPrin|

; 325  :                 {
; 326  :                     case 'x':
; 327  :                         OutputNumHex(va_arg(vl, unsigned long), 0);

  000e0	e2855004	 add         r5, r5, #4
  000e4	e5154004	 ldr         r4, [r5, #-4]
  000e8	e3d4c00f	 bics        r12, r4, #0xF
  000ec	0a000003	 beq         |$LN27@NKvDbgPrin|
  000f0	e3a01000	 mov         r1, #0
  000f4	e1a00224	 mov         r0, r4, lsr #4
  000f8	eb000000	 bl          OutputNumHex
  000fc	e204400f	 and         r4, r4, #0xF
  00100		 |$LN27@NKvDbgPrin|
  00100	e354000a	 cmp         r4, #0xA
  00104	32843030	 addcc       r3, r4, #0x30
  00108	320300ff	 andcc       r0, r3, #0xFF
  0010c	3a00001e	 bcc         |$LN59@NKvDbgPrin|
  00110	e2843037	 add         r3, r4, #0x37
  00114	e20300ff	 and         r0, r3, #0xFF
  00118	ea00001b	 b           |$LN59@NKvDbgPrin|
  0011c		 |$LN7@NKvDbgPrin|

; 351  :                         }
; 352  :                         OutputNumDecimal((unsigned long)l);
; 353  :                         break;
; 354  :                     }
; 355  : 
; 356  :                     case 'u':
; 357  :                         OutputNumDecimal(va_arg(vl, unsigned long));

  0011c	e2855004	 add         r5, r5, #4
  00120	e5156004	 ldr         r6, [r5, #-4]
  00124		 |$LN8@NKvDbgPrin|
  00124	e356000a	 cmp         r6, #0xA
  00128	3a000005	 bcc         |$LN55@NKvDbgPrin|
  0012c	e0832896	 umull       r2, r3, r6, r8
  00130	e1a041a3	 mov         r4, r3, lsr #3
  00134	e1a00004	 mov         r0, r4
  00138	eb000000	 bl          OutputNumDecimal
  0013c	e0843104	 add         r3, r4, r4, lsl #2
  00140	e0466083	 sub         r6, r6, r3, lsl #1
  00144		 |$LN55@NKvDbgPrin|
  00144	e2863030	 add         r3, r6, #0x30
  00148	e20300ff	 and         r0, r3, #0xFF
  0014c	ea00000e	 b           |$LN59@NKvDbgPrin|
  00150		 |$LN6@NKvDbgPrin|

; 358  :                         break;
; 359  : 
; 360  :                     case 's':
; 361  :                         OEMWriteDebugString(va_arg(vl, LPWSTR));

  00150	e2855004	 add         r5, r5, #4
  00154	e5150004	 ldr         r0, [r5, #-4]
  00158	eb000000	 bl          OEMWriteDebugString

; 362  :                         break;

  0015c	ea00000b	 b           |$LN17@NKvDbgPrin|
  00160		 |$LN9@NKvDbgPrin|

; 341  : 
; 342  :                     case 'd':
; 343  :                     {
; 344  :                         long    l;
; 345  : 
; 346  :                         l = va_arg(vl, long);

  00160	e2855004	 add         r5, r5, #4
  00164	e5153004	 ldr         r3, [r5, #-4]
  00168	e1b06003	 movs        r6, r3

; 347  :                         if (l < 0)

  0016c	5affffec	 bpl         |$LN8@NKvDbgPrin|

; 348  :                         {
; 349  :                             OEMWriteDebugByte('-');

  00170	e3a0002d	 mov         r0, #0x2D
  00174	eb000000	 bl          OEMWriteDebugByte

; 350  :                             l = - l;

  00178	e2666000	 rsb         r6, r6, #0

; 376  :                 }
; 377  :                 break;

  0017c	eaffffe8	 b           |$LN8@NKvDbgPrin|
  00180		 |$LN2@NKvDbgPrin|

; 378  : 
; 379  :             case '\n':
; 380  :                 OEMWriteDebugByte('\r');

  00180	e3a0000d	 mov         r0, #0xD
  00184	eb000000	 bl          OEMWriteDebugByte
  00188		 |$LN1@NKvDbgPrin|

; 381  :                 // fall through
; 382  : 
; 383  :             default:
; 384  :                 OEMWriteDebugByte((BYTE)c);

  00188	e1a00004	 mov         r0, r4
  0018c		 |$LN59@NKvDbgPrin|
  0018c	eb000000	 bl          OEMWriteDebugByte
  00190		 |$LN17@NKvDbgPrin|
  00190	e1d730b0	 ldrh        r3, [r7]
  00194	e3530000	 cmp         r3, #0
  00198	1affff9f	 bne         |$LL20@NKvDbgPrin|
  0019c		 |$LN19@NKvDbgPrin|

; 385  :         }
; 386  :     }
; 387  : }

  0019c	e8bd41f0	 ldmia       sp!, {r4 - r8, lr}
  001a0	e12fff1e	 bx          lr
  001a4		 |$LN67@NKvDbgPrin|
  001a4		 |$LN68@NKvDbgPrin|
  001a4	cccccccd	 DCD         0xcccccccd
  001a8		 |$M47692|

			 ENDP  ; |NKvDbgPrintfW|

	EXPORT	|NKDbgPrintfW|

  00000			 AREA	 |.pdata|, PDATA
|$T47704| DCD	|$LN5@NKDbgPrint|
	DCD	0x40000803
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |NKDbgPrintfW| PROC

; 395  : {

  00000		 |$LN5@NKDbgPrint|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d000f	 stmdb       sp!, {r0 - r3}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c		 |$M47701|
  0000c	e58d0008	 str         r0, [sp, #8]

; 396  :     // Can be stubbed out to shrink XLDR binary size...
; 397  :     va_list vl;
; 398  : 
; 399  :     va_start(vl, pszFormat);
; 400  :     NKvDbgPrintfW(pszFormat, vl);

  00010	e28d100c	 add         r1, sp, #0xC
  00014	eb000000	 bl          NKvDbgPrintfW

; 401  :     va_end(vl);
; 402  : }

  00018	e89d6000	 ldmia       sp, {sp, lr}
  0001c	e12fff1e	 bx          lr
  00020		 |$M47702|

			 ENDP  ; |NKDbgPrintfW|

	EXPORT	|XLDRMain|
	EXPORT	|??_C@_1BC@MABDLOIF@?$AA?$AN?$AA?6?$AAH?$AAA?$AAL?$AAT?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DG@PGACBJIG@?$AAj?$AAu?$AAm?$AAp?$AAi?$AAn?$AAg?$AA?5?$AAt?$AAo?$AA?5?$AAe?$AAb?$AAo?$AAo?$AAt?$AAs?$AAd?$AA?5?$AAi?$AAm?$AAa?$AAg?$AAe?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DM@MLNCKNAG@?$AAS?$AAD?$AA?5?$AAb?$AAo?$AAo?$AAt?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DM@DAIBIGKK@?$AAS?$AAD?$AA?5?$AAb?$AAo?$AAo?$AAt?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAo?$AAp?$AAe?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BI@NFFGLHIF@?$AAe?$AAb?$AAo?$AAo?$AAt?$AAs?$AAd?$AA?4?$AAn?$AAb?$AA0?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DA@FBNLCKKB@?$AAo?$AAp?$AAe?$AAn?$AA?5?$AAe?$AAb?$AAo?$AAo?$AAt?$AAs?$AAd?$AA?4?$AAn?$AAb?$AA0?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GK@JJAIONEO@?$AA?$AN?$AA?6?$AAZ?$AAE?$AAB?$AAE?$AAX?$AA?5?$AAW?$AAi?$AAn?$AAd?$AAo?$AAw?$AAs?$AA?5?$AAC?$AAE?$AA?5?$AAS?$AAD?$AA?5?$AAX?$AA?9?$AAL?$AAo?$AAa?$AAd?$AAe?$AAr?$AA?5?$AAf@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EE@ELAFMACB@?$AA?$AN?$AA?6?$AAB?$AAu?$AAi?$AAl?$AAt?$AA?5?$AAM?$AAa?$AAr?$AA?5?$AA1?$AA1?$AA?5?$AA2?$AA0?$AA1?$AA4?$AA?5?$AAa?$AAt?$AA?5?$AA1?$AA3?$AA?3?$AA5?$AA7?$AA?3?$AA0?$AA9?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_17KPMHKKFB@?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_19PONNFJAB@?$AA3?$AA7?$AAX?$AAX?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_19CAFJHOAJ@?$AA3?$AA5?$AA3?$AA0?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|JumpTo|
	IMPORT	|OEMDeinitDebugSerial|
	IMPORT	|BLSDCardReadData|
	IMPORT	|BLSDCardDownload|
	IMPORT	|GPIOInit|
	IMPORT	|OEMInitDebugSerial|
	IMPORT	|PlatformSetup|
	IMPORT	|Get_CPUVersion|
	IMPORT	|EnableCache_GP|
	IMPORT	|EnableCache_HS|
	IMPORT	|OALLocalAllocInit|
	IMPORT	|wcscpy|
	IMPORT	|memset|

  00000			 AREA	 |.bss|, NOINIT
|?allocationPool@?1??XLDRMain@@9@9| % 0x200		; `XLDRMain'::`2'::allocationPool
|?allocationPool@?1??XLDRMain@@9@9| % 0x200		; `XLDRMain'::`2'::allocationPool

  00000			 AREA	 |.pdata|, PDATA
|$T47756| DCD	|$LN40@XLDRMain|
	DCD	0x40008301

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BC@MABDLOIF@?$AA?$AN?$AA?6?$AAH?$AAA?$AAL?$AAT?$AA?$AN?$AA?6?$AA?$AA@| DCB 0xd
	DCB	0x0, 0xa, 0x0, "H", 0x0, "A", 0x0, "L", 0x0, "T", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DG@PGACBJIG@?$AAj?$AAu?$AAm?$AAp?$AAi?$AAn?$AAg?$AA?5?$AAt?$AAo?$AA?5?$AAe?$AAb?$AAo?$AAo?$AAt?$AAs?$AAd?$AA?5?$AAi?$AAm?$AAa?$AAg?$AAe?$AA?$AN?$AA?6?$AA?$AA@| DCB "j"
	DCB	0x0, "u", 0x0, "m", 0x0, "p", 0x0, "i", 0x0, "n", 0x0, "g"
	DCB	0x0, " ", 0x0, "t", 0x0, "o", 0x0, " ", 0x0, "e", 0x0, "b"
	DCB	0x0, "o", 0x0, "o", 0x0, "t", 0x0, "s", 0x0, "d", 0x0, " "
	DCB	0x0, "i", 0x0, "m", 0x0, "a", 0x0, "g", 0x0, "e", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DM@MLNCKNAG@?$AAS?$AAD?$AA?5?$AAb?$AAo?$AAo?$AAt?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?$AN?$AA?6?$AA?$AA@| DCB "S"
	DCB	0x0, "D", 0x0, " ", 0x0, "b", 0x0, "o", 0x0, "o", 0x0, "t"
	DCB	0x0, " ", 0x0, "f", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e"
	DCB	0x0, "d", 0x0, " ", 0x0, "t", 0x0, "o", 0x0, " ", 0x0, "r"
	DCB	0x0, "e", 0x0, "a", 0x0, "d", 0x0, " ", 0x0, "f", 0x0, "i"
	DCB	0x0, "l", 0x0, "e", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DM@DAIBIGKK@?$AAS?$AAD?$AA?5?$AAb?$AAo?$AAo?$AAt?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAo?$AAp?$AAe?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?$AN?$AA?6?$AA?$AA@| DCB "S"
	DCB	0x0, "D", 0x0, " ", 0x0, "b", 0x0, "o", 0x0, "o", 0x0, "t"
	DCB	0x0, " ", 0x0, "f", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e"
	DCB	0x0, "d", 0x0, " ", 0x0, "t", 0x0, "o", 0x0, " ", 0x0, "o"
	DCB	0x0, "p", 0x0, "e", 0x0, "n", 0x0, " ", 0x0, "f", 0x0, "i"
	DCB	0x0, "l", 0x0, "e", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BI@NFFGLHIF@?$AAe?$AAb?$AAo?$AAo?$AAt?$AAs?$AAd?$AA?4?$AAn?$AAb?$AA0?$AA?$AA@| DCB "e"
	DCB	0x0, "b", 0x0, "o", 0x0, "o", 0x0, "t", 0x0, "s", 0x0, "d"
	DCB	0x0, ".", 0x0, "n", 0x0, "b", 0x0, "0", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DA@FBNLCKKB@?$AAo?$AAp?$AAe?$AAn?$AA?5?$AAe?$AAb?$AAo?$AAo?$AAt?$AAs?$AAd?$AA?4?$AAn?$AAb?$AA0?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?$AN?$AA?6?$AA?$AA@| DCB "o"
	DCB	0x0, "p", 0x0, "e", 0x0, "n", 0x0, " ", 0x0, "e", 0x0, "b"
	DCB	0x0, "o", 0x0, "o", 0x0, "t", 0x0, "s", 0x0, "d", 0x0, "."
	DCB	0x0, "n", 0x0, "b", 0x0, "0", 0x0, " ", 0x0, "f", 0x0, "i"
	DCB	0x0, "l", 0x0, "e", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GK@JJAIONEO@?$AA?$AN?$AA?6?$AAZ?$AAE?$AAB?$AAE?$AAX?$AA?5?$AAW?$AAi?$AAn?$AAd?$AAo?$AAw?$AAs?$AA?5?$AAC?$AAE?$AA?5?$AAS?$AAD?$AA?5?$AAX?$AA?9?$AAL?$AAo?$AAa?$AAd?$AAe?$AAr?$AA?5?$AAf@| DCB 0xd
	DCB	0x0, 0xa, 0x0, "Z", 0x0, "E", 0x0, "B", 0x0, "E", 0x0, "X"
	DCB	0x0, " ", 0x0, "W", 0x0, "i", 0x0, "n", 0x0, "d", 0x0, "o"
	DCB	0x0, "w", 0x0, "s", 0x0, " ", 0x0, "C", 0x0, "E", 0x0, " "
	DCB	0x0, "S", 0x0, "D", 0x0, " ", 0x0, "X", 0x0, "-", 0x0, "L"
	DCB	0x0, "o", 0x0, "a", 0x0, "d", 0x0, "e", 0x0, "r", 0x0, " "
	DCB	0x0, "f", 0x0, "o", 0x0, "r", 0x0, " ", 0x0, "Z", 0x0, "-"
	DCB	0x0, "2", 0x0, "1", 0x0, "7", 0x0, "0", 0x0, " ", 0x0, "p"
	DCB	0x0, "l", 0x0, "u", 0x0, "s", 0x0, " ", 0x0, "-", 0x0, " "
	DCB	0x0, "R", 0x0, "a", 0x0, "y", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EE@ELAFMACB@?$AA?$AN?$AA?6?$AAB?$AAu?$AAi?$AAl?$AAt?$AA?5?$AAM?$AAa?$AAr?$AA?5?$AA1?$AA1?$AA?5?$AA2?$AA0?$AA1?$AA4?$AA?5?$AAa?$AAt?$AA?5?$AA1?$AA3?$AA?3?$AA5?$AA7?$AA?3?$AA0?$AA9?$AA?5@| DCB 0xd
	DCB	0x0, 0xa, 0x0, "B", 0x0, "u", 0x0, "i", 0x0, "l", 0x0, "t"
	DCB	0x0, " ", 0x0, "M", 0x0, "a", 0x0, "r", 0x0, " ", 0x0, "1"
	DCB	0x0, "1", 0x0, " ", 0x0, "2", 0x0, "0", 0x0, "1", 0x0, "4"
	DCB	0x0, " ", 0x0, "a", 0x0, "t", 0x0, " ", 0x0, "1", 0x0, "3"
	DCB	0x0, ":", 0x0, "5", 0x0, "7", 0x0, ":", 0x0, "0", 0x0, "9"
	DCB	0x0, " ", 0x0, "(", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_17KPMHKKFB@?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB ")", 0x0, 0xd, 0x0
	DCB	0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_19PONNFJAB@?$AA3?$AA7?$AAX?$AAX?$AA?$AA@| DCB "3", 0x0, "7", 0x0, "X"
	DCB	0x0, "X", 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_19CAFJHOAJ@?$AA3?$AA5?$AA3?$AA0?$AA?$AA@| DCB "3", 0x0, "5", 0x0, "3"
	DCB	0x0, "0", 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |XLDRMain| PROC

; 87   : {

  00000		 |$LN40@XLDRMain|
  00000	e92d43f0	 stmdb       sp!, {r4 - r9, lr}
  00004		 |$M47753|

; 88   :     OMAP_GPTIMER_REGS *pTimerRegs;
; 89   :     static UCHAR allocationPool[512];
; 90   :     LPCWSTR ProcessorName   = L"3530";
; 91   : 
; 92   :     // Setup global variables
; 93   :     if (!SetupCopySection(pTOC))

  00004	e59f51fc	 ldr         r5, [pc, #0x1FC]
  00008	e59f61f4	 ldr         r6, [pc, #0x1F4]
  0000c	e5951000	 ldr         r1, [r5]
  00010	e3710001	 cmn         r1, #1
  00014	0a000066	 beq         |$CleanUp$47308|
  00018	e5913020	 ldr         r3, [r1, #0x20]
  0001c	e3a0e000	 mov         lr, #0
  00020	e3530000	 cmp         r3, #0
  00024	9a00001b	 bls         |$LN17@XLDRMain|
  00028	e3a04000	 mov         r4, #0
  0002c	e3a09000	 mov         r9, #0
  00030		 |$LL19@XLDRMain|
  00030	e5913024	 ldr         r3, [r1, #0x24]
  00034	e0837004	 add         r7, r3, r4
  00038	e5973008	 ldr         r3, [r7, #8]
  0003c	e5970004	 ldr         r0, [r7, #4]
  00040	e5972000	 ldr         r2, [r7]
  00044	e1b08003	 movs        r8, r3
  00048	0a000003	 beq         |$LN30@XLDRMain|
  0004c		 |$LL16@XLDRMain|
  0004c	e4d23001	 ldrb        r3, [r2], #1
  00050	e2588001	 subs        r8, r8, #1
  00054	e4c03001	 strb        r3, [r0], #1
  00058	1afffffb	 bne         |$LL16@XLDRMain|
  0005c		 |$LN30@XLDRMain|
  0005c	e597200c	 ldr         r2, [r7, #0xC]
  00060	e5973008	 ldr         r3, [r7, #8]
  00064	e0523003	 subs        r3, r2, r3
  00068	0a000005	 beq         |$LN14@XLDRMain|
  0006c	e3530000	 cmp         r3, #0
  00070	0a000003	 beq         |$LN14@XLDRMain|
  00074	e0803003	 add         r3, r0, r3
  00078		 |$LN35@XLDRMain|
  00078	e4c09001	 strb        r9, [r0], #1
  0007c	e1500003	 cmp         r0, r3
  00080	1afffffc	 bne         |$LN35@XLDRMain|
  00084		 |$LN14@XLDRMain|
  00084	e5913020	 ldr         r3, [r1, #0x20]
  00088	e28ee001	 add         lr, lr, #1
  0008c	e2844010	 add         r4, r4, #0x10
  00090	e15e0003	 cmp         lr, r3
  00094	3affffe5	 bcc         |$LL19@XLDRMain|
  00098		 |$LN17@XLDRMain|

; 94   :         goto CleanUp;
; 95   : 
; 96   :     OALLocalAllocInit(allocationPool,sizeof(allocationPool));

  00098	e59f0160	 ldr         r0, [pc, #0x160]
  0009c	e3a01c02	 mov         r1, #2, 24
  000a0		 |$CleanUp$47717|
  000a0	eb000000	 bl          OALLocalAllocInit

; 97   : 
; 98   :     //  Enable cache based on device type
; 99   :     if( dwOEMHighSecurity == OEM_HIGH_SECURITY_HS )

  000a4	e5953004	 ldr         r3, [r5, #4]
  000a8	e3530001	 cmp         r3, #1
  000ac	1a000001	 bne         |$LN9@XLDRMain|

; 100  :     {
; 101  :         EnableCache_HS();

  000b0	eb000000	 bl          EnableCache_HS

; 102  :     }
; 103  :     else

  000b4	ea000000	 b           |$LN8@XLDRMain|
  000b8		 |$LN9@XLDRMain|

; 104  :     {
; 105  :         EnableCache_GP();

  000b8	eb000000	 bl          EnableCache_GP
  000bc		 |$LN8@XLDRMain|

; 106  :     }
; 107  :     
; 108  :     gCPU_family = CPU_FAMILY(Get_CPUVersion());

  000bc	eb000000	 bl          Get_CPUVersion
  000c0	e1a03800	 mov         r3, r0, lsl #16
  000c4	e59f2130	 ldr         r2, [pc, #0x130]
  000c8	e1a03c23	 mov         r3, r3, lsr #24

; 109  :     if( gCPU_family == CPU_FAMILY_DM37XX)

  000cc	e3530001	 cmp         r3, #1

; 110  :     {
; 111  :        ProcessorName = L"37XX";

  000d0	059f6120	 ldreq       r6, [pc, #0x120]
  000d4	e5823000	 str         r3, [r2]

; 112  :     }
; 113  : 
; 114  :     PlatformSetup();

  000d8	eb000000	 bl          PlatformSetup

; 115  : 
; 116  :     // Initialize debug serial output
; 117  :     XLDRMSGINIT;

  000dc	eb000000	 bl          OEMInitDebugSerial

; 118  : 
; 119  :     // Print information...
; 120  :     //XLDRMSG( TEXT("\r\nZEBEX Windows CE SD X-Loader for Z-2170 plus - Brian"));
; 121  :     XLDRMSG( TEXT("\r\nZEBEX Windows CE SD X-Loader for Z-2170 plus - Ray"));   //Ray 131024

  000e0	e59f010c	 ldr         r0, [pc, #0x10C]
  000e4	eb000000	 bl          OEMWriteDebugString

; 122  :     XLDRMSG( TEXT("\r\n") TEXT("Built ") TEXT(__DATE__) TEXT(" at ") TEXT(__TIME__) TEXT(" ("));

  000e8	e59f0100	 ldr         r0, [pc, #0x100]
  000ec	eb000000	 bl          OEMWriteDebugString

; 123  : 	XLDRMSG( (UINT16 *)ProcessorName);

  000f0	e1a00006	 mov         r0, r6
  000f4	eb000000	 bl          OEMWriteDebugString

; 124  : 	XLDRMSG( TEXT(")\r\n"));

  000f8	e59f00ec	 ldr         r0, [pc, #0xEC]
  000fc	eb000000	 bl          OEMWriteDebugString

; 125  :     GPIOInit();	// \COMMON_TI_V1\COMMON_TI\GPIO\DISPATCH\OAL\gpio_dispatch.c

  00100	eb000000	 bl          GPIOInit

; 126  :     pTimerRegs = (OMAP_GPTIMER_REGS *)OALPAtoUA(OMAP_GPTIMER1_REGS_PA); // General-Purpose Timers
; 127  : 
; 128  :     // Soft reset GPTIMER1
; 129  :     OUTREG32(&pTimerRegs->TIOCP, SYSCONFIG_SOFTRESET); 

  00104	e59f30dc	 ldr         r3, [pc, #0xDC]
  00108	e3a02002	 mov         r2, #2
  0010c	e5832000	 str         r2, [r3]
  00110	e59f20cc	 ldr         r2, [pc, #0xCC]
  00114		 |$LL6@XLDRMain|

; 130  : 	// check GPTIMER1 reset completed ?
; 131  :     while ((INREG32(&pTimerRegs->TISTAT) & GPTIMER_TISTAT_RESETDONE) == 0)

  00114	e5923000	 ldr         r3, [r2]
  00118	e3130001	 tst         r3, #1
  0011c	0afffffc	 beq         |$LL6@XLDRMain|

; 132  : 		;
; 133  : 
; 134  :     // Enable posted mode
; 135  :     OUTREG32(&pTimerRegs->TSICR, GPTIMER_TSICR_POSTED);

  00120	e59f30b8	 ldr         r3, [pc, #0xB8]

; 136  :     // Start timer
; 137  :     OUTREG32(&pTimerRegs->TCLR, GPTIMER_TCLR_AR|GPTIMER_TCLR_ST);
; 138  :     // need to init OAL tick functions
; 139  : 
; 140  : 
; 141  :     memset(&g_bootCfg, 0, sizeof(g_bootCfg));

  00124	e59f20b0	 ldr         r2, [pc, #0xB0]
  00128	e59f40a8	 ldr         r4, [pc, #0xA8]
  0012c	e3a01004	 mov         r1, #4
  00130	e5831000	 str         r1, [r3]
  00134	e3a03003	 mov         r3, #3
  00138	e5823000	 str         r3, [r2]
  0013c	e3a02090	 mov         r2, #0x90
  00140	e1a00004	 mov         r0, r4
  00144	e3a01000	 mov         r1, #0
  00148	eb000000	 bl          memset

; 142  :     //g_bootCfg.signature = BOOT_CFG_SIGNATURE;
; 143  :     //g_bootCfg.version = BOOT_CFG_VERSION;
; 144  :     //g_bootCfg.bootDevLoc.IfcType = Internal;
; 145  :     //g_bootCfg.bootDevLoc.BusNumber = 0;
; 146  :     //g_bootCfg.bootDevLoc.LogicalLoc = BSP_LAN9115_REGS_PA;
; 147  :     //g_bootCfg.kitlDevLoc.IfcType = Internal;
; 148  :     //g_bootCfg.kitlDevLoc.BusNumber = 0;
; 149  :     //g_bootCfg.kitlDevLoc.LogicalLoc = BSP_LAN9115_REGS_PA;
; 150  :     //g_bootCfg.kitlFlags |= OAL_KITL_FLAGS_DHCP;//|OAL_KITL_FLAGS_ENABLED;
; 151  :     //g_bootCfg.kitlFlags |= OAL_KITL_FLAGS_EXTNAME;
; 152  :     //g_bootCfg.kitlFlags |= OAL_KITL_FLAGS_VMINI;
; 153  :     //g_bootCfg.ipAddress = 0;
; 154  :     //g_bootCfg.ipMask = 0;
; 155  :     //g_bootCfg.ipRoute = 0;
; 156  :     //g_bootCfg.deviceID = 0;
; 157  :     //g_bootCfg.osPartitionSize = IMAGE_WINCE_CODE_SIZE;
; 158  :     wcscpy(g_bootCfg.filename, L"ebootsd.nb0");

  0014c	e59f1080	 ldr         r1, [pc, #0x80]
  00150	e284005c	 add         r0, r4, #0x5C
  00154	eb000000	 bl          wcscpy

; 159  : 
; 160  :     XLDRMSG(TEXT("open ebootsd.nb0 file\r\n"));

  00158	e59f0070	 ldr         r0, [pc, #0x70]
  0015c	eb000000	 bl          OEMWriteDebugString

; 161  : 
; 162  :     if (BL_ERROR == BLSDCardDownload(g_bootCfg.filename))

  00160	e284005c	 add         r0, r4, #0x5C
  00164	eb000000	 bl          BLSDCardDownload
  00168	e3700001	 cmn         r0, #1
  0016c	1a000002	 bne         |$LN4@XLDRMain|

; 163  :     {
; 164  :         XLDRMSG(TEXT("SD boot failed to open file\r\n"));

  00170	e59f0054	 ldr         r0, [pc, #0x54]
  00174	eb000000	 bl          OEMWriteDebugString

; 165  :         goto CleanUp;

  00178	ea00000d	 b           |$CleanUp$47308|
  0017c		 |$LN4@XLDRMain|

; 166  :     }
; 167  : 
; 168  :     //XLDRMSG(TEXT("read ebootsd.nb0 file\r\n"));
; 169  : 
; 170  :     if (BL_ERROR == BLSDCardReadData(0x000c0000, (UCHAR *) IMAGE_STARTUP_IMAGE_PA))

  0017c	e3e04d0f	 mvn         r4, #0xF, 26
  00180	e1a01a84	 mov         r1, r4, lsl #21
  00184	e3a00703	 mov         r0, #3, 14
  00188	eb000000	 bl          BLSDCardReadData
  0018c	e3700001	 cmn         r0, #1
  00190	1a000002	 bne         |$LN3@XLDRMain|

; 171  :     {
; 172  :         XLDRMSG(TEXT("SD boot failed to read file\r\n"));

  00194	e59f002c	 ldr         r0, [pc, #0x2C]
  00198	eb000000	 bl          OEMWriteDebugString
  0019c	ea000004	 b           |$CleanUp$47308|
  001a0		 |$LN3@XLDRMain|

; 173  :         goto CleanUp;
; 174  :     }
; 175  : 
; 176  :     XLDRMSG(TEXT("jumping to ebootsd image\r\n"));

  001a0	e59f001c	 ldr         r0, [pc, #0x1C]
  001a4	eb000000	 bl          OEMWriteDebugString

; 177  : 
; 178  :     // Wait for serial port
; 179  :     XLDRMSGDEINIT;

  001a8	eb000000	 bl          OEMDeinitDebugSerial

; 180  : 
; 181  :     // Jump to image
; 182  :     JumpTo((VOID*)IMAGE_STARTUP_IMAGE_PA);

  001ac	e1a00a84	 mov         r0, r4, lsl #21
  001b0	eb000000	 bl          JumpTo
  001b4		 |$CleanUp$47308|

; 183  : 
; 184  : CleanUp:
; 185  :     XLDRMSG(L"\r\nHALT\r\n");

  001b4	e59f0004	 ldr         r0, [pc, #4]
  001b8	eb000000	 bl          OEMWriteDebugString
  001bc		 |$LL2@XLDRMain|

; 186  :     for(;;);

  001bc	eafffffe	 b           |$LL2@XLDRMain|
  001c0		 |$LN41@XLDRMain|
  001c0		 |$LN42@XLDRMain|
  001c0	00000000	 DCD         |??_C@_1BC@MABDLOIF@?$AA?$AN?$AA?6?$AAH?$AAA?$AAL?$AAT?$AA?$AN?$AA?6?$AA?$AA@|
  001c4		 |$LN43@XLDRMain|
  001c4	00000000	 DCD         |??_C@_1DG@PGACBJIG@?$AAj?$AAu?$AAm?$AAp?$AAi?$AAn?$AAg?$AA?5?$AAt?$AAo?$AA?5?$AAe?$AAb?$AAo?$AAo?$AAt?$AAs?$AAd?$AA?5?$AAi?$AAm?$AAa?$AAg?$AAe?$AA?$AN?$AA?6?$AA?$AA@|
  001c8		 |$LN44@XLDRMain|
  001c8	00000000	 DCD         |??_C@_1DM@MLNCKNAG@?$AAS?$AAD?$AA?5?$AAb?$AAo?$AAo?$AAt?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?$AN?$AA?6?$AA?$AA@|
  001cc		 |$LN45@XLDRMain|
  001cc	00000000	 DCD         |??_C@_1DM@DAIBIGKK@?$AAS?$AAD?$AA?5?$AAb?$AAo?$AAo?$AAt?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAo?$AAp?$AAe?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?$AN?$AA?6?$AA?$AA@|
  001d0		 |$LN46@XLDRMain|
  001d0	00000000	 DCD         |??_C@_1DA@FBNLCKKB@?$AAo?$AAp?$AAe?$AAn?$AA?5?$AAe?$AAb?$AAo?$AAo?$AAt?$AAs?$AAd?$AA?4?$AAn?$AAb?$AA0?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?$AN?$AA?6?$AA?$AA@|
  001d4		 |$LN47@XLDRMain|
  001d4	00000000	 DCD         |??_C@_1BI@NFFGLHIF@?$AAe?$AAb?$AAo?$AAo?$AAt?$AAs?$AAd?$AA?4?$AAn?$AAb?$AA0?$AA?$AA@|
  001d8		 |$LN48@XLDRMain|
  001d8	00000000	 DCD         |g_bootCfg|
  001dc		 |$LN49@XLDRMain|
  001dc	48318024	 DCD         0x48318024
  001e0		 |$LN50@XLDRMain|
  001e0	48318040	 DCD         0x48318040
  001e4		 |$LN51@XLDRMain|
  001e4	48318014	 DCD         0x48318014
  001e8		 |$LN52@XLDRMain|
  001e8	48318010	 DCD         0x48318010
  001ec		 |$LN53@XLDRMain|
  001ec	00000000	 DCD         |??_C@_17KPMHKKFB@?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  001f0		 |$LN54@XLDRMain|
  001f0	00000000	 DCD         |??_C@_1EE@ELAFMACB@?$AA?$AN?$AA?6?$AAB?$AAu?$AAi?$AAl?$AAt?$AA?5?$AAM?$AAa?$AAr?$AA?5?$AA1?$AA1?$AA?5?$AA2?$AA0?$AA1?$AA4?$AA?5?$AAa?$AAt?$AA?5?$AA1?$AA3?$AA?3?$AA5?$AA7?$AA?3?$AA0?$AA9?$AA?5@|
  001f4		 |$LN55@XLDRMain|
  001f4	00000000	 DCD         |??_C@_1GK@JJAIONEO@?$AA?$AN?$AA?6?$AAZ?$AAE?$AAB?$AAE?$AAX?$AA?5?$AAW?$AAi?$AAn?$AAd?$AAo?$AAw?$AAs?$AA?5?$AAC?$AAE?$AA?5?$AAS?$AAD?$AA?5?$AAX?$AA?9?$AAL?$AAo?$AAa?$AAd?$AAe?$AAr?$AA?5?$AAf@|
  001f8		 |$LN56@XLDRMain|
  001f8	00000000	 DCD         |??_C@_19PONNFJAB@?$AA3?$AA7?$AAX?$AAX?$AA?$AA@|
  001fc		 |$LN57@XLDRMain|
  001fc	00000000	 DCD         |gCPU_family|
  00200		 |$LN58@XLDRMain|
  00200	00000000	 DCD         |?allocationPool@?1??XLDRMain@@9@9|
  00204		 |$LN59@XLDRMain|
  00204	00000000	 DCD         |??_C@_19CAFJHOAJ@?$AA3?$AA5?$AA3?$AA0?$AA?$AA@|
  00208		 |$LN60@XLDRMain|
  00208	00000000	 DCD         |pTOC|
  0020c		 |$M47754|

			 ENDP  ; |XLDRMain|

	END
