; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\Z2170P\SRC\BSP_COMMON\TPS659XX\bsp_tps659xx.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "


  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
	IMPORT	|TWLWriteRegs|
; File c:\wince600\platform\common\src\soc\common_ti_v1\triton\inc\twl.h

  00000			 AREA	 |.pdata|, PDATA
|$T46151| DCD	|$LN5@TWLWriteBy|
	DCD	0x40000803
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |TWLWriteByteReg| PROC

; 51   : {

  00000		 |$LN5@TWLWriteBy|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d000f	 stmdb       sp!, {r0 - r3}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c		 |$M46148|

; 52   :     return TWLWriteRegs(hTWL,address,&data,sizeof(data));

  0000c	e3a03001	 mov         r3, #1
  00010	e28d2010	 add         r2, sp, #0x10
  00014	eb000000	 bl          TWLWriteRegs

; 53   : }

  00018	e89d6000	 ldmia       sp, {sp, lr}
  0001c	e12fff1e	 bx          lr
  00020		 |$M46149|

			 ENDP  ; |TWLWriteByteReg|

; File c:\wince600\platform\z2170p\src\bsp_common\tps659xx\bsp_tps659xx.c

  00000			 AREA	 |.pdata|, PDATA
|$T46161| DCD	|$LN7@DecideTwlV|
	DCD	0x40000700
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DecideTwlVMMC| PROC

; 40   : {

  00000		 |$LN7@DecideTwlV|
  00000		 |$M46158|

; 41   :     if(slot == 0)   // SLOT1

  00000	e3500000	 cmp         r0, #0

; 42   :     {
; 43   :         return TWL_VMMC1_3P0;

  00004	0a000002	 beq         |$LN1@DecideTwlV|

; 44   :     }
; 45   : 
; 46   :     if(slot == 1)   // SLOT2

  00008	e3500001	 cmp         r0, #1

; 47   :     {
; 48   :         return TWL_VMMC2_1P85;

  0000c	03a00006	 moveq       r0, #6

; 52   : }

  00010	012fff1e	 bxeq        lr
  00014		 |$LN1@DecideTwlV|

; 49   :     } 
; 50   : 
; 51   :     return DEFAULT_VMMC1_VR;

  00014	e3a00002	 mov         r0, #2

; 52   : }

  00018	e12fff1e	 bx          lr
  0001c		 |$M46159|

			 ENDP  ; |DecideTwlVMMC|

	EXPORT	|InitTwlPower|
	EXPORT	|??_C@_1BO@CFFFPGIM@?$AAI?$AAn?$AAi?$AAt?$AAT?$AAw?$AAl?$AAP?$AAo?$AAw?$AAe?$AAr?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|TWLClose|
	IMPORT	|TWLOpen|
	IMPORT	|NKDbgPrintfW|
; File c:\wince600\platform\common\src\soc\common_ti_v1\triton\inc\twl.h

  00000			 AREA	 |.pdata|, PDATA
|$T46377| DCD	|$LN111@InitTwlPow|
	DCD	0x40016402

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BO@CFFFPGIM@?$AAI?$AAn?$AAi?$AAt?$AAT?$AAw?$AAl?$AAP?$AAo?$AAw?$AAe?$AAr?$AA?$AN?$AA?6?$AA?$AA@| DCB "I"
	DCB	0x0, "n", 0x0, "i", 0x0, "t", 0x0, "T", 0x0, "w", 0x0, "l"
	DCB	0x0, "P", 0x0, "o", 0x0, "w", 0x0, "e", 0x0, "r", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Ogspy
; File c:\wince600\platform\z2170p\src\bsp_common\tps659xx\bsp_tps659xx.c

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |InitTwlPower| PROC

; 68   : {

  00000		 |$LN111@InitTwlPow|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004	e24dd004	 sub         sp, sp, #4
  00008		 |$M46374|

; 69   :     void* hTwl;
; 70   :     UINT16 val;
; 71   : 
; 72   : 	OALLog(L"InitTwlPower\r\n");

  00008	e59f057c	 ldr         r0, [pc, #0x57C]
  0000c	eb000000	 bl          NKDbgPrintfW

; 73   :     // initialize T2 power level and grouping
; 74   :     hTwl = TWLOpen();

  00010	eb000000	 bl          TWLOpen

; 75   : 
; 76   :     // unsecure registers
; 77   :     TWLWriteByteReg(hTwl, TWL_PROTECT_KEY, 0xCE);

  00014	e3a05803	 mov         r5, #3, 16
  00018	e3a0e0ce	 mov         lr, #0xCE
  0001c	e3851044	 orr         r1, r5, #0x44
  00020	e3a03001	 mov         r3, #1
  00024	e28d2000	 add         r2, sp, #0
  00028	e5cde000	 strb        lr, [sp]
  0002c	e1a04000	 mov         r4, r0
  00030	eb000000	 bl          TWLWriteRegs

; 78   :     TWLWriteByteReg(hTwl, TWL_PROTECT_KEY, 0xEC);

  00034	e3a030ec	 mov         r3, #0xEC
  00038	e5cd3000	 strb        r3, [sp]
  0003c	e3a03001	 mov         r3, #1
  00040	e28d2000	 add         r2, sp, #0
  00044	e3851044	 orr         r1, r5, #0x44
  00048	e1a00004	 mov         r0, r4
  0004c	eb000000	 bl          TWLWriteRegs
  00050	e3a06803	 mov         r6, #3, 16

; 79   : 
; 80   : /*
; 81   :     SHOW_T2_REG(TWL_CFG_P1_TRANSITION);
; 82   :     SHOW_T2_REG(TWL_CFG_P2_TRANSITION);
; 83   :     SHOW_T2_REG(TWL_CFG_P3_TRANSITION);
; 84   :     SHOW_T2_REG(TWL_CFG_P123_TRANSITION);
; 85   :     SHOW_T2_REG(TWL_STS_BOOT);
; 86   :     SHOW_T2_REG(TWL_CFG_BOOT);
; 87   :     SHOW_T2_REG(TWL_SHUNDAN);
; 88   :     SHOW_T2_REG(TWL_BOOT_BCI);
; 89   :     SHOW_T2_REG(TWL_CFG_PWRANA1);
; 90   :     SHOW_T2_REG(TWL_CFG_PWRANA2);
; 91   :     SHOW_T2_REG(TWL_BGAP_TRIM);
; 92   :     SHOW_T2_REG(TWL_BACKUP_MISC_STS);
; 93   :     SHOW_T2_REG(TWL_BACKUP_MISC_CFG);
; 94   :     SHOW_T2_REG(TWL_BACKUP_MISC_TST);
; 95   :     SHOW_T2_REG(TWL_PROTECT_KEY);
; 96   :     SHOW_T2_REG(TWL_STS_HW_CONDITIONS);
; 97   :     SHOW_T2_REG(TWL_P1_SW_EVENTS);
; 98   :     SHOW_T2_REG(TWL_P2_SW_EVENTS);
; 99   :     SHOW_T2_REG(TWL_P3_SW_EVENTS);
; 100  :     SHOW_T2_REG(TWL_STS_P123_STATE);
; 101  :     SHOW_T2_REG(TWL_PB_CFG);
; 102  :     SHOW_T2_REG(TWL_PB_WORD_MSB);
; 103  :     SHOW_T2_REG(TWL_PB_WORD_LSB);
; 104  :     SHOW_T2_REG(TWL_RESERVED_A);
; 105  :     SHOW_T2_REG(TWL_RESERVED_B);
; 106  :     SHOW_T2_REG(TWL_RESERVED_C);
; 107  :     SHOW_T2_REG(TWL_RESERVED_D);
; 108  :     SHOW_T2_REG(TWL_RESERVED_E);
; 109  :     SHOW_T2_REG(TWL_SEQ_ADD_W2P);
; 110  :     SHOW_T2_REG(TWL_SEQ_ADD_P2A);
; 111  :     SHOW_T2_REG(TWL_SEQ_ADD_A2W);
; 112  :     SHOW_T2_REG(TWL_SEQ_ADD_A2S);
; 113  :     SHOW_T2_REG(TWL_SEQ_ADD_S2A12);
; 114  :     SHOW_T2_REG(TWL_SEQ_ADD_S2A3);
; 115  :     SHOW_T2_REG(TWL_SEQ_ADD_WARM);
; 116  :     SHOW_T2_REG(TWL_MEMORY_ADDRESS);
; 117  :     SHOW_T2_REG(TWL_MEMORY_DATA);
; 118  : 
; 119  :     // pm receiver (un)secure mode
; 120  :     SHOW_T2_REG(TWL_SC_CONFIG);
; 121  :     SHOW_T2_REG(TWL_SC_DETECT1);
; 122  :     SHOW_T2_REG(TWL_SC_DETECT2);
; 123  :     SHOW_T2_REG(TWL_WATCHDOG_CFG);
; 124  :     SHOW_T2_REG(TWL_IT_CHECK_CFG);
; 125  :     SHOW_T2_REG(TWL_VIBRATOR_CFG);
; 126  :     SHOW_T2_REG(TWL_DCDC_GLOBAL_CFG);
; 127  :     SHOW_T2_REG(TWL_VDD1_TRIM1);
; 128  :     SHOW_T2_REG(TWL_VDD1_TRIM2);
; 129  :     SHOW_T2_REG(TWL_VDD2_TRIM1);
; 130  :     SHOW_T2_REG(TWL_VDD2_TRIM2);
; 131  :     SHOW_T2_REG(TWL_VIO_TRIM1);
; 132  :     SHOW_T2_REG(TWL_VIO_TRIM2);
; 133  :     SHOW_T2_REG(TWL_MISC_CFG);
; 134  :     SHOW_T2_REG(TWL_LS_TST_A);
; 135  :     SHOW_T2_REG(TWL_LS_TST_B);
; 136  :     SHOW_T2_REG(TWL_LS_TST_C);
; 137  :     SHOW_T2_REG(TWL_LS_TST_D);
; 138  :     SHOW_T2_REG(TWL_BB_CFG);
; 139  :     SHOW_T2_REG(TWL_MISC_TST);
; 140  :     SHOW_T2_REG(TWL_TRIM1);
; 141  :     SHOW_T2_REG(TWL_TRIM2);
; 142  :     SHOW_T2_REG(TWL_DCDC_TIMEOUT);
; 143  :     SHOW_T2_REG(TWL_VAUX1_DEV_GRP);
; 144  :     SHOW_T2_REG(TWL_VAUX1_TYPE);
; 145  :     SHOW_T2_REG(TWL_VAUX1_REMAP);
; 146  :     SHOW_T2_REG(TWL_VAUX1_DEDICATED);
; 147  :     SHOW_T2_REG(TWL_VAUX2_DEV_GRP);
; 148  :     SHOW_T2_REG(TWL_VAUX2_TYPE);
; 149  :     SHOW_T2_REG(TWL_VAUX2_REMAP);
; 150  :     SHOW_T2_REG(TWL_VAUX2_DEDICATED);
; 151  :     SHOW_T2_REG(TWL_VAUX3_DEV_GRP);
; 152  :     SHOW_T2_REG(TWL_VAUX3_TYPE);
; 153  :     SHOW_T2_REG(TWL_VAUX3_REMAP);
; 154  :     SHOW_T2_REG(TWL_VAUX3_DEDICATED);
; 155  :     SHOW_T2_REG(TWL_VAUX4_DEV_GRP);
; 156  :     SHOW_T2_REG(TWL_VAUX4_TYPE);
; 157  :     SHOW_T2_REG(TWL_VAUX4_REMAP);
; 158  :     SHOW_T2_REG(TWL_VAUX4_DEDICATED);
; 159  :     SHOW_T2_REG(TWL_VMMC1_DEV_GRP);
; 160  :     SHOW_T2_REG(TWL_VMMC1_TYPE);
; 161  :     SHOW_T2_REG(TWL_VMMC1_REMAP);
; 162  :     SHOW_T2_REG(TWL_VMMC1_DEDICATED);
; 163  :     SHOW_T2_REG(TWL_VMMC2_DEV_GRP);
; 164  :     SHOW_T2_REG(TWL_VMMC2_TYPE);
; 165  :     SHOW_T2_REG(TWL_VMMC2_REMAP);
; 166  :     SHOW_T2_REG(TWL_VMMC2_DEDICATED);
; 167  :     SHOW_T2_REG(TWL_VPLL1_DEV_GRP);
; 168  :     SHOW_T2_REG(TWL_VPLL1_TYPE);
; 169  :     SHOW_T2_REG(TWL_VPLL1_REMAP);
; 170  :     SHOW_T2_REG(TWL_VPLL1_DEDICATED);
; 171  :     SHOW_T2_REG(TWL_VPLL2_DEV_GRP);
; 172  :     SHOW_T2_REG(TWL_VPLL2_TYPE);
; 173  :     SHOW_T2_REG(TWL_VPLL2_REMAP);
; 174  :     SHOW_T2_REG(TWL_VPLL2_DEDICATED);
; 175  :     SHOW_T2_REG(TWL_VSIM_DEV_GRP);
; 176  :     SHOW_T2_REG(TWL_VSIM_TYPE);
; 177  :     SHOW_T2_REG(TWL_VSIM_REMAP);
; 178  :     SHOW_T2_REG(TWL_VSIM_DEDICATED);
; 179  :     SHOW_T2_REG(TWL_VDAC_DEV_GRP);
; 180  :     SHOW_T2_REG(TWL_VDAC_TYPE);
; 181  :     SHOW_T2_REG(TWL_VDAC_REMAP);
; 182  :     SHOW_T2_REG(TWL_VDAC_DEDICATED);
; 183  :     SHOW_T2_REG(TWL_VINTANA1_DEV_GRP);
; 184  :     SHOW_T2_REG(TWL_VINTANA1_TYPE);
; 185  :     SHOW_T2_REG(TWL_VINTANA1_REMAP);
; 186  :     SHOW_T2_REG(TWL_VINTANA1_DEDICATED);
; 187  :     SHOW_T2_REG(TWL_VINTANA2_DEV_GRP);
; 188  :     SHOW_T2_REG(TWL_VINTANA2_TYPE);
; 189  :     SHOW_T2_REG(TWL_VINTANA2_REMAP);
; 190  :     SHOW_T2_REG(TWL_VINTANA2_DEDICATED);
; 191  :     SHOW_T2_REG(TWL_VINTDIG_DEV_GRP);
; 192  :     SHOW_T2_REG(TWL_VINTDIG_TYPE);
; 193  :     SHOW_T2_REG(TWL_VINTDIG_REMAP);
; 194  :     SHOW_T2_REG(TWL_VINTDIG_DEDICATED);
; 195  :     SHOW_T2_REG(TWL_VIO_DEV_GRP);
; 196  :     SHOW_T2_REG(TWL_VIO_TYPE);
; 197  :     SHOW_T2_REG(TWL_VIO_REMAP);
; 198  :     SHOW_T2_REG(TWL_VIO_CFG);
; 199  :     SHOW_T2_REG(TWL_VIO_MISC_CFG);
; 200  :     SHOW_T2_REG(TWL_VIO_TEST1);
; 201  :     SHOW_T2_REG(TWL_VIO_TEST2);
; 202  :     SHOW_T2_REG(TWL_VIO_OSC);
; 203  :     SHOW_T2_REG(TWL_VIO_RESERVED);
; 204  :     SHOW_T2_REG(TWL_VIO_VSEL);
; 205  :     SHOW_T2_REG(TWL_VDD1_DEV_GRP);
; 206  :     SHOW_T2_REG(TWL_VDD1_TYPE);
; 207  :     SHOW_T2_REG(TWL_VDD1_REMAP);
; 208  :     SHOW_T2_REG(TWL_VDD1_CFG);
; 209  :     SHOW_T2_REG(TWL_VDD1_MISC_CFG);
; 210  :     SHOW_T2_REG(TWL_VDD1_TEST1);
; 211  :     SHOW_T2_REG(TWL_VDD1_TEST2);
; 212  :     SHOW_T2_REG(TWL_VDD1_OSC);
; 213  :     SHOW_T2_REG(TWL_VDD1_RESERVED);
; 214  :     SHOW_T2_REG(TWL_VDD1_VSEL);
; 215  :     SHOW_T2_REG(TWL_VDD1_VMODE_CFG);
; 216  :     SHOW_T2_REG(TWL_VDD1_VFLOOR);
; 217  :     SHOW_T2_REG(TWL_VDD1_VROOF);
; 218  :     SHOW_T2_REG(TWL_VDD1_STEP);
; 219  :     SHOW_T2_REG(TWL_VDD2_DEV_GRP);
; 220  :     SHOW_T2_REG(TWL_VDD2_TYPE);
; 221  :     SHOW_T2_REG(TWL_VDD2_REMAP);
; 222  :     SHOW_T2_REG(TWL_VDD2_CFG);
; 223  :     SHOW_T2_REG(TWL_VDD2_MISC_CFG);
; 224  :     SHOW_T2_REG(TWL_VDD2_TEST1);
; 225  :     SHOW_T2_REG(TWL_VDD2_TEST2);
; 226  :     SHOW_T2_REG(TWL_VDD2_OSC);
; 227  :     SHOW_T2_REG(TWL_VDD2_RESERVED);
; 228  :     SHOW_T2_REG(TWL_VDD2_VSEL);
; 229  :     SHOW_T2_REG(TWL_VDD2_VMODE_CFG);
; 230  :     SHOW_T2_REG(TWL_VDD2_VFLOOR);
; 231  :     SHOW_T2_REG(TWL_VDD2_VROOF);
; 232  :     SHOW_T2_REG(TWL_VDD2_STEP);
; 233  :     SHOW_T2_REG(TWL_VUSB1V5_DEV_GRP);
; 234  :     SHOW_T2_REG(TWL_VUSB1V5_TYPE);
; 235  :     SHOW_T2_REG(TWL_VUSB1V5_REMAP);
; 236  :     SHOW_T2_REG(TWL_VUSB1V8_DEV_GRP);
; 237  :     SHOW_T2_REG(TWL_VUSB1V8_TYPE);
; 238  :     SHOW_T2_REG(TWL_VUSB1V8_REMAP);
; 239  :     SHOW_T2_REG(TWL_VUSB3V1_DEV_GRP);
; 240  :     SHOW_T2_REG(TWL_VUSB3V1_TYPE);
; 241  :     SHOW_T2_REG(TWL_VUSB3V1_REMAP);
; 242  :     SHOW_T2_REG(TWL_VUSBCP_DEV_GRP);
; 243  :     SHOW_T2_REG(TWL_VUSBCP_TYPE);
; 244  :     SHOW_T2_REG(TWL_VUSBCP_REMAP);
; 245  :     SHOW_T2_REG(TWL_VUSB_DEDICATED1);
; 246  :     SHOW_T2_REG(TWL_VUSB_DEDICATED2);
; 247  :     SHOW_T2_REG(TWL_REGEN_DEV_GRP);
; 248  :     SHOW_T2_REG(TWL_REGEN_TYPE);
; 249  :     SHOW_T2_REG(TWL_REGEN_REMAP);
; 250  :     SHOW_T2_REG(TWL_NRESPWRON_DEV_GRP);
; 251  :     SHOW_T2_REG(TWL_NRESPWRON_TYPE);
; 252  :     SHOW_T2_REG(TWL_NRESPWRON_REMAP);
; 253  :     SHOW_T2_REG(TWL_CLKEN_DEV_GRP);
; 254  :     SHOW_T2_REG(TWL_CLKEN_TYPE);
; 255  :     SHOW_T2_REG(TWL_CLKEN_REMAP);
; 256  :     SHOW_T2_REG(TWL_SYSEN_DEV_GRP);
; 257  :     SHOW_T2_REG(TWL_SYSEN_TYPE);
; 258  :     SHOW_T2_REG(TWL_SYSEN_REMAP);
; 259  :     SHOW_T2_REG(TWL_HFCLKOUT_DEV_GRP);
; 260  :     SHOW_T2_REG(TWL_HFCLKOUT_TYPE);
; 261  :     SHOW_T2_REG(TWL_HFCLKOUT_REMAP);
; 262  :     SHOW_T2_REG(TWL_32KCLKOUT_DEV_GRP);
; 263  :     SHOW_T2_REG(TWL_32KCLKOUT_TYPE);
; 264  :     SHOW_T2_REG(TWL_32KCLKOUT_REMAP);
; 265  :     SHOW_T2_REG(TWL_TRITON_RESET_DEV_GRP);
; 266  :     SHOW_T2_REG(TWL_TRITON_RESET_TYPE);
; 267  :     SHOW_T2_REG(TWL_TRITON_RESET_REMAP);
; 268  :     SHOW_T2_REG(TWL_MAINREF_DEV_GRP);
; 269  :     SHOW_T2_REG(TWL_MAINREF_TYPE);
; 270  :     SHOW_T2_REG(TWL_MAINREF_REMAP);
; 271  : */
; 272  : 
; 273  :     // enable MADC and USB CP clock
; 274  :     TWLWriteByteReg(hTwl, TWL_CFG_BOOT, 0x0A); // HFCLK_FREQ = 26MHz

  00054	e3a0e00a	 mov         lr, #0xA
  00058	e386103b	 orr         r1, r6, #0x3B
  0005c	e3a03001	 mov         r3, #1
  00060	e28d2000	 add         r2, sp, #0
  00064	e1a00004	 mov         r0, r4
  00068	e5cde000	 strb        lr, [sp]
  0006c	eb000000	 bl          TWLWriteRegs

; 275  :     
; 276  :     // secure registers
; 277  :     TWLWriteByteReg(hTwl, TWL_PROTECT_KEY, 0x00);

  00070	e3a03000	 mov         r3, #0
  00074	e5cd3000	 strb        r3, [sp]
  00078	e3a03001	 mov         r3, #1
  0007c	e28d2000	 add         r2, sp, #0
  00080	e3851044	 orr         r1, r5, #0x44
  00084	e1a00004	 mov         r0, r4
  00088	eb000000	 bl          TWLWriteRegs

; 278  :     
; 279  :     // vdd1 (mpu & dsp) - group 1
; 280  :     TWLWriteByteReg(hTwl, TWL_VDD1_DEV_GRP, TWL_DEV_GROUP_P1);    

  0008c	e3a03020	 mov         r3, #0x20
  00090	e5cd3000	 strb        r3, [sp]
  00094	e3a03001	 mov         r3, #1
  00098	e28d2000	 add         r2, sp, #0
  0009c	e38610b0	 orr         r1, r6, #0xB0
  000a0	e1a00004	 mov         r0, r4
  000a4	eb000000	 bl          TWLWriteRegs

; 281  :     TWLWriteByteReg(hTwl, TWL_VDD1_STEP, BSP_TWL_VDD1_STEP);

  000a8	e3a03000	 mov         r3, #0
  000ac	e5cd3000	 strb        r3, [sp]
  000b0	e3a03001	 mov         r3, #1
  000b4	e28d2000	 add         r2, sp, #0
  000b8	e38610bd	 orr         r1, r6, #0xBD
  000bc	e1a00004	 mov         r0, r4
  000c0	eb000000	 bl          TWLWriteRegs

; 282  :     TWLWriteByteReg(hTwl, TWL_VDD1_REMAP, 0);

  000c4	e3a03000	 mov         r3, #0
  000c8	e5cd3000	 strb        r3, [sp]
  000cc	e3a03001	 mov         r3, #1
  000d0	e28d2000	 add         r2, sp, #0
  000d4	e38610b2	 orr         r1, r6, #0xB2
  000d8	e1a00004	 mov         r0, r4
  000dc	eb000000	 bl          TWLWriteRegs

; 283  :         
; 284  :     TWLWriteByteReg(hTwl, TWL_VDD2_DEV_GRP, TWL_DEV_GROUP_P1);

  000e0	e3a03020	 mov         r3, #0x20
  000e4	e5cd3000	 strb        r3, [sp]
  000e8	e3a03001	 mov         r3, #1
  000ec	e28d2000	 add         r2, sp, #0
  000f0	e38610be	 orr         r1, r6, #0xBE
  000f4	e1a00004	 mov         r0, r4
  000f8	eb000000	 bl          TWLWriteRegs

; 285  :     TWLWriteByteReg(hTwl, TWL_VDD2_STEP, BSP_TWL_VDD2_STEP);

  000fc	e3a03000	 mov         r3, #0
  00100	e5cd3000	 strb        r3, [sp]
  00104	e3a03001	 mov         r3, #1
  00108	e28d2000	 add         r2, sp, #0
  0010c	e38610cb	 orr         r1, r6, #0xCB
  00110	e1a00004	 mov         r0, r4
  00114	eb000000	 bl          TWLWriteRegs

; 286  :     TWLWriteByteReg(hTwl, TWL_VDD2_REMAP, 0);

  00118	e3a03000	 mov         r3, #0
  0011c	e5cd3000	 strb        r3, [sp]
  00120	e3a03001	 mov         r3, #1
  00124	e28d2000	 add         r2, sp, #0
  00128	e38610c0	 orr         r1, r6, #0xC0
  0012c	e1a00004	 mov         r0, r4
  00130	eb000000	 bl          TWLWriteRegs

; 287  : 
; 288  :     // EVM2: EHCI (1.8v) - group 1
; 289  :     TWLWriteByteReg(hTwl, TWL_VAUX2_DEDICATED, TWL_VAUX2_1P80);

  00134	e3a03005	 mov         r3, #5
  00138	e5cd3000	 strb        r3, [sp]
  0013c	e3a03001	 mov         r3, #1
  00140	e28d2000	 add         r2, sp, #0
  00144	e3861079	 orr         r1, r6, #0x79
  00148	e1a00004	 mov         r0, r4
  0014c	eb000000	 bl          TWLWriteRegs

; 290  :     TWLWriteByteReg(hTwl, TWL_VAUX2_DEV_GRP, TWL_DEV_GROUP_P1);

  00150	e3a03020	 mov         r3, #0x20
  00154	e5cd3000	 strb        r3, [sp]
  00158	e3a03001	 mov         r3, #1
  0015c	e28d2000	 add         r2, sp, #0
  00160	e3861076	 orr         r1, r6, #0x76
  00164	e1a00004	 mov         r0, r4
  00168	eb000000	 bl          TWLWriteRegs

; 291  : 
; 292  :     // Camera CSI2 requires 1.8V from AUX4
; 293  :     TWLWriteByteReg(hTwl, TWL_VAUX4_DEDICATED, 0x05);

  0016c	e3a03005	 mov         r3, #5
  00170	e5cd3000	 strb        r3, [sp]
  00174	e3a03001	 mov         r3, #1
  00178	e28d2000	 add         r2, sp, #0
  0017c	e3861081	 orr         r1, r6, #0x81
  00180	e1a00004	 mov         r0, r4
  00184	eb000000	 bl          TWLWriteRegs

; 294  :     TWLWriteByteReg(hTwl, TWL_VAUX4_DEV_GRP, TWL_DEV_GROUP_P1);

  00188	e3a03020	 mov         r3, #0x20
  0018c	e5cd3000	 strb        r3, [sp]
  00190	e3a03001	 mov         r3, #1
  00194	e28d2000	 add         r2, sp, #0
  00198	e386107e	 orr         r1, r6, #0x7E
  0019c	e1a00004	 mov         r0, r4
  001a0	eb000000	 bl          TWLWriteRegs

; 295  :     
; 296  :     // LCD and backlight - group 1
; 297  :     TWLWriteByteReg(hTwl, TWL_VAUX3_DEDICATED, TWL_VAUX3_2P80);

  001a4	e3a03003	 mov         r3, #3
  001a8	e5cd3000	 strb        r3, [sp]
  001ac	e3a03001	 mov         r3, #1
  001b0	e28d2000	 add         r2, sp, #0
  001b4	e386107d	 orr         r1, r6, #0x7D
  001b8	e1a00004	 mov         r0, r4
  001bc	eb000000	 bl          TWLWriteRegs

; 298  :     TWLWriteByteReg(hTwl, TWL_VAUX3_DEV_GRP, TWL_DEV_GROUP_P1);

  001c0	e3a03020	 mov         r3, #0x20
  001c4	e5cd3000	 strb        r3, [sp]
  001c8	e3a03001	 mov         r3, #1
  001cc	e28d2000	 add         r2, sp, #0
  001d0	e386107a	 orr         r1, r6, #0x7A
  001d4	e1a00004	 mov         r0, r4
  001d8	eb000000	 bl          TWLWriteRegs

; 299  : 
; 300  :     // DSI,SDI power supplies driven by PLL2 
; 301  :     // Configure for 1.8V instead of default 1.2V and move to P1
; 302  :     TWLWriteByteReg(hTwl, TWL_VPLL2_DEDICATED, TWL_VPLL2_1P80);

  001dc	e3a03005	 mov         r3, #5
  001e0	e5cd3000	 strb        r3, [sp]
  001e4	e3a03001	 mov         r3, #1
  001e8	e28d2000	 add         r2, sp, #0
  001ec	e3861091	 orr         r1, r6, #0x91
  001f0	e1a00004	 mov         r0, r4
  001f4	eb000000	 bl          TWLWriteRegs

; 303  :     TWLWriteByteReg(hTwl, TWL_VPLL2_DEV_GRP, TWL_DEV_GROUP_P1);

  001f8	e3a03020	 mov         r3, #0x20
  001fc	e5cd3000	 strb        r3, [sp]
  00200	e3a03001	 mov         r3, #1
  00204	e28d2000	 add         r2, sp, #0
  00208	e386108e	 orr         r1, r6, #0x8E
  0020c	e1a00004	 mov         r0, r4
  00210	eb000000	 bl          TWLWriteRegs

; 304  : 
; 305  :     // sd / mmc - group 1
; 306  :     val = DecideTwlVMMC(0);
; 307  :     TWLWriteByteReg(hTwl, TWL_VMMC1_DEDICATED, (UINT8)val);

  00214	e3a03002	 mov         r3, #2
  00218	e5cd3000	 strb        r3, [sp]
  0021c	e3a03001	 mov         r3, #1
  00220	e28d2000	 add         r2, sp, #0
  00224	e3861085	 orr         r1, r6, #0x85
  00228	e1a00004	 mov         r0, r4
  0022c	eb000000	 bl          TWLWriteRegs

; 308  :     TWLWriteByteReg(hTwl, TWL_VMMC1_DEV_GRP, TWL_DEV_GROUP_P1);

  00230	e3a03020	 mov         r3, #0x20
  00234	e5cd3000	 strb        r3, [sp]
  00238	e3a03001	 mov         r3, #1
  0023c	e28d2000	 add         r2, sp, #0
  00240	e3861082	 orr         r1, r6, #0x82
  00244	e1a00004	 mov         r0, r4
  00248	eb000000	 bl          TWLWriteRegs

; 309  : 
; 310  :     val = DecideTwlVMMC(1);
; 311  :     TWLWriteByteReg(hTwl, TWL_VMMC2_DEDICATED, (UINT8)val);

  0024c	e3a03006	 mov         r3, #6
  00250	e5cd3000	 strb        r3, [sp]
  00254	e3a03001	 mov         r3, #1
  00258	e28d2000	 add         r2, sp, #0
  0025c	e3861089	 orr         r1, r6, #0x89
  00260	e1a00004	 mov         r0, r4
  00264	eb000000	 bl          TWLWriteRegs

; 312  :     TWLWriteByteReg(hTwl, TWL_VMMC2_DEV_GRP, TWL_DEV_GROUP_P1);

  00268	e3a03020	 mov         r3, #0x20
  0026c	e5cd3000	 strb        r3, [sp]
  00270	e3a03001	 mov         r3, #1
  00274	e28d2000	 add         r2, sp, #0
  00278	e3861086	 orr         r1, r6, #0x86
  0027c	e1a00004	 mov         r0, r4
  00280	eb000000	 bl          TWLWriteRegs

; 313  : 
; 314  :     // tv out - group 1 (1.8 v)
; 315  :     TWLWriteByteReg(hTwl, TWL_VDAC_DEDICATED, TWL_VDAC_1P80);

  00284	e3a03002	 mov         r3, #2
  00288	e5cd3000	 strb        r3, [sp]
  0028c	e3a03001	 mov         r3, #1
  00290	e28d2000	 add         r2, sp, #0
  00294	e3861099	 orr         r1, r6, #0x99
  00298	e1a00004	 mov         r0, r4
  0029c	eb000000	 bl          TWLWriteRegs

; 316  :     TWLWriteByteReg(hTwl, TWL_VDAC_DEV_GRP, TWL_DEV_GROUP_P1);

  002a0	e3a03020	 mov         r3, #0x20
  002a4	e5cd3000	 strb        r3, [sp]
  002a8	e3a03001	 mov         r3, #1
  002ac	e28d2000	 add         r2, sp, #0
  002b0	e3861096	 orr         r1, r6, #0x96
  002b4	e1a00004	 mov         r0, r4
  002b8	eb000000	 bl          TWLWriteRegs

; 317  : 
; 318  :     // usb
; 319  :     TWLWriteByteReg(hTwl, TWL_VUSB_DEDICATED1, 0x18);

  002bc	e3a03018	 mov         r3, #0x18
  002c0	e5cd3000	 strb        r3, [sp]
  002c4	e3a03001	 mov         r3, #1
  002c8	e28d2000	 add         r2, sp, #0
  002cc	e38610d8	 orr         r1, r6, #0xD8
  002d0	e1a00004	 mov         r0, r4
  002d4	eb000000	 bl          TWLWriteRegs

; 320  :     TWLWriteByteReg(hTwl, TWL_VUSB_DEDICATED2, 0x0);

  002d8	e3a03000	 mov         r3, #0
  002dc	e5cd3000	 strb        r3, [sp]
  002e0	e3a03001	 mov         r3, #1
  002e4	e28d2000	 add         r2, sp, #0
  002e8	e38610d9	 orr         r1, r6, #0xD9
  002ec	e1a00004	 mov         r0, r4
  002f0	eb000000	 bl          TWLWriteRegs

; 321  : 
; 322  :     TWLWriteByteReg(hTwl, TWL_VUSB3V1_DEV_GRP, TWL_DEV_GROUP_P1);

  002f4	e3a03020	 mov         r3, #0x20
  002f8	e5cd3000	 strb        r3, [sp]
  002fc	e3a03001	 mov         r3, #1
  00300	e28d2000	 add         r2, sp, #0
  00304	e38610d2	 orr         r1, r6, #0xD2
  00308	e1a00004	 mov         r0, r4
  0030c	eb000000	 bl          TWLWriteRegs

; 323  :     TWLWriteByteReg(hTwl, TWL_VUSB1V5_DEV_GRP, TWL_DEV_GROUP_P1);

  00310	e3a03020	 mov         r3, #0x20
  00314	e5cd3000	 strb        r3, [sp]
  00318	e3a03001	 mov         r3, #1
  0031c	e28d2000	 add         r2, sp, #0
  00320	e38610cc	 orr         r1, r6, #0xCC
  00324	e1a00004	 mov         r0, r4
  00328	eb000000	 bl          TWLWriteRegs

; 324  :     TWLWriteByteReg(hTwl, TWL_VUSB1V8_DEV_GRP, TWL_DEV_GROUP_P1);

  0032c	e3a03020	 mov         r3, #0x20
  00330	e5cd3000	 strb        r3, [sp]
  00334	e3a03001	 mov         r3, #1
  00338	e28d2000	 add         r2, sp, #0
  0033c	e38610cf	 orr         r1, r6, #0xCF
  00340	e1a00004	 mov         r0, r4
  00344	eb000000	 bl          TWLWriteRegs

; 325  : 
; 326  : 
; 327  :     // Enable I2C access to the Power Bus 
; 328  :     TWLWriteByteReg(hTwl, TWL_PB_CFG, 0x02);

  00348	e3a03002	 mov         r3, #2
  0034c	e5cd3000	 strb        r3, [sp]
  00350	e3a03001	 mov         r3, #1
  00354	e28d2000	 add         r2, sp, #0
  00358	e386104a	 orr         r1, r6, #0x4A
  0035c	e1a00004	 mov         r0, r4
  00360	eb000000	 bl          TWLWriteRegs

; 329  :     
; 330  :     // disable vibrator
; 331  :     val = TwlTargetMessage(TWL_PROCESSOR_GRP1, TWL_VAUX1_RES_ID, TWL_RES_OFF);
; 332  :     TWLWriteByteReg(hTwl, TWL_PB_WORD_MSB, (UINT8)(val >> 8));

  00364	e3a03020	 mov         r3, #0x20
  00368	e5cd3000	 strb        r3, [sp]
  0036c	e3a03001	 mov         r3, #1
  00370	e386104b	 orr         r1, r6, #0x4B
  00374	e28d2000	 add         r2, sp, #0
  00378	e1a00004	 mov         r0, r4
  0037c	eb000000	 bl          TWLWriteRegs

; 333  :     TWLWriteByteReg(hTwl, TWL_PB_WORD_LSB, (UINT8)val);

  00380	e3a03010	 mov         r3, #0x10
  00384	e5cd3000	 strb        r3, [sp]
  00388	e3a03001	 mov         r3, #1
  0038c	e386104c	 orr         r1, r6, #0x4C
  00390	e28d2000	 add         r2, sp, #0
  00394	e1a00004	 mov         r0, r4
  00398	eb000000	 bl          TWLWriteRegs

; 334  : 
; 335  :     // enable camera
; 336  :     val = TwlTargetMessage(TWL_PROCESSOR_GRP1, TWL_VAUX2_RES_ID, TWL_RES_ACTIVE);
; 337  :     TWLWriteByteReg(hTwl, TWL_PB_WORD_MSB, (UINT8)(val >> 8));

  0039c	e3a03020	 mov         r3, #0x20
  003a0	e5cd3000	 strb        r3, [sp]
  003a4	e3a03001	 mov         r3, #1
  003a8	e28d2000	 add         r2, sp, #0
  003ac	e386104b	 orr         r1, r6, #0x4B
  003b0	e1a00004	 mov         r0, r4
  003b4	eb000000	 bl          TWLWriteRegs

; 338  :     TWLWriteByteReg(hTwl, TWL_PB_WORD_LSB, (UINT8)val);

  003b8	e3a0302e	 mov         r3, #0x2E
  003bc	e5cd3000	 strb        r3, [sp]
  003c0	e3a03001	 mov         r3, #1
  003c4	e28d2000	 add         r2, sp, #0
  003c8	e386104c	 orr         r1, r6, #0x4C
  003cc	e1a00004	 mov         r0, r4
  003d0	eb000000	 bl          TWLWriteRegs

; 339  : 
; 340  :     // enable csi2 aux4 voltage output
; 341  :     val = TwlTargetMessage(TWL_PROCESSOR_GRP1, TWL_VAUX4_RES_ID, TWL_RES_ACTIVE);
; 342  :     TWLWriteByteReg(hTwl, TWL_PB_WORD_MSB, (UINT8)(val >> 8));

  003d4	e3a03020	 mov         r3, #0x20
  003d8	e5cd3000	 strb        r3, [sp]
  003dc	e3a03001	 mov         r3, #1
  003e0	e28d2000	 add         r2, sp, #0
  003e4	e386104b	 orr         r1, r6, #0x4B
  003e8	e1a00004	 mov         r0, r4
  003ec	eb000000	 bl          TWLWriteRegs

; 343  :     TWLWriteByteReg(hTwl, TWL_PB_WORD_LSB, (UINT8)val);

  003f0	e3a0304e	 mov         r3, #0x4E
  003f4	e5cd3000	 strb        r3, [sp]
  003f8	e3a03001	 mov         r3, #1
  003fc	e28d2000	 add         r2, sp, #0
  00400	e386104c	 orr         r1, r6, #0x4C
  00404	e1a00004	 mov         r0, r4
  00408	eb000000	 bl          TWLWriteRegs

; 344  : 
; 345  :     // disable LCD and backligt
; 346  :     val = TwlTargetMessage(TWL_PROCESSOR_GRP1, TWL_VAUX3_RES_ID, TWL_RES_OFF);
; 347  :     TWLWriteByteReg(hTwl, TWL_PB_WORD_MSB, (UINT8)(val >> 8));

  0040c	e3a03020	 mov         r3, #0x20
  00410	e5cd3000	 strb        r3, [sp]
  00414	e3a03001	 mov         r3, #1
  00418	e28d2000	 add         r2, sp, #0
  0041c	e386104b	 orr         r1, r6, #0x4B
  00420	e1a00004	 mov         r0, r4
  00424	eb000000	 bl          TWLWriteRegs

; 348  :     TWLWriteByteReg(hTwl, TWL_PB_WORD_LSB, (UINT8)val);

  00428	e3a03030	 mov         r3, #0x30
  0042c	e5cd3000	 strb        r3, [sp]
  00430	e3a03001	 mov         r3, #1
  00434	e28d2000	 add         r2, sp, #0
  00438	e386104c	 orr         r1, r6, #0x4C
  0043c	e1a00004	 mov         r0, r4
  00440	eb000000	 bl          TWLWriteRegs

; 349  : 
; 350  : 	// val = TwlTargetMessage(TWL_PROCESSOR_GRP1, TWL_VPLL2_RES_ID, TWL_RES_OFF);
; 351  : 	// TWLWriteByteReg(hTwl, TWL_PB_WORD_MSB, (UINT8)(val >> 8));
; 352  : 	// TWLWriteByteReg(hTwl, TWL_PB_WORD_LSB, (UINT8)val);
; 353  : 
; 354  :     // disable sd
; 355  : 	// val = TwlTargetMessage(TWL_PROCESSOR_GRP1, TWL_VMMC1_RES_ID, TWL_RES_OFF);
; 356  : 	// TWLWriteByteReg(hTwl, TWL_PB_WORD_MSB, (UINT8)(val >> 8));
; 357  : 	// TWLWriteByteReg(hTwl, TWL_PB_WORD_LSB, (UINT8)val);
; 358  :     
; 359  :     // enable sd
; 360  :     val = TwlTargetMessage(TWL_PROCESSOR_GRP1, TWL_VMMC1_RES_ID, TWL_RES_ACTIVE);
; 361  :     TWLWriteByteReg(hTwl, TWL_PB_WORD_MSB, (UINT8)(val >> 8));

  00444	e3a03020	 mov         r3, #0x20
  00448	e5cd3000	 strb        r3, [sp]
  0044c	e3a03001	 mov         r3, #1
  00450	e28d2000	 add         r2, sp, #0
  00454	e386104b	 orr         r1, r6, #0x4B
  00458	e1a00004	 mov         r0, r4
  0045c	eb000000	 bl          TWLWriteRegs

; 362  :     TWLWriteByteReg(hTwl, TWL_PB_WORD_LSB, (UINT8)val);

  00460	e3a0305e	 mov         r3, #0x5E
  00464	e5cd3000	 strb        r3, [sp]
  00468	e3a03001	 mov         r3, #1
  0046c	e28d2000	 add         r2, sp, #0
  00470	e386104c	 orr         r1, r6, #0x4C
  00474	e1a00004	 mov         r0, r4
  00478	eb000000	 bl          TWLWriteRegs

; 363  : 
; 364  :     val = TwlTargetMessage(TWL_PROCESSOR_GRP1, TWL_VMMC2_RES_ID, TWL_RES_OFF);
; 365  :     TWLWriteByteReg(hTwl, TWL_PB_WORD_MSB, (UINT8)(val >> 8));

  0047c	e3a03020	 mov         r3, #0x20
  00480	e5cd3000	 strb        r3, [sp]
  00484	e3a03001	 mov         r3, #1
  00488	e28d2000	 add         r2, sp, #0
  0048c	e386104b	 orr         r1, r6, #0x4B
  00490	e1a00004	 mov         r0, r4
  00494	eb000000	 bl          TWLWriteRegs

; 366  :     TWLWriteByteReg(hTwl, TWL_PB_WORD_LSB, (UINT8)val);

  00498	e3a03060	 mov         r3, #0x60
  0049c	e5cd3000	 strb        r3, [sp]
  004a0	e3a03001	 mov         r3, #1
  004a4	e28d2000	 add         r2, sp, #0
  004a8	e386104c	 orr         r1, r6, #0x4C
  004ac	e1a00004	 mov         r0, r4
  004b0	eb000000	 bl          TWLWriteRegs

; 367  : 
; 368  :     // disable usb 
; 369  :     val = TwlTargetMessage(TWL_PROCESSOR_GRP1, TWL_VUSB_1V5_RES_ID, TWL_RES_OFF);
; 370  :     TWLWriteByteReg(hTwl, TWL_PB_WORD_MSB, (UINT8)(val >> 8));

  004b4	e3a03021	 mov         r3, #0x21
  004b8	e5cd3000	 strb        r3, [sp]
  004bc	e3a03001	 mov         r3, #1
  004c0	e28d2000	 add         r2, sp, #0
  004c4	e386104b	 orr         r1, r6, #0x4B
  004c8	e1a00004	 mov         r0, r4
  004cc	eb000000	 bl          TWLWriteRegs

; 371  :     TWLWriteByteReg(hTwl, TWL_PB_WORD_LSB, (UINT8)val);

  004d0	e3a03010	 mov         r3, #0x10
  004d4	e5cd3000	 strb        r3, [sp]
  004d8	e3a03001	 mov         r3, #1
  004dc	e28d2000	 add         r2, sp, #0
  004e0	e386104c	 orr         r1, r6, #0x4C
  004e4	e1a00004	 mov         r0, r4
  004e8	eb000000	 bl          TWLWriteRegs

; 372  : 
; 373  :     val = TwlTargetMessage(TWL_PROCESSOR_GRP1, TWL_VUSB_1V8_RES_ID, TWL_RES_OFF);
; 374  :     TWLWriteByteReg(hTwl, TWL_PB_WORD_MSB, (UINT8)(val >> 8));

  004ec	e3a03021	 mov         r3, #0x21
  004f0	e5cd3000	 strb        r3, [sp]
  004f4	e3a03001	 mov         r3, #1
  004f8	e28d2000	 add         r2, sp, #0
  004fc	e386104b	 orr         r1, r6, #0x4B
  00500	e1a00004	 mov         r0, r4
  00504	eb000000	 bl          TWLWriteRegs

; 375  :     TWLWriteByteReg(hTwl, TWL_PB_WORD_LSB, (UINT8)val);

  00508	e3a0e020	 mov         lr, #0x20
  0050c	e3a03001	 mov         r3, #1
  00510	e28d2000	 add         r2, sp, #0
  00514	e386104c	 orr         r1, r6, #0x4C
  00518	e1a00004	 mov         r0, r4
  0051c	e5cde000	 strb        lr, [sp]
  00520	eb000000	 bl          TWLWriteRegs

; 376  : 
; 377  :     val = TwlTargetMessage(TWL_PROCESSOR_GRP1, TWL_VUSB_3V1_RES_ID, TWL_RES_OFF);
; 378  :     TWLWriteByteReg(hTwl, TWL_PB_WORD_MSB, (UINT8)(val >> 8));

  00524	e3a03021	 mov         r3, #0x21
  00528	e5cd3000	 strb        r3, [sp]
  0052c	e3a03001	 mov         r3, #1
  00530	e28d2000	 add         r2, sp, #0
  00534	e386104b	 orr         r1, r6, #0x4B
  00538	e1a00004	 mov         r0, r4
  0053c	eb000000	 bl          TWLWriteRegs

; 379  :     TWLWriteByteReg(hTwl, TWL_PB_WORD_LSB, (UINT8)val);

  00540	e3a03030	 mov         r3, #0x30
  00544	e5cd3000	 strb        r3, [sp]
  00548	e3a03001	 mov         r3, #1
  0054c	e28d2000	 add         r2, sp, #0
  00550	e386104c	 orr         r1, r6, #0x4C
  00554	e1a00004	 mov         r0, r4
  00558	eb000000	 bl          TWLWriteRegs

; 380  : 
; 381  :     // Enable the update of VDD1 and VDD2 through Voltage Controller I2C 
; 382  :     TWLWriteByteReg(hTwl, TWL_DCDC_GLOBAL_CFG, BSP_TWL_DCDC_GLOBAL_CFG);    

  0055c	e3a03008	 mov         r3, #8
  00560	e5cd3000	 strb        r3, [sp]
  00564	e3a03001	 mov         r3, #1
  00568	e28d2000	 add         r2, sp, #0
  0056c	e3861061	 orr         r1, r6, #0x61
  00570	e1a00004	 mov         r0, r4
  00574	eb000000	 bl          TWLWriteRegs

; 383  : 
; 384  :     TWLClose(hTwl);

  00578	e1a00004	 mov         r0, r4
  0057c	eb000000	 bl          TWLClose

; 385  : }

  00580	e28dd004	 add         sp, sp, #4
  00584	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  00588	e12fff1e	 bx          lr
  0058c		 |$LN112@InitTwlPow|
  0058c		 |$LN113@InitTwlPow|
  0058c	00000000	 DCD         |??_C@_1BO@CFFFPGIM@?$AAI?$AAn?$AAi?$AAt?$AAT?$AAw?$AAl?$AAP?$AAo?$AAw?$AAe?$AAr?$AA?$AN?$AA?6?$AA?$AA@|
  00590		 |$M46375|

			 ENDP  ; |InitTwlPower|

	EXPORT	|BSPSetT2MSECURE|

  00000			 AREA	 |.pdata|, PDATA
|$T46388| DCD	|$LN5@BSPSetT2MS|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |BSPSetT2MSECURE| PROC

; 388  : {

  00000		 |$LN5@BSPSetT2MS|
  00000		 |$M46385|

; 389  : /*#ifdef BSP_EVM2
; 390  :     HANDLE hGPIO = GPIOOpen();
; 391  :                 
; 392  :     if (hGPIO == NULL) return FALSE;
; 393  :     
; 394  :     if (fSet)
; 395  :         GPIOSetBit(hGPIO,TPS659XX_MSECURE_GPIO);
; 396  :     else
; 397  :         GPIOClrBit(hGPIO,TPS659XX_MSECURE_GPIO);
; 398  : 
; 399  :     GPIOClose(hGPIO);
; 400  : #else*/
; 401  :     UNREFERENCED_PARAMETER(fSet);
; 402  : //#endif
; 403  :     return TRUE;

  00000	e3a00001	 mov         r0, #1

; 404  : }

  00004	e12fff1e	 bx          lr
  00008		 |$M46386|

			 ENDP  ; |BSPSetT2MSECURE|

	END
