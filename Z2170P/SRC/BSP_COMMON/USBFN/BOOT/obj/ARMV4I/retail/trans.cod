; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\Z2170P\SRC\BSP_COMMON\USBFN\trans.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "


  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
	IMPORT	|TWLWriteRegs|
; File c:\wince600\platform\common\src\soc\common_ti_v1\triton\inc\twl.h

  00000			 AREA	 |.pdata|, PDATA
|$T47537| DCD	|$LN5@TWLWriteBy|
	DCD	0x40000803
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |TWLWriteByteReg| PROC

; 51   : {

  00000		 |$LN5@TWLWriteBy|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d000f	 stmdb       sp!, {r0 - r3}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c		 |$M47534|

; 52   :     return TWLWriteRegs(hTWL,address,&data,sizeof(data));

  0000c	e3a03001	 mov         r3, #1
  00010	e28d2010	 add         r2, sp, #0x10
  00014	eb000000	 bl          TWLWriteRegs

; 53   : }

  00018	e89d6000	 ldmia       sp, {sp, lr}
  0001c	e12fff1e	 bx          lr
  00020		 |$M47535|

			 ENDP  ; |TWLWriteByteReg|

	IMPORT	|TWLReadRegs|

  00000			 AREA	 |.pdata|, PDATA
|$T47549| DCD	|$LN5@TWLReadByt|
	DCD	0x40000501
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |TWLReadByteReg| PROC

; 59   : {

  00000		 |$LN5@TWLReadByt|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M47546|

; 60   :     return TWLReadRegs(hTWL,address,data,sizeof(*data));

  00004	e3a03001	 mov         r3, #1
  00008	eb000000	 bl          TWLReadRegs

; 61   : }

  0000c	e49de004	 ldr         lr, [sp], #4
  00010	e12fff1e	 bx          lr
  00014		 |$M47547|

			 ENDP  ; |TWLReadByteReg|

	EXPORT	|PowerOnT2USBTransceiver|

  00000			 AREA	 |.pdata|, PDATA
|$T47616| DCD	|$LN41@PowerOnT2U|
	DCD	0x40008102
; Function compile flags: /Ogspy
; File c:\wince600\platform\z2170p\src\bsp_common\usbfn\trans.c

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |PowerOnT2USBTransceiver| PROC

; 83   : {

  00000		 |$LN41@PowerOnT2U|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004	e24dd004	 sub         sp, sp, #4
  00008		 |$M47613|
  00008	e1a04000	 mov         r4, r0

; 84   :     BOOL  rc = FALSE;
; 85   :     UCHAR value = 0;
; 86   : 
; 87   :     // Enable writing to Power Configuration registers
; 88   :     value = 0xC0;
; 89   :     if (!TWLWriteByteReg(hTWL, TWL_PROTECT_KEY, value))

  0000c	e3a030c0	 mov         r3, #0xC0
  00010	e3a06803	 mov         r6, #3, 16
  00014	e5cd3000	 strb        r3, [sp]
  00018	e3a03001	 mov         r3, #1
  0001c	e3861044	 orr         r1, r6, #0x44
  00020	e28d2000	 add         r2, sp, #0
  00024	e3a05000	 mov         r5, #0
  00028	eb000000	 bl          TWLWriteRegs
  0002c	e3500000	 cmp         r0, #0
  00030	0a00006f	 beq         |$cleanUp$47365|

; 90   :         {
; 91   :         OALMSG(OAL_LOG_ERROR, (L"RNDIS ERROR: UfnPdd_Init: "
; 92   :             L"Failed to power on T2 USB PHY\r\n"
; 93   :             ));
; 94   :         goto cleanUp;
; 95   :         }
; 96   : 
; 97   :     value = 0x0C;
; 98   :     if (!TWLWriteByteReg(hTWL, TWL_PROTECT_KEY, value))

  00034	e3a0300c	 mov         r3, #0xC
  00038	e5cd3000	 strb        r3, [sp]
  0003c	e3a03001	 mov         r3, #1
  00040	e28d2000	 add         r2, sp, #0
  00044	e3861044	 orr         r1, r6, #0x44
  00048	e1a00004	 mov         r0, r4
  0004c	eb000000	 bl          TWLWriteRegs
  00050	e3500000	 cmp         r0, #0
  00054	0a000066	 beq         |$cleanUp$47365|
  00058	e3a03803	 mov         r3, #3, 16

; 99   :         {
; 100  :         OALMSG(OAL_LOG_ERROR, (L"RNDIS ERROR: UfnPdd_Init: "
; 101  :             L"Failed to power on T2 USB PHY\r\n"
; 102  :             ));
; 103  :         goto cleanUp;
; 104  :         }
; 105  : 
; 106  :     value = 0x18;
; 107  :     if (!TWLWriteByteReg(hTWL, TWL_VUSB_DEDICATED1, value))

  0005c	e38310d8	 orr         r1, r3, #0xD8
  00060	e3a0e018	 mov         lr, #0x18
  00064	e3a03001	 mov         r3, #1
  00068	e28d2000	 add         r2, sp, #0
  0006c	e1a00004	 mov         r0, r4
  00070	e5cde000	 strb        lr, [sp]
  00074	eb000000	 bl          TWLWriteRegs
  00078	e3500000	 cmp         r0, #0
  0007c	0a00005c	 beq         |$cleanUp$47365|
  00080	e3a03803	 mov         r3, #3, 16

; 108  :         {
; 109  :         OALMSG(OAL_LOG_ERROR, (L"RNDIS ERROR: UfnPdd_Init: "
; 110  :             L"Failed to wakeup T2 USB PHY\r\n"
; 111  :             ));
; 112  :         goto cleanUp;
; 113  :         }
; 114  : 
; 115  :     // Exit from sleep
; 116  :     value = 0;
; 117  :     if (!TWLWriteByteReg(hTWL, TWL_VUSB_DEDICATED2, value))

  00084	e38310d9	 orr         r1, r3, #0xD9
  00088	e3a0e000	 mov         lr, #0
  0008c	e3a03001	 mov         r3, #1
  00090	e28d2000	 add         r2, sp, #0
  00094	e1a00004	 mov         r0, r4
  00098	e5cde000	 strb        lr, [sp]
  0009c	eb000000	 bl          TWLWriteRegs
  000a0	e3500000	 cmp         r0, #0
  000a4	0a000052	 beq         |$cleanUp$47365|
  000a8	e3a03803	 mov         r3, #3, 16

; 118  :         {
; 119  :         OALMSG(OAL_LOG_ERROR, (L"RNDIS ERROR: UfnPdd_Init: "
; 120  :             L"Failed to wakeup T2 USB PHY\r\n"
; 121  :             ));
; 122  :         goto cleanUp;
; 123  :         }
; 124  : 
; 125  :     // Setting for 3.1V regulator
; 126  :     value = 0xE0;
; 127  :     if (!TWLWriteByteReg(hTWL, TWL_VUSB3V1_DEV_GRP, value))

  000ac	e38310d2	 orr         r1, r3, #0xD2
  000b0	e3a0e0e0	 mov         lr, #0xE0
  000b4	e3a03001	 mov         r3, #1
  000b8	e28d2000	 add         r2, sp, #0
  000bc	e1a00004	 mov         r0, r4
  000c0	e5cde000	 strb        lr, [sp]
  000c4	eb000000	 bl          TWLWriteRegs
  000c8	e3500000	 cmp         r0, #0
  000cc	0a000048	 beq         |$cleanUp$47365|
  000d0	e3a03803	 mov         r3, #3, 16

; 128  :         {
; 129  :         OALMSG(OAL_LOG_ERROR, (L"RNDIS ERROR: UfnPdd_Init: "
; 130  :             L"Failed to set T2 USB PHY 3.1V regualtor\r\n"
; 131  :             ));
; 132  :         goto cleanUp;
; 133  :         }
; 134  : 
; 135  :     // Setting for 1.5V regulator
; 136  :     value = 0xE0;
; 137  :     if (!TWLWriteByteReg(hTWL, TWL_VUSB1V5_DEV_GRP, value))

  000d4	e38310cc	 orr         r1, r3, #0xCC
  000d8	e3a0e0e0	 mov         lr, #0xE0
  000dc	e3a03001	 mov         r3, #1
  000e0	e28d2000	 add         r2, sp, #0
  000e4	e1a00004	 mov         r0, r4
  000e8	e5cde000	 strb        lr, [sp]
  000ec	eb000000	 bl          TWLWriteRegs
  000f0	e3500000	 cmp         r0, #0
  000f4	0a00003e	 beq         |$cleanUp$47365|
  000f8	e3a03803	 mov         r3, #3, 16

; 138  :         {
; 139  :         OALMSG(OAL_LOG_ERROR, (L"RNDIS ERROR: UfnPdd_Init: "
; 140  :             L"Failed to set T2 USB PHY 1.5V regualtor\r\n"
; 141  :             ));
; 142  :         goto cleanUp;
; 143  :         }
; 144  : 
; 145  :     // Setting for 1.8V regulator
; 146  :     value = 0xE0;
; 147  :     if (!TWLWriteByteReg(hTWL, TWL_VUSB1V8_DEV_GRP, value))

  000fc	e38310cf	 orr         r1, r3, #0xCF
  00100	e3a0e0e0	 mov         lr, #0xE0
  00104	e3a03001	 mov         r3, #1
  00108	e28d2000	 add         r2, sp, #0
  0010c	e1a00004	 mov         r0, r4
  00110	e5cde000	 strb        lr, [sp]
  00114	eb000000	 bl          TWLWriteRegs
  00118	e3500000	 cmp         r0, #0
  0011c	0a000034	 beq         |$cleanUp$47365|

; 148  :         {
; 149  :         OALMSG(OAL_LOG_ERROR, (L"RNDIS ERROR: UfnPdd_Init: "
; 150  :             L"Failed to set T2 USB PHY 1.8V regualtor\r\n"
; 151  :             ));
; 152  :         goto cleanUp;
; 153  :         }
; 154  :     
; 155  :     // Disable writing to Power Configuration registers
; 156  :     value = 0x0;
; 157  :     if (!TWLWriteByteReg(hTWL, TWL_PROTECT_KEY, value))

  00120	e3a03000	 mov         r3, #0
  00124	e5cd3000	 strb        r3, [sp]
  00128	e3a03001	 mov         r3, #1
  0012c	e28d2000	 add         r2, sp, #0
  00130	e3861044	 orr         r1, r6, #0x44
  00134	e1a00004	 mov         r0, r4
  00138	eb000000	 bl          TWLWriteRegs
  0013c	e3500000	 cmp         r0, #0
  00140	0a00002b	 beq         |$cleanUp$47365|

; 158  :         {
; 159  :         OALMSG(OAL_LOG_ERROR, (L"RNDIS ERROR: UfnPdd_Init: "
; 160  :             L"Failed to power on T2 USB PHY\r\n"
; 161  :             ));
; 162  :         goto cleanUp;
; 163  :         }
; 164  : 
; 165  :     // enable usb regulators 
; 166  :     {
; 167  :         UINT16 value16;
; 168  :         
; 169  :         value16 = TwlTargetMessage(TWL_PROCESSOR_GRP1, TWL_VUSB_1V5_RES_ID, TWL_RES_ACTIVE);
; 170  :         TWLWriteByteReg(hTWL, TWL_PB_WORD_MSB, (UINT8)(value16 >> 8));

  00144	e3a03021	 mov         r3, #0x21
  00148	e3a05803	 mov         r5, #3, 16
  0014c	e5cd3000	 strb        r3, [sp]
  00150	e3a03001	 mov         r3, #1
  00154	e385104b	 orr         r1, r5, #0x4B
  00158	e28d2000	 add         r2, sp, #0
  0015c	e1a00004	 mov         r0, r4
  00160	eb000000	 bl          TWLWriteRegs

; 171  :         TWLWriteByteReg(hTWL, TWL_PB_WORD_LSB, (UINT8)value16);

  00164	e3a0301e	 mov         r3, #0x1E
  00168	e5cd3000	 strb        r3, [sp]
  0016c	e3a03001	 mov         r3, #1
  00170	e385104c	 orr         r1, r5, #0x4C
  00174	e28d2000	 add         r2, sp, #0
  00178	e1a00004	 mov         r0, r4
  0017c	eb000000	 bl          TWLWriteRegs

; 172  : 
; 173  :         value16 = TwlTargetMessage(TWL_PROCESSOR_GRP1, TWL_VUSB_1V8_RES_ID, TWL_RES_ACTIVE);
; 174  :         TWLWriteByteReg(hTWL, TWL_PB_WORD_MSB, (UINT8)(value16 >> 8));

  00180	e3a03021	 mov         r3, #0x21
  00184	e5cd3000	 strb        r3, [sp]
  00188	e3a03001	 mov         r3, #1
  0018c	e28d2000	 add         r2, sp, #0
  00190	e385104b	 orr         r1, r5, #0x4B
  00194	e1a00004	 mov         r0, r4
  00198	eb000000	 bl          TWLWriteRegs

; 175  :         TWLWriteByteReg(hTWL, TWL_PB_WORD_LSB, (UINT8)value16);

  0019c	e3a0302e	 mov         r3, #0x2E
  001a0	e5cd3000	 strb        r3, [sp]
  001a4	e3a03001	 mov         r3, #1
  001a8	e28d2000	 add         r2, sp, #0
  001ac	e385104c	 orr         r1, r5, #0x4C
  001b0	e1a00004	 mov         r0, r4
  001b4	eb000000	 bl          TWLWriteRegs

; 176  : 
; 177  :         value16 = TwlTargetMessage(TWL_PROCESSOR_GRP1, TWL_VUSB_3V1_RES_ID, TWL_RES_ACTIVE);
; 178  :         TWLWriteByteReg(hTWL, TWL_PB_WORD_MSB, (UINT8)(value16 >> 8));

  001b8	e3a03021	 mov         r3, #0x21
  001bc	e5cd3000	 strb        r3, [sp]
  001c0	e3a03001	 mov         r3, #1
  001c4	e28d2000	 add         r2, sp, #0
  001c8	e385104b	 orr         r1, r5, #0x4B
  001cc	e1a00004	 mov         r0, r4
  001d0	eb000000	 bl          TWLWriteRegs

; 179  :         TWLWriteByteReg(hTWL, TWL_PB_WORD_LSB, (UINT8)value16);

  001d4	e3a0303e	 mov         r3, #0x3E
  001d8	e5cd3000	 strb        r3, [sp]
  001dc	e3a03001	 mov         r3, #1
  001e0	e28d2000	 add         r2, sp, #0
  001e4	e385104c	 orr         r1, r5, #0x4C
  001e8	e1a00004	 mov         r0, r4
  001ec	eb000000	 bl          TWLWriteRegs

; 180  :     }
; 181  :     
; 182  :     // Done
; 183  :     rc = TRUE;

  001f0	e3a05001	 mov         r5, #1
  001f4		 |$cleanUp$47365|

; 184  : 
; 185  : cleanUp:
; 186  : 
; 187  :     return rc;
; 188  : }

  001f4	e1a00005	 mov         r0, r5
  001f8	e28dd004	 add         sp, sp, #4
  001fc	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  00200	e12fff1e	 bx          lr
  00204		 |$M47614|

			 ENDP  ; |PowerOnT2USBTransceiver|

	EXPORT	|RequestPHYAccess|
	IMPORT	|OALStall|
; File c:\wince600\platform\common\src\soc\common_ti_v1\triton\inc\twl.h

  00000			 AREA	 |.pdata|, PDATA
|$T47635| DCD	|$LN13@RequestPHY|
	DCD	0x40002002
; Function compile flags: /Ogspy
; File c:\wince600\platform\z2170p\src\bsp_common\usbfn\trans.c

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |RequestPHYAccess| PROC

; 199  : {

  00000		 |$LN13@RequestPHY|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004	e24dd008	 sub         sp, sp, #8
  00008		 |$M47632|
  00008	e1a04000	 mov         r4, r0

; 200  :     UCHAR value = 0;

  0000c	e3a03000	 mov         r3, #0
  00010	e5cd3000	 strb        r3, [sp]

; 201  : 	
; 202  : 
; 203  :     if (!TWLReadByteReg(hTWL, TWL_PHY_CLK_CTRL, &value))

  00014	e3a03001	 mov         r3, #1
  00018	e28d2000	 add         r2, sp, #0
  0001c	e3a010fe	 mov         r1, #0xFE
  00020	eb000000	 bl          TWLReadRegs
  00024	e3500000	 cmp         r0, #0
  00028	1a000001	 bne         |$LN3@RequestPHY|
  0002c		 |$LN10@RequestPHY|

; 204  :         {
; 205  :         OALMSG(OAL_LOG_ERROR, (L"RNDIS ERROR: RequestPHYAccess: "
; 206  :             L"Failed to read PHY clock ctrl\r\n"
; 207  :             ));
; 208  :         return FALSE;

  0002c	e3a00000	 mov         r0, #0
  00030	ea00000f	 b           |$LN4@RequestPHY|
  00034		 |$LN3@RequestPHY|

; 209  :         }
; 210  : 
; 211  :     if (!(value & PHY_CLK_CTRL_REQ_PHY_DPLL_CLK))

  00034	e5dd3000	 ldrb        r3, [sp]
  00038	e3130001	 tst         r3, #1
  0003c	1a00000b	 bne         |$LN2@RequestPHY|

; 212  :     {
; 213  :         value |= PHY_CLK_CTRL_REQ_PHY_DPLL_CLK;

  00040	e3833001	 orr         r3, r3, #1
  00044	e5cd3000	 strb        r3, [sp]

; 214  : 
; 215  :         if (!TWLWriteByteReg(hTWL, TWL_PHY_CLK_CTRL, value))

  00048	e5cd3004	 strb        r3, [sp, #4]
  0004c	e3a03001	 mov         r3, #1
  00050	e28d2004	 add         r2, sp, #4
  00054	e3a010fe	 mov         r1, #0xFE
  00058	e1a00004	 mov         r0, r4
  0005c	eb000000	 bl          TWLWriteRegs
  00060	e3500000	 cmp         r0, #0

; 216  :             {
; 217  :             OALMSG(OAL_LOG_ERROR, (L"RNDIS ERROR: RequestPHYAccess: "
; 218  :                 L"Failed to request PHY access\r\n"
; 219  :                 ));
; 220  :             return FALSE;

  00064	0afffff0	 beq         |$LN10@RequestPHY|

; 221  :             }
; 222  : 
; 223  :         OALStall (2000);

  00068	e3a00e7d	 mov         r0, #0x7D, 28
  0006c	eb000000	 bl          OALStall
  00070		 |$LN2@RequestPHY|

; 224  :     }
; 225  : 
; 226  :     return TRUE;

  00070	e3a00001	 mov         r0, #1
  00074		 |$LN4@RequestPHY|

; 227  : }

  00074	e28dd008	 add         sp, sp, #8
  00078	e8bd4010	 ldmia       sp!, {r4, lr}
  0007c	e12fff1e	 bx          lr
  00080		 |$M47633|

			 ENDP  ; |RequestPHYAccess|

	EXPORT	|InitTransceiver|
; File c:\wince600\platform\common\src\soc\common_ti_v1\triton\inc\twl.h

  00000			 AREA	 |.pdata|, PDATA
|$T47690| DCD	|$LN45@InitTransc|
	DCD	0x40007502
; Function compile flags: /Ogspy
; File c:\wince600\platform\z2170p\src\bsp_common\usbfn\trans.c

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |InitTransceiver| PROC

; 237  : {

  00000		 |$LN45@InitTransc|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004	e24dd008	 sub         sp, sp, #8
  00008		 |$M47687|
  00008	e1a04000	 mov         r4, r0

; 238  :     BOOL    rc = FALSE;
; 239  :     UCHAR   value = 0;

  0000c	e3a03000	 mov         r3, #0
  00010	e5cd3000	 strb        r3, [sp]

; 240  : 
; 241  : 
; 242  :     if (TWLReadByteReg(hTWL, TWL_VENDOR_ID_LO, &value))

  00014	e3a03001	 mov         r3, #1
  00018	e28d2000	 add         r2, sp, #0
  0001c	e3a01000	 mov         r1, #0
  00020	e3a05000	 mov         r5, #0
  00024	eb000000	 bl          TWLReadRegs

; 243  :         {
; 244  :         OALMSG(OAL_RNDIS, (L"UfnPdd_Init: "
; 245  :             L"Read T2 USB vendor ID LO = %x\r\n", value));
; 246  :         }
; 247  :     else
; 248  :         {
; 249  :         OALMSG(OAL_LOG_ERROR, (L"RNDIS ERROR: UfnPdd_Init: "
; 250  :             L"Failed to read T2 USB vendor ID LO 0x%x\r\n", value));
; 251  :         }
; 252  :     
; 253  :     if (TWLReadByteReg(hTWL, TWL_VENDOR_ID_HI, &value))

  00028	e3a03001	 mov         r3, #1
  0002c	e28d2000	 add         r2, sp, #0
  00030	e3a01001	 mov         r1, #1
  00034	e1a00004	 mov         r0, r4
  00038	eb000000	 bl          TWLReadRegs

; 254  :         {
; 255  :         OALMSG(OAL_RNDIS, (L"UfnPdd_Init: "
; 256  :             L"Read T2 USB vendor ID HI = %x\r\n", value));
; 257  :         }
; 258  :     else
; 259  :         {
; 260  :         OALMSG(OAL_LOG_ERROR, (L"RNDIS ERROR: UfnPdd_Init: "
; 261  :             L"Failed to read T2 USB vendor ID HI 0x%x\r\n", value));
; 262  :         }
; 263  :     
; 264  :     if (TWLReadByteReg(hTWL, TWL_PRODUCT_ID_LO, &value))

  0003c	e3a03001	 mov         r3, #1
  00040	e28d2000	 add         r2, sp, #0
  00044	e3a01002	 mov         r1, #2
  00048	e1a00004	 mov         r0, r4
  0004c	eb000000	 bl          TWLReadRegs

; 265  :         {
; 266  :         OALMSG(OAL_RNDIS, (L"UfnPdd_Init: "
; 267  :             L"Read T2 USB product ID LO = %x\r\n", value));
; 268  :         }
; 269  :     else
; 270  :         {
; 271  :         OALMSG(OAL_LOG_ERROR, (L"RNDIS ERROR: UfnPdd_Init: "
; 272  :             L"Failed to read T2 USB product ID LO 0x%x\r\n", value));
; 273  :         }
; 274  :     
; 275  :     if (TWLReadByteReg(hTWL, TWL_PRODUCT_ID_HI, &value))

  00050	e3a03001	 mov         r3, #1
  00054	e28d2000	 add         r2, sp, #0
  00058	e3a01003	 mov         r1, #3
  0005c	e1a00004	 mov         r0, r4
  00060	eb000000	 bl          TWLReadRegs

; 276  :         {
; 277  :         OALMSG(OAL_RNDIS, (L"UfnPdd_Init: "
; 278  :             L"Read T2 USB product ID HI = %x\r\n", value));
; 279  :         }
; 280  :     else
; 281  :         {
; 282  :         OALMSG(OAL_LOG_ERROR, (L"RNDIS ERROR: UfnPdd_Init: "
; 283  :             L"Failed to read T2 USB product ID HI 0x%x\r\n", value));
; 284  :         }
; 285  : 
; 286  : 
; 287  :     // set for interrupt from ULPI Rx CMD to Link  
; 288  :     value = OTHER_IFC_CTRL_ALT_INT_REROUTE;

  00064	e3a03001	 mov         r3, #1

; 289  :     if (!TWLWriteByteReg(hTWL, TWL_OTHER_IFC_CTRL_SET, value))

  00068	e3a02001	 mov         r2, #1
  0006c	e5cd3000	 strb        r3, [sp]
  00070	e5cd2004	 strb        r2, [sp, #4]
  00074	e3a03001	 mov         r3, #1
  00078	e28d2004	 add         r2, sp, #4
  0007c	e3a01084	 mov         r1, #0x84
  00080	e1a00004	 mov         r0, r4
  00084	eb000000	 bl          TWLWriteRegs
  00088	e3500000	 cmp         r0, #0
  0008c	0a00004c	 beq         |$cleanUp$47423|

; 290  :         goto cleanUp;
; 291  :     
; 292  :     // Setting to IFC_CTRL register for ULPI operation mode
; 293  :     value = IFC_CTRL_CARKITMODE | IFC_CTRL_FSLSSERIALMODE_3PIN;

  00090	e3a03006	 mov         r3, #6

; 294  :     if (!TWLWriteByteReg(hTWL, TWL_IFC_CTRL_CLR, value))

  00094	e3a02006	 mov         r2, #6
  00098	e5cd3000	 strb        r3, [sp]
  0009c	e5cd2004	 strb        r2, [sp, #4]
  000a0	e3a03001	 mov         r3, #1
  000a4	e28d2004	 add         r2, sp, #4
  000a8	e3a01009	 mov         r1, #9
  000ac	e1a00004	 mov         r0, r4
  000b0	eb000000	 bl          TWLWriteRegs
  000b4	e3500000	 cmp         r0, #0
  000b8	0a000041	 beq         |$cleanUp$47423|

; 295  :         goto cleanUp;
; 296  :         
; 297  :     // Setting to TWL_CARKIT_CTRL_CLR register for ULPI operation mode
; 298  :     value = CARKIT_CTRL_CARKITPWR |CARKIT_CTRL_TXDEN |CARKIT_CTRL_RXDEN;
; 299  :     value |= CARKIT_CTRL_SPKLEFTEN |CARKIT_CTRL_MICEN;

  000bc	e3a0305d	 mov         r3, #0x5D

; 300  :     if (!TWLWriteByteReg(hTWL, TWL_CARKIT_CTRL_CLR, value))

  000c0	e3a0205d	 mov         r2, #0x5D
  000c4	e5cd3000	 strb        r3, [sp]
  000c8	e5cd2004	 strb        r2, [sp, #4]
  000cc	e3a03001	 mov         r3, #1
  000d0	e28d2004	 add         r2, sp, #4
  000d4	e3a0101b	 mov         r1, #0x1B
  000d8	e1a00004	 mov         r0, r4
  000dc	eb000000	 bl          TWLWriteRegs
  000e0	e3500000	 cmp         r0, #0
  000e4	0a000036	 beq         |$cleanUp$47423|

; 301  :         goto cleanUp;
; 302  :         
; 303  :     // Power on OTG
; 304  :     value = POWER_CTRL_OTG_EN;

  000e8	e3a03020	 mov         r3, #0x20

; 305  :     if (!TWLWriteByteReg(hTWL, TWL_POWER_CTRL_SET, value))

  000ec	e3a02020	 mov         r2, #0x20
  000f0	e5cd3000	 strb        r3, [sp]
  000f4	e5cd2004	 strb        r2, [sp, #4]
  000f8	e3a03001	 mov         r3, #1
  000fc	e28d2004	 add         r2, sp, #4
  00100	e3a010ad	 mov         r1, #0xAD
  00104	e1a00004	 mov         r0, r4
  00108	eb000000	 bl          TWLWriteRegs
  0010c	e3500000	 cmp         r0, #0
  00110	0a00002b	 beq         |$cleanUp$47423|

; 306  :         goto cleanUp;
; 307  : 
; 308  :     // Clear DM/DP PULLDOWN bits
; 309  :     value = OTG_CTRL_DM_PULLDOWN | OTG_CTRL_DP_PULLDOWN;

  00114	e3a03006	 mov         r3, #6

; 310  :     if (!TWLWriteByteReg(hTWL, TWL_OTG_CTRL_CLR, value))

  00118	e3a02006	 mov         r2, #6
  0011c	e5cd3000	 strb        r3, [sp]
  00120	e5cd2004	 strb        r2, [sp, #4]
  00124	e3a03001	 mov         r3, #1
  00128	e28d2004	 add         r2, sp, #4
  0012c	e3a0100c	 mov         r1, #0xC
  00130	e1a00004	 mov         r0, r4
  00134	eb000000	 bl          TWLWriteRegs
  00138	e3500000	 cmp         r0, #0
  0013c	0a000020	 beq         |$cleanUp$47423|

; 311  :         goto cleanUp;
; 312  : 
; 313  :     // Set OPMODE normal, XCVRSELECT: FS transceiver
; 314  :     value = FUNC_CTRL_OPMODE_MASK | FUNC_CTRL_XCVRSELECT_MASK | FUNC_CTRL_TERMSELECT;

  00140	e3a0301f	 mov         r3, #0x1F

; 315  :     if (!TWLWriteByteReg(hTWL, TWL_FUNC_CTRL_CLR, value))

  00144	e3a0201f	 mov         r2, #0x1F
  00148	e5cd3000	 strb        r3, [sp]
  0014c	e5cd2004	 strb        r2, [sp, #4]
  00150	e3a03001	 mov         r3, #1
  00154	e28d2004	 add         r2, sp, #4
  00158	e3a01006	 mov         r1, #6
  0015c	e1a00004	 mov         r0, r4
  00160	eb000000	 bl          TWLWriteRegs
  00164	e3500000	 cmp         r0, #0
  00168	0a000015	 beq         |$cleanUp$47423|

; 316  :         goto cleanUp;
; 317  : 
; 318  :     value = FUNC_CTRL_OPMODE_NORMAL | FUNC_CTRL_XCVRSELECT_FS;

  0016c	e3a03001	 mov         r3, #1

; 319  :     if (!TWLWriteByteReg(hTWL, TWL_FUNC_CTRL_SET, value))

  00170	e3a02001	 mov         r2, #1
  00174	e5cd3000	 strb        r3, [sp]
  00178	e5cd2004	 strb        r2, [sp, #4]
  0017c	e3a03001	 mov         r3, #1
  00180	e28d2004	 add         r2, sp, #4
  00184	e3a01005	 mov         r1, #5
  00188	e1a00004	 mov         r0, r4
  0018c	eb000000	 bl          TWLWriteRegs
  00190	e3500000	 cmp         r0, #0
  00194	0a00000a	 beq         |$cleanUp$47423|

; 320  :         goto cleanUp;
; 321  : 
; 322  :     // Make sure PHY power enabled
; 323  :     value = 0;

  00198	e3a03000	 mov         r3, #0

; 324  :     if (!TWLWriteByteReg(hTWL, TWL_PHY_PWR_CTRL, value))

  0019c	e3a02000	 mov         r2, #0
  001a0	e5cd3000	 strb        r3, [sp]
  001a4	e5cd2004	 strb        r2, [sp, #4]
  001a8	e3a03001	 mov         r3, #1
  001ac	e28d2004	 add         r2, sp, #4
  001b0	e3a010fd	 mov         r1, #0xFD
  001b4	e1a00004	 mov         r0, r4
  001b8	eb000000	 bl          TWLWriteRegs
  001bc	e3500000	 cmp         r0, #0

; 325  :         goto cleanUp;
; 326  : 
; 327  :     // Done
; 328  :     rc = TRUE;

  001c0	13a05001	 movne       r5, #1
  001c4		 |$cleanUp$47423|

; 329  : 
; 330  : cleanUp:
; 331  : 
; 332  :     return rc;
; 333  : }

  001c4	e1a00005	 mov         r0, r5
  001c8	e28dd008	 add         sp, sp, #8
  001cc	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  001d0	e12fff1e	 bx          lr
  001d4		 |$M47688|

			 ENDP  ; |InitTransceiver|

	EXPORT	|InitializeHardware|
	EXPORT	|??_C@_1EA@IINJFEEO@?$AA?9?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AAH?$AAa?$AAr?$AAd?$AAw?$AAa?$AAr?$AAe?$AA?5?$AA?9?$AA?5?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CM@EAMJHAFB@?$AA?$CL?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AAH?$AAa?$AAr?$AAd?$AAw?$AAa?$AAr?$AAe?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|TWLClose|
	IMPORT	|TWLOpen|
	IMPORT	|NKDbgPrintfW|
	IMPORT	|dpCurSettings|

  00000			 AREA	 |.pdata|, PDATA
|$T47705| DCD	|$LN14@Initialize|
	DCD	0x40002501

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EA@IINJFEEO@?$AA?9?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AAH?$AAa?$AAr?$AAd?$AAw?$AAa?$AAr?$AAe?$AA?5?$AA?9?$AA?5?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, "i", 0x0, "a"
	DCB	0x0, "l", 0x0, "i", 0x0, "z", 0x0, "e", 0x0, "H", 0x0, "a"
	DCB	0x0, "r", 0x0, "d", 0x0, "w", 0x0, "a", 0x0, "r", 0x0, "e"
	DCB	0x0, " ", 0x0, "-", 0x0, " ", 0x0, "r", 0x0, "c", 0x0, " "
	DCB	0x0, "=", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CM@EAMJHAFB@?$AA?$CL?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AAH?$AAa?$AAr?$AAd?$AAw?$AAa?$AAr?$AAe?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, "i", 0x0, "a"
	DCB	0x0, "l", 0x0, "i", 0x0, "z", 0x0, "e", 0x0, "H", 0x0, "a"
	DCB	0x0, "r", 0x0, "d", 0x0, "w", 0x0, "a", 0x0, "r", 0x0, "e"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |InitializeHardware| PROC

; 342  : {

  00000		 |$LN14@Initialize|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004		 |$M47702|

; 343  :     BOOL   rc   = FALSE;
; 344  : 
; 345  : #ifdef BSP_OMAP_MUSBOTG_TPS659XX
; 346  :     HANDLE hTWL;
; 347  : #endif
; 348  : 
; 349  :     OALMSG(OAL_ETHER&&OAL_FUNC, (L"+InitializeHardware\r\n"));

  00004	e59f6084	 ldr         r6, [pc, #0x84]
  00008	e3a04000	 mov         r4, #0
  0000c	e5963440	 ldr         r3, [r6, #0x440]
  00010	e3130a02	 tst         r3, #2, 20
  00014	13130004	 tstne       r3, #4
  00018	159f006c	 ldrne       r0, [pc, #0x6C]
  0001c	1b000000	 blne        NKDbgPrintfW

; 350  : 
; 351  : #ifdef BUILDING_KITL
; 352  :     if (!OEMIoControl(IOCTL_PRCM_DEVICE_GET_DEVICEMANAGEMENTTABLE, (void*)&KERNEL_DEVCLKMGMT_GUID,
; 353  :             sizeof(KERNEL_DEVCLKMGMT_GUID), &s_OalDevClkMgmtTable,
; 354  :             sizeof(OMAP_DEVCLKMGMT_FNTABLE),
; 355  :             NULL))
; 356  :     {
; 357  :         OALMSG(OAL_ERROR, (L"ERROR: KITL UfnPdd_Init: Failed get clock management table from kernel\r\n"));
; 358  :         rc = FALSE;
; 359  :     }
; 360  : #endif
; 361  : 
; 362  : #ifdef BSP_OMAP_MUSBOTG_TPS659XX
; 363  : 
; 364  :     // Initialize Triton
; 365  :     hTWL = TWLOpen();

  00020	eb000000	 bl          TWLOpen
  00024	e1b05000	 movs        r5, r0

; 366  :     if (!hTWL)

  00028	0a00000d	 beq         |$LN1@Initialize|

; 367  :     {
; 368  :         OALMSG(OAL_LOG_ERROR, (L"RNDIS ERROR: InitializeHardware: "
; 369  :             L"Failed to open TRITON II\r\n"
; 370  :             ));
; 371  :         goto cleanUp;
; 372  :     }
; 373  : 
; 374  :     if(!PowerOnT2USBTransceiver(hTWL))

  0002c	e1a00005	 mov         r0, r5
  00030	eb000000	 bl          PowerOnT2USBTransceiver
  00034	e3500000	 cmp         r0, #0
  00038	0a000007	 beq         |$cleanUp$47439|

; 375  :     {
; 376  :         goto cleanUp;
; 377  :     }
; 378  :     
; 379  :     if(!RequestPHYAccess(hTWL))

  0003c	e1a00005	 mov         r0, r5
  00040	eb000000	 bl          RequestPHYAccess
  00044	e3500000	 cmp         r0, #0
  00048	0a000003	 beq         |$cleanUp$47439|

; 380  :     {
; 381  :         goto cleanUp;
; 382  :      }
; 383  : 
; 384  :     // Configure transceiver
; 385  :     if (!InitTransceiver (hTWL))

  0004c	e1a00005	 mov         r0, r5
  00050	eb000000	 bl          InitTransceiver
  00054	e3500000	 cmp         r0, #0

; 386  :         {
; 387  :         goto cleanUp;
; 388  :         }
; 389  : 
; 390  :     // Done
; 391  :     rc = TRUE;

  00058	13a04001	 movne       r4, #1
  0005c		 |$cleanUp$47439|

; 392  : 
; 393  : cleanUp:
; 394  : 	
; 395  : 	// We are done with Triton
; 396  : 	if (hTWL)
; 397  : 	{
; 398  : 		TWLClose(hTWL);

  0005c	e1a00005	 mov         r0, r5
  00060	eb000000	 bl          TWLClose
  00064		 |$LN1@Initialize|

; 399  : 	}
; 400  : 
; 401  : #endif
; 402  : 
; 403  :     OALMSG(OAL_ETHER&&OAL_FUNC, (L"-InitializeHardware - rc = %d\r\n", rc));

  00064	e5963440	 ldr         r3, [r6, #0x440]
  00068	e3130a02	 tst         r3, #2, 20
  0006c	13130004	 tstne       r3, #4
  00070	159f0010	 ldrne       r0, [pc, #0x10]
  00074	11a01004	 movne       r1, r4
  00078	1b000000	 blne        NKDbgPrintfW

; 404  : 
; 405  :     return rc;
; 406  : }

  0007c	e1a00004	 mov         r0, r4
  00080	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  00084	e12fff1e	 bx          lr
  00088		 |$LN15@Initialize|
  00088		 |$LN16@Initialize|
  00088	00000000	 DCD         |??_C@_1EA@IINJFEEO@?$AA?9?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AAH?$AAa?$AAr?$AAd?$AAw?$AAa?$AAr?$AAe?$AA?5?$AA?9?$AA?5?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  0008c		 |$LN17@Initialize|
  0008c	00000000	 DCD         |??_C@_1CM@EAMJHAFB@?$AA?$CL?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AAH?$AAa?$AAr?$AAd?$AAw?$AAa?$AAr?$AAe?$AA?$AN?$AA?6?$AA?$AA@|
  00090		 |$LN18@Initialize|
  00090	00000000	 DCD         |dpCurSettings|
  00094		 |$M47703|

			 ENDP  ; |InitializeHardware|

	EXPORT	|ResetHardware|

  00000			 AREA	 |.pdata|, PDATA
|$T47716| DCD	|$LN5@ResetHardw|
	DCD	0x40000100
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |ResetHardware| PROC

; 413  : {

  00000		 |$LN5@ResetHardw|
  00000		 |$M47713|

; 414  : }

  00000	e12fff1e	 bx          lr
  00004		 |$M47714|

			 ENDP  ; |ResetHardware|

	EXPORT	|ConnectHardware|
	EXPORT	|??_C@_1CG@CHELIBAH@?$AA?9?$AAC?$AAo?$AAn?$AAn?$AAe?$AAc?$AAt?$AAH?$AAa?$AAr?$AAd?$AAw?$AAa?$AAr?$AAe?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CG@LMJLIBMJ@?$AA?$CL?$AAC?$AAo?$AAn?$AAn?$AAe?$AAc?$AAt?$AAH?$AAa?$AAr?$AAd?$AAw?$AAa?$AAr?$AAe?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
; File c:\wince600\platform\common\src\soc\common_ti_v1\triton\inc\twl.h

  00000			 AREA	 |.pdata|, PDATA
|$T47732| DCD	|$LN13@ConnectHar|
	DCD	0x40001f02

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CG@CHELIBAH@?$AA?9?$AAC?$AAo?$AAn?$AAn?$AAe?$AAc?$AAt?$AAH?$AAa?$AAr?$AAd?$AAw?$AAa?$AAr?$AAe?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "C", 0x0, "o", 0x0, "n", 0x0, "n", 0x0, "e", 0x0, "c"
	DCB	0x0, "t", 0x0, "H", 0x0, "a", 0x0, "r", 0x0, "d", 0x0, "w"
	DCB	0x0, "a", 0x0, "r", 0x0, "e", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CG@LMJLIBMJ@?$AA?$CL?$AAC?$AAo?$AAn?$AAn?$AAe?$AAc?$AAt?$AAH?$AAa?$AAr?$AAd?$AAw?$AAa?$AAr?$AAe?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "C", 0x0, "o", 0x0, "n", 0x0, "n", 0x0, "e", 0x0, "c"
	DCB	0x0, "t", 0x0, "H", 0x0, "a", 0x0, "r", 0x0, "d", 0x0, "w"
	DCB	0x0, "a", 0x0, "r", 0x0, "e", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Ogspy
; File c:\wince600\platform\z2170p\src\bsp_common\usbfn\trans.c

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |ConnectHardware| PROC

; 422  : {

  00000		 |$LN13@ConnectHar|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004	e24dd004	 sub         sp, sp, #4
  00008		 |$M47729|

; 423  : #ifdef BSP_OMAP_MUSBOTG_TPS659XX
; 424  : 
; 425  :     HANDLE hTWL;
; 426  :     UCHAR   value = 0;
; 427  : 
; 428  : #endif
; 429  : 
; 430  :     OALMSG(OAL_ETHER&&OAL_FUNC, (L"+ConnectHardware\r\n"));

  00008	e59f4068	 ldr         r4, [pc, #0x68]
  0000c	e5943440	 ldr         r3, [r4, #0x440]
  00010	e3130a02	 tst         r3, #2, 20
  00014	13130004	 tstne       r3, #4
  00018	159f0054	 ldrne       r0, [pc, #0x54]
  0001c	1b000000	 blne        NKDbgPrintfW

; 431  : 
; 432  : #ifdef BSP_OMAP_MUSBOTG_TPS659XX
; 433  : 
; 434  :     // Initialize Triton
; 435  :     hTWL = TWLOpen();

  00020	eb000000	 bl          TWLOpen
  00024	e1b05000	 movs        r5, r0

; 436  :     if (!hTWL)

  00028	0a00000d	 beq         |$LN7@ConnectHar|

; 437  :     {
; 438  :         OALMSG(OAL_LOG_ERROR, (L"RNDIS ERROR: ConnectHardware: "
; 439  :             L"Failed to open TRITON II\r\n"
; 440  :             ));
; 441  :         return;
; 442  :     }
; 443  : 
; 444  :     value = FUNC_CTRL_TERMSELECT;
; 445  : 
; 446  :     // Enable D+ pullup resistor
; 447  :     if (!TWLWriteByteReg(hTWL, TWL_FUNC_CTRL_SET, value))

  0002c	e3a03004	 mov         r3, #4
  00030	e5cd3000	 strb        r3, [sp]
  00034	e3a03001	 mov         r3, #1
  00038	e28d2000	 add         r2, sp, #0
  0003c	e3a01005	 mov         r1, #5
  00040	e1a00005	 mov         r0, r5
  00044	eb000000	 bl          TWLWriteRegs

; 448  :     {
; 449  :         OALMSG(OAL_LOG_ERROR, (L"RNDIS ERROR: ConnectHardware: "
; 450  :             L"Failed to set TWL_FUNC_CTRL_SET\r\n"
; 451  :             ));
; 452  :     }
; 453  : 
; 454  :     // We are done with Triton
; 455  :     TWLClose(hTWL);

  00048	e1a00005	 mov         r0, r5
  0004c	eb000000	 bl          TWLClose

; 456  : 
; 457  : #endif
; 458  : 
; 459  :     OALMSG(OAL_ETHER&&OAL_FUNC, (L"-ConnectHardware\r\n"));

  00050	e5943440	 ldr         r3, [r4, #0x440]
  00054	e3130a02	 tst         r3, #2, 20
  00058	13130004	 tstne       r3, #4
  0005c	159f000c	 ldrne       r0, [pc, #0xC]
  00060	1b000000	 blne        NKDbgPrintfW
  00064		 |$LN7@ConnectHar|

; 460  : }

  00064	e28dd004	 add         sp, sp, #4
  00068	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  0006c	e12fff1e	 bx          lr
  00070		 |$LN14@ConnectHar|
  00070		 |$LN15@ConnectHar|
  00070	00000000	 DCD         |??_C@_1CG@CHELIBAH@?$AA?9?$AAC?$AAo?$AAn?$AAn?$AAe?$AAc?$AAt?$AAH?$AAa?$AAr?$AAd?$AAw?$AAa?$AAr?$AAe?$AA?$AN?$AA?6?$AA?$AA@|
  00074		 |$LN16@ConnectHar|
  00074	00000000	 DCD         |??_C@_1CG@LMJLIBMJ@?$AA?$CL?$AAC?$AAo?$AAn?$AAn?$AAe?$AAc?$AAt?$AAH?$AAa?$AAr?$AAd?$AAw?$AAa?$AAr?$AAe?$AA?$AN?$AA?6?$AA?$AA@|
  00078		 |$LN17@ConnectHar|
  00078	00000000	 DCD         |dpCurSettings|
  0007c		 |$M47730|

			 ENDP  ; |ConnectHardware|

	EXPORT	|DisconnectHardware|
	EXPORT	|??_C@_1CM@GNIMNOJD@?$AA?9?$AAD?$AAi?$AAs?$AAc?$AAo?$AAn?$AAn?$AAe?$AAc?$AAt?$AAH?$AAa?$AAr?$AAd?$AAw?$AAa?$AAr?$AAe?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CM@JBHMEPNP@?$AA?$CL?$AAD?$AAi?$AAs?$AAc?$AAo?$AAn?$AAn?$AAe?$AAc?$AAt?$AAH?$AAa?$AAr?$AAd?$AAw?$AAa?$AAr?$AAe?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
; File c:\wince600\platform\common\src\soc\common_ti_v1\triton\inc\twl.h

  00000			 AREA	 |.pdata|, PDATA
|$T47752| DCD	|$LN13@Disconnect|
	DCD	0x40001f02

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CM@GNIMNOJD@?$AA?9?$AAD?$AAi?$AAs?$AAc?$AAo?$AAn?$AAn?$AAe?$AAc?$AAt?$AAH?$AAa?$AAr?$AAd?$AAw?$AAa?$AAr?$AAe?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "D", 0x0, "i", 0x0, "s", 0x0, "c", 0x0, "o", 0x0, "n"
	DCB	0x0, "n", 0x0, "e", 0x0, "c", 0x0, "t", 0x0, "H", 0x0, "a"
	DCB	0x0, "r", 0x0, "d", 0x0, "w", 0x0, "a", 0x0, "r", 0x0, "e"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CM@JBHMEPNP@?$AA?$CL?$AAD?$AAi?$AAs?$AAc?$AAo?$AAn?$AAn?$AAe?$AAc?$AAt?$AAH?$AAa?$AAr?$AAd?$AAw?$AAa?$AAr?$AAe?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "D", 0x0, "i", 0x0, "s", 0x0, "c", 0x0, "o", 0x0, "n"
	DCB	0x0, "n", 0x0, "e", 0x0, "c", 0x0, "t", 0x0, "H", 0x0, "a"
	DCB	0x0, "r", 0x0, "d", 0x0, "w", 0x0, "a", 0x0, "r", 0x0, "e"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Ogspy
; File c:\wince600\platform\z2170p\src\bsp_common\usbfn\trans.c

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DisconnectHardware| PROC

; 468  : {

  00000		 |$LN13@Disconnect|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004	e24dd004	 sub         sp, sp, #4
  00008		 |$M47749|

; 469  : #ifdef BSP_OMAP_MUSBOTG_TPS659XX
; 470  : 
; 471  :     HANDLE hTWL;
; 472  :     UCHAR   value = 0;
; 473  : 
; 474  : #endif
; 475  : 
; 476  :     OALMSG(OAL_ETHER&&OAL_FUNC, (L"+DisconnectHardware\r\n"));

  00008	e59f4068	 ldr         r4, [pc, #0x68]
  0000c	e5943440	 ldr         r3, [r4, #0x440]
  00010	e3130a02	 tst         r3, #2, 20
  00014	13130004	 tstne       r3, #4
  00018	159f0054	 ldrne       r0, [pc, #0x54]
  0001c	1b000000	 blne        NKDbgPrintfW

; 477  : 
; 478  : #ifdef BSP_OMAP_MUSBOTG_TPS659XX
; 479  : 
; 480  :     // Initialize Triton
; 481  :     hTWL = TWLOpen();

  00020	eb000000	 bl          TWLOpen
  00024	e1b05000	 movs        r5, r0

; 482  :     if (!hTWL)

  00028	0a00000d	 beq         |$LN7@Disconnect|

; 483  :     {
; 484  :         OALMSG(OAL_LOG_ERROR, (L"RNDIS ERROR: DisconnectHardware: "
; 485  :             L"Failed to open TRITON II\r\n"
; 486  :             ));
; 487  :         return;
; 488  :     }
; 489  : 
; 490  :     value = FUNC_CTRL_TERMSELECT;
; 491  : 
; 492  :     // Disable D+ pullup resistor
; 493  :     if(!TWLWriteByteReg(hTWL, TWL_FUNC_CTRL_CLR, value))

  0002c	e3a03004	 mov         r3, #4
  00030	e5cd3000	 strb        r3, [sp]
  00034	e3a03001	 mov         r3, #1
  00038	e28d2000	 add         r2, sp, #0
  0003c	e3a01006	 mov         r1, #6
  00040	e1a00005	 mov         r0, r5
  00044	eb000000	 bl          TWLWriteRegs

; 494  :     {
; 495  :         OALMSG(OAL_LOG_ERROR, (L"RNDIS ERROR: DisconnectHardware: "
; 496  :             L"Failed to clr TWL_FUNC_CTRL_CLR\r\n"
; 497  :             ));
; 498  :     }
; 499  : 
; 500  :     // We are done with Triton
; 501  :     TWLClose(hTWL);

  00048	e1a00005	 mov         r0, r5
  0004c	eb000000	 bl          TWLClose

; 502  : 
; 503  : #endif
; 504  : 
; 505  :     OALMSG(OAL_ETHER&&OAL_FUNC, (L"-DisconnectHardware\r\n"));

  00050	e5943440	 ldr         r3, [r4, #0x440]
  00054	e3130a02	 tst         r3, #2, 20
  00058	13130004	 tstne       r3, #4
  0005c	159f000c	 ldrne       r0, [pc, #0xC]
  00060	1b000000	 blne        NKDbgPrintfW
  00064		 |$LN7@Disconnect|

; 506  : }

  00064	e28dd004	 add         sp, sp, #4
  00068	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  0006c	e12fff1e	 bx          lr
  00070		 |$LN14@Disconnect|
  00070		 |$LN15@Disconnect|
  00070	00000000	 DCD         |??_C@_1CM@GNIMNOJD@?$AA?9?$AAD?$AAi?$AAs?$AAc?$AAo?$AAn?$AAn?$AAe?$AAc?$AAt?$AAH?$AAa?$AAr?$AAd?$AAw?$AAa?$AAr?$AAe?$AA?$AN?$AA?6?$AA?$AA@|
  00074		 |$LN16@Disconnect|
  00074	00000000	 DCD         |??_C@_1CM@JBHMEPNP@?$AA?$CL?$AAD?$AAi?$AAs?$AAc?$AAo?$AAn?$AAn?$AAe?$AAc?$AAt?$AAH?$AAa?$AAr?$AAd?$AAw?$AAa?$AAr?$AAe?$AA?$AN?$AA?6?$AA?$AA@|
  00078		 |$LN17@Disconnect|
  00078	00000000	 DCD         |dpCurSettings|
  0007c		 |$M47750|

			 ENDP  ; |DisconnectHardware|

	EXPORT	|EnableUSBClocks|
	EXPORT	|??_C@_1CG@LPMIPPDJ@?$AA?9?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAU?$AAS?$AAB?$AAC?$AAl?$AAo?$AAc?$AAk?$AAs?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CG@CEBIPPPH@?$AA?$CL?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAU?$AAS?$AAB?$AAC?$AAl?$AAo?$AAc?$AAk?$AAs?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|EnableDeviceClocks|

  00000			 AREA	 |.pdata|, PDATA
|$T47771| DCD	|$LN9@EnableUSBC|
	DCD	0x40001701

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CG@LPMIPPDJ@?$AA?9?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAU?$AAS?$AAB?$AAC?$AAl?$AAo?$AAc?$AAk?$AAs?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "E", 0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e"
	DCB	0x0, "U", 0x0, "S", 0x0, "B", 0x0, "C", 0x0, "l", 0x0, "o"
	DCB	0x0, "c", 0x0, "k", 0x0, "s", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CG@CEBIPPPH@?$AA?$CL?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAU?$AAS?$AAB?$AAC?$AAl?$AAo?$AAc?$AAk?$AAs?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "E", 0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e"
	DCB	0x0, "U", 0x0, "S", 0x0, "B", 0x0, "C", 0x0, "l", 0x0, "o"
	DCB	0x0, "c", 0x0, "k", 0x0, "s", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |EnableUSBClocks| PROC

; 514  : {

  00000		 |$LN9@EnableUSBC|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M47768|
  00004	e1a05000	 mov         r5, r0

; 515  : 	BOOL bRet = TRUE;
; 516  : 
; 517  :     OALMSG(OAL_ETHER&&OAL_FUNC, (L"+EnableUSBClocks\r\n"));

  00008	e59f4048	 ldr         r4, [pc, #0x48]
  0000c	e5943440	 ldr         r3, [r4, #0x440]
  00010	e3130a02	 tst         r3, #2, 20
  00014	13130004	 tstne       r3, #4
  00018	159f0034	 ldrne       r0, [pc, #0x34]
  0001c	1b000000	 blne        NKDbgPrintfW

; 518  : 
; 519  : #ifdef BUILDING_KITL
; 520  : 
; 521  :     bRet &= s_OalDevClkMgmtTable.pfnEnableDeviceIClock(OMAP_DEVICE_HSOTGUSB, bEnable);
; 522  :     bRet &= s_OalDevClkMgmtTable.pfnEnableDeviceFClock(OMAP_DEVICE_HSOTGUSB, bEnable);
; 523  : 
; 524  : #else
; 525  : 	bRet = EnableDeviceClocks(OMAP_DEVICE_HSOTGUSB, bEnable);

  00020	e1a01005	 mov         r1, r5
  00024	e3a00003	 mov         r0, #3
  00028	eb000000	 bl          EnableDeviceClocks

; 526  : #endif
; 527  : 
; 528  :     OALMSG(OAL_ETHER&&OAL_FUNC, (L"-EnableUSBClocks\r\n"));

  0002c	e5943440	 ldr         r3, [r4, #0x440]
  00030	e1a04000	 mov         r4, r0
  00034	e3130a02	 tst         r3, #2, 20
  00038	13130004	 tstne       r3, #4
  0003c	159f000c	 ldrne       r0, [pc, #0xC]
  00040	1b000000	 blne        NKDbgPrintfW

; 529  : 
; 530  : 	return bRet;
; 531  : }

  00044	e1a00004	 mov         r0, r4
  00048	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  0004c	e12fff1e	 bx          lr
  00050		 |$LN10@EnableUSBC|
  00050		 |$LN11@EnableUSBC|
  00050	00000000	 DCD         |??_C@_1CG@LPMIPPDJ@?$AA?9?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAU?$AAS?$AAB?$AAC?$AAl?$AAo?$AAc?$AAk?$AAs?$AA?$AN?$AA?6?$AA?$AA@|
  00054		 |$LN12@EnableUSBC|
  00054	00000000	 DCD         |??_C@_1CG@CEBIPPPH@?$AA?$CL?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAU?$AAS?$AAB?$AAC?$AAl?$AAo?$AAc?$AAk?$AAs?$AA?$AN?$AA?6?$AA?$AA@|
  00058		 |$LN13@EnableUSBC|
  00058	00000000	 DCD         |dpCurSettings|
  0005c		 |$M47769|

			 ENDP  ; |EnableUSBClocks|

	END
